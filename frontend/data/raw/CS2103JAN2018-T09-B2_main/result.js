var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"* *Email us* : You can also reach us at `e0041985 [at] u.nus.edu`"}],"authorContributionMap":{"-":5,"deborahlow97":1}},{"path":"docs/team/fuadsahmawi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"\u003d Fuad B Sahmawi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"image::fuadsahmawi.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"(https://github.com/fuadsahmawi[GitHub])"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"Welcome to my project portfolio. This document summarises my contributions of every software-related project that I have"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"been involved with. The link to my GitHub page can be found above. This is where you can find the repository of every"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"project mentioned below."},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d PROJECT: CollegeZone"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"---"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"CollegeZone is a desktop application for NUS Residential College 4 (RC4) students. It has a Graphical User Interface (GUI)"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"but most of the user interactions happen using a Command Line Interface (CLI)."},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"This application is catered for an RC4 student to manage their contacts with other RC4 students and to manage their tasks,"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"just like a digital organiser."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"* *Major enhancement*: Added *the ability to add \u0026 delete reminders in a Calendar interface*"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"** What it does: allows the RC4 student to add and delete reminders in a calendar, which will be marked with different colours, depending on whether the specific reminder is due or not due."},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"** Justification: This feature improves the product significantly because RC4 students, especially freshmen, will be new to University and College life and being able to note down tasks and reminders will greatly assist them in organising their day-to-day activities."},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"** Highlights: This feature involves creating a new class with new attributes that were not in the original AddressBook. Interacting with the CalendarFX Application Programming Interface(API) to be able to display the reminders also posed challenges in terms of implementation."},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"** Credits:(https://github.com/CS2103JAN2018-T09-B2/main/pull/116[CalendarFX API], http://natty.joestelmach.com/try.jsp[Natty API])"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"* *Minor enhancement*: Added additional functionality to the find command, which allows RC4 students to find their contacts by tags."},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B2/main/blob/master/collated/main/fuadsahmawi.md[Functional code]] [https://github.com/CS2103JAN2018-T09-B2/main/blob/master/collated/test/fuadsahmawi.md[Test code]]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"*** Managed releases `v1.5rc` \u0026 `v1.5` (2 releases) on (https://github.com/CS2103JAN2018-T09-B2/main/releases[GitHub])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"*** Updated the GUI to include a Calendar Panel(Pull request https://github.com/CS2103JAN2018-T09-B2/main/pull/116[#116])"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"*** Added command aliases for commands that were originally in addressbook (Pull request https://github.com/CS2103JAN2018-T09-B2/main/pull/9[#9])"},{"lineNumber":42,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide \u0026 Developer Guide (Pull requests https://github.com/CS2103JAN2018-T09-B2/main/pull/54[#54], https://github.com/CS2103JAN2018-T09-B2/main/pull/85[#85], https://github.com/CS2103JAN2018-T09-B2/main/pull/163[#163], https://github.com/CS2103JAN2018-T09-B2/main/pull/245[#245], https://github.com/CS2103JAN2018-T09-B2/main/pull/248[#248])"},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"*** Integrated a third party library and API (CalendarFX) to the project (Pull request https://github.com/CS2103JAN2018-T09-B2/main/pull/116[#116])"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"include::../UserGuide.adoc[tag\u003dreminder]"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"include::../UserGuide.adoc[tag\u003deditreminder]"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"include::../DeveloperGuide.adoc[tag\u003dreminder]"}],"authorContributionMap":{"fuadsahmawi":28,"-":35}},{"path":"docs/team/deborahlow97.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d Deborah Low Shi Lei - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":":collatedDir: ../../collated"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d Project: CollegeZone"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"CollegeZone is a desktop address book application used by National University of Singapore Residential College 4 (RC4) students. We aim to make RC4 studentâ€™s school life much easier and more convenient. +"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC. +"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"*Code contributed*: +"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"link:{collatedDir}/main/deborahlow97.md[Functional code] +"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"link:{collatedDir}/test/deborahlow97.md[Test code] +"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Major enhancement: added Add, Edit, Sort and Delete goal command"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"** What it does: Allows user to add, edit and delete goals into CollegeZone. It also allows user to sort the goals that they have based on the field they want it sorted in. It includes keeping track of when the goals started, ended, it\u0027s importance level to user and it\u0027s completion status."},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"** External behavior: +"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"include::../UserGuide.adoc[tag\u003dgoalfeatures]"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"** Justification: This feature improves the product significantly because RC4 students will have goals that they want to accomplish in life, especially for new RC4 students, they enter NUS with many goals they want to achieve. Having this feature allows them to record down the goals and track the status of it."},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Major enhancement: added Complete and RevertComplete goal command"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"** What it does: Allows user to update the completion status of the existing goals they have in CollegeZone."},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"** External behavior: +"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"include::../UserGuide.adoc[tag\u003dgoalcompletion]"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"** Justification: This feature improves the product significantly because RC4 students will have be able to indicate completion status of goals that they have."},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Minor enhancement: added a theme command that allows the user to change the theme colour of CollegeZone."},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"** Justification: This feature allows RC4 students to switch to a different theme colour of their liking."},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"** External behavior: +"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"include::../UserGuide.adoc[tag\u003dtheme]"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Minor enhancement: added birthday, level of friendship, unit number and ccas field"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"** Justification: The addition of this field provides user with more comprehensive contact details to add into CollegeZone."},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Proposed enhancements:"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"include::../UserGuide.adoc[tag\u003ddebv2.0]"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"** Adding Sub-goals"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"** Adding of timetable into CollegeZone"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"include::../DeveloperGuide.adoc[tag\u003daddgoal]"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"include::../DeveloperGuide.adoc[tag\u003dsortgoal]"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"include::../DeveloperGuide.adoc[tag\u003dtheme]"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Other Contributions:"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"** Project management:"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"*** Managed releases `v1.3` - `v1.4.1` (3 releases) on GitHub"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"***"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"** Enhancements to existing features:"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com/CS2103JAN2018-T09-B2/main/pull/204/files[#204])"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"** Documentation:"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide (https://github.com/CS2103JAN2018-T09-B2/main/pull/198/files[#198])"},{"lineNumber":61,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W14-B3/main/issues/102[1], https://github.com/CS2103JAN2018-W14-B3/main/issues/99[2], https://github.com/CS2103JAN2018-W14-B3/main/issues/103[3])"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"** Tools:"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com/CS2103JAN2018-T09-B2/main/issues/64[#64])"}],"authorContributionMap":{"-":5,"deborahlow97":60}},{"path":"docs/team/gohzuwei.adoc","lines":[{"lineNumber":1,"author":{"gitID":"zuweitrack"},"content":"\u003d Goh Zu Wei - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"zuweitrack"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"zuweitrack"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":5,"author":{"gitID":"zuweitrack"},"content":"image::zuweitrack.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":6,"author":{"gitID":"zuweitrack"},"content":"{empty}[https://github.com/zuweitrack[github]]"},{"lineNumber":7,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":8,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d PROJECT: CollegeZone"},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":10,"author":{"gitID":"zuweitrack"},"content":"---"},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d Overview"},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":"CollegeZone is a Address Book desktop application intended for students living on campus, specifically this application are for students living in an NUS Residential College, RC4."},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"RC4 students can use CollegeZone application through a Command Line Interface (CLI)."},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":"The purpose of CollegeZone is for RC4 students monitor and maintain friendships with their fellow residents and it serves as a personal planner as well, keeping track of their tasks."},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"* *Major enhancement*: Added the *ability rate multiple people* by changing the level of friendship and *show people based on their level of friendships.*"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"** What it does: allows the RC4 student to rate multiple friends in CollegeZone and the level of friendship of these friends will be changed."},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"** Justification: An RC4 student may interact with several groups of people during the week, being able to rate multiple people at a go makes the process more convenient. This allows RC4 students to keep track of who their close friends are and helps them identify people who they may want to get closer with."},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"** Highlights:  The features show command followed by the rate command allows RC4 students to show friends of a particular level of friendship and change the level of friendships from that list of friends. It gives RC4 students the ease of rating people of a particular level of friendship"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"* *Minor enhancement*: Added a seek RA command, which allows RC4 students to find the details of RC4 students and Resident Assistants (RA)."},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B2/main/blob/master/collated/main/zuweitrack.md[Functional code]] [https://github.com/CS2103JAN2018-T09-B2/main/blob/master/collated/test/zuweitrack.md[Test code]]"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"* *Other contributions*:"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"** Project management:"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"*** Collated team members code contributions (Pull request https://github.com/CS2103JAN2018-T09-B2/main/pull/232/files[#232])"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"** Enhancements to existing features:"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"*** Enhancement to storage component, Added a new method for address book to be stored in a fixed temporary location. (Pull request https://github.com/CS2103JAN2018-T09-B2/main/pull/10/files[#10])"},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"** Documentation:"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"*** Build User and Developer Guides to HTML files using the asciidoctor plugin."},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Major enhancement: added rate and show level of friendship command"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":"include::../UserGuide.adoc[tag\u003drate]"},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Minor enhancement: added a seek RA command"},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":"include::../UserGuide.adoc[tag\u003dseek]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":"include::../DeveloperGuide.adoc[tag\u003drate]"}],"authorContributionMap":{"zuweitrack":45,"-":14}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"CollegeZone was developed by the https://github.com/orgs/CS2103JAN2018-T09-B2/teams/developers[CS2103JAN2018-T09-B2] team. +"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":" +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Deborah Low Shi Lei"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"image::deborahlow97.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/deborahlow97[github]] [\u003c\u003cdeborahlow97#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Goh Zu Wei"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"image::zuweitrack.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/zuweitrack[github]] [\u003c\u003czuweitrack#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Responsibilities: Data"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Fuad B Sahmawi"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"image::fuadsahmawi.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/fuadsahmawi[github]] [\u003c\u003cfuadsahmawi#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Responsibilities: Dev Ops + Threading"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Shamsheer Ahamed"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"image::sham-sheer.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/sham-sheer[github]] [\u003c\u003csham-sheer#, portfolio\u003e\u003e]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"-":32,"deborahlow97":14}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d CollegeZone"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"https://travis-ci.org/CS2103JAN2018-T09-B2/main[image:https://travis-ci.org/CS2103JAN2018-T09-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"https://coveralls.io/github/CS2103JAN2018-T09-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T09-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"800\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"800\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"Welcome to CollegeZone! CollegeZone is a custom application made for *National University of Singapore (NUS) Residential College 4 (RC4) students*. +"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"CollegeZone is designed for a RC4 student to manage their contacts with other RC4 students, manage their goals and to manage their time."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"You can find many interesting features available in CollegeZone such as: +"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"* recording meetups +"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"* rating friends +"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"* creating goals +"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"* creating reminders +"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"* and many more!"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"The main reasons NUS freshmen chooses to stay in RC4 is to *forge new friendships* and to *perform well in their studies*. CollegeZone aims to aid in RC4 residents tasks management and maintaining the friendships forged in RC4. +"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"With CollegeZone\u0027s unique features, we aim to benefit your everyday life. +"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"Head over to our link:docs/UserGuide.adoc[user guide] to get started with CollegeZone!"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":43,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":44,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"* Credits to http://natty.joestelmach.com/[Joestalmach] for the date parsing NLP library"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"* Credits to to http://dlsc.com/products/calendarfx/[Dirk Lemmermann] for his calendar software"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"-":31,"deborahlow97":17}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d CollegeZone - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"By: `Team T09-B2`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"Welcome to *_CollegeZone_*! +"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" +"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"_CollegeZone_ is a revolutionary desktop application created for National University of Singapore (NUS) students living in Residential College 4 (RC4). We aim to help you to manage your hectic University life! +"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"_CollegeZone_ is a personal assistant to your everyday life in NUS. It helps you to maintain and expand your social circle, tells you the goals you have, and schedules reminders and appointments you have."},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"More importantly, _CollegeZone_ is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, _CollegeZone_ can get your contact management and tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d Quick Start"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"Follow these few simple steps to get started with _CollegeZone_!"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Download"},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":".  Download the latest `collegezone.jar` link:{repoURL}/releases[here]."},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"image::DownloadJar.JPG[width\u003d\"550\"]"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":".  Copy the file to the folder you want to use as the home folder for _CollegeZone_. For example, you can place it in a folder created on your desktop."},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Launch"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":". To launch _CollegeZone_, double-click on `collegezone.jar` to launch _CollegeZone_."},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":". You will be greeted with _CollegeZone\u0027s_ Graphic User Interface (GUI) as shown below. The GUI should appear in a few seconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"800\"]"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Visual Introduction"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"The image below describes what each part of _CollegeZone\u0027s_ GUI represent."},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"image::UserGuideLabelledUI.PNG[width\u003d\"800\"]"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":". The *Command Box* is located at the top of CollegeZne. Enter your keyboard commands into the box!"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":". The *Result Display Panel* shows you the results of the commands you entered."},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":". The *Student List* keeps the list of student contacts that you have."},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":". The *Goal List* keeps the list of goals that you have."},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":". The *Goal Percentage Bar* is a percentage counter of the goals you have completed."},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":". The *Calendar* keeps the schedules that you have."},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Start using CollegeZone"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"Now that you have _CollegeZone\u0027s_ application on, try out some of the commands that we offer!"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"* Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"* Some example commands you can try:"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"** *`list`* : lists all RC4 student contacts"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"** **`add`**`n/John Doe p/98765432 */9 b/21 May 1997 u/#10-12 cca/Badminton cca/Volleyball t/workout buddy` : adds a student contact named `John Doe` to _CollegeZone_."},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"** **`delete`**`3` : deletes the 3rd student description shown in the student list"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"** *`exit`* : exits _CollegeZone_"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":82,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"* Words enclosed in round brackets indicates the *Command keyword* to use  e.g. in `(add)`, `add` is the command key word to use."},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"* *Command keywords* separated by kbd:[|] executes the same command e.g. in `(add | a)`, `add` or `a` are equivalent command key words to use."},{"lineNumber":86,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"* Items in square brackets are optional e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* Items with `â€¦`â€‹ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":89,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"* There are no limit to the number of tags or ccas a student can have."},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"[TIP]"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"Sentences displayed in this manner indicates a TIP for you"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"Sentences displayed in this manner indicates a NOTE to look out for"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d General features"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"First, let\u0027s get familiar with the command features that _CollegeZone_ offers! Type `help` in the Command Box and press kbd:[Enter] to display all the possible command usage."},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"*_Format:_*"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"(help)"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Adding a student: `add` or `a`"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"Currently, _CollegeZone_ is empty. Try to add a fellow RC4 friend into _CollegeZone_ using the `add` or `a` command."},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"(add | a) n/NAME p/PHONE_NUMBER */LEVEL_OF_FRIENDSHIP b/BIRTHDAY u/UNIT_NUMBER [cca/CCA]... [t/TAG]..."},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"`LEVEL_OF_FRIENDSHIP` must be a positive integer ranging from 1 to 10."},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"`BIRTHDAY` must be a in DDMMYYYY format ."},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"A student can have any number of tags (including 0) +"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"A student can have any number of CCAs (including 0)"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"\u003e add n/John Doe p/98765432 */9 b/21-May-1997 u/#10-12 cca/Badminton cca/Volleyball t/workout buddy"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"\u003e a n/Betsy Crowe t/friend b/21/12/1994 u/#01-10 p/1234567 */1 t/OwesMoney"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Listing all students : `list` or `l`"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"Shows a list of all students and their details that you added into _CollegeZone_. +"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"(list | l)"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Editing a student : `edit` or `e` [Since v1.2]"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"If you added a student detail incorrectly, you can edit an existing student\u0027s details in _CollegeZone_. +"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"(edit | e) INDEX [n/NAME] [p/PHONE] [u/UNIT_NUMBER] [*/LEVEL_OF_FRIENDSHIP] [b/BIRTHDAY] [cca/CCA]... [t/TAG]..."},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"* Edits the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":160,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"* When editing tags or CCAs, the existing tags or CCAs of the student will be removed i.e adding of tags or CCAs is not cumulative."},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":164,"author":{"gitID":"-"},"content":"****"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"\u003e edit 1 p/91234567 */10"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"Edits the phone number and level of friendship of the 1st student to be `91234567` and `10` respectively."},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":"\u003e e 2 n/Betsy Crower t/"},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Locating students by name or tag: `find` or `f` [Since v1.1]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"_CollegeZone_ lets you find students whose names or tags contain any of the given keywords. +"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":" (find | f) [n/KEYWORDS]"},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":" (find | f) [t/KEYWORDS]"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"****"},{"lineNumber":191,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":192,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":193,"author":{"gitID":"fuadsahmawi"},"content":"* Only the name or tag is searched at a single time"},{"lineNumber":194,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":195,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":196,"author":{"gitID":"fuadsahmawi"},"content":"* Searching both name and tag at the same time is not possible"},{"lineNumber":197,"author":{"gitID":"-"},"content":"****"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":200,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":201,"author":{"gitID":"deborahlow97"},"content":"\u003e find n/John"},{"lineNumber":202,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":203,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":204,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":205,"author":{"gitID":"deborahlow97"},"content":"\u003e f n/Betsy Tim John"},{"lineNumber":206,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":207,"author":{"gitID":"deborahlow97"},"content":"Returns any student having names `Betsy`, `Tim`, or `John`"},{"lineNumber":208,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":209,"author":{"gitID":"deborahlow97"},"content":"\u003e find t/friends"},{"lineNumber":210,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":211,"author":{"gitID":"deborahlow97"},"content":"Returns any student having tags `friends`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"zuweitrack"},"content":"// tag::seek[]"},{"lineNumber":214,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":215,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Seeking the Resident Assistant(s) of a student : `seek` [Since v1.3]"},{"lineNumber":216,"author":{"gitID":"zuweitrack"},"content":"Seek the Resident Assistant(s) (RA) of the student(s) whose name contains any of the given keywords. +"},{"lineNumber":217,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":218,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":219,"author":{"gitID":"zuweitrack"},"content":"seek NAME"},{"lineNumber":220,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"****"},{"lineNumber":223,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":224,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":225,"author":{"gitID":"zuweitrack"},"content":"* Only the name is searched at a single time"},{"lineNumber":226,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":227,"author":{"gitID":"zuweitrack"},"content":"* Resident Assistant(s) (RA) of the student\u0027s name matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`, `RA(s) of RC4`."},{"lineNumber":228,"author":{"gitID":"zuweitrack"},"content":"****"},{"lineNumber":229,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":230,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":231,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":232,"author":{"gitID":"zuweitrack"},"content":"\u003e seek John"},{"lineNumber":233,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":234,"author":{"gitID":"zuweitrack"},"content":"Returns `John` and `RA(s) of RC4`"},{"lineNumber":235,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":236,"author":{"gitID":"zuweitrack"},"content":"\u003e seek Betsy"},{"lineNumber":237,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":238,"author":{"gitID":"zuweitrack"},"content":"Returns `Betsy` and `RA(s) of RC4`"},{"lineNumber":239,"author":{"gitID":"zuweitrack"},"content":"// end::seek[]"},{"lineNumber":240,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":241,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":242,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Deleting a student : `delete` or `d`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"deborahlow97"},"content":"If you want to remove a student from your list, you\u0027re able to delete the specified student data from _CollegeZone_. +"},{"lineNumber":245,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":246,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":247,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":248,"author":{"gitID":"deborahlow97"},"content":"(delete | d) INDEX"},{"lineNumber":249,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"****"},{"lineNumber":252,"author":{"gitID":"deborahlow97"},"content":"* Deletes the student at the specified `INDEX`."},{"lineNumber":253,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":254,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":255,"author":{"gitID":"-"},"content":"****"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":258,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":259,"author":{"gitID":"deborahlow97"},"content":"\u003e list"},{"lineNumber":260,"author":{"gitID":"deborahlow97"},"content":"\u003e delete 2"},{"lineNumber":261,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":262,"author":{"gitID":"deborahlow97"},"content":"Deletes the 2nd student in _CollegeZone_."},{"lineNumber":263,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":264,"author":{"gitID":"deborahlow97"},"content":"\u003e find Betsy"},{"lineNumber":265,"author":{"gitID":"deborahlow97"},"content":"\u003e d 1"},{"lineNumber":266,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":267,"author":{"gitID":"deborahlow97"},"content":"Deletes the 1st student in the results of the `find` command."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":270,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Selecting a student and goal: `select` or `s`"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"deborahlow97"},"content":"Selects the student and/or goal identified by the index number used in the last student/goal listing. +"},{"lineNumber":273,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":274,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":275,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":276,"author":{"gitID":"deborahlow97"},"content":"(select | s) INDEX"},{"lineNumber":277,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"****"},{"lineNumber":280,"author":{"gitID":"deborahlow97"},"content":"* Selects the student or goal at the specified `INDEX`."},{"lineNumber":281,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":282,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":283,"author":{"gitID":"-"},"content":"****"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":286,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":287,"author":{"gitID":"deborahlow97"},"content":"\u003e list"},{"lineNumber":288,"author":{"gitID":"deborahlow97"},"content":"\u003e select 2"},{"lineNumber":289,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":290,"author":{"gitID":"deborahlow97"},"content":"Selects the 2nd student and 2nd goal in _CollegeZone_."},{"lineNumber":291,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":292,"author":{"gitID":"deborahlow97"},"content":"\u003e find Betsy"},{"lineNumber":293,"author":{"gitID":"deborahlow97"},"content":"\u003e s 1"},{"lineNumber":294,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":295,"author":{"gitID":"deborahlow97"},"content":"Selects the 1st student in the results of the `find` command."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"//tag::meet[]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d Meeting a student : `meet` or `m` [Since v1.3]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":303,"author":{"gitID":"deborahlow97"},"content":"Arranges a meetup with the student identified by the index number used in the last student listing. +"},{"lineNumber":304,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":305,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":306,"author":{"gitID":"deborahlow97"},"content":"(meet| m) INDEX d/MEETDATE"},{"lineNumber":307,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":308,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":309,"author":{"gitID":"A0158738X"},"content":"****"},{"lineNumber":310,"author":{"gitID":"deborahlow97"},"content":"* Sets up a meeting with the student at the specified `INDEX` on the specified meet date."},{"lineNumber":311,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":312,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":313,"author":{"gitID":"A0158738X"},"content":"* The date must be of the format d/ + DD/MM/YYYY."},{"lineNumber":314,"author":{"gitID":"A0158738X"},"content":"****"},{"lineNumber":315,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":316,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":317,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":318,"author":{"gitID":"deborahlow97"},"content":"\u003e meet 1 d/14/03/2018"},{"lineNumber":319,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":320,"author":{"gitID":"deborahlow97"},"content":"Sets up a meeting with the 1st student on the 14th of March, 2018 in your Calendar."},{"lineNumber":321,"author":{"gitID":"-"},"content":"//end::meet[]"},{"lineNumber":322,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":323,"author":{"gitID":"zuweitrack"},"content":"// tag::rate[]"},{"lineNumber":324,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":325,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Rating feature : `rate` or `rt` [Since v1.4]"},{"lineNumber":326,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":327,"author":{"gitID":"deborahlow97"},"content":"Rates an existing student in _CollegeZone_. +"},{"lineNumber":328,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":329,"author":{"gitID":"zuweitrack"},"content":"*_Formats:_*"},{"lineNumber":330,"author":{"gitID":"zuweitrack"},"content":"```java"},{"lineNumber":331,"author":{"gitID":"zuweitrack"},"content":"(rate | rt) INDEX(s) [*/LEVEL_OF_FRIENDSHIP]"},{"lineNumber":332,"author":{"gitID":"zuweitrack"},"content":"```"},{"lineNumber":333,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":334,"author":{"gitID":"zuweitrack"},"content":"****"},{"lineNumber":335,"author":{"gitID":"zuweitrack"},"content":"* Rates the student at the specified `INDEX(s)`. The index(s) refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":336,"author":{"gitID":"zuweitrack"},"content":"* At least one valid index and a valid level of friendship rating must be provided."},{"lineNumber":337,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":338,"author":{"gitID":"zuweitrack"},"content":"* When rating students, the current existing level of friendship value of the student will be changed."},{"lineNumber":339,"author":{"gitID":"zuweitrack"},"content":"****"},{"lineNumber":340,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":341,"author":{"gitID":"zuweitrack"},"content":"*_Examples_:*"},{"lineNumber":342,"author":{"gitID":"zuweitrack"},"content":"```java"},{"lineNumber":343,"author":{"gitID":"zuweitrack"},"content":"\u003e rate 1 */5"},{"lineNumber":344,"author":{"gitID":"zuweitrack"},"content":"```"},{"lineNumber":345,"author":{"gitID":"zuweitrack"},"content":"Rates the level of friendship of the 1st student to be `5`."},{"lineNumber":346,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":347,"author":{"gitID":"zuweitrack"},"content":"```java"},{"lineNumber":348,"author":{"gitID":"zuweitrack"},"content":"\u003e rt 1 3 */7"},{"lineNumber":349,"author":{"gitID":"zuweitrack"},"content":"```"},{"lineNumber":350,"author":{"gitID":"zuweitrack"},"content":"Rates the level of friendship of the 1st and 3rd student to be `5`."},{"lineNumber":351,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":352,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":353,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Show level of friendship feature : `show` or `sh` [Since v1.5]"},{"lineNumber":354,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":355,"author":{"gitID":"zuweitrack"},"content":"Shows the level of friendship of the student(s) whose level of friendship contains any of the given input values. +"},{"lineNumber":356,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":357,"author":{"gitID":"zuweitrack"},"content":"*_Formats:_*"},{"lineNumber":358,"author":{"gitID":"zuweitrack"},"content":"```java"},{"lineNumber":359,"author":{"gitID":"zuweitrack"},"content":"(show|sh) LEVELOFFRIENDSHIP"},{"lineNumber":360,"author":{"gitID":"zuweitrack"},"content":"```"},{"lineNumber":361,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":362,"author":{"gitID":"zuweitrack"},"content":"****"},{"lineNumber":363,"author":{"gitID":"zuweitrack"},"content":"* The order of the input level of friendship values does not matter. e.g. `1 2` will match `1` and `2`"},{"lineNumber":364,"author":{"gitID":"zuweitrack"},"content":"* Only valid level of friendship values will be matched e.g. `11` will not match `1`"},{"lineNumber":365,"author":{"gitID":"zuweitrack"},"content":"* Level of frienship of the student matching at least one value will be returned (i.e. `OR` search). e.g. `1 2` will return `Students with Level of Friendship value 1` and `Students with Level of Friendship value 2`."},{"lineNumber":366,"author":{"gitID":"zuweitrack"},"content":"****"},{"lineNumber":367,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":368,"author":{"gitID":"zuweitrack"},"content":"*_Examples_:*"},{"lineNumber":369,"author":{"gitID":"zuweitrack"},"content":"```java"},{"lineNumber":370,"author":{"gitID":"zuweitrack"},"content":"\u003e show 1"},{"lineNumber":371,"author":{"gitID":"zuweitrack"},"content":"```"},{"lineNumber":372,"author":{"gitID":"zuweitrack"},"content":"Returns Students with Level of Friendship value `1`"},{"lineNumber":373,"author":{"gitID":"zuweitrack"},"content":"```java"},{"lineNumber":374,"author":{"gitID":"zuweitrack"},"content":"\u003e sh 1 5"},{"lineNumber":375,"author":{"gitID":"zuweitrack"},"content":"```"},{"lineNumber":376,"author":{"gitID":"zuweitrack"},"content":"Returns Students with Level of Friendship value `1` and Students with Level of Friendship value `5`"},{"lineNumber":377,"author":{"gitID":"zuweitrack"},"content":"// end::rate[]"},{"lineNumber":378,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"// tag::sort[]"},{"lineNumber":380,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":381,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Sort RC4 Students List: `sort [INDEX_TYPE]\u0027 [Since v1.5]"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"deborahlow97"},"content":"Sorts the RC4 Students List according to the input index. There are three different sorting types available."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"*_Formats:_*"},{"lineNumber":386,"author":{"gitID":"-"},"content":"```java"},{"lineNumber":387,"author":{"gitID":"-"},"content":"sort INDEX_TYPE"},{"lineNumber":388,"author":{"gitID":"-"},"content":"```"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"****"},{"lineNumber":391,"author":{"gitID":"-"},"content":"* Sort Type 1: Sorts the RC4 Students according to their Level of Friendship attribute."},{"lineNumber":392,"author":{"gitID":"-"},"content":"* Sort Type 2: Sorts the RC4 Students according to their meeting date attribute."},{"lineNumber":393,"author":{"gitID":"-"},"content":"* Sort Type 3: Sorts the RC4 Students according to their Birthday attribute."},{"lineNumber":394,"author":{"gitID":"-"},"content":"* When sorting according to meet date, those sstudents whose meet date has passed or those students whom you are not meeting as of yet, will be moved to the bottom."},{"lineNumber":395,"author":{"gitID":"-"},"content":"****"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"*_Examples_:*"},{"lineNumber":398,"author":{"gitID":"-"},"content":"```java"},{"lineNumber":399,"author":{"gitID":"-"},"content":"\u003e sort 1"},{"lineNumber":400,"author":{"gitID":"-"},"content":"```"},{"lineNumber":401,"author":{"gitID":"-"},"content":"Returns `A sorted list of RC4 students according to their level of friendship`"},{"lineNumber":402,"author":{"gitID":"-"},"content":"// end::sort[]"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"fuadsahmawi"},"content":"// tag::reminder[]"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Reminder features"},{"lineNumber":407,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":408,"author":{"gitID":"fuadsahmawi"},"content":"You might be wondering what else you can do with the calendar. The Reminder features listed below will allow you to set reminders for events, important dates or simply to-do tasks that will be reflected in the calendar for easy reference!"},{"lineNumber":409,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":410,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":411,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Adding a reminder: `+reminder` or `+r` or `addreminder` [Since v1.4]"},{"lineNumber":412,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":413,"author":{"gitID":"deborahlow97"},"content":"You can try setting a reminder into the calendar in _CollegeZone_ by referring to the instructions below. +"},{"lineNumber":414,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":415,"author":{"gitID":"fuadsahmawi"},"content":"*_Formats:_*"},{"lineNumber":416,"author":{"gitID":"fuadsahmawi"},"content":"```java"},{"lineNumber":417,"author":{"gitID":"fuadsahmawi"},"content":"(+reminder | +r | addreminder) text/REMINDER_TEXT d/START_DATETIME e/END_DATETIME"},{"lineNumber":418,"author":{"gitID":"fuadsahmawi"},"content":"```"},{"lineNumber":419,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":420,"author":{"gitID":"fuadsahmawi"},"content":"*_Details:_*"},{"lineNumber":421,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":422,"author":{"gitID":"fuadsahmawi"},"content":"* A reminder will be added to _CollegeZone_ and it will be reflected in the Calendar."},{"lineNumber":423,"author":{"gitID":"fuadsahmawi"},"content":"* `START_DATETIME` \u0026 `END_DATETIME`: a datetime is a string that contains either a date, a time or a combination of both (in any order). If a date is not specified, then it will refer to today. If a time is not specified, then it will refer to the current time."},{"lineNumber":424,"author":{"gitID":"fuadsahmawi"},"content":"* Examples of valid `START_DATETIME` \u0026 `END_DATETIME`: +"},{"lineNumber":425,"author":{"gitID":"deborahlow97"},"content":" -\t[date] [time] +"},{"lineNumber":426,"author":{"gitID":"deborahlow97"},"content":" -\t3pm +"},{"lineNumber":427,"author":{"gitID":"deborahlow97"},"content":" -\ttoday +"},{"lineNumber":428,"author":{"gitID":"deborahlow97"},"content":" -\ttmr +"},{"lineNumber":429,"author":{"gitID":"deborahlow97"},"content":" -\t10 Feb +"},{"lineNumber":430,"author":{"gitID":"deborahlow97"},"content":" -\tthursday 8am +"},{"lineNumber":431,"author":{"gitID":"deborahlow97"},"content":" -\ttomorrow 3pm +"},{"lineNumber":432,"author":{"gitID":"deborahlow97"},"content":" -\t14 Feb 2014 5.30am +"},{"lineNumber":433,"author":{"gitID":"fuadsahmawi"},"content":" -\t2/29/14 23:59 +"},{"lineNumber":434,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":435,"author":{"gitID":"fuadsahmawi"},"content":"[TIP]"},{"lineNumber":436,"author":{"gitID":"fuadsahmawi"},"content":"You should use a date format of MM/DD/YYYY instead of DD/MM/YYYY if you choose to"},{"lineNumber":437,"author":{"gitID":"fuadsahmawi"},"content":"use this date format for the START_DATETIME or END_DATETIME"},{"lineNumber":438,"author":{"gitID":"fuadsahmawi"},"content":"****"},{"lineNumber":439,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":440,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":441,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":442,"author":{"gitID":"fuadsahmawi"},"content":"+r text/Eat vitamins d/4/25/2018 8am e/4/25/2018 8.10am"},{"lineNumber":443,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":444,"author":{"gitID":"fuadsahmawi"},"content":"Returns `Eat vitamins` in the calendar on `25th April 2018` from `8am` to `8.10am`"},{"lineNumber":445,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":446,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":447,"author":{"gitID":"deborahlow97"},"content":"+reminder text/Dental appointment d/next thurs 3pm e/next thurs 4pm"},{"lineNumber":448,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":449,"author":{"gitID":"fuadsahmawi"},"content":"Returns `Dental appointment` in the calendar according to `START_DATETIME` \u0026 `END_DATETIME`"},{"lineNumber":450,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":451,"author":{"gitID":"fuadsahmawi"},"content":"Figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":452,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":453,"author":{"gitID":"deborahlow97"},"content":".Execution of +r text/Eat vitamins d/5/5/2018 8am e/5/5/2018 8.10am"},{"lineNumber":454,"author":{"gitID":"fuadsahmawi"},"content":"image::addReminder.PNG[width\u003d\"1500\"]"},{"lineNumber":455,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":456,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":457,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Deleting a reminder: `-reminder` or `-r` or `deletereminder` [Since v1.4]"},{"lineNumber":458,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":459,"author":{"gitID":"fuadsahmawi"},"content":"If you made a mistake or have reminders that are already due, you can also delete it away from the calendar by referring to the instructions below."},{"lineNumber":460,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":461,"author":{"gitID":"fuadsahmawi"},"content":"*_Formats:_*"},{"lineNumber":462,"author":{"gitID":"fuadsahmawi"},"content":"```java"},{"lineNumber":463,"author":{"gitID":"fuadsahmawi"},"content":"(-reminder | -r | deletereminder) text/REMINDER_TEXT d/START_DATETIME"},{"lineNumber":464,"author":{"gitID":"fuadsahmawi"},"content":"```"},{"lineNumber":465,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":466,"author":{"gitID":"fuadsahmawi"},"content":"*_Details:_*"},{"lineNumber":467,"author":{"gitID":"fuadsahmawi"},"content":"****"},{"lineNumber":468,"author":{"gitID":"deborahlow97"},"content":"* Deletes a reminder from _CollegeZone_ and the reminder will not be reflected in the Calendar anymore."},{"lineNumber":469,"author":{"gitID":"fuadsahmawi"},"content":"* `REMINDER_TEXT`: a string that contains the reminder\u0027s title"},{"lineNumber":470,"author":{"gitID":"fuadsahmawi"},"content":"* `START_DATETIME`: a datetime is a string that contains either a date, a time or a combination of both (in any order). If a date is not specified, then it will refer to today. If a time is not specified, then it will refer to the current time."},{"lineNumber":471,"author":{"gitID":"fuadsahmawi"},"content":"* Examples of valid `START_DATETIME`: +"},{"lineNumber":472,"author":{"gitID":"deborahlow97"},"content":" -\t[date] [time] +"},{"lineNumber":473,"author":{"gitID":"deborahlow97"},"content":" -\t3pm +"},{"lineNumber":474,"author":{"gitID":"deborahlow97"},"content":" -\ttoday +"},{"lineNumber":475,"author":{"gitID":"deborahlow97"},"content":" -\ttmr +"},{"lineNumber":476,"author":{"gitID":"deborahlow97"},"content":" -\t10 Feb +"},{"lineNumber":477,"author":{"gitID":"deborahlow97"},"content":" -\tthursday 8am +"},{"lineNumber":478,"author":{"gitID":"deborahlow97"},"content":" -\ttomorrow 3pm +"},{"lineNumber":479,"author":{"gitID":"deborahlow97"},"content":" -\t14 Feb 2014 5.30am +"},{"lineNumber":480,"author":{"gitID":"fuadsahmawi"},"content":" -\t2/29/14 23:59 +"},{"lineNumber":481,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":482,"author":{"gitID":"fuadsahmawi"},"content":"[TIP]"},{"lineNumber":483,"author":{"gitID":"fuadsahmawi"},"content":"You should use a date format of MM/DD/YYYY instead of DD/MM/YYYY if you choose to"},{"lineNumber":484,"author":{"gitID":"fuadsahmawi"},"content":"use this date format for START_DATETIME"},{"lineNumber":485,"author":{"gitID":"fuadsahmawi"},"content":"****"},{"lineNumber":486,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":487,"author":{"gitID":"fuadsahmawi"},"content":"*_Examples:_*"},{"lineNumber":488,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":489,"author":{"gitID":"fuadsahmawi"},"content":"```java"},{"lineNumber":490,"author":{"gitID":"fuadsahmawi"},"content":"-r text/Eat vitamins d/4/25/2018 8am"},{"lineNumber":491,"author":{"gitID":"fuadsahmawi"},"content":"```"},{"lineNumber":492,"author":{"gitID":"fuadsahmawi"},"content":"Deletes reminder `Eat vitamins` set on `25th April 2018` at `8am`"},{"lineNumber":493,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":494,"author":{"gitID":"fuadsahmawi"},"content":"```java"},{"lineNumber":495,"author":{"gitID":"fuadsahmawi"},"content":"-reminder text/Dental appointment d/tmr"},{"lineNumber":496,"author":{"gitID":"fuadsahmawi"},"content":"```"},{"lineNumber":497,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":498,"author":{"gitID":"fuadsahmawi"},"content":"Deletes reminder `Dental appointment` according to `START_DATETIME`"},{"lineNumber":499,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":500,"author":{"gitID":"fuadsahmawi"},"content":"Figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":501,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":502,"author":{"gitID":"deborahlow97"},"content":".Execution of -r text/Eat vitamins d/5/5/2018 8am"},{"lineNumber":503,"author":{"gitID":"fuadsahmawi"},"content":"image::delReminder.PNG[width\u003d\"1500\"]"},{"lineNumber":504,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":505,"author":{"gitID":"fuadsahmawi"},"content":"// end::reminder[]"},{"lineNumber":506,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":507,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":508,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Goal features"},{"lineNumber":509,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":510,"author":{"gitID":"deborahlow97"},"content":"//tag::goalfeatures[]"},{"lineNumber":511,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":512,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Adding a goal: `+goal` or `+g` or `addgoal` [Since v1.3]"},{"lineNumber":513,"author":{"gitID":"deborahlow97"},"content":"Currently, your goal page is empty! Try adding a goal entry that you have into _CollegeZone_ using the `+goal`, `+g` or `addgoal` command. The new goal added will be reflected in _CollegeZone_. +"},{"lineNumber":514,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":515,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":516,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":517,"author":{"gitID":"deborahlow97"},"content":"(+goal | +g | addgoal) impt/IMPORTANCE_LEVEL text/GOAL_TEXT"},{"lineNumber":518,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":519,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":520,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":521,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":522,"author":{"gitID":"deborahlow97"},"content":"`IMPORTANCE_LEVEL` must be a positive integer ranging from 1 to 10."},{"lineNumber":523,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":524,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":525,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":526,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":527,"author":{"gitID":"deborahlow97"},"content":"\u003e +goal impt/3 text/lose weight!"},{"lineNumber":528,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":529,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":530,"author":{"gitID":"deborahlow97"},"content":"\u003e +g impt/2 text/meetup with close friends more often \u003d)"},{"lineNumber":531,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":532,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":533,"author":{"gitID":"deborahlow97"},"content":"\u003e addgoal impt/1 text/learn how to bake cheesecake"},{"lineNumber":534,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":535,"author":{"gitID":"deborahlow97"},"content":"The figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":536,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":537,"author":{"gitID":"deborahlow97"},"content":".Execution of +goal text/get an internship this summer impt/10"},{"lineNumber":538,"author":{"gitID":"deborahlow97"},"content":"image::AddGoal.PNG[width\u003d\"1000\"]"},{"lineNumber":539,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":540,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":541,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Sorting goals: `sortgoal` or `sgoal` [Since v1.5]"},{"lineNumber":542,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":543,"author":{"gitID":"deborahlow97"},"content":"It is a hassle to locate the goals you\u0027re interested in if you have too many goals in _CollegeZone_. Try sorting the goals that you have using the `sortgoal` or `sgoal` command. +"},{"lineNumber":544,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":545,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":546,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":547,"author":{"gitID":"deborahlow97"},"content":"(sortgoal | sgoal) f/GOAL_FIELD o/ORDER"},{"lineNumber":548,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":549,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":550,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":551,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":552,"author":{"gitID":"deborahlow97"},"content":"`GOAL_FIELD` can only be \u0027startdatetime\u0027, \u0027completion\u0027 or \u0027importance\u0027."},{"lineNumber":553,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":554,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":555,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":556,"author":{"gitID":"deborahlow97"},"content":"`ORDER` can only be either \u0027ascending\u0027 or \u0027descending\u0027."},{"lineNumber":557,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":558,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":559,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":560,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":561,"author":{"gitID":"deborahlow97"},"content":"\u003e sortgoal f/startdatetime o/ascending"},{"lineNumber":562,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":563,"author":{"gitID":"deborahlow97"},"content":"Sorts the goal list based on start date time in ascending order."},{"lineNumber":564,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":565,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":566,"author":{"gitID":"deborahlow97"},"content":"\u003e sgoal f/completion o/descending"},{"lineNumber":567,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":568,"author":{"gitID":"deborahlow97"},"content":"Sorts the goal list based on completion in descending order."},{"lineNumber":569,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":570,"author":{"gitID":"deborahlow97"},"content":"The figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":571,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":572,"author":{"gitID":"deborahlow97"},"content":".Execution of sortgoal f/importance o/ascending"},{"lineNumber":573,"author":{"gitID":"deborahlow97"},"content":"image::SortGoal.PNG[width\u003d\"1000\"]"},{"lineNumber":574,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":575,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":576,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Editing a goal: `~goal` or `~g` or `editgoal` [Since v1.4]"},{"lineNumber":577,"author":{"gitID":"deborahlow97"},"content":"If you\u0027ve added a goal entry incorrectly, try using the `~goal`, `~g` or `editgoal` command to edit the goals you have. +"},{"lineNumber":578,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":579,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":580,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":581,"author":{"gitID":"deborahlow97"},"content":"(~goal | ~g | editgoal) INDEX [impt/IMPORTANCE_LEVEL] [text/GOAL_TEXT]"},{"lineNumber":582,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":583,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":584,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":585,"author":{"gitID":"deborahlow97"},"content":"* Edits the goal at the specified `INDEX`. The index refers to the index number shown in the goal listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":586,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":587,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":588,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":589,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":590,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":591,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":592,"author":{"gitID":"deborahlow97"},"content":"\u003e ~goal 2 impt/1"},{"lineNumber":593,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":594,"author":{"gitID":"deborahlow97"},"content":"Edits the goal importance level of the 2nd reminder to be `1`."},{"lineNumber":595,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":596,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":597,"author":{"gitID":"deborahlow97"},"content":"\u003e sgoal f/importance o/descending"},{"lineNumber":598,"author":{"gitID":"deborahlow97"},"content":"\u003e ~g 1 impt/3 text/learn yoga"},{"lineNumber":599,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":600,"author":{"gitID":"deborahlow97"},"content":"Edits the goal text and importance level of the 1st student in the sorted goal list to be `learn yoga` and `1` respectively."},{"lineNumber":601,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":602,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":603,"author":{"gitID":"deborahlow97"},"content":"editgoal 5 text/swim at least twice a month"},{"lineNumber":604,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":605,"author":{"gitID":"deborahlow97"},"content":"Edits the goal text of the 5th student to be `swim at least twice a month`."},{"lineNumber":606,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":607,"author":{"gitID":"deborahlow97"},"content":"The figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":608,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":609,"author":{"gitID":"deborahlow97"},"content":".Execution of ~g 2 impt/10"},{"lineNumber":610,"author":{"gitID":"deborahlow97"},"content":"image::EditGoal.PNG[width\u003d\"1000\"]"},{"lineNumber":611,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":612,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":613,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Deleting a goal: `-goal` or `-g` or `deletegoal`"},{"lineNumber":614,"author":{"gitID":"deborahlow97"},"content":"If you\u0027ve added a specific goal that you\u0027re unlikely to complete and want to remove it from _CollegeZone_, try using the `-goal`, `-g` or `deletegoal` command to delete a goal entry that you have. +"},{"lineNumber":615,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":616,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":617,"author":{"gitID":"deborahlow97"},"content":"(-goal | -g | deletegoal) INDEX"},{"lineNumber":618,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":619,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":620,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":621,"author":{"gitID":"deborahlow97"},"content":"* Deletes the goal at the specified `INDEX`."},{"lineNumber":622,"author":{"gitID":"deborahlow97"},"content":"* The index refers to the index number shown in the most recent goal listing."},{"lineNumber":623,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":624,"author":{"gitID":"-"},"content":"****"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":627,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":628,"author":{"gitID":"deborahlow97"},"content":"\u003e -goal 2"},{"lineNumber":629,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":630,"author":{"gitID":"deborahlow97"},"content":"Deletes the 2nd goal in _CollegeZone\u0027s_ goal listing. +"},{"lineNumber":631,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":632,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":633,"author":{"gitID":"deborahlow97"},"content":"\u003e sortgoal f/completion o/ascending"},{"lineNumber":634,"author":{"gitID":"deborahlow97"},"content":"\u003e -g 4"},{"lineNumber":635,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":636,"author":{"gitID":"deborahlow97"},"content":"Deletes the 4th goal in _CollegeZone\u0027s_ sorted goal listing. +"},{"lineNumber":637,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":638,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":639,"author":{"gitID":"deborahlow97"},"content":"\u003e deletegoal 1"},{"lineNumber":640,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":641,"author":{"gitID":"deborahlow97"},"content":"Deletes the 1st goal in _CollegeZone\u0027s_ goal listing."},{"lineNumber":642,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":643,"author":{"gitID":"deborahlow97"},"content":"The figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":644,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":645,"author":{"gitID":"deborahlow97"},"content":".Execution of -goal 4"},{"lineNumber":646,"author":{"gitID":"deborahlow97"},"content":"image::DeleteGoal.PNG[width\u003d\"1000\"]"},{"lineNumber":647,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":648,"author":{"gitID":"deborahlow97"},"content":"// end::goalfeatures[]"},{"lineNumber":649,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":650,"author":{"gitID":"deborahlow97"},"content":"//tag::goalcompletion[]"},{"lineNumber":651,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":652,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Completing a goal: `!goal` or `!g` or `completegoal`"},{"lineNumber":653,"author":{"gitID":"deborahlow97"},"content":"Once you\u0027ve completed a goal, indicate completion of an existing goal in _CollegeZone_ using the `!goal`, `!g` or `completegoal` command. +"},{"lineNumber":654,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":655,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":656,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":657,"author":{"gitID":"deborahlow97"},"content":"(!goal | !g | completegoal) INDEX"},{"lineNumber":658,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":659,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":660,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":661,"author":{"gitID":"deborahlow97"},"content":"* Indicates completion of the goal at the specified `INDEX`."},{"lineNumber":662,"author":{"gitID":"deborahlow97"},"content":"* The index refers to the index number shown in the most recent goal listing."},{"lineNumber":663,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":664,"author":{"gitID":"-"},"content":"****"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":667,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":668,"author":{"gitID":"deborahlow97"},"content":"\u003e !goal 2"},{"lineNumber":669,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":670,"author":{"gitID":"deborahlow97"},"content":"Indicates completion of the 2nd goal in _CollegeZone\u0027s_ goal listing."},{"lineNumber":671,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":672,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":673,"author":{"gitID":"deborahlow97"},"content":"\u003e sgoal f/importance o/descending"},{"lineNumber":674,"author":{"gitID":"deborahlow97"},"content":"\u003e !g 4"},{"lineNumber":675,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":676,"author":{"gitID":"deborahlow97"},"content":"Indicates completion of the 4th goal in _CollegeZone\u0027s_ sorted goal listing."},{"lineNumber":677,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":678,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":679,"author":{"gitID":"deborahlow97"},"content":"\u003e completegoal 1"},{"lineNumber":680,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":681,"author":{"gitID":"deborahlow97"},"content":"Indicates completion of the 1st goal in _CollegeZone\u0027s_ goal listing."},{"lineNumber":682,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":683,"author":{"gitID":"deborahlow97"},"content":"The figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":684,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":685,"author":{"gitID":"deborahlow97"},"content":".Execution of !g 4"},{"lineNumber":686,"author":{"gitID":"deborahlow97"},"content":"image::CompleteGoal.PNG[width\u003d\"1000\"]"},{"lineNumber":687,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":688,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":689,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":690,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":691,"author":{"gitID":"deborahlow97"},"content":"The goal percentage bar changes."},{"lineNumber":692,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":693,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":694,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":695,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Revert completing a goal: `-!goal` or `-!g` or `ongoinggoal`"},{"lineNumber":696,"author":{"gitID":"deborahlow97"},"content":"If you had an ongoing goal that is wrongly indicated that it\u0027s completed, do not fret, simply indicate that an existing goal you have is still ongoing in _CollegeZone_ using the `-!goal`, `-!g` or `ongoinggoal` command. +"},{"lineNumber":697,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":698,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":699,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":700,"author":{"gitID":"deborahlow97"},"content":"(-!goal | -!g | ongoinggoal) INDEX"},{"lineNumber":701,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":702,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":703,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":704,"author":{"gitID":"deborahlow97"},"content":"* Indicates completion of the goal at the specified `INDEX`."},{"lineNumber":705,"author":{"gitID":"deborahlow97"},"content":"* The index refers to the index number shown in the most recent goal listing."},{"lineNumber":706,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":707,"author":{"gitID":"-"},"content":"****"},{"lineNumber":708,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":709,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":710,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":711,"author":{"gitID":"deborahlow97"},"content":"\u003e -!goal 2"},{"lineNumber":712,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":713,"author":{"gitID":"deborahlow97"},"content":"Indicates ongoing of the 2nd goal in _CollegeZone\u0027s_ goal listing."},{"lineNumber":714,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":715,"author":{"gitID":"deborahlow97"},"content":"\u003e sortgoal f/startdatetime o/ascending"},{"lineNumber":716,"author":{"gitID":"deborahlow97"},"content":"\u003e -!g 4"},{"lineNumber":717,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":718,"author":{"gitID":"deborahlow97"},"content":"Indicates ongoing of the 4th goal in _CollegeZone\u0027s_ sorted goal listing."},{"lineNumber":719,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":720,"author":{"gitID":"deborahlow97"},"content":"\u003e ongoing 1"},{"lineNumber":721,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":722,"author":{"gitID":"deborahlow97"},"content":"Indicates ongoing of the 1st goal in _CollegeZone\u0027s_ goal listing."},{"lineNumber":723,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":724,"author":{"gitID":"deborahlow97"},"content":"The figure below portrays what should be seen after the command is executed correctly:"},{"lineNumber":725,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":726,"author":{"gitID":"deborahlow97"},"content":".Execution of -!g 1"},{"lineNumber":727,"author":{"gitID":"deborahlow97"},"content":"image::OngoingGoal.PNG[width\u003d\"1000\"]"},{"lineNumber":728,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":729,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":730,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":731,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":732,"author":{"gitID":"deborahlow97"},"content":"The goal percentage bar changes."},{"lineNumber":733,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":734,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":735,"author":{"gitID":"deborahlow97"},"content":"// end::goalcompletion[]"},{"lineNumber":736,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":737,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Interesting features"},{"lineNumber":738,"author":{"gitID":"deborahlow97"},"content":"// tag::theme[]"},{"lineNumber":739,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":740,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Changing CollegeZone theme : `theme` or `th`"},{"lineNumber":741,"author":{"gitID":"deborahlow97"},"content":"_CollegeZone\u0027s_ default theme colour is not the only theme colour we have to offer! Try changing _CollegeZone\u0027s_ theme colour to your preferred one using the `theme` or `th` command.  +"},{"lineNumber":742,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":743,"author":{"gitID":"deborahlow97"},"content":".Dark Theme"},{"lineNumber":744,"author":{"gitID":"deborahlow97"},"content":"image::CollegeZoneDarkTheme.JPG[width\u003d\"1000\"]"},{"lineNumber":745,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":746,"author":{"gitID":"deborahlow97"},"content":".Bubblegum Theme"},{"lineNumber":747,"author":{"gitID":"deborahlow97"},"content":"image::CollegeZoneBubblegumTheme.JPG[width\u003d\"1000\"]"},{"lineNumber":748,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":749,"author":{"gitID":"deborahlow97"},"content":".Light Theme"},{"lineNumber":750,"author":{"gitID":"deborahlow97"},"content":"image::CollegeZoneLightTheme.JPG[width\u003d\"1000\"]"},{"lineNumber":751,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":752,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":753,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":754,"author":{"gitID":"deborahlow97"},"content":"(theme | th) THEME_COLOUR"},{"lineNumber":755,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":756,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":757,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":758,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":759,"author":{"gitID":"deborahlow97"},"content":"`THEME_COLOUR` can only be \u0027dark\u0027, \u0027bubblegum\u0027 and \u0027light\u0027."},{"lineNumber":760,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":761,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":762,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":763,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":764,"author":{"gitID":"deborahlow97"},"content":"\u003e theme light"},{"lineNumber":765,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":766,"author":{"gitID":"deborahlow97"},"content":"Changes the theme colour to light theme."},{"lineNumber":767,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":768,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":769,"author":{"gitID":"deborahlow97"},"content":"\u003e th dark"},{"lineNumber":770,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":771,"author":{"gitID":"deborahlow97"},"content":"Changes the theme colour to dark theme."},{"lineNumber":772,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":773,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":774,"author":{"gitID":"deborahlow97"},"content":"\u003e th bubblegum"},{"lineNumber":775,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":776,"author":{"gitID":"deborahlow97"},"content":"Changes the theme colour to bubblegum theme."},{"lineNumber":777,"author":{"gitID":"-"},"content":"// end::theme[]"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"//tag::auto[]"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d AutoComplete CLI with: `tab`"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"\tYou can type a command and press Tab to auto bring out all the command parameters."},{"lineNumber":784,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"//end::auto[]"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history` or `h`"},{"lineNumber":788,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":791,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":792,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":793,"author":{"gitID":"deborahlow97"},"content":"(history | h)"},{"lineNumber":794,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":797,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":798,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":799,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":802,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":803,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u`"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"deborahlow97"},"content":"Restores _CollegeZone_ to the state before the previous _undoable_ command was executed. +"},{"lineNumber":806,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":807,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":808,"author":{"gitID":"deborahlow97"},"content":"(undo | u)"},{"lineNumber":809,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":812,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":813,"author":{"gitID":"deborahlow97"},"content":"Undoable commands: those commands that modify _CollegeZone\u0027s_ content (`add`, `delete`, `edit`, `clear`, `+goal`, `-goal`, `~goal`, `!goal`, `-!goal`)."},{"lineNumber":814,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":817,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":818,"author":{"gitID":"deborahlow97"},"content":"\u003e delete 1"},{"lineNumber":819,"author":{"gitID":"deborahlow97"},"content":"\u003e list"},{"lineNumber":820,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":821,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":822,"author":{"gitID":"deborahlow97"},"content":"Reverses the `delete 1` command"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":825,"author":{"gitID":"deborahlow97"},"content":"\u003e select 1"},{"lineNumber":826,"author":{"gitID":"deborahlow97"},"content":"\u003e list"},{"lineNumber":827,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":828,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":829,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":832,"author":{"gitID":"deborahlow97"},"content":"\u003e delete 1"},{"lineNumber":833,"author":{"gitID":"deborahlow97"},"content":"\u003e clear"},{"lineNumber":834,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":835,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":836,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":837,"author":{"gitID":"deborahlow97"},"content":"Reverses both the `clear` command and the `delete 1` command"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":840,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r`"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":843,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":844,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":845,"author":{"gitID":"deborahlow97"},"content":"(redo | r)"},{"lineNumber":846,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"deborahlow97"},"content":"*_Examples_:*"},{"lineNumber":849,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":850,"author":{"gitID":"deborahlow97"},"content":"\u003e delete 1"},{"lineNumber":851,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":852,"author":{"gitID":"deborahlow97"},"content":"\u003e redo"},{"lineNumber":853,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":854,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":855,"author":{"gitID":"deborahlow97"},"content":"`redo` (reapplies the `delete 1` command)"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":858,"author":{"gitID":"deborahlow97"},"content":"\u003e delete 1"},{"lineNumber":859,"author":{"gitID":"deborahlow97"},"content":"\u003e redo"},{"lineNumber":860,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":861,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":864,"author":{"gitID":"deborahlow97"},"content":"\u003e delete 1"},{"lineNumber":865,"author":{"gitID":"deborahlow97"},"content":"\u003e clear"},{"lineNumber":866,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":867,"author":{"gitID":"deborahlow97"},"content":"\u003e undo"},{"lineNumber":868,"author":{"gitID":"deborahlow97"},"content":"\u003e redo"},{"lineNumber":869,"author":{"gitID":"deborahlow97"},"content":"\u003e redo"},{"lineNumber":870,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":871,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":872,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":873,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":874,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":875,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":878,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"deborahlow97"},"content":"Clears all entries from _CollegeZone_. +"},{"lineNumber":881,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":882,"author":{"gitID":"deborahlow97"},"content":"```java"},{"lineNumber":883,"author":{"gitID":"deborahlow97"},"content":"(clear | c)"},{"lineNumber":884,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":887,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":890,"author":{"gitID":"deborahlow97"},"content":"*_Formats:_*"},{"lineNumber":891,"author":{"gitID":"deborahlow97"},"content":"`exit`"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":894,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"deborahlow97"},"content":"_CollegeZone_ data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":897,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Upcoming features"},{"lineNumber":900,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":901,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":902,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Encrypting data files [Coming in v2.0]"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":905,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"fuadsahmawi"},"content":"// tag::editreminder[]"},{"lineNumber":908,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":909,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Editing a reminder [Coming in v2.0]"},{"lineNumber":910,"author":{"gitID":"deborahlow97"},"content":"Edits an existing reminder in CollegeZone. +"},{"lineNumber":911,"author":{"gitID":"fuadsahmawi"},"content":"Format: `~r INDEX [text/REMINDER_TEXT] [d/START_DATETIME] [e/END_DATETIME]`"},{"lineNumber":912,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":913,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":914,"author":{"gitID":"deborahlow97"},"content":"* Edits the reminder at the specified `INDEX`. The index refers to the index number shown in the reminder listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":915,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":916,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":917,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":918,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":919,"author":{"gitID":"deborahlow97"},"content":"Examples:"},{"lineNumber":920,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":921,"author":{"gitID":"deborahlow97"},"content":"* `~r 4 text/CS2103 exam coming in 1 week` +"},{"lineNumber":922,"author":{"gitID":"deborahlow97"},"content":"Edits the reminder text of the 4th reminder to be `CS2103 exam coming in 1 week`."},{"lineNumber":923,"author":{"gitID":"deborahlow97"},"content":"* `~r 2 text/water plants d/tmr 7am` +"},{"lineNumber":924,"author":{"gitID":"fuadsahmawi"},"content":"Edits the reminder text and datetime of the 2nd student to be `water plants` and `tmr 7am` respectively. +"},{"lineNumber":925,"author":{"gitID":"fuadsahmawi"},"content":"// end::editreminder[]"},{"lineNumber":926,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":927,"author":{"gitID":"deborahlow97"},"content":"// tag::debv2.0[]"},{"lineNumber":928,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":929,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Adding subgoals [Coming in v2.0] +"},{"lineNumber":930,"author":{"gitID":"deborahlow97"},"content":"By using this command, you are able to add subgoals to the goals you currently have."},{"lineNumber":931,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":932,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":933,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Adding of timetable into CollegeZone [Coming in v2.0]"},{"lineNumber":934,"author":{"gitID":"deborahlow97"},"content":"Allows you to add your NUS timetable schedule for the semester into _CollegeZone_."},{"lineNumber":935,"author":{"gitID":"deborahlow97"},"content":"// end::debv2.0[]"},{"lineNumber":936,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":940,"author":{"gitID":"deborahlow97"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous _CollegeZone_ folder."},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":943,"author":{"gitID":"deborahlow97"},"content":"The table below provides a quick summary of all the commands available in _CollegeZone_."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"deborahlow97"},"content":"[width\u003d\"90%\",cols\u003d\"20%,\u003c22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":946,"author":{"gitID":"deborahlow97"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":947,"author":{"gitID":"deborahlow97"},"content":"|Command |Function |Format |Example"},{"lineNumber":948,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":949,"author":{"gitID":"deborahlow97"},"content":"|*Add* |Adds a student entry|`add n/NAME p/PHONE_NUMBER */LEVEL_OF_FRIENDSHIP b/BIRTHDAY u/UNIT_NUMBER [cca/CCA]... [t/TAG]...` +"},{"lineNumber":950,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":951,"author":{"gitID":"deborahlow97"},"content":"`a n/NAME p/PHONE_NUMBER */LEVEL_OF_FRIENDSHIP b/BIRTHDAY u/UNIT_NUMBER [cca/CCA]... [t/TAG]...`"},{"lineNumber":952,"author":{"gitID":"deborahlow97"},"content":"|`add n/James Ho p/22224444 */3 b/14-3-1995 u/01-111 cca/Choir t/friend t/colleague`"},{"lineNumber":953,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":954,"author":{"gitID":"deborahlow97"},"content":"|*Add Goal* |Adds a goal entry |`+goal impt/IMPORTANCE_LEVEL text/GOAL_TEXT` +"},{"lineNumber":955,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":956,"author":{"gitID":"deborahlow97"},"content":"`+g impt/IMPORTANCE_LEVEL text/GOAL_TEXT` +"},{"lineNumber":957,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":958,"author":{"gitID":"deborahlow97"},"content":"`addgoal impt/IMPORTANCE_LEVEL text/GOAL_TEXT` +"},{"lineNumber":959,"author":{"gitID":"deborahlow97"},"content":"|`+goal impt/3 text/lose weight!`"},{"lineNumber":960,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":961,"author":{"gitID":"deborahlow97"},"content":"|*Add Reminder* |Adds a reminder entry |`+reminder text/REMINDER_TEXT d/START_DATETIME e/END_DATETIME` +"},{"lineNumber":962,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":963,"author":{"gitID":"deborahlow97"},"content":"`+r text/REMINDER_TEXT d/START_DATETIME e/END_DATETIME` +"},{"lineNumber":964,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":965,"author":{"gitID":"deborahlow97"},"content":"`addreminder text/REMINDER_TEXT d/START_DATETIME e/END_DATETIME` +"},{"lineNumber":966,"author":{"gitID":"fuadsahmawi"},"content":"|`+reminder text/Eat pills d/4/25/2018 8am e/4/25/2018 8.10am`"},{"lineNumber":967,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":968,"author":{"gitID":"deborahlow97"},"content":"|*Clear* |Clears all student and goal entries |`clear` OR `c`|"},{"lineNumber":969,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":970,"author":{"gitID":"deborahlow97"},"content":"|*Complete Goal* |Complete a goal entry |`!goal INDEX` +"},{"lineNumber":971,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":972,"author":{"gitID":"deborahlow97"},"content":"`!g INDEX` +"},{"lineNumber":973,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":974,"author":{"gitID":"deborahlow97"},"content":"`completegoal INDEX` +"},{"lineNumber":975,"author":{"gitID":"deborahlow97"},"content":"|`!goal 1`"},{"lineNumber":976,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":977,"author":{"gitID":"deborahlow97"},"content":"|*Delete* |Deletes a student entry |`delete INDEX` OR `d INDEX`"},{"lineNumber":978,"author":{"gitID":"deborahlow97"},"content":"|`delete 3`"},{"lineNumber":979,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":980,"author":{"gitID":"deborahlow97"},"content":"|*Delete Goal* |Deletes a goal entry |`-goal INDEX` +"},{"lineNumber":981,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":982,"author":{"gitID":"deborahlow97"},"content":"`-g INDEX` +"},{"lineNumber":983,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":984,"author":{"gitID":"deborahlow97"},"content":"`deletegoal INDEX` +"},{"lineNumber":985,"author":{"gitID":"deborahlow97"},"content":"|`-goal 2`"},{"lineNumber":986,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":987,"author":{"gitID":"fuadsahmawi"},"content":"|*Delete Reminder* |Deletes a reminder entry |`-reminder text/REMINDER_TEXT d/START_DATETIME` +"},{"lineNumber":988,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":989,"author":{"gitID":"fuadsahmawi"},"content":"`-r text/REMINDER_TEXT d/START_DATETIME` +"},{"lineNumber":990,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":991,"author":{"gitID":"fuadsahmawi"},"content":"`deletereminder text/REMINDER_TEXT d/START_DATETIME` +"},{"lineNumber":992,"author":{"gitID":"fuadsahmawi"},"content":"|`-reminder text/Eat pills d/4/25/2018 8am`"},{"lineNumber":993,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":994,"author":{"gitID":"deborahlow97"},"content":"|*Edit* |Edits a person details |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [*/LEVEL_OF_FRIENDSHIP] [b/BIRTHDAY] [u/UNIT_NUMBER] [cca/CCA]... [t/TAG]...` +"},{"lineNumber":995,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":996,"author":{"gitID":"deborahlow97"},"content":"`e INDEX [n/NAME] [p/PHONE_NUMBER][ */LEVEL_OF_FRIENDSHIP] [b/BIRTHDAY] [u/UNIT_NUMBER] [cca/CCA]... [t/TAG]...` +"},{"lineNumber":997,"author":{"gitID":"deborahlow97"},"content":"|`edit 2 n/James Lee cca/waterpolo`"},{"lineNumber":998,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":999,"author":{"gitID":"deborahlow97"},"content":"|*Edit Goal* |Edits a goal entry |`~goal INDEX [impt/IMPORTANCE_LEVEL] [text/GOAL_TEXT]` +"},{"lineNumber":1000,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1001,"author":{"gitID":"deborahlow97"},"content":"`~g INDEX [impt/IMPORTANCE_LEVEL] [text/GOAL_TEXT]` +"},{"lineNumber":1002,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1003,"author":{"gitID":"deborahlow97"},"content":"`editgoal INDEX [impt/IMPORTANCE_LEVEL] [text/GOAL_TEXT]` +"},{"lineNumber":1004,"author":{"gitID":"deborahlow97"},"content":"|`~goal 2 impt/1`"},{"lineNumber":1005,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1006,"author":{"gitID":"deborahlow97"},"content":"|*Exit* |Exits _CollegeZone_ |`exit` |"},{"lineNumber":1007,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1008,"author":{"gitID":"deborahlow97"},"content":"|*Find* |Finds a student by keyword |`find n/KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1009,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1010,"author":{"gitID":"deborahlow97"},"content":"`f n/KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1011,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1012,"author":{"gitID":"deborahlow97"},"content":"`find t/KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1013,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1014,"author":{"gitID":"deborahlow97"},"content":"`f t/KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1015,"author":{"gitID":"deborahlow97"},"content":"|`find n/James Jake`"},{"lineNumber":1016,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1017,"author":{"gitID":"deborahlow97"},"content":"|*Help* |Opens the help page |`help`|"},{"lineNumber":1018,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1019,"author":{"gitID":"deborahlow97"},"content":"|*History* |Lists previously entered commands |`history` +"},{"lineNumber":1020,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1021,"author":{"gitID":"deborahlow97"},"content":"`h`"},{"lineNumber":1022,"author":{"gitID":"deborahlow97"},"content":"|"},{"lineNumber":1023,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1024,"author":{"gitID":"deborahlow97"},"content":"|*List* |Lists all students |`list` +"},{"lineNumber":1025,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1026,"author":{"gitID":"deborahlow97"},"content":"`l` |"},{"lineNumber":1027,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1028,"author":{"gitID":"deborahlow97"},"content":"|*Meet* |Adds meet up date with a student |`meet INDEX d/DD-MM-YYYY` +"},{"lineNumber":1029,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1030,"author":{"gitID":"deborahlow97"},"content":"`m INDEX d/DD-MM-YYYY`"},{"lineNumber":1031,"author":{"gitID":"deborahlow97"},"content":"|"},{"lineNumber":1032,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1033,"author":{"gitID":"zuweitrack"},"content":"|*Rate* |Rates one or more people|`rate INDEX(s) [LEVELOFFRIENDSHIP]` OR +"},{"lineNumber":1034,"author":{"gitID":"zuweitrack"},"content":"`rt INDEX(s) [LEVELOFFRIENDSHIP]`| rate 1 3 */5"},{"lineNumber":1035,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1036,"author":{"gitID":"deborahlow97"},"content":"|*Redo* |Redo previous command |`redo` |"},{"lineNumber":1037,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1038,"author":{"gitID":"deborahlow97"},"content":"|*Revert complete Goal* |Revert a complete a goal entry |`-!goal INDEX` +"},{"lineNumber":1039,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1040,"author":{"gitID":"deborahlow97"},"content":"`-!g INDEX` +"},{"lineNumber":1041,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1042,"author":{"gitID":"deborahlow97"},"content":"`ongoinggoal INDEX` +"},{"lineNumber":1043,"author":{"gitID":"deborahlow97"},"content":"|`-!goal 1`"},{"lineNumber":1044,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1045,"author":{"gitID":"zuweitrack"},"content":"|*Seek* |Seek RA(s) of students by keyword|`seek [keyword]` OR +"},{"lineNumber":1046,"author":{"gitID":"zuweitrack"},"content":"`sh [keyword]`| seek james"},{"lineNumber":1047,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1048,"author":{"gitID":"deborahlow97"},"content":"|*Select* |Selects the student and goal entry |`select INDEX` +"},{"lineNumber":1049,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1050,"author":{"gitID":"deborahlow97"},"content":"`s INDEX`"},{"lineNumber":1051,"author":{"gitID":"deborahlow97"},"content":"|`select 2`"},{"lineNumber":1052,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1053,"author":{"gitID":"zuweitrack"},"content":"|*Show* |Show students by level of friendship|`show [LEVELOFFRIENDSHIP]` OR +"},{"lineNumber":1054,"author":{"gitID":"zuweitrack"},"content":"`sh [LEVELOFFRIENDSHIP]`| show 5"},{"lineNumber":1055,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"|*Sort* |Sorts the RC4 Students list in 3 different ways|`sort [SORT TYPE]`| sort 1"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"deborahlow97"},"content":"|*Sort Goal* |Sorts the goal list |`sortgoal f/GOAL_FIELD o/ORDER` +"},{"lineNumber":1059,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1060,"author":{"gitID":"deborahlow97"},"content":"`sgoal f/GOAL_FIELD o/ORDER` +"},{"lineNumber":1061,"author":{"gitID":"deborahlow97"},"content":"|`sortgoal f/startdatetime o/ascending`"},{"lineNumber":1062,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1063,"author":{"gitID":"deborahlow97"},"content":"|*Theme* |Switch theme colour of _CollegeZone_ |`theme THEME_COLOUR` +"},{"lineNumber":1064,"author":{"gitID":"deborahlow97"},"content":"OR +"},{"lineNumber":1065,"author":{"gitID":"deborahlow97"},"content":"`th THEME_COLOUR` +"},{"lineNumber":1066,"author":{"gitID":"deborahlow97"},"content":"|`theme light`"},{"lineNumber":1067,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1068,"author":{"gitID":"deborahlow97"},"content":"|*Undo* |Undo previous command |`undo` |"}],"authorContributionMap":{"A0158738X":7,"zuweitrack":71,"fuadsahmawi":75,"-":195,"deborahlow97":720}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.GoalUtil.getGoalCompletion;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":137,"author":{"gitID":"fuadsahmawi"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/ \" + keyword + \" t/ \");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"        statusBarFooterHandle.rememberGoalCompletedStatus();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":230,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(handle.isGoalCompletedStatusChanged());"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":236,"author":{"gitID":"deborahlow97"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and goal completion"},{"lineNumber":237,"author":{"gitID":"deborahlow97"},"content":"     * status remains the same."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":245,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(handle.isGoalCompletedStatusChanged());"},{"lineNumber":246,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":248,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"deborahlow97"},"content":"     * Asserts that the sync status in the status bar was changed to the timing of"},{"lineNumber":250,"author":{"gitID":"deborahlow97"},"content":"     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"},{"lineNumber":251,"author":{"gitID":"deborahlow97"},"content":"     * number of persons in the address book, while the save location remains the same."},{"lineNumber":252,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"deborahlow97"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":258,"author":{"gitID":"deborahlow97"},"content":"        final int goalCompletion \u003d getGoalCompletion(testApp.getModel().getAddressBook().getGoalList());"},{"lineNumber":259,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(\"Goal \" + goalCompletion + \"% completed.\", handle.getGoalCompletedStatus());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":273,"author":{"gitID":"deborahlow97"},"content":"            assertEquals(\"Goal \" + getGoalCompletion(getModel().getAddressBook().getGoalList())"},{"lineNumber":274,"author":{"gitID":"deborahlow97"},"content":"                    + \"% completed.\", getStatusBarFooter().getGoalCompletedStatus());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":282,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":267,"deborahlow97":18}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    private static final ObservableList\u003cGoal\u003e TYPICAL_GOALS \u003d"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.observableList(getTypicalGoals());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS, TYPICAL_GOALS);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":56,"deborahlow97":5}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":35,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":36,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":44,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":45,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Carl\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Benson Daniel\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel Benson\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel Benson Daniel\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ MeIeR\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Mei\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Meiers\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Mark\";"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":121,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getPhone().value;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find birthday of person in address book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getBirthday().value;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: find level of friendship of person in address book -\u003e 0 persons found */"},{"lineNumber":131,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + DANIEL.getLevelOfFriendship().value;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find unit number of person in address book -\u003e 0 persons found */"},{"lineNumber":136,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + DANIEL.getUnitNumber().value;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: find ccas of person in address book -\u003e 0 persons found */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        List\u003cCca\u003e ccas \u003d new ArrayList\u003c\u003e(DANIEL.getCcas());"},{"lineNumber":142,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + ccas.get(0).ccaName;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"fuadsahmawi"},"content":"        /* Case: find tags of person in address book -\u003e 1 persons found */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":148,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + tags.get(0).tagName;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"fuadsahmawi"},"content":"        /* Case: find tags of person in address book -\u003e 1 persons found */"},{"lineNumber":153,"author":{"gitID":"fuadsahmawi"},"content":"        tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":154,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" t/ \" + tags.get(0).tagName;"},{"lineNumber":155,"author":{"gitID":"fuadsahmawi"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":163,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel\";"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":170,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":193,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":27,"-":192}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getBirthday(), actualCard.getBirthday());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getUnitNumber(), actualCard.getUnitNumber());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getLevelOfFriendship(), actualCard.getLevelOfFriendship());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getCcas(), actualCard.getCcas());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        expectedCard.getTags().forEach(tag -\u003e assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                actualCard.getTagStyleClasses(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getBirthday().value, actualCard.getBirthday());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertLevelOfFriendshipEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getUnitNumber().value, actualCard.getUnitNumber());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        List\u003cString\u003e ccaInArrayList \u003d expectedPerson.getCcas().stream().map(cca -\u003e cca.ccaName)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(getCcasInString(ccaInArrayList), actualCard.getCcas());"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"        assertEquals(\"Meet Date: \" + expectedPerson.getMeetDate().value, actualCard.getMeetDate());"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        switch (tagName) {"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        case \"classmates\":"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        case \"owesMoney\":"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"            return \"teal\";"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        case \"colleagues\":"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        case \"neighbours\":"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        case \"bff\":"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"            return \"yellow\";"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        case \"family\":"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        case \"friend\":"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        case \"closefriend\":"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            return \"orange\";"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        case \"friends\":"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        case \"classmate\":"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"            return \"brown\";"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        case \"RA\":"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"            return \"pink\";"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        case \"husband\":"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        case \"cousin\":"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"            return \"purple\";"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        case \"boyfriend\":"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"            return \"green\";"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        case \"schoolmate\":"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"            return \"blue\";"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        case \"exgirlfriend\":"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        case \"malafriend\":"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"            return \"red\";"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        default:"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"            return \"\";"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"     * color."},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"     * Asserts that the level of friendship in {@code actualCard} matches all the tags in {@code expectedPerson} with"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"     * the correct symbol."},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    private static void assertLevelOfFriendshipEqual(Person expectedPerson,"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"                                                PersonCardHandle actualCard) {"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"        String expectedLevelOfFriendship \u003d expectedPerson.getLevelOfFriendship().value;"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        int levelOfFriendshipInIntegerForm \u003d Integer.parseInt((expectedLevelOfFriendship));"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"        String levelOfFriendshipSymbol \u003d \"\";"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        for (int i \u003d 0; i \u003c levelOfFriendshipInIntegerForm; i++) {"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"            levelOfFriendshipSymbol \u003d levelOfFriendshipSymbol + \u0027\\u2665\u0027 + \" \";"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(levelOfFriendshipSymbol, actualCard.getLevelOfFriendship());"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"     * Changing @param ccaInArrayList into a CCA string in desired format"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"     * @return ccaInString"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"    public static String getCcasInString(List\u003cString\u003e ccaInArrayList) {"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"        String ccaInString \u003d \"\";"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"        for (String temp : ccaInArrayList) {"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":"            temp \u003d \"[\" + temp + \"] \";"},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"            ccaInString \u003d ccaInString + temp;"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"        return ccaInString.trim();"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"-":75,"deborahlow97":102}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"        String defaultConfigAsString \u003d \"App title : CollegeZone\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":31}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.GoalUtil.getGoalCompletion;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.GOAL_C;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBookBuilder()"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"            .withGoal(GOAL_C).build());"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    private static final int INITIAL_GOAL_COMPLETION \u003d 0;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_GOAL_COMPLETION);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_GOAL_COMPLETION);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"                \"Goal \" + INITIAL_GOAL_COMPLETION + \"% completed.\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"                \"Goal \" + getGoalCompletion(EVENT_STUB.data.getGoalList())"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"                        + \"% completed.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"     * sync status matches that of {@code expectedSyncStatus}, and the goal completion status"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"     * matches that of {@code expectedGoalCompletionStatus}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"                                        String expectedGoalCompletionStatus) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedGoalCompletionStatus, statusBarFooterHandle.getGoalCompletedStatus());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":68,"deborahlow97":19}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"        assertNotNull(AppUtil.getImage(\"/images/college_zone.jpeg\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"deborahlow97":1}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedCca;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_BIRTHDAY \u003d \"24/05/1997\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_LEVEL_OF_FRIENDSHIP \u003d \"10\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_UNIT_NUMBER \u003d \"#10-10\";"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"    private static final String VALID_MEETDATE \u003d \"\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedCca\u003e VALID_CCAS \u003d Collections.singletonList(new XmlAdaptedCca(\"dance\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":87,"author":{"gitID":"A0158738X"},"content":"                null, VALID_PHONE, VALID_BIRTHDAY, VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                VALID_CCAS, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":97,"author":{"gitID":"A0158738X"},"content":"                VALID_NAME, INVALID_PHONE, VALID_BIRTHDAY, VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                VALID_CCAS, VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":"                VALID_NAME, VALID_PHONE, VALID_BIRTHDAY, VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                VALID_CCAS, VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build())"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                        .withCca(\"Ballet\").withTag(\"Friends\").build());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":4,"-":150}},{"path":"src/test/java/seedu/address/logic/parser/SeekRaCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SeekRaCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumberContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"public class SeekRaCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    private SeekRaCommandParser parser \u003d new SeekRaCommandParser();"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SeekRaCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"    public void parse_validArgs_returnsSeekRaCommand() {"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand expectedSeekRaCommand \u003d"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"                new SeekRaCommand(new UnitNumberContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\", \"RA\")));"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"        assertParseSuccess(parser, \" Alice Bob\", expectedSeekRaCommand);"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"        assertParseSuccess(parser, \" Alice  Bob \", expectedSeekRaCommand);"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":22,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/ThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"public class ThemeCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    private ThemeCommandParser parser \u003d new ThemeCommandParser();"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public void parse_validArgs_returnsThemeCommand() {"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, \"light\", new ThemeCommand(\"light\"));"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public void parser_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"                ThemeCommand.MESSAGE_INVALID_THEME_COLOUR));"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"                ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":24}},{"path":"src/test/java/seedu/address/logic/parser/SortGoalCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_SORT_FIELD_DESC_A;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_SORT_FIELD_DESC_B;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_SORT_ORDER_DESC_A;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_SORT_ORDER_DESC_B;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.INVALID_GOAL_SORT_FIELD;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.INVALID_GOAL_SORT_ORDER;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_SORT_FIELD_B;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_SORT_ORDER_B;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.SortGoalCommand;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"public class SortGoalCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    private SortGoalCommandParser parser \u003d new SortGoalCommandParser();"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        // whitespace only preamble"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GOAL_SORT_FIELD_DESC_B + GOAL_SORT_ORDER_DESC_B,"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"                new SortGoalCommand(VALID_GOAL_SORT_FIELD_B, VALID_GOAL_SORT_ORDER_B));"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        // multiple goal sort fields - last sort goal field accepted"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, GOAL_SORT_FIELD_DESC_A + GOAL_SORT_FIELD_DESC_B + GOAL_SORT_ORDER_DESC_B,"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"                new SortGoalCommand(VALID_GOAL_SORT_FIELD_B, VALID_GOAL_SORT_ORDER_B));"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        // multiple goal sort order - last sort goal order accepted"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, GOAL_SORT_FIELD_DESC_B + GOAL_SORT_ORDER_DESC_A + GOAL_SORT_ORDER_DESC_B,"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"                new SortGoalCommand(VALID_GOAL_SORT_FIELD_B, VALID_GOAL_SORT_ORDER_B));"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortGoalCommand.MESSAGE_USAGE);"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        // missing sort goal field prefix"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, GOAL_SORT_ORDER_DESC_B, expectedMessage);"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        // missing sort goal order prefix"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, GOAL_SORT_FIELD_DESC_B, expectedMessage);"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortGoalCommand.MESSAGE_USAGE);"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        // invalid sort goal field"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, INVALID_GOAL_SORT_FIELD + GOAL_SORT_ORDER_DESC_B,"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"                expectedMessage);"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        // invalid sort goal order"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, INVALID_GOAL_SORT_ORDER + GOAL_SORT_FIELD_DESC_B,"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"                expectedMessage);"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        // non-empty preamble"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GOAL_SORT_ORDER_DESC_B + GOAL_SORT_FIELD_DESC_B,"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"                expectedMessage);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":1,"deborahlow97":66}},{"path":"src/test/java/seedu/address/logic/parser/DeleteGoalCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.DeleteGoalCommand;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" * outside of the DeleteGoalCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":" * same path through the DeleteGoalCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"public class DeleteGoalCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    private DeleteGoalCommandParser parser \u003d new DeleteGoalCommandParser();"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void parse_validArgs_returnsDeleteGoalCommand() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, \"1\", new DeleteGoalCommand(INDEX_FIRST_GOAL));"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"                DeleteGoalCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":29}},{"path":"src/test/java/seedu/address/logic/parser/MeetCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"content":"//@@author sham-sheer"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"public class MeetCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"    private MeetCommandParser parser \u003d new MeetCommandParser();"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"    private final String nonEmptyDate \u003d \"15/03/2018\";"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"    public void parse_indexSpecified_success() throws Exception {"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"        //have a date"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DATE.toString() + nonEmptyDate;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"        MeetCommand expectedCommand \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(nonEmptyDate));"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"    public void parse_missingCompulsoryField_failure() throws Exception {"},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"        // no parameters"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"        assertParseFailure(parser, MeetCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"        // no index"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"        assertParseFailure(parser, MeetCommand.COMMAND_WORD + \" \" + nonEmptyDate, expectedMessage);"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":38,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/ShowLofCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.ShowLofCommand;"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.model.person.LofContainsValuePredicate;"},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"public class ShowLofCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    private ShowLofCommandParser parser \u003d new ShowLofCommandParser();"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLofCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"    public void parse_validArgs_returnsShowLofCommand() {"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"        ShowLofCommand expectedShowLofCommand \u003d"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"                new ShowLofCommand(new LofContainsValuePredicate(Arrays.asList(\"1\", \"2\")));"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"        assertParseSuccess(parser, \" 1 2\", expectedShowLofCommand);"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"        // multiple whitespaces between index values"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"        assertParseSuccess(parser, \" 1  2 \", expectedShowLofCommand);"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":26,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/DateTimeParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import java.time.Month;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"public class DateTimeParserTest {"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    private static final Optional\u003cLocalDateTime\u003e nonEmptyLocalDateTime;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    private static final Optional\u003cLocalDateTime\u003e emptyLocalDateTime;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    static {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        nonEmptyLocalDateTime \u003d Optional.of(LocalDateTime"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"            .of(2018, Month.JANUARY, 1, 15, 0, 0));"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        emptyLocalDateTime \u003d Optional.empty();"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        Optional\u003cLocalDateTime\u003e dateTimeParse \u003d nattyDateAndTimeParser(\"1/1/2018 3pm\");"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        LocalDateTime aLocalDateTime \u003d LocalDateTime.of(2018, Month.JANUARY, 1, 15, 0,"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"                0);"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(dateTimeParse, nonEmptyLocalDateTime);"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidFormatArgs_failure() {"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        Optional\u003cLocalDateTime\u003e dateTimeParse \u003d nattyDateAndTimeParser(\"1/1/20183pm\");"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertNotEquals(dateTimeParse, nonEmptyLocalDateTime);"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidArgs_returnsNull() {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        Optional\u003cLocalDateTime\u003e dateTimeParse \u003d nattyDateAndTimeParser(\"!@!(KJEw\");"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(dateTimeParse, emptyLocalDateTime);"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":44}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseFailure(parser, \"     \", String.format(FindCommand.MESSAGE_NOT_EDITED));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseSuccess(parser, \" n/ Alice Bob t/\", expectedFindCommand);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseSuccess(parser, \" \\n n/ Alice \\n \\t Bob t/ \\t\", expectedFindCommand);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":3,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/AddGoalCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_IMPORTANCE_DESC_A;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_IMPORTANCE_DESC_B;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_TEXT_DESC_A;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_TEXT_DESC_B;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.INVALID_GOAL_TEXT_DESC;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.INVALID_IMPORTANCE_DESC;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_COMPLETION_B;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_END_DATE_TIME_STRING_B;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_B;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_START_DATE_TIME_STRING_B;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_TEXT_B;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.AddGoalCommand;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommandParserTest {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    private AddGoalCommandParser parser \u003d new AddGoalCommandParser();"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        Goal expectedGoal \u003d new GoalBuilder().withCompletion(VALID_GOAL_COMPLETION_B).withGoalText(VALID_GOAL_TEXT_B)"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                .withStartDateTime(VALID_GOAL_START_DATE_TIME_STRING_B).withImportance(VALID_GOAL_IMPORTANCE_B)"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_B).build();"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        // whitespace only preamble"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GOAL_IMPORTANCE_DESC_B + GOAL_TEXT_DESC_B,"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"                new AddGoalCommand(expectedGoal));"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        // multiple goal importances - last goal importance accepted"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, GOAL_IMPORTANCE_DESC_A + GOAL_IMPORTANCE_DESC_B + GOAL_TEXT_DESC_B,"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"                new AddGoalCommand(expectedGoal));"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        // multiple goal texts - last goal text accepted"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, GOAL_IMPORTANCE_DESC_B + GOAL_TEXT_DESC_A + GOAL_TEXT_DESC_B,"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"                new AddGoalCommand(expectedGoal));"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGoalCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        // missing goal importance prefix"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, GOAL_TEXT_DESC_B, expectedMessage);"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        // missing goal text prefix"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, GOAL_IMPORTANCE_DESC_B, expectedMessage);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        // invalid goal importance"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, INVALID_IMPORTANCE_DESC + GOAL_TEXT_DESC_B,"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"                Importance.MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        // invalid goal text"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, INVALID_GOAL_TEXT_DESC + GOAL_IMPORTANCE_DESC_B,"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"                GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        // non-empty preamble"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GOAL_TEXT_DESC_B + GOAL_IMPORTANCE_DESC_B,"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGoalCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":75}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SORT_BIRTHDAY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SORT_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SORT_MEET_DATE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddGoalCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CompleteGoalCommand;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand.CompleteGoalDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteGoalCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteMeetCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditGoalCommand;"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand.EditGoalDescriptor;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand.OngoingGoalDescriptor;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortGoalCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":52,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.CompleteGoalDescriptorBuilder;"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.EditGoalDescriptorBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalUtil;"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.OngoingGoalDescriptorBuilder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"                AddCommand.COMMAND_ALIAS + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"A0158738X"},"content":"    public void parseCommand_meet() throws Exception {"},{"lineNumber":121,"author":{"gitID":"A0158738X"},"content":"        final String date \u003d \"14/10/2018\";"},{"lineNumber":122,"author":{"gitID":"A0158738X"},"content":"        MeetCommand command  \u003d (MeetCommand) parser.parseCommand(MeetCommand.COMMAND_WORD + \" \""},{"lineNumber":123,"author":{"gitID":"A0158738X"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_DATE + date);"},{"lineNumber":124,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new MeetCommand(INDEX_FIRST_PERSON, new Meet(date)), command);"},{"lineNumber":125,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseCommand_meetAlias() throws Exception {"},{"lineNumber":129,"author":{"gitID":"A0158738X"},"content":"        final String date \u003d \"14/10/2018\";"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        MeetCommand command  \u003d (MeetCommand) parser.parseCommand(MeetCommand.COMMAND_ALIAS + \" \""},{"lineNumber":131,"author":{"gitID":"A0158738X"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_DATE + date);"},{"lineNumber":132,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new MeetCommand(INDEX_FIRST_PERSON, new Meet(date)), command);"},{"lineNumber":133,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":140,"author":{"gitID":"fuadsahmawi"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":141,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":155,"author":{"gitID":"fuadsahmawi"},"content":"            FindCommand.COMMAND_ALIAS + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")) + \" t/ \");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":163,"author":{"gitID":"fuadsahmawi"},"content":"            FindCommand.COMMAND_ALIAS + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")) + \" t/ \");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":188,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":189,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":207,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":208,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":209,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":214,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":221,"author":{"gitID":"fuadsahmawi"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":233,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":239,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":257,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":258,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_addGoal_returnsTrue() throws Exception {"},{"lineNumber":260,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":261,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand command \u003d (AddGoalCommand) parser.parseCommand(GoalUtil.getAddGoalCommand(goal));"},{"lineNumber":262,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new AddGoalCommand(goal), command);"},{"lineNumber":263,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":265,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_addGoalAliasOne_returnsTrue() throws Exception {"},{"lineNumber":267,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":268,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand command \u003d (AddGoalCommand) parser.parseCommand("},{"lineNumber":269,"author":{"gitID":"deborahlow97"},"content":"                AddGoalCommand.COMMAND_ALIAS_1 + \" \" + GoalUtil.getGoalDetails(goal));"},{"lineNumber":270,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new AddGoalCommand(goal), command);"},{"lineNumber":271,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":273,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_addGoalAliasTwo_returnsTrue() throws Exception {"},{"lineNumber":275,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":276,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand command \u003d (AddGoalCommand) parser.parseCommand("},{"lineNumber":277,"author":{"gitID":"deborahlow97"},"content":"                AddGoalCommand.COMMAND_ALIAS_2 + \" \" + GoalUtil.getGoalDetails(goal));"},{"lineNumber":278,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new AddGoalCommand(goal), command);"},{"lineNumber":279,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":281,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_editGoal_returnsTrue() throws Exception {"},{"lineNumber":283,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":284,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder(goal).build();"},{"lineNumber":285,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand command \u003d (EditGoalCommand) parser.parseCommand(EditGoalCommand.COMMAND_WORD + \" \""},{"lineNumber":286,"author":{"gitID":"deborahlow97"},"content":"                + INDEX_FIRST_GOAL.getOneBased() + \" \" + GoalUtil.getGoalDetails(goal));"},{"lineNumber":287,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new EditGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":288,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":290,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":291,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_editGoalAliasOne_returnsTrue() throws Exception {"},{"lineNumber":292,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":293,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder(goal).build();"},{"lineNumber":294,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand command \u003d (EditGoalCommand) parser.parseCommand(EditGoalCommand.COMMAND_ALIAS_1 + \" \""},{"lineNumber":295,"author":{"gitID":"deborahlow97"},"content":"                + INDEX_FIRST_GOAL.getOneBased() + \" \" + GoalUtil.getGoalDetails(goal));"},{"lineNumber":296,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new EditGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":297,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":299,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":300,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_editGoalAliasTwo_returnsTrue() throws Exception {"},{"lineNumber":301,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":302,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder(goal).build();"},{"lineNumber":303,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand command \u003d (EditGoalCommand) parser.parseCommand(EditGoalCommand.COMMAND_ALIAS_2 + \" \""},{"lineNumber":304,"author":{"gitID":"deborahlow97"},"content":"                + INDEX_FIRST_GOAL.getOneBased() + \" \" + GoalUtil.getGoalDetails(goal));"},{"lineNumber":305,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new EditGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":306,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":308,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":309,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_deleteGoal_returnsTrue() throws Exception {"},{"lineNumber":310,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand command \u003d (DeleteGoalCommand) parser.parseCommand("},{"lineNumber":311,"author":{"gitID":"deborahlow97"},"content":"                DeleteGoalCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":312,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new DeleteGoalCommand(INDEX_FIRST_GOAL), command);"},{"lineNumber":313,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":315,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":316,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_deleteGoalAliasOne_returnsTrue() throws Exception {"},{"lineNumber":317,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand command \u003d (DeleteGoalCommand) parser.parseCommand("},{"lineNumber":318,"author":{"gitID":"deborahlow97"},"content":"                DeleteGoalCommand.COMMAND_ALIAS_1 + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":319,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new DeleteGoalCommand(INDEX_FIRST_GOAL), command);"},{"lineNumber":320,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":322,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_deleteGoalAliasTwo_returnsTrue() throws Exception {"},{"lineNumber":324,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand command \u003d (DeleteGoalCommand) parser.parseCommand("},{"lineNumber":325,"author":{"gitID":"deborahlow97"},"content":"                DeleteGoalCommand.COMMAND_ALIAS_2 + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":326,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new DeleteGoalCommand(INDEX_FIRST_GOAL), command);"},{"lineNumber":327,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":329,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":330,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_completeGoal_returnsTrue() throws Exception {"},{"lineNumber":331,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":332,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder(goal).build();"},{"lineNumber":333,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand command \u003d (CompleteGoalCommand) parser.parseCommand("},{"lineNumber":334,"author":{"gitID":"deborahlow97"},"content":"                CompleteGoalCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":335,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new CompleteGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":336,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":338,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":339,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_completeGoalAliasOne_returnsTrue() throws Exception {"},{"lineNumber":340,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":341,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder(goal).build();"},{"lineNumber":342,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand command \u003d (CompleteGoalCommand) parser.parseCommand("},{"lineNumber":343,"author":{"gitID":"deborahlow97"},"content":"                CompleteGoalCommand.COMMAND_ALIAS_1 + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":344,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new CompleteGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":345,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":347,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":348,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_completeGoalAliasTwo_returnsTrue() throws Exception {"},{"lineNumber":349,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":350,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder(goal).build();"},{"lineNumber":351,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand command \u003d (CompleteGoalCommand) parser.parseCommand("},{"lineNumber":352,"author":{"gitID":"deborahlow97"},"content":"                CompleteGoalCommand.COMMAND_ALIAS_2 + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":353,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new CompleteGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":354,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":356,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":357,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_theme_returnsTrue() throws Exception {"},{"lineNumber":358,"author":{"gitID":"deborahlow97"},"content":"        ThemeCommand command \u003d (ThemeCommand) parser.parseCommand(ThemeCommand.COMMAND_WORD + \" \" + \"dark\");"},{"lineNumber":359,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new ThemeCommand(\"dark\"), command);"},{"lineNumber":360,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":362,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":363,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_themeAlias_returnsTrue() throws Exception {"},{"lineNumber":364,"author":{"gitID":"deborahlow97"},"content":"        ThemeCommand command \u003d (ThemeCommand) parser.parseCommand(ThemeCommand.COMMAND_ALIAS + \" \" + \"light\");"},{"lineNumber":365,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new ThemeCommand(\"light\"), command);"},{"lineNumber":366,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":368,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":369,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_sortGoal_returnsTrue() throws Exception {"},{"lineNumber":370,"author":{"gitID":"deborahlow97"},"content":"        SortGoalCommand command \u003d (SortGoalCommand) parser.parseCommand("},{"lineNumber":371,"author":{"gitID":"deborahlow97"},"content":"                SortGoalCommand.COMMAND_WORD + \" \" + \"f/importance\" + \" \" + \"o/ascending\");"},{"lineNumber":372,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new SortGoalCommand(\"importance\", \"ascending\"), command);"},{"lineNumber":373,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":375,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":376,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_sortGoalAlias_returnsTrue() throws Exception {"},{"lineNumber":377,"author":{"gitID":"deborahlow97"},"content":"        SortGoalCommand command \u003d (SortGoalCommand) parser.parseCommand("},{"lineNumber":378,"author":{"gitID":"deborahlow97"},"content":"                SortGoalCommand.COMMAND_ALIAS + \" \" + \"f/completion\" + \" \" + \"o/ascending\");"},{"lineNumber":379,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new SortGoalCommand(\"completion\", \"ascending\"), command);"},{"lineNumber":380,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":381,"author":{"gitID":"deborahlow97"},"content":"        command \u003d (SortGoalCommand) parser.parseCommand("},{"lineNumber":382,"author":{"gitID":"deborahlow97"},"content":"                SortGoalCommand.COMMAND_ALIAS + \" \" + \"f/startdatetime\" + \" \" + \"o/ascending\");"},{"lineNumber":383,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new SortGoalCommand(\"startdatetime\", \"ascending\"), command);"},{"lineNumber":384,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":385,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":386,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":387,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_sortCommand_returnsTrue() throws Exception {"},{"lineNumber":388,"author":{"gitID":"deborahlow97"},"content":"        SortCommand command \u003d (SortCommand) parser.parseCommand("},{"lineNumber":389,"author":{"gitID":"deborahlow97"},"content":"                SortCommand.COMMAND_WORD + \" \" + 1);"},{"lineNumber":390,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new SortCommand(INDEX_SORT_LEVEL_OF_FRIENDSHIP), command);"},{"lineNumber":391,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":392,"author":{"gitID":"deborahlow97"},"content":"        command \u003d (SortCommand) parser.parseCommand("},{"lineNumber":393,"author":{"gitID":"deborahlow97"},"content":"                SortCommand.COMMAND_WORD + \" \" + 2);"},{"lineNumber":394,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new SortCommand(INDEX_SORT_MEET_DATE), command);"},{"lineNumber":395,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":396,"author":{"gitID":"deborahlow97"},"content":"        command \u003d (SortCommand) parser.parseCommand("},{"lineNumber":397,"author":{"gitID":"deborahlow97"},"content":"                SortCommand.COMMAND_WORD + \" \" + 3);"},{"lineNumber":398,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new SortCommand(INDEX_SORT_BIRTHDAY), command);"},{"lineNumber":399,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":400,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":401,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":402,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_deleteMeetCommand_returnsTrue() throws Exception {"},{"lineNumber":403,"author":{"gitID":"deborahlow97"},"content":"        DeleteMeetCommand command \u003d (DeleteMeetCommand) parser.parseCommand("},{"lineNumber":404,"author":{"gitID":"deborahlow97"},"content":"                DeleteMeetCommand.COMMAND_WORD + \" \" + 1"},{"lineNumber":405,"author":{"gitID":"deborahlow97"},"content":"        );"},{"lineNumber":406,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new DeleteMeetCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":407,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":408,"author":{"gitID":"deborahlow97"},"content":"        command \u003d (DeleteMeetCommand) parser.parseCommand("},{"lineNumber":409,"author":{"gitID":"deborahlow97"},"content":"                DeleteMeetCommand.COMMAND_ALIAS + \" \" + 1"},{"lineNumber":410,"author":{"gitID":"deborahlow97"},"content":"        );"},{"lineNumber":411,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new DeleteMeetCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":412,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":413,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":414,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":415,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_ongoingGoal_returnsTrue() throws Exception {"},{"lineNumber":416,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":417,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor descriptor \u003d new OngoingGoalDescriptorBuilder(goal).build();"},{"lineNumber":418,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand command \u003d (OngoingGoalCommand) parser.parseCommand("},{"lineNumber":419,"author":{"gitID":"deborahlow97"},"content":"                OngoingGoalCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":420,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new OngoingGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":421,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":422,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":423,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":424,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_ongoingGoalAliasOne_returnsTrue() throws Exception {"},{"lineNumber":425,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":426,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor descriptor \u003d new OngoingGoalDescriptorBuilder(goal).build();"},{"lineNumber":427,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand command \u003d (OngoingGoalCommand) parser.parseCommand("},{"lineNumber":428,"author":{"gitID":"deborahlow97"},"content":"                OngoingGoalCommand.COMMAND_ALIAS_1 + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":429,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new OngoingGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":430,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":431,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":432,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":433,"author":{"gitID":"deborahlow97"},"content":"    public void parseCommand_ongoingGoalAliasTwo_returnsTrue() throws Exception {"},{"lineNumber":434,"author":{"gitID":"deborahlow97"},"content":"        Goal goal \u003d new GoalBuilder().build();"},{"lineNumber":435,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor descriptor \u003d new OngoingGoalDescriptorBuilder(goal).build();"},{"lineNumber":436,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand command \u003d (OngoingGoalCommand) parser.parseCommand("},{"lineNumber":437,"author":{"gitID":"deborahlow97"},"content":"                OngoingGoalCommand.COMMAND_ALIAS_2 + \" \" + INDEX_FIRST_GOAL.getOneBased());"},{"lineNumber":438,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(new OngoingGoalCommand(INDEX_FIRST_GOAL, descriptor), command);"},{"lineNumber":439,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":440,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":16,"fuadsahmawi":37,"-":192,"deborahlow97":195}},{"path":"src/test/java/seedu/address/logic/parser/AddReminderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.INVALID_REMINDER_TEXT_DESC;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.REMINDER_END_DATE_TIME_DESC_A;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.REMINDER_END_DATE_TIME_DESC_B;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.REMINDER_START_DATE_TIME_DESC_A;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.REMINDER_START_DATE_TIME_DESC_B;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.REMINDER_TEXT_DESC_B;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"public class AddReminderCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    private AddReminderCommandParser parser \u003d new AddReminderCommandParser();"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        // missing end date time prefix"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseFailure(parser, REMINDER_TEXT_DESC_B + REMINDER_START_DATE_TIME_DESC_B, expectedMessage);"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        // missing reminder text prefix"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseFailure(parser, REMINDER_START_DATE_TIME_DESC_B + REMINDER_END_DATE_TIME_DESC_B,"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"                expectedMessage);"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        // missing start date time prefix"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseFailure(parser, REMINDER_TEXT_DESC_B + REMINDER_END_DATE_TIME_DESC_B,"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"                expectedMessage);"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        // invalid goal text"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseFailure(parser, INVALID_REMINDER_TEXT_DESC + REMINDER_START_DATE_TIME_DESC_A"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"                + REMINDER_END_DATE_TIME_DESC_A,"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"                String.format(MESSAGE_INVALID_DATE_FORMAT, AddReminderCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        // non-empty preamble"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + REMINDER_TEXT_DESC_B + REMINDER_START_DATE_TIME_DESC_B"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"                + REMINDER_END_DATE_TIME_DESC_B,"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":46,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/DeleteMeetCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.DeleteMeetCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"content":"//@@author sham-sheer"},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class DeleteMeetCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private DeleteMeetCommandParser parser \u003d new DeleteMeetCommandParser();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteMeetCommand() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteMeetCommand(INDEX_FIRST_PERSON));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":1,"-":32}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"24 maya 1997\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_LEVEL_OF_FRIENDSHIP \u003d \"A\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_UNIT_NUMBER \u003d \" \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_CCA \u003d \"!345hockey\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    private static final String INVALID_SORT_GOAL_FIELD \u003d \"field\";"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private static final String INVALID_SORT_GOAL_ORDER \u003d \"order\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_BIRTHDAY \u003d \"12/03/1992\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_LEVEL_OF_FRIENDSHIP \u003d \"1\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_UNIT_NUMBER \u003d \"#04-33\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_CCA_1 \u003d \"scouts\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_CCA_2 \u003d \"aerobics\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_SORT_GOAL_FIELD \u003d \"completion\";"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_SORT_GOAL_ORDER \u003d \"descending\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"    public void parseBirthday_null_throwsNullPointerException() {"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((Optional\u003cString\u003e) null));"},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"    public void parseBirthday_invalidValue_throwsIllegalValueException() {"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY));"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseBirthday(Optional.of(INVALID_BIRTHDAY)));"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"    public void parseBirthday_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(ParserUtil.parseBirthday(Optional.empty()).isPresent());"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"    public void parseBirthday_validValueWithoutWhitespace_returnsBirthday() throws Exception {"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(expectedBirthday), ParserUtil.parseBirthday(Optional.of(VALID_BIRTHDAY)));"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"    public void parseBirthday_validValueWithWhitespace_returnsTrimmedBirthday() throws Exception {"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"        String birthdayWithWhitespace \u003d WHITESPACE + VALID_BIRTHDAY + WHITESPACE;"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(birthdayWithWhitespace));"},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(expectedBirthday), ParserUtil.parseBirthday(Optional.of(birthdayWithWhitespace)));"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"    public void parseLevelOfFriendship_null_throwsNullPointerException() {"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLevelOfFriendship((String) null));"},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"                .parseLevelOfFriendship((Optional\u003cString\u003e) null));"},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"    public void parseLevelOfFriendship_invalidValue_throwsIllegalValueException() {"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":"                .parseLevelOfFriendship(INVALID_LEVEL_OF_FRIENDSHIP));"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":189,"author":{"gitID":"deborahlow97"},"content":"                .parseLevelOfFriendship(Optional.of(INVALID_LEVEL_OF_FRIENDSHIP)));"},{"lineNumber":190,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":192,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"deborahlow97"},"content":"    public void parseLevelOfFriendship_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":194,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(ParserUtil.parseLevelOfFriendship(Optional.empty()).isPresent());"},{"lineNumber":195,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":197,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"deborahlow97"},"content":"    public void parseLevelOfFriendship_validValueWithoutWhitespace_returnsLevelOfFriendship() throws Exception {"},{"lineNumber":199,"author":{"gitID":"deborahlow97"},"content":"        LevelOfFriendship expectedLevelOfFriendship \u003d new LevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP);"},{"lineNumber":200,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedLevelOfFriendship, ParserUtil.parseLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP));"},{"lineNumber":201,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(expectedLevelOfFriendship), ParserUtil"},{"lineNumber":202,"author":{"gitID":"deborahlow97"},"content":"                .parseLevelOfFriendship(Optional.of(VALID_LEVEL_OF_FRIENDSHIP)));"},{"lineNumber":203,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":205,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"deborahlow97"},"content":"    public void parseLevelOfFriendship_validValueWithWhitespace_returnsTrimmedLevelOfFriendship() throws Exception {"},{"lineNumber":207,"author":{"gitID":"deborahlow97"},"content":"        String levelOfFriendshipWithWhitespace \u003d WHITESPACE + VALID_LEVEL_OF_FRIENDSHIP + WHITESPACE;"},{"lineNumber":208,"author":{"gitID":"deborahlow97"},"content":"        LevelOfFriendship expectedLevelOfFriendship \u003d new LevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP);"},{"lineNumber":209,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedLevelOfFriendship, ParserUtil.parseLevelOfFriendship(levelOfFriendshipWithWhitespace));"},{"lineNumber":210,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(expectedLevelOfFriendship), ParserUtil"},{"lineNumber":211,"author":{"gitID":"deborahlow97"},"content":"                .parseLevelOfFriendship(Optional.of(levelOfFriendshipWithWhitespace)));"},{"lineNumber":212,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":214,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"deborahlow97"},"content":"    public void parseUnitNumber_null_throwsNullPointerException() {"},{"lineNumber":216,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUnitNumber((String) null));"},{"lineNumber":217,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUnitNumber((Optional\u003cString\u003e) null));"},{"lineNumber":218,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":220,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"deborahlow97"},"content":"    public void parseUnitNumber_invalidValue_throwsIllegalValueException() {"},{"lineNumber":222,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUnitNumber(INVALID_UNIT_NUMBER));"},{"lineNumber":223,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":224,"author":{"gitID":"deborahlow97"},"content":"                .parseUnitNumber(Optional.of(INVALID_UNIT_NUMBER)));"},{"lineNumber":225,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":227,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"deborahlow97"},"content":"    public void parseUnitNumber_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":229,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(ParserUtil.parseUnitNumber(Optional.empty()).isPresent());"},{"lineNumber":230,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":232,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"deborahlow97"},"content":"    public void parseUnitNumber_validValueWithoutWhitespace_returnsUnitNumber() throws Exception {"},{"lineNumber":234,"author":{"gitID":"deborahlow97"},"content":"        UnitNumber expectedUnitNumber \u003d new UnitNumber(VALID_UNIT_NUMBER);"},{"lineNumber":235,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedUnitNumber, ParserUtil.parseUnitNumber(VALID_UNIT_NUMBER));"},{"lineNumber":236,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(expectedUnitNumber), ParserUtil.parseUnitNumber(Optional.of(VALID_UNIT_NUMBER)));"},{"lineNumber":237,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":239,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"deborahlow97"},"content":"    public void parseUnitNumber_validValueWithWhitespace_returnsTrimmedUnitNumber() throws Exception {"},{"lineNumber":241,"author":{"gitID":"deborahlow97"},"content":"        String unitNumberWithWhitespace \u003d WHITESPACE + VALID_UNIT_NUMBER + WHITESPACE;"},{"lineNumber":242,"author":{"gitID":"deborahlow97"},"content":"        UnitNumber expectedUnitNumber \u003d new UnitNumber(VALID_UNIT_NUMBER);"},{"lineNumber":243,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedUnitNumber, ParserUtil.parseUnitNumber(unitNumberWithWhitespace));"},{"lineNumber":244,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(expectedUnitNumber), ParserUtil.parseUnitNumber(Optional"},{"lineNumber":245,"author":{"gitID":"deborahlow97"},"content":"                .of(unitNumberWithWhitespace)));"},{"lineNumber":246,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":248,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"deborahlow97"},"content":"    public void parseCca_null_throwsNullPointerException() throws Exception {"},{"lineNumber":250,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":251,"author":{"gitID":"deborahlow97"},"content":"        ParserUtil.parseCca(null);"},{"lineNumber":252,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":254,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"deborahlow97"},"content":"    public void parseCca_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":256,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":257,"author":{"gitID":"deborahlow97"},"content":"        ParserUtil.parseCca(INVALID_CCA);"},{"lineNumber":258,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":260,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"deborahlow97"},"content":"    public void parseCca_validValueWithoutWhitespace_returnsCca() throws Exception {"},{"lineNumber":262,"author":{"gitID":"deborahlow97"},"content":"        Cca expectedCca \u003d new Cca(VALID_CCA_1);"},{"lineNumber":263,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedCca, ParserUtil.parseCca(VALID_CCA_1));"},{"lineNumber":264,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":266,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"deborahlow97"},"content":"    public void parseCca_validValueWithWhitespace_returnsTrimmedCca() throws Exception {"},{"lineNumber":268,"author":{"gitID":"deborahlow97"},"content":"        String ccaWithWhitespace \u003d WHITESPACE + VALID_CCA_1 + WHITESPACE;"},{"lineNumber":269,"author":{"gitID":"deborahlow97"},"content":"        Cca expectedCca \u003d new Cca(VALID_CCA_1);"},{"lineNumber":270,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedCca, ParserUtil.parseCca(ccaWithWhitespace));"},{"lineNumber":271,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":273,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"deborahlow97"},"content":"    public void parseCcas_null_throwsNullPointerException() throws Exception {"},{"lineNumber":275,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":276,"author":{"gitID":"deborahlow97"},"content":"        ParserUtil.parseCcas(null);"},{"lineNumber":277,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":279,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"deborahlow97"},"content":"    public void parseCcas_collectionWithInvalidCcas_throwsIllegalValueException() throws Exception {"},{"lineNumber":281,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":282,"author":{"gitID":"deborahlow97"},"content":"        ParserUtil.parseCcas(Arrays.asList(VALID_CCA_1, INVALID_CCA));"},{"lineNumber":283,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":285,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"deborahlow97"},"content":"    public void parseCcas_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":287,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(ParserUtil.parseCcas(Collections.emptyList()).isEmpty());"},{"lineNumber":288,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":290,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":291,"author":{"gitID":"deborahlow97"},"content":"    public void parseCcas_collectionWithValidCcas_returnsCcaSet() throws Exception {"},{"lineNumber":292,"author":{"gitID":"deborahlow97"},"content":"        Set\u003cCca\u003e actualCcaSet \u003d ParserUtil.parseCcas(Arrays.asList(VALID_CCA_1, VALID_CCA_2));"},{"lineNumber":293,"author":{"gitID":"deborahlow97"},"content":"        Set\u003cCca\u003e expectedCcaSet \u003d new HashSet\u003cCca\u003e(Arrays.asList(new Cca(VALID_CCA_1), new Cca(VALID_CCA_2)));"},{"lineNumber":294,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":295,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedCcaSet, actualCcaSet);"},{"lineNumber":296,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":298,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":299,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalField_null_throwsNullPointerException() {"},{"lineNumber":300,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSortGoalField((String) null));"},{"lineNumber":301,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSortGoalField((Optional\u003cString\u003e) null));"},{"lineNumber":302,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":304,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":305,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalField_invalidValue_throwsIllegalValueException() {"},{"lineNumber":306,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSortGoalField(INVALID_SORT_GOAL_FIELD));"},{"lineNumber":307,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSortGoalField(Optional"},{"lineNumber":308,"author":{"gitID":"deborahlow97"},"content":"                .of(INVALID_SORT_GOAL_FIELD)));"},{"lineNumber":309,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":311,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":312,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalField_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":313,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(ParserUtil.parseSortGoalField(Optional.empty()).isPresent());"},{"lineNumber":314,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":316,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":317,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalField_validValueWithoutWhitespace_returnsGoalFieldString() throws Exception {"},{"lineNumber":318,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(VALID_SORT_GOAL_FIELD, ParserUtil.parseSortGoalField(VALID_SORT_GOAL_FIELD));"},{"lineNumber":319,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(VALID_SORT_GOAL_FIELD), ParserUtil.parseSortGoalField(Optional"},{"lineNumber":320,"author":{"gitID":"deborahlow97"},"content":"                .of(VALID_SORT_GOAL_FIELD)));"},{"lineNumber":321,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":323,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":324,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalField_validValueWithWhitespace_returnsTrimmedGoalFieldString() throws Exception {"},{"lineNumber":325,"author":{"gitID":"deborahlow97"},"content":"        String goalFieldWithWhitespace \u003d WHITESPACE + VALID_SORT_GOAL_FIELD + WHITESPACE;"},{"lineNumber":326,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(VALID_SORT_GOAL_FIELD, ParserUtil.parseSortGoalField(goalFieldWithWhitespace));"},{"lineNumber":327,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(VALID_SORT_GOAL_FIELD), ParserUtil.parseSortGoalField(Optional"},{"lineNumber":328,"author":{"gitID":"deborahlow97"},"content":"                .of(goalFieldWithWhitespace)));"},{"lineNumber":329,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":331,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":332,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalOrder_null_throwsNullPointerException() {"},{"lineNumber":333,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSortGoalOrder((String) null));"},{"lineNumber":334,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSortGoalOrder((Optional\u003cString\u003e) null));"},{"lineNumber":335,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":337,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":338,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalOrder_invalidValue_throwsIllegalValueException() {"},{"lineNumber":339,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSortGoalOrder(INVALID_SORT_GOAL_ORDER));"},{"lineNumber":340,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSortGoalOrder(Optional"},{"lineNumber":341,"author":{"gitID":"deborahlow97"},"content":"                .of(INVALID_SORT_GOAL_ORDER)));"},{"lineNumber":342,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":344,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":345,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalOrder_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":346,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(ParserUtil.parseSortGoalOrder(Optional.empty()).isPresent());"},{"lineNumber":347,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":349,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":350,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalOrder_validValueWithoutWhitespace_returnsGoalOrderString() throws Exception {"},{"lineNumber":351,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(VALID_SORT_GOAL_ORDER, ParserUtil.parseSortGoalOrder(VALID_SORT_GOAL_ORDER));"},{"lineNumber":352,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(VALID_SORT_GOAL_ORDER), ParserUtil.parseSortGoalOrder(Optional"},{"lineNumber":353,"author":{"gitID":"deborahlow97"},"content":"                .of(VALID_SORT_GOAL_ORDER)));"},{"lineNumber":354,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":356,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":357,"author":{"gitID":"deborahlow97"},"content":"    public void parseSortGoalOrder_validValueWithWhitespace_returnsTrimmedGoalOrderString() throws Exception {"},{"lineNumber":358,"author":{"gitID":"deborahlow97"},"content":"        String goalOrderWithWhitespace \u003d WHITESPACE + VALID_SORT_GOAL_ORDER + WHITESPACE;"},{"lineNumber":359,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(VALID_SORT_GOAL_ORDER, ParserUtil.parseSortGoalOrder(goalOrderWithWhitespace));"},{"lineNumber":360,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Optional.of(VALID_SORT_GOAL_ORDER), ParserUtil.parseSortGoalOrder(Optional"},{"lineNumber":361,"author":{"gitID":"deborahlow97"},"content":"                .of(goalOrderWithWhitespace)));"},{"lineNumber":362,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":377,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":390,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":391,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":392,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":393,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":396,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":397,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":398,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":399,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":402,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":403,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":408,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":412,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":189,"deborahlow97":224}},{"path":"src/test/java/seedu/address/logic/parser/EditGoalCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_IMPORTANCE_DESC_A;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_IMPORTANCE_DESC_B;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_TEXT_DESC_A;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.GOAL_TEXT_DESC_B;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.INVALID_GOAL_TEXT_DESC;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.INVALID_IMPORTANCE_DESC;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_A;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_B;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_TEXT_A;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_TEXT_B;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOAL;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_GOAL;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand.EditGoalDescriptor;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.EditGoalDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"public class EditGoalCommandParserTest {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGoalCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    private EditGoalCommandParser parser \u003d new EditGoalCommandParser();"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        // no index specified"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, VALID_GOAL_TEXT_A, MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        // no field specified"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\", EditGoalCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        // no index and no field specified"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        // negative index"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"-5\" + GOAL_TEXT_DESC_A, MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        // zero index"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"0\" + GOAL_TEXT_DESC_A, MESSAGE_INVALID_FORMAT);"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        // invalid importance"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_IMPORTANCE_DESC, Importance.MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        // invalid importance followed by valid goal text"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_IMPORTANCE_DESC + GOAL_TEXT_DESC_B,"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"                Importance.MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        // valid goal text followed by invalid importance."},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\" + GOAL_TEXT_DESC_B + INVALID_IMPORTANCE_DESC,"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"                Importance.MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        // invalid goal text"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\" + GOAL_IMPORTANCE_DESC_B + INVALID_GOAL_TEXT_DESC,"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"                GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        // valid importance followed by invalid goal text."},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_GOAL_TEXT_DESC + GOAL_IMPORTANCE_DESC_A,"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"                GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        // invalid importance followed by invalid goal text. Last invalid value is captured"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"1\" + INVALID_IMPORTANCE_DESC + INVALID_GOAL_TEXT_DESC,"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"                GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        Index targetIndex \u003d INDEX_SECOND_GOAL;"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        String userInput \u003d targetIndex.getOneBased() + GOAL_TEXT_DESC_A + GOAL_IMPORTANCE_DESC_B;"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withGoalText(VALID_GOAL_TEXT_A)"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"                .withImportance(VALID_GOAL_IMPORTANCE_B).build();"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand expectedCommand \u003d new EditGoalCommand(targetIndex, descriptor);"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"        // goal text"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        Index targetIndex \u003d INDEX_THIRD_GOAL;"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        String userInput \u003d targetIndex.getOneBased() + GOAL_TEXT_DESC_A;"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withGoalText(VALID_GOAL_TEXT_A).build();"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand expectedCommand \u003d new EditGoalCommand(targetIndex, descriptor);"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"        // importance"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        userInput \u003d targetIndex.getOneBased() + GOAL_IMPORTANCE_DESC_A;"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new EditGoalDescriptorBuilder().withImportance(VALID_GOAL_IMPORTANCE_A).build();"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        expectedCommand \u003d new EditGoalCommand(targetIndex, descriptor);"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"        Index targetIndex \u003d INDEX_FIRST_GOAL;"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"        String userInput \u003d targetIndex.getOneBased() + GOAL_TEXT_DESC_A + GOAL_IMPORTANCE_DESC_A"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"                + GOAL_TEXT_DESC_B + GOAL_IMPORTANCE_DESC_B;"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withImportance(VALID_GOAL_IMPORTANCE_B)"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"                .withGoalText(VALID_GOAL_TEXT_B).build();"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand expectedCommand \u003d new EditGoalCommand(targetIndex, descriptor);"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"    /*"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidValueFollowedByValidValue_fail() {"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"        // no other valid values specified"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"        Index targetIndex \u003d INDEX_FIRST_GOAL;"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_IMPORTANCE_DESC + GOAL_TEXT_DESC_B;"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withGoalText(VALID_GOAL_TEXT_B).build();"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand expectedCommand \u003d new EditGoalCommand(targetIndex, descriptor);"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"    }*/"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":141}},{"path":"src/test/java/seedu/address/logic/commands/ThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.ThemeCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.events.ui.ThemeSwitchRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"public class ThemeCommandTest {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_THEME \u003d \"dark\";"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public void execute_themeSwitch_success() {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        CommandResult result \u003d new ThemeCommand(VALID_THEME).execute();"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ThemeSwitchRequestEvent);"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":2,"deborahlow97":27}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d CollegeZone - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"By: `Team T09-B2` Â Â Â Â  Since: `Mar 2018` Â Â Â Â  Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"fuadsahmawi"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `CalendarPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"deborahlow97"},"content":"image::ModelComponentCollegeZone.PNG[width\u003d\"1100\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"deborahlow97"},"content":"image::StorageComponentCollegeZone.PNG[width\u003d\"900\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"deborahlow97"},"content":".Structure of Logic Command"},{"lineNumber":242,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":247,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"----"},{"lineNumber":249,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"},{"lineNumber":255,"author":{"gitID":"-"},"content":"----"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"deborahlow97"},"content":".Initial UndoRedoStack"},{"lineNumber":282,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"deborahlow97"},"content":".UndoRedoStack given new command input"},{"lineNumber":287,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":290,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"deborahlow97"},"content":".Undo command on UndoRedoStack"},{"lineNumber":297,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":300,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"deborahlow97"},"content":".Sequence diagram for `undo`"},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":310,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"deborahlow97"},"content":".UndoRedoStack given command `clear`"},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"deborahlow97"},"content":".UndoRedoStack given command `list`"},{"lineNumber":320,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"deborahlow97"},"content":".Activity diagram of UndoRedoStack"},{"lineNumber":325,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":334,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"deborahlow97"},"content":"* **Alternative 1 (current choice):** Saves the entire CollegeZone."},{"lineNumber":341,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"deborahlow97"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the CollegeZone (`add`, `clear`, `edit`)."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":356,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":364,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":367,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"deborahlow97"},"content":"// tag::logging[]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":383,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":389,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":390,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"deborahlow97"},"content":"// end::logging[]"},{"lineNumber":393,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Enhanced Find Command [Since v1.1]"},{"lineNumber":400,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":401,"author":{"gitID":"fuadsahmawi"},"content":"The old find command feature only allows searching by name. To make CollegeZone more useful for RC4 students, we have enhanced the find"},{"lineNumber":402,"author":{"gitID":"fuadsahmawi"},"content":"command feature to be able to find persons by tags."},{"lineNumber":403,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":404,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d\u003d Aspect: User Input"},{"lineNumber":405,"author":{"gitID":"fuadsahmawi"},"content":"* Old user input format: find \u003cname\u003e"},{"lineNumber":406,"author":{"gitID":"fuadsahmawi"},"content":"* New user input format: find n/\u003cname\u003e t/\u003ctag\u003e"},{"lineNumber":407,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":408,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d\u003d Aspect: Nature of user input"},{"lineNumber":409,"author":{"gitID":"fuadsahmawi"},"content":"* Searching of name and tag at the same time is not allowed"},{"lineNumber":410,"author":{"gitID":"fuadsahmawi"},"content":"* If user is searching by name, user input should be: find n/\u003cname\u003e t/\u003cempty\u003e"},{"lineNumber":411,"author":{"gitID":"fuadsahmawi"},"content":"* If user is searching by tags, user input should be: find n/\u003cempty\u003e t/\u003ctag\u003e"},{"lineNumber":412,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":413,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Command Aliases [Since v1.1]"},{"lineNumber":414,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":415,"author":{"gitID":"deborahlow97"},"content":"CollegeZone users may now use shortcuts to perform desired tasks. These shortcuts are shown in the table below."},{"lineNumber":416,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":417,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"[width\u003d\"90%\",cols\u003d\"20%,\u003c25%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":419,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":420,"author":{"gitID":"fuadsahmawi"},"content":"|Command | Original| Alias"},{"lineNumber":421,"author":{"gitID":"fuadsahmawi"},"content":"|Add"},{"lineNumber":422,"author":{"gitID":"fuadsahmawi"},"content":"|add"},{"lineNumber":423,"author":{"gitID":"fuadsahmawi"},"content":"|a"},{"lineNumber":424,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":425,"author":{"gitID":"fuadsahmawi"},"content":"|Clear"},{"lineNumber":426,"author":{"gitID":"fuadsahmawi"},"content":"|clear"},{"lineNumber":427,"author":{"gitID":"fuadsahmawi"},"content":"|c"},{"lineNumber":428,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":429,"author":{"gitID":"fuadsahmawi"},"content":"|Delete"},{"lineNumber":430,"author":{"gitID":"fuadsahmawi"},"content":"|delete"},{"lineNumber":431,"author":{"gitID":"fuadsahmawi"},"content":"|d"},{"lineNumber":432,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":433,"author":{"gitID":"fuadsahmawi"},"content":"|Edit"},{"lineNumber":434,"author":{"gitID":"fuadsahmawi"},"content":"|edit"},{"lineNumber":435,"author":{"gitID":"fuadsahmawi"},"content":"|e"},{"lineNumber":436,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":437,"author":{"gitID":"fuadsahmawi"},"content":"|Find"},{"lineNumber":438,"author":{"gitID":"fuadsahmawi"},"content":"|find"},{"lineNumber":439,"author":{"gitID":"fuadsahmawi"},"content":"|f"},{"lineNumber":440,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":441,"author":{"gitID":"fuadsahmawi"},"content":"|History"},{"lineNumber":442,"author":{"gitID":"fuadsahmawi"},"content":"|history"},{"lineNumber":443,"author":{"gitID":"fuadsahmawi"},"content":"|h"},{"lineNumber":444,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":445,"author":{"gitID":"fuadsahmawi"},"content":"|List"},{"lineNumber":446,"author":{"gitID":"fuadsahmawi"},"content":"|list"},{"lineNumber":447,"author":{"gitID":"fuadsahmawi"},"content":"|l"},{"lineNumber":448,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":449,"author":{"gitID":"zuweitrack"},"content":"|Rate"},{"lineNumber":450,"author":{"gitID":"zuweitrack"},"content":"|rate"},{"lineNumber":451,"author":{"gitID":"zuweitrack"},"content":"|rt"},{"lineNumber":452,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":453,"author":{"gitID":"fuadsahmawi"},"content":"|Redo"},{"lineNumber":454,"author":{"gitID":"fuadsahmawi"},"content":"|redo"},{"lineNumber":455,"author":{"gitID":"fuadsahmawi"},"content":"|r"},{"lineNumber":456,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":457,"author":{"gitID":"zuweitrack"},"content":"|Seek"},{"lineNumber":458,"author":{"gitID":"zuweitrack"},"content":"|seek"},{"lineNumber":459,"author":{"gitID":"zuweitrack"},"content":"|sk"},{"lineNumber":460,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":461,"author":{"gitID":"fuadsahmawi"},"content":"|Select"},{"lineNumber":462,"author":{"gitID":"fuadsahmawi"},"content":"|select"},{"lineNumber":463,"author":{"gitID":"fuadsahmawi"},"content":"|s"},{"lineNumber":464,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":465,"author":{"gitID":"zuweitrack"},"content":"|Show"},{"lineNumber":466,"author":{"gitID":"zuweitrack"},"content":"|show"},{"lineNumber":467,"author":{"gitID":"zuweitrack"},"content":"|sh"},{"lineNumber":468,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":469,"author":{"gitID":"fuadsahmawi"},"content":"|Undo"},{"lineNumber":470,"author":{"gitID":"fuadsahmawi"},"content":"|undo"},{"lineNumber":471,"author":{"gitID":"fuadsahmawi"},"content":"|u"},{"lineNumber":472,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":473,"author":{"gitID":"A0158738X"},"content":"|Meet"},{"lineNumber":474,"author":{"gitID":"A0158738X"},"content":"|meet"},{"lineNumber":475,"author":{"gitID":"A0158738X"},"content":"|m"},{"lineNumber":476,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":477,"author":{"gitID":"fuadsahmawi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":478,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":479,"author":{"gitID":"fuadsahmawi"},"content":"//end::find[]"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"deborahlow97"},"content":"// tag::addandedit[]"},{"lineNumber":482,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Targeted add and edit command [Since v1.2]"},{"lineNumber":483,"author":{"gitID":"deborahlow97"},"content":"As CollegeZone is designed for NUS RC4 students to use, being able to record other students Level of Friendship,"},{"lineNumber":484,"author":{"gitID":"deborahlow97"},"content":" Birthday, RC4 Unit Number and RC4 CCAs, will be a useful feature for them."},{"lineNumber":485,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":486,"author":{"gitID":"deborahlow97"},"content":"As CollegeZone is catered toward NUS RC4 Residents, we have changed the attributes of a Person to hold: +"},{"lineNumber":487,"author":{"gitID":"A0158738X"},"content":"*Name, Mobile Number, Birthday, Level of Friendship, RC4 Unit Number, Meet up dates with RC4 students, RC4 CCAs and Tags*. +"},{"lineNumber":488,"author":{"gitID":"deborahlow97"},"content":"This is done by removing unwanted attributes of a person and adding new attributes of a person. +"},{"lineNumber":489,"author":{"gitID":"deborahlow97"},"content":"The figure below shows the new atrributes for student in the class diagram."},{"lineNumber":490,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":491,"author":{"gitID":"deborahlow97"},"content":".Class diagram for Student"},{"lineNumber":492,"author":{"gitID":"deborahlow97"},"content":"image::RC4ModelComponenetClass.JPG[width\u003d\"800\"]"},{"lineNumber":493,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":495,"author":{"gitID":"deborahlow97"},"content":"*Aspect*: Displaying level of friendship in `CollegeZone` UI."},{"lineNumber":496,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":497,"author":{"gitID":"deborahlow97"},"content":"*Alternative 1(current choice)*: `Level of Friendship` is displayed as a string of heart symbols. +"},{"lineNumber":498,"author":{"gitID":"deborahlow97"},"content":"*Pros*: Looks fanciful to user. +"},{"lineNumber":499,"author":{"gitID":"deborahlow97"},"content":"*Cons*: Might not be intuitive for the user to understand the meaning of heart symbols."},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"deborahlow97"},"content":"*Alternative 2*: `Level of Friendship` is displayed as a number. + +"},{"lineNumber":502,"author":{"gitID":"deborahlow97"},"content":"*Pros*: User easily understands the meaning of it. +"},{"lineNumber":503,"author":{"gitID":"deborahlow97"},"content":"*Cons*: Less eye catching to the user."},{"lineNumber":504,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":505,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":506,"author":{"gitID":"deborahlow97"},"content":"// end::addandedit[]"},{"lineNumber":507,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":508,"author":{"gitID":"fuadsahmawi"},"content":"// tag::reminder[]"},{"lineNumber":509,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Reminders [Since v1.4]"},{"lineNumber":510,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":511,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d\u003d Introduction +"},{"lineNumber":512,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":513,"author":{"gitID":"fuadsahmawi"},"content":"RC4 students will have a very busy schedule that consists of tasks, events \u0026 activities. +"},{"lineNumber":514,"author":{"gitID":"fuadsahmawi"},"content":"Hence, we decided on implementing a reminder feature to allow them to add \u0026 delete reminders in CollegeZone to assist them in organising their schedule. +"},{"lineNumber":515,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":516,"author":{"gitID":"fuadsahmawi"},"content":"The `AddReminderCommand` allows you to add a `Reminder` into CollegeZone and is stored in an ArrayList, `UniqueReminderList`, in `AddressBook`."},{"lineNumber":517,"author":{"gitID":"fuadsahmawi"},"content":"The `DeleteReminderCommand` allows you to delete a `Reminder` from CollegeZone."},{"lineNumber":518,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":519,"author":{"gitID":"fuadsahmawi"},"content":"Reminder commands are undoable and redoable for the benefit users to redo and undo a command they did or did not intend to change. +"},{"lineNumber":520,"author":{"gitID":"fuadsahmawi"},"content":"Hence, both `AddReminderCommand` and `DeleteReminderCommand` are implemented as `UndoableCommand`."},{"lineNumber":521,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":522,"author":{"gitID":"fuadsahmawi"},"content":"*Reminder Features:* +"},{"lineNumber":523,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":524,"author":{"gitID":"fuadsahmawi"},"content":"* Adding a reminder to the Calendar: The `AddReminderCommand` allows you to add a `Reminder` into CollegeZone and is stored in an ArrayList, `UniqueReminderList`, in `AddressBook`."},{"lineNumber":525,"author":{"gitID":"fuadsahmawi"},"content":"* Deleting a reminder on the Calendar: The `DeleteReminderCommand` allows you to delete a `Reminder` from `UniqueReminderList`, in `AddressBook`."},{"lineNumber":526,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"Reminder commands are undoable and redoable for the benefit users to redo and undo a command they did or did not intend to change."},{"lineNumber":528,"author":{"gitID":"fuadsahmawi"},"content":"Hence, both `AddReminderCommand` and `DeleteReminderCommand` are implemented as `UndoableCommand`."},{"lineNumber":529,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":530,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d\u003d Implementation +"},{"lineNumber":531,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":532,"author":{"gitID":"fuadsahmawi"},"content":"*Model Component* +"},{"lineNumber":533,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":534,"author":{"gitID":"fuadsahmawi"},"content":"* Reminder Class"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"fuadsahmawi"},"content":"Every time a `Reminder` is created, three other objects are also created: +"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"fuadsahmawi"},"content":"1. `ReminderText`: This object contains a single string variable, `reminderText`, that is verified to contain characters and spaces and cannot be blank.  +"},{"lineNumber":539,"author":{"gitID":"fuadsahmawi"},"content":"2. `DateTime`: This object contains a single string variable, `dateTime`. After obtaining the start date time from user input, it will parse through `nattyDateAndTimeParser` to convert it to a `LocalDateTime`"},{"lineNumber":540,"author":{"gitID":"fuadsahmawi"},"content":"variable. Subsequently, this `LocalDateTime` variable will then be converted back to a string variable using `properReminderDateTimeFormat` and it stored as `dateTime` in `DateTime` object. +"},{"lineNumber":541,"author":{"gitID":"fuadsahmawi"},"content":"3. `EndDateTime`: This object contains a single string variable, `dateTime`. After obtaining the end date time from user input, it will parse through `nattyDateAndTimeParser` to convert it to a `LocalDateTime`"},{"lineNumber":542,"author":{"gitID":"fuadsahmawi"},"content":"                  variable. Subsequently, this `LocalDateTime` variable will then be converted back to a string variable using `properReminderDateTimeFormat` and it stored as `dateTime` in `DateTime` object."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"fuadsahmawi"},"content":"A `Reminder` will be marked with a *blue* circle if it\u0027s not due and be marked with a *red* circle if it\u0027s due. +"},{"lineNumber":545,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":546,"author":{"gitID":"fuadsahmawi"},"content":"Users can delete reminders on the Calendar if its already due or when they accidentally made a mistake. +"},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"fuadsahmawi"},"content":"._Class Diagram of Reminder_"},{"lineNumber":549,"author":{"gitID":"fuadsahmawi"},"content":"image::ReminderClassDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":550,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":551,"author":{"gitID":"fuadsahmawi"},"content":"* UniqueReminderList +"},{"lineNumber":552,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":553,"author":{"gitID":"fuadsahmawi"},"content":"`UniqueReminderList` functions as a List of `Reminders` where every element is unique and is defined by its `ReminderText`,"},{"lineNumber":554,"author":{"gitID":"fuadsahmawi"},"content":"`DateTime` and `EndDateTime`."},{"lineNumber":555,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":556,"author":{"gitID":"fuadsahmawi"},"content":"*Logic Component* +"},{"lineNumber":557,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":558,"author":{"gitID":"fuadsahmawi"},"content":"* Adding a Reminder +"},{"lineNumber":559,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":560,"author":{"gitID":"fuadsahmawi"},"content":"When `AddReminderCommand` is executed, it first checks whether there are any duplicate reminders in `UniqueReminderList`. If there is no duplicate reminder,"},{"lineNumber":561,"author":{"gitID":"fuadsahmawi"},"content":"`Reminder` is added into `UniqueReminderList` in `AddressBook`."},{"lineNumber":562,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":563,"author":{"gitID":"fuadsahmawi"},"content":".Interactions Inside the Logic Component for the `+r text/eat pills d/tmr 8pm e/tmr 10pm` Command"},{"lineNumber":564,"author":{"gitID":"fuadsahmawi"},"content":"image::addReminderSeqDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":565,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":566,"author":{"gitID":"fuadsahmawi"},"content":"* Deleting a Reminder +"},{"lineNumber":567,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":568,"author":{"gitID":"fuadsahmawi"},"content":"When `DeleteReminderCommand` is executed, it will find the `Reminder` specified by the user using parameters `ReminderText` and `DateTime`. If `Reminder` specified by user"},{"lineNumber":569,"author":{"gitID":"fuadsahmawi"},"content":"is not found in `UniqueReminderList`, `CommandException` will be thrown. If `Reminder` is found, it will then be removed from `UniqueReminderList`. The code snippet to find and remove the `Reminder`"},{"lineNumber":570,"author":{"gitID":"fuadsahmawi"},"content":"specified by user is shown below. Code snippet of this is shown in Code Snippet 3.9.1."},{"lineNumber":571,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":572,"author":{"gitID":"fuadsahmawi"},"content":".Interactions Inside the Logic Component for the `-r text/eat pills d/tmr 8pm` Command"},{"lineNumber":573,"author":{"gitID":"fuadsahmawi"},"content":"image::delReminderSeqDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":574,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":575,"author":{"gitID":"fuadsahmawi"},"content":"[source,java]"},{"lineNumber":576,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":577,"author":{"gitID":"fuadsahmawi"},"content":"@Override"},{"lineNumber":578,"author":{"gitID":"fuadsahmawi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":579,"author":{"gitID":"fuadsahmawi"},"content":"        model.updateFilteredReminderList(predicate);"},{"lineNumber":580,"author":{"gitID":"fuadsahmawi"},"content":"        List\u003cReminder\u003e lastShownList \u003d model.getFilteredReminderList();"},{"lineNumber":581,"author":{"gitID":"fuadsahmawi"},"content":"        targetIndex \u003d Index.fromOneBased(1);"},{"lineNumber":582,"author":{"gitID":"fuadsahmawi"},"content":"        if (lastShownList.size() \u003e 1) {"},{"lineNumber":583,"author":{"gitID":"fuadsahmawi"},"content":"            for (Reminder reminder : lastShownList) {"},{"lineNumber":584,"author":{"gitID":"fuadsahmawi"},"content":"                if (reminder.getDateTime().toString().equals(dateTime)) {"},{"lineNumber":585,"author":{"gitID":"fuadsahmawi"},"content":"                    reminderToDelete \u003d reminder;"},{"lineNumber":586,"author":{"gitID":"fuadsahmawi"},"content":"                }"},{"lineNumber":587,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":588,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":589,"author":{"gitID":"fuadsahmawi"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":590,"author":{"gitID":"fuadsahmawi"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_TEXT_DATE);"},{"lineNumber":591,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":592,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":593,"author":{"gitID":"fuadsahmawi"},"content":"            reminderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":594,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":595,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":596,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":597,"author":{"gitID":"fuadsahmawi"},"content":".Code Snippet 3.9.1: Method to find specific Reminder to delete"},{"lineNumber":598,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":599,"author":{"gitID":"fuadsahmawi"},"content":"*User Interface(Syncing Calendar to Reminders)* +"},{"lineNumber":600,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":601,"author":{"gitID":"fuadsahmawi"},"content":"To display the reminder in the calendar, we have a `CalendarPanel` that takes in the `UniqueReminderList`."},{"lineNumber":602,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":603,"author":{"gitID":"fuadsahmawi"},"content":"[source,java]"},{"lineNumber":604,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":605,"author":{"gitID":"fuadsahmawi"},"content":"    public CalendarPanel(ObservableList\u003cReminder\u003e reminderList, ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":606,"author":{"gitID":"fuadsahmawi"},"content":"        super(FXML);"},{"lineNumber":607,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":608,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderList \u003d reminderList;"},{"lineNumber":609,"author":{"gitID":"fuadsahmawi"},"content":"        this.personList \u003d personList;"},{"lineNumber":610,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":611,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":612,"author":{"gitID":"fuadsahmawi"},"content":"        setupCalendar();"},{"lineNumber":613,"author":{"gitID":"fuadsahmawi"},"content":"        updateCalendar();"},{"lineNumber":614,"author":{"gitID":"fuadsahmawi"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":615,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":616,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":617,"author":{"gitID":"fuadsahmawi"},"content":".Code Snippet 3.9.2: Inititialisation of Calendar Panel for User Interface"},{"lineNumber":618,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":619,"author":{"gitID":"fuadsahmawi"},"content":"`UniqueReminderList` will then be iterated and each reminder in the list is individually added into the calendar through `updateCalendar()`. Every time a new reminder is added into `CollegeZone`, an event handler, `handleNewCalendarEvent`, will"},{"lineNumber":620,"author":{"gitID":"fuadsahmawi"},"content":"cause `calendarUpdate()` to run again and `CalendarPanel` will be updated to display the new reminder added onto `CollegeZone`."},{"lineNumber":621,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":622,"author":{"gitID":"fuadsahmawi"},"content":"[source,java]"},{"lineNumber":623,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":624,"author":{"gitID":"fuadsahmawi"},"content":"    @Subscribe"},{"lineNumber":625,"author":{"gitID":"fuadsahmawi"},"content":"    private void handleNewCalendarEvent(AddressBookChangedEvent event) {"},{"lineNumber":626,"author":{"gitID":"fuadsahmawi"},"content":"        reminderList \u003d event.data.getReminderList();"},{"lineNumber":627,"author":{"gitID":"fuadsahmawi"},"content":"        personList \u003d event.data.getPersonList();"},{"lineNumber":628,"author":{"gitID":"fuadsahmawi"},"content":"        Platform.runLater(this::updateCalendar);"},{"lineNumber":629,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":630,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":631,"author":{"gitID":"fuadsahmawi"},"content":".Code Snippet 3.9.3: Event Handler: handleNewCalendarEvent"},{"lineNumber":632,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":633,"author":{"gitID":"fuadsahmawi"},"content":"[source,java]"},{"lineNumber":634,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":635,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":636,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":637,"author":{"gitID":"fuadsahmawi"},"content":"     * Updates the Calendar with Reminders that are already added"},{"lineNumber":638,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":639,"author":{"gitID":"fuadsahmawi"},"content":"    private void updateCalendar() {"},{"lineNumber":640,"author":{"gitID":"fuadsahmawi"},"content":"        setDateAndTime();"},{"lineNumber":641,"author":{"gitID":"fuadsahmawi"},"content":"        CalendarSource myCalendarSource \u003d new CalendarSource(\"Reminders and Meetups\");"},{"lineNumber":642,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarRDue \u003d new Calendar(\"Reminders Already Due\");"},{"lineNumber":643,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarRNotDue \u003d new Calendar(\"Reminders Not Due\");"},{"lineNumber":644,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarM \u003d new Calendar(\"Meetups\");"},{"lineNumber":645,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRDue.setStyle(Calendar.Style.getStyle(4));"},{"lineNumber":646,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRDue.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":647,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRNotDue.setStyle(Calendar.Style.getStyle(1));"},{"lineNumber":648,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRNotDue.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":649,"author":{"gitID":"fuadsahmawi"},"content":"        calendarM.setStyle(Calendar.Style.getStyle(3));"},{"lineNumber":650,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarRDue);"},{"lineNumber":651,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarRNotDue);"},{"lineNumber":652,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarM);"},{"lineNumber":653,"author":{"gitID":"fuadsahmawi"},"content":"        for (Reminder reminder : reminderList) {"},{"lineNumber":654,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime ldtstart \u003d nattyDateAndTimeParser(reminder.getDateTime().toString()).get();"},{"lineNumber":655,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime ldtend \u003d nattyDateAndTimeParser(reminder.getEndDateTime().toString()).get();"},{"lineNumber":656,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":657,"author":{"gitID":"fuadsahmawi"},"content":"            if (now.isBefore(ldtend)) {"},{"lineNumber":658,"author":{"gitID":"fuadsahmawi"},"content":"                calendarRNotDue.addEntry(new Entry("},{"lineNumber":659,"author":{"gitID":"fuadsahmawi"},"content":"                        reminder.getReminderText().toString(), new Interval(ldtstart, ldtend)));"},{"lineNumber":660,"author":{"gitID":"fuadsahmawi"},"content":"            } else {"},{"lineNumber":661,"author":{"gitID":"fuadsahmawi"},"content":"                calendarRDue.addEntry(new Entry(reminder.getReminderText().toString(), new Interval(ldtstart, ldtend)));"},{"lineNumber":662,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":663,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":664,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.getCalendarSources().add(myCalendarSource);"},{"lineNumber":665,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":666,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":667,"author":{"gitID":"fuadsahmawi"},"content":".Code Snippet 3.9.4: _updateCalendar() method_"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"fuadsahmawi"},"content":"When a reminder is deleted, it will go through the same process as adding reminder and the changes will then be updated in the calendar."},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"fuadsahmawi"},"content":"*Aspect*: Deleting a `Reminder` from `CollegeZone`."},{"lineNumber":674,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":675,"author":{"gitID":"fuadsahmawi"},"content":"*Alternative 1*: Delete `Reminder` using an index which is the index of the particular `Reminder` in `UniqueReminderList` +"},{"lineNumber":676,"author":{"gitID":"fuadsahmawi"},"content":"*Pros*: Implementing `DeleteReminderCommand` by parsing an index will be simple as `DeleteCommand` to delete a person from `AddressBook` is using a similar implementation. +"},{"lineNumber":677,"author":{"gitID":"fuadsahmawi"},"content":"*Cons*: We will have to first implement a list function to list all reminders with their respective indexes, which may be undesirable as there may be"},{"lineNumber":678,"author":{"gitID":"fuadsahmawi"},"content":"a large number of reminders to be listed out. This will in turn require the need of a find function to find a specific reminder that the users want to delete."},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"fuadsahmawi"},"content":"*Alternative 2(current choice)*: Delete `Reminder` identified by `ReminderText` and `DateTime`. +"},{"lineNumber":681,"author":{"gitID":"fuadsahmawi"},"content":"*Pros*: Reduces the need of a listing and finding function to delete a `Reminder` from `CollegeZone`. +"},{"lineNumber":682,"author":{"gitID":"fuadsahmawi"},"content":"*Cons*: Implementation of `DeleteReminderCommand` will be more difficult as we will have to integrate a find function to pick out"},{"lineNumber":683,"author":{"gitID":"fuadsahmawi"},"content":"the specific `Reminder` that the user wants to remove."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":686,"author":{"gitID":"fuadsahmawi"},"content":"// end::reminder[]"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"deborahlow97"},"content":"// tag::Goals[]"},{"lineNumber":689,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Goal Object [Since v1.2]"},{"lineNumber":690,"author":{"gitID":"deborahlow97"},"content":"CollegeZone is designed for RC4 students to use. RC4 students often have goals that they want to achieve in life"},{"lineNumber":691,"author":{"gitID":"deborahlow97"},"content":"â€“ Career goals, health goals, social goals, relationship goals etc. This additional goal feature is created for RC4 users to add and keep track of their goals throughout their stay."},{"lineNumber":692,"author":{"gitID":"deborahlow97"},"content":"The main reason behind this implementation is because setting goals gives you *long-term vision* and *short-term motivation* for the goals."},{"lineNumber":693,"author":{"gitID":"deborahlow97"},"content":"This implementation allows RC4 students to set goals in _CollegeZone_ â€“ big or small ones - so"},{"lineNumber":694,"author":{"gitID":"deborahlow97"},"content":" that they will be reminded of the goals that they have set for themselves."},{"lineNumber":695,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":696,"author":{"gitID":"deborahlow97"},"content":"*Goal features:*"},{"lineNumber":697,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":698,"author":{"gitID":"deborahlow97"},"content":" 1. add goal"},{"lineNumber":699,"author":{"gitID":"deborahlow97"},"content":" 2. edit goal"},{"lineNumber":700,"author":{"gitID":"deborahlow97"},"content":" 3. delete goal"},{"lineNumber":701,"author":{"gitID":"deborahlow97"},"content":" 4. complete goal"},{"lineNumber":702,"author":{"gitID":"deborahlow97"},"content":" 5. ongoing goal"},{"lineNumber":703,"author":{"gitID":"deborahlow97"},"content":" 6. sort goal"},{"lineNumber":704,"author":{"gitID":"deborahlow97"},"content":"```"},{"lineNumber":705,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d Implementation of Goal Object"},{"lineNumber":706,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":707,"author":{"gitID":"deborahlow97"},"content":"*Goal objects consists of 5 attributes :* +"},{"lineNumber":708,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":709,"author":{"gitID":"deborahlow97"},"content":"1. Date and time of when goal is completed. +"},{"lineNumber":710,"author":{"gitID":"deborahlow97"},"content":"2. Level of importance of goal. +"},{"lineNumber":711,"author":{"gitID":"deborahlow97"},"content":"3. Text content of Goal. +"},{"lineNumber":712,"author":{"gitID":"deborahlow97"},"content":"4. Date and time of Goal of when goal has started. +"},{"lineNumber":713,"author":{"gitID":"deborahlow97"},"content":"5. Goal completion status."},{"lineNumber":714,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":715,"author":{"gitID":"deborahlow97"},"content":"._Class diagram of Goal_"},{"lineNumber":716,"author":{"gitID":"deborahlow97"},"content":"image::CollegeZoneGoalModelClassDiagram.JPG[width\u003d\"750\"]"},{"lineNumber":717,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":718,"author":{"gitID":"deborahlow97"},"content":"The code snippet shown below shows the overloading of StartDateTime constructor class."},{"lineNumber":719,"author":{"gitID":"deborahlow97"},"content":"It keeps both a String value and a LocalDateTime value."},{"lineNumber":720,"author":{"gitID":"deborahlow97"},"content":"The _Code-snippet 2 and 3_ shows the conversion of the String value to LocalDateTime value and vice versa."},{"lineNumber":721,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":722,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":723,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":724,"author":{"gitID":"deborahlow97"},"content":"public class StartDateTime implements Comparable\u003cStartDateTime\u003e {"},{"lineNumber":725,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":726,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":727,"author":{"gitID":"deborahlow97"},"content":"    public final LocalDateTime localDateTimeValue;"},{"lineNumber":728,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":729,"author":{"gitID":"deborahlow97"},"content":"    public StartDateTime(LocalDateTime startDateTime) {"},{"lineNumber":730,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(startDateTime);"},{"lineNumber":731,"author":{"gitID":"deborahlow97"},"content":"        this.localDateTimeValue \u003d startDateTime;"},{"lineNumber":732,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d properDateTimeFormat(startDateTime);"},{"lineNumber":733,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":734,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":735,"author":{"gitID":"deborahlow97"},"content":"    public StartDateTime(String startDateTimeInString) {"},{"lineNumber":736,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(startDateTimeInString);"},{"lineNumber":737,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d startDateTimeInString;"},{"lineNumber":738,"author":{"gitID":"deborahlow97"},"content":"        this.localDateTimeValue \u003d getLocalDateTimeFromProperDateTime(startDateTimeInString);"},{"lineNumber":739,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":740,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":741,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":742,"author":{"gitID":"deborahlow97"},"content":".Code Snippet 3.10.1: StartDateTime method"},{"lineNumber":743,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":744,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":745,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":746,"author":{"gitID":"deborahlow97"},"content":"    public static String properDateTimeFormat(LocalDateTime dateTime) {"},{"lineNumber":747,"author":{"gitID":"deborahlow97"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":748,"author":{"gitID":"deborahlow97"},"content":"        int day \u003d dateTime.getDayOfMonth();"},{"lineNumber":749,"author":{"gitID":"deborahlow97"},"content":"        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"},{"lineNumber":750,"author":{"gitID":"deborahlow97"},"content":"        int year \u003d dateTime.getYear();"},{"lineNumber":751,"author":{"gitID":"deborahlow97"},"content":"        int hour \u003d dateTime.getHour();"},{"lineNumber":752,"author":{"gitID":"deborahlow97"},"content":"        int minute \u003d dateTime.getMinute();"},{"lineNumber":753,"author":{"gitID":"deborahlow97"},"content":"        builder.append(\"Date: \")"},{"lineNumber":754,"author":{"gitID":"deborahlow97"},"content":"                .append(day)"},{"lineNumber":755,"author":{"gitID":"deborahlow97"},"content":"                .append(\" \")"},{"lineNumber":756,"author":{"gitID":"deborahlow97"},"content":"                .append(month)"},{"lineNumber":757,"author":{"gitID":"deborahlow97"},"content":"                .append(\" \")"},{"lineNumber":758,"author":{"gitID":"deborahlow97"},"content":"                .append(year)"},{"lineNumber":759,"author":{"gitID":"deborahlow97"},"content":"                .append(\",  Time: \")"},{"lineNumber":760,"author":{"gitID":"deborahlow97"},"content":"                .append(String.format(\"%02d\", hour))"},{"lineNumber":761,"author":{"gitID":"deborahlow97"},"content":"                .append(\":\")"},{"lineNumber":762,"author":{"gitID":"deborahlow97"},"content":"                .append(String.format(\"%02d\", minute));"},{"lineNumber":763,"author":{"gitID":"deborahlow97"},"content":"        return builder.toString();"},{"lineNumber":764,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":765,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":766,"author":{"gitID":"deborahlow97"},"content":".Code Snippet 3.10.2: Method conversion"},{"lineNumber":767,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":768,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":769,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":770,"author":{"gitID":"deborahlow97"},"content":"    public static LocalDateTime getLocalDateTimeFromProperDateTime(String properDateTimeString) {"},{"lineNumber":771,"author":{"gitID":"deborahlow97"},"content":"        String trimmedArgs \u003d properDateTimeString.trim();"},{"lineNumber":772,"author":{"gitID":"deborahlow97"},"content":"        int size \u003d trimmedArgs.length();"},{"lineNumber":773,"author":{"gitID":"deborahlow97"},"content":"        String stringFormat \u003d properDateTimeString.substring(BEGIN_INDEX, size);"},{"lineNumber":774,"author":{"gitID":"deborahlow97"},"content":"        stringFormat \u003d stringFormat.replace(\", Time: \", \"\");"},{"lineNumber":775,"author":{"gitID":"deborahlow97"},"content":"        return nattyDateAndTimeParser(stringFormat).get();"},{"lineNumber":776,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":777,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":778,"author":{"gitID":"deborahlow97"},"content":".Code Snippet 3.10.3: Method conversion"},{"lineNumber":779,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":780,"author":{"gitID":"deborahlow97"},"content":"- All goals will have a string of stars (indicating importance) in a yellow border directly below the goal text in the goal list panel."},{"lineNumber":781,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Representation of Goals level of importance in UI +"},{"lineNumber":786,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1 (current choice):** Each level of importance have a number of stars related to it. +"},{"lineNumber":787,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Ability for the user to differentiate the Goals with higher level of importance compared to those with lower level of importance. +"},{"lineNumber":788,"author":{"gitID":"deborahlow97"},"content":"**Cons:** The goal list in the UI might look messy to the user without having a sort Goals option as the list of goals is displayed based on when it was added. +"},{"lineNumber":789,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2:** Having an additional sort goal command +"},{"lineNumber":790,"author":{"gitID":"deborahlow97"},"content":"**Pros:** It is simple and easy to understand. +"},{"lineNumber":791,"author":{"gitID":"deborahlow97"},"content":"**Cons:** It requires extra methods to implement the sort function. +"},{"lineNumber":792,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":793,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":794,"author":{"gitID":"deborahlow97"},"content":"// end::Goals[]"},{"lineNumber":795,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":796,"author":{"gitID":"deborahlow97"},"content":"// tag::addgoal[]"},{"lineNumber":797,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Add goal mechanism [Since v1.3]"},{"lineNumber":798,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":799,"author":{"gitID":"deborahlow97"},"content":"Adding a goal into _CollegeZone_ is facilitated by `AddGoalCommand`, which extends `UndoableCommand`, it"},{"lineNumber":800,"author":{"gitID":"deborahlow97"},"content":"supports undoing and redoing of commands that modifies the state of the _CollegeZone_."},{"lineNumber":801,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":802,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":803,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":804,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommand extends UndoableCommand {"},{"lineNumber":805,"author":{"gitID":"deborahlow97"},"content":"@Override"},{"lineNumber":806,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":807,"author":{"gitID":"deborahlow97"},"content":"        // ... AddGoalCommand logic ..."},{"lineNumber":808,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":809,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":810,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":811,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":812,"author":{"gitID":"deborahlow97"},"content":"The following sequence diagram shows the flow of operation from the point _CollegeZone_ receives an input to the output of the result."},{"lineNumber":813,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":814,"author":{"gitID":"deborahlow97"},"content":"._Interactions Inside the Logic Component for the `+g` Command_"},{"lineNumber":815,"author":{"gitID":"deborahlow97"},"content":"image::AddGoalSeqDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":816,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":817,"author":{"gitID":"deborahlow97"},"content":"AddGoalCommand is implemented in this way:"},{"lineNumber":818,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":819,"author":{"gitID":"deborahlow97"},"content":"In the Logic component, `AddressBookParser` will parse the user\u0027s input and detects if add goal keyword contains correct parsing keywords after."},{"lineNumber":820,"author":{"gitID":"deborahlow97"},"content":"For example, e.g. +g text/eat healthily impt/9"},{"lineNumber":821,"author":{"gitID":"deborahlow97"},"content":"`AddGoalCommandParser` parses the input by extracting the input text and importance, +"},{"lineNumber":822,"author":{"gitID":"deborahlow97"},"content":"e.g.Parsed text : eat healthily +"},{"lineNumber":823,"author":{"gitID":"deborahlow97"},"content":"    Parsed importance : 9 +"},{"lineNumber":824,"author":{"gitID":"deborahlow97"},"content":"Everytime a goal is added, the start date time of the goal will be recorded down in real time and it\u0027s completion"},{"lineNumber":825,"author":{"gitID":"deborahlow97"},"content":"status will be \"ongoing\" by default."},{"lineNumber":826,"author":{"gitID":"deborahlow97"},"content":"`AddGoalCommandParser` is implemented in this way:"},{"lineNumber":827,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":828,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":829,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommandParser implements Parser\u003cAddGoalCommand\u003e {"},{"lineNumber":830,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":831,"author":{"gitID":"deborahlow97"},"content":"    public static final String EMPTY_END_DATE_TIME \u003d \"\";"},{"lineNumber":832,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean INITIAL_COMPLETION_STATUS \u003d false;"},{"lineNumber":833,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":834,"author":{"gitID":"deborahlow97"},"content":"    public AddGoalCommand parse(String args) throws ParseException {"},{"lineNumber":835,"author":{"gitID":"deborahlow97"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":836,"author":{"gitID":"deborahlow97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_IMPORTANCE, PREFIX_GOAL_TEXT);"},{"lineNumber":837,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":838,"author":{"gitID":"deborahlow97"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_IMPORTANCE, PREFIX_GOAL_TEXT)"},{"lineNumber":839,"author":{"gitID":"deborahlow97"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":840,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGoalCommand.MESSAGE_USAGE));"},{"lineNumber":841,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":842,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":843,"author":{"gitID":"deborahlow97"},"content":"            Importance importance \u003d ParserUtil.parseImportance(argMultimap.getValue(PREFIX_IMPORTANCE)).get();"},{"lineNumber":844,"author":{"gitID":"deborahlow97"},"content":"            GoalText goalText \u003d ParserUtil.parseGoalText(argMultimap.getValue(PREFIX_GOAL_TEXT)).get();"},{"lineNumber":845,"author":{"gitID":"deborahlow97"},"content":"            StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());"},{"lineNumber":846,"author":{"gitID":"deborahlow97"},"content":"            EndDateTime endDateTime \u003d new EndDateTime(EMPTY_END_DATE_TIME);"},{"lineNumber":847,"author":{"gitID":"deborahlow97"},"content":"            Completion completion \u003d new Completion(INITIAL_COMPLETION_STATUS);"},{"lineNumber":848,"author":{"gitID":"deborahlow97"},"content":"            Goal goal \u003d new Goal(importance, goalText, startDateTime, endDateTime, completion);"},{"lineNumber":849,"author":{"gitID":"deborahlow97"},"content":"            return new AddGoalCommand(goal);"},{"lineNumber":850,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":851,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":852,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":853,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":854,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":855,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":856,"author":{"gitID":"deborahlow97"},"content":"The `AddGoalCommandParser` returns `AddGoalCommand` after execution, passes the text and importance and string as arguments which will be further processed by `logic` component."},{"lineNumber":857,"author":{"gitID":"deborahlow97"},"content":"`AddGoalCommand` adds the new goal to the list locally and runs the execution which calls the model."},{"lineNumber":858,"author":{"gitID":"deborahlow97"},"content":"In the Model component, the `UniqueGoalList` is called and the new goal is added to the list."},{"lineNumber":859,"author":{"gitID":"deborahlow97"},"content":"In the Ui component, the new goal added is displayed in the goal list panel."},{"lineNumber":860,"author":{"gitID":"deborahlow97"},"content":"In the Storage component, the new goal added is stored in the address book storage"},{"lineNumber":861,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":862,"author":{"gitID":"deborahlow97"},"content":"Note:"},{"lineNumber":863,"author":{"gitID":"deborahlow97"},"content":"- A goal that has just been added will be placed at the bottom of the goal list. +"},{"lineNumber":864,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":866,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":867,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Implementation of adding start date time and completion status of goal +"},{"lineNumber":868,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1 (current choice):** Having the current date time as the start date time and having a default completion status of a goal added. +"},{"lineNumber":869,"author":{"gitID":"deborahlow97"},"content":"**Pros:** User have lesser words to input in the command box. +"},{"lineNumber":870,"author":{"gitID":"deborahlow97"},"content":"**Cons:** User might have a preferred start date time and completion status of the goal that they just added. +"},{"lineNumber":871,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2:** Giving user a choice of start date time input and completion status of goal added. +"},{"lineNumber":872,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Allows user to choose their own start date time and completion status. +"},{"lineNumber":873,"author":{"gitID":"deborahlow97"},"content":"**Cons:** Tedious for user to input a longer add goal command and slightly more difficult to properly parse the start date time"},{"lineNumber":874,"author":{"gitID":"deborahlow97"},"content":" that user enters."},{"lineNumber":875,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":876,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":877,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":878,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Representation of Goals in UI +"},{"lineNumber":879,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1 (current choice):** Having a goal list panel beside our current person list panel. +"},{"lineNumber":880,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Ability for the user to differentiate the Goals with higher level of importance compared to those with lower level of importance. +"},{"lineNumber":881,"author":{"gitID":"deborahlow97"},"content":"**Cons:** The initial space in UI reserved for person list is not being used to display 2 lists, the person list and the goal list. This causes the UI to look clunky and overwhelming. +"},{"lineNumber":882,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2:** Having a tab button in CollegeZone that allows user to switch between the person list panel and goal list panel. +"},{"lineNumber":883,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Ability for user to switch to person list and goal list in the UI, which makes it look more user friendly. +"},{"lineNumber":884,"author":{"gitID":"deborahlow97"},"content":"**Cons:** As CollegeZone is a desktop application that has most interactions happen using a Command Line Interface (CLI), a new command to switch tabs between goal list and person list needs to be implemented. +"},{"lineNumber":885,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":886,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":887,"author":{"gitID":"deborahlow97"},"content":"// end::addgoal[]"},{"lineNumber":888,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":889,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":890,"author":{"gitID":"deborahlow97"},"content":"// tag::deletegoal[]"},{"lineNumber":891,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Delete goal mechanism [Since v1.4]"},{"lineNumber":892,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":893,"author":{"gitID":"deborahlow97"},"content":"Deleting a goal from _CollegeZone_ is facilitated by `DeleteGoalCommand`, which extends `UndoableCommand`, it"},{"lineNumber":894,"author":{"gitID":"deborahlow97"},"content":"supports undoing and redoing of commands that modifies the state of the _CollegeZone_."},{"lineNumber":895,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":896,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":897,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":898,"author":{"gitID":"deborahlow97"},"content":"public class DeleteGoalCommand extends UndoableCommand {"},{"lineNumber":899,"author":{"gitID":"deborahlow97"},"content":"@Override"},{"lineNumber":900,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":901,"author":{"gitID":"deborahlow97"},"content":"        // ... DeleteGoalCommand logic ..."},{"lineNumber":902,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":903,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":904,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":905,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":906,"author":{"gitID":"deborahlow97"},"content":"DeleteGoalCommand is implemented in this way:"},{"lineNumber":907,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":908,"author":{"gitID":"deborahlow97"},"content":"In the Logic component, `AddressBookParser` will parse the user\u0027s input, for example, `-goal 1` and detects the `INDEX` given by the user ."},{"lineNumber":909,"author":{"gitID":"deborahlow97"},"content":"`DeleteGoalCommandParser` parses the `INDEX`: +"},{"lineNumber":910,"author":{"gitID":"deborahlow97"},"content":"e.g.Parsed index : 1 +"},{"lineNumber":911,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":912,"author":{"gitID":"deborahlow97"},"content":"._Interactions Inside the Logic Component for the `-goal` Command_"},{"lineNumber":913,"author":{"gitID":"deborahlow97"},"content":"image::DeleteGoalSeqDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":914,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":915,"author":{"gitID":"deborahlow97"},"content":"`DeleteGoalCommandParser` creates a `DeleteGoalCommand` class and passes the index as argument."},{"lineNumber":916,"author":{"gitID":"deborahlow97"},"content":"It deletes the goal corresponding to the index locally and runs the execution which calls the model"},{"lineNumber":917,"author":{"gitID":"deborahlow97"},"content":"The filtered goals list and deletion of the specified Goal object occurs. The filtered goals list is updated and retrieved."},{"lineNumber":918,"author":{"gitID":"deborahlow97"},"content":"The UI component displays the deletion of goal in the goal list panel and the storage component deletes the details of the deleted goal in the address book storage."},{"lineNumber":919,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Deciding the field for user to enter to delete the goal +"},{"lineNumber":923,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1 (current choice):** Using `INDEX` of goals in goal list panel +"},{"lineNumber":924,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Easier to implement as it\u0027s implementation is similar to deleting a student and easier for the user to type in the command as `INDEX` is an integer +"},{"lineNumber":925,"author":{"gitID":"deborahlow97"},"content":"**Cons:**  User might get confused as we have 2 list panels with `INDEX` +"},{"lineNumber":926,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2: ** Using `GOAL_TEXT` of goals in goal list panel +"},{"lineNumber":927,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Lower chance for user to use delete goal command wrongly +"},{"lineNumber":928,"author":{"gitID":"deborahlow97"},"content":"**Cons:** User have to type in a longer command"},{"lineNumber":929,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":930,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":931,"author":{"gitID":"deborahlow97"},"content":"// end::deletegoal[]"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"deborahlow97"},"content":"// tag::sortgoal[]"},{"lineNumber":934,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Sort goal mechanism [Since v1.5]"},{"lineNumber":935,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":936,"author":{"gitID":"deborahlow97"},"content":"The sorting goal mechanism is facilitated by `SortGoalCommandParser` and `SortGoalCommand`, with both classes residing"},{"lineNumber":937,"author":{"gitID":"deborahlow97"},"content":"in the `Logic` component of CollegeZone. `SortGoalCommand` in not undoable."},{"lineNumber":938,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":939,"author":{"gitID":"deborahlow97"},"content":"`SortGoalCommandParser` takes in an arguments in the form of `FIELD` and `ORDER` that defines how `UniqueGoalList`"},{"lineNumber":940,"author":{"gitID":"deborahlow97"},"content":"should be sorted. You may customise the sort goal operation, with `FIELD` specifying the goal field to sort and `ORDER`"},{"lineNumber":941,"author":{"gitID":"deborahlow97"},"content":"specifying the type of sort order. It checks for validity against a few keywords. For example, `ORDER` only accepts 2 keywords: `ascending` or `descending`."},{"lineNumber":942,"author":{"gitID":"deborahlow97"},"content":"On the other hand, `FIELD` only accepts 3 keywords: `importance`, `startdatetime` and `completion`."},{"lineNumber":943,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":944,"author":{"gitID":"deborahlow97"},"content":"The image below shows the interaction of sort the `Logic` component."},{"lineNumber":945,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":946,"author":{"gitID":"deborahlow97"},"content":".Interactions Inside the Logic Component for the `sortgoal importance o/ascending` Command"},{"lineNumber":947,"author":{"gitID":"deborahlow97"},"content":"image::SortGoalSeqDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":948,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":949,"author":{"gitID":"deborahlow97"},"content":"Upon execution of `SortGoalCommand`, a `Comparator\u003cGoal\u003e` will be initialised based on the sort type it receives."},{"lineNumber":950,"author":{"gitID":"deborahlow97"},"content":"A `sortGoal` function call will be made to `Model`, which propagates down to `UniqueGoalList`, where the sorting of the `internalList` occurs. +"},{"lineNumber":951,"author":{"gitID":"deborahlow97"},"content":"The code below shows the switch statement used to define the type of sort the user wants in the `UniqueGoalList`. +"},{"lineNumber":952,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":953,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":954,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":955,"author":{"gitID":"deborahlow97"},"content":"public class UniqueGoalList implements Iterable\u003cGoal\u003e {"},{"lineNumber":956,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":957,"author":{"gitID":"deborahlow97"},"content":"    public void sortGoal(String sortField, String sortOrder) throws EmptyGoalListException {"},{"lineNumber":958,"author":{"gitID":"deborahlow97"},"content":"        String sortFieldAndOrder \u003d sortField + \" \" + sortOrder;"},{"lineNumber":959,"author":{"gitID":"deborahlow97"},"content":"        //Comparator\u003cGoal\u003e comparatorImportance \u003d Comparator.comparingInt(Goal::getImportance);"},{"lineNumber":960,"author":{"gitID":"deborahlow97"},"content":"        switch (sortFieldAndOrder) {"},{"lineNumber":961,"author":{"gitID":"deborahlow97"},"content":"        case \"importance ascending\":"},{"lineNumber":962,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalA.getImportance()"},{"lineNumber":963,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalB.getImportance()));"},{"lineNumber":964,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":965,"author":{"gitID":"deborahlow97"},"content":"        case \"importance descending\":"},{"lineNumber":966,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalB.getImportance()"},{"lineNumber":967,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalA.getImportance()));"},{"lineNumber":968,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":969,"author":{"gitID":"deborahlow97"},"content":"        case \"completion ascending\":"},{"lineNumber":970,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003e new Boolean(goalA.getCompletion().hasCompleted)"},{"lineNumber":971,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalB.getCompletion().hasCompleted));"},{"lineNumber":972,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":973,"author":{"gitID":"deborahlow97"},"content":"        case \"completion descending\":"},{"lineNumber":974,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003e new Boolean(goalB.getCompletion().hasCompleted)"},{"lineNumber":975,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalA.getCompletion().hasCompleted));"},{"lineNumber":976,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":977,"author":{"gitID":"deborahlow97"},"content":"        case \"startdatetime ascending\":"},{"lineNumber":978,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalA.getStartDateTime()"},{"lineNumber":979,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalB.getStartDateTime()));"},{"lineNumber":980,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":981,"author":{"gitID":"deborahlow97"},"content":"        case \"startdatetime descending\":"},{"lineNumber":982,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalB.getStartDateTime()"},{"lineNumber":983,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalA.getStartDateTime()));"},{"lineNumber":984,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":985,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":986,"author":{"gitID":"deborahlow97"},"content":"        default:"},{"lineNumber":987,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":988,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":989,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":990,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":991,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":992,"author":{"gitID":"deborahlow97"},"content":"Once verified, the argument will be tokenized to identify your specified sort type. A `SortGoalCommand` object is then"},{"lineNumber":993,"author":{"gitID":"deborahlow97"},"content":"created with the identified sort type."},{"lineNumber":994,"author":{"gitID":"deborahlow97"},"content":"[NOTE]"},{"lineNumber":995,"author":{"gitID":"deborahlow97"},"content":"If the goal list is found to be empty, a `CommandException` will be thrown from `SortGoalCommand`."},{"lineNumber":996,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Deciding the fields and orders that the goal list can be sorted +"},{"lineNumber":1000,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1:** Sort only one field and in one order +"},{"lineNumber":1001,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Sort becomes a more intuitive command for user to type +"},{"lineNumber":1002,"author":{"gitID":"deborahlow97"},"content":"**Cons:** Less customization of sort goal command. +"},{"lineNumber":1003,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2 (current choice): ** Sort in multiple fields and two orders +"},{"lineNumber":1004,"author":{"gitID":"deborahlow97"},"content":"**Pros:** More customization for user +"},{"lineNumber":1005,"author":{"gitID":"deborahlow97"},"content":"**Cons:** User have to type in a longer command"},{"lineNumber":1006,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1007,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":1008,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1009,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Initialising of `Comparator\u003cGoal\u003e` +"},{"lineNumber":1010,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1:** Initialise in `SortGoalCommand` +"},{"lineNumber":1011,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Clear separation of concerns, `SortGoalCommandParser` to handle identifying of attribute to sort by only. +"},{"lineNumber":1012,"author":{"gitID":"deborahlow97"},"content":"**Cons:** Hard for new developers to follow as other commands like `AddGoalCommand` handles object creation in its parser. +"},{"lineNumber":1013,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2 (current choice): ** Initialise in `UniqueGoalList` +"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"**Pros:** Straightforward as initialises the `Comparator` where it is used. +"},{"lineNumber":1015,"author":{"gitID":"deborahlow97"},"content":"**Cons:** `UniquePersonList` is at a lower level and should only handle a minimal set of `Goal` related operations, and not logical operations like string matching. +"},{"lineNumber":1016,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1017,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":1018,"author":{"gitID":"deborahlow97"},"content":"// end::sortgoal[]"},{"lineNumber":1019,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1020,"author":{"gitID":"deborahlow97"},"content":"// tag::theme[]"},{"lineNumber":1021,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Switching theme mechanism [Since v1.5]"},{"lineNumber":1022,"author":{"gitID":"deborahlow97"},"content":"CollegeZone has multiple themes for the user to choose from. Currently, there are 3 themes implemented."},{"lineNumber":1023,"author":{"gitID":"deborahlow97"},"content":"Namely, `dark` theme, `bubblegum` theme and `light` theme. This command is not undoable."},{"lineNumber":1024,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1025,"author":{"gitID":"deborahlow97"},"content":"The switch theme mechanism is facilitated by `ThemeCommandParser` and `ThemeCommand`, with both classes residing"},{"lineNumber":1026,"author":{"gitID":"deborahlow97"},"content":"in the `Logic` component of CollegeZone. `ThemeCommand` in not undoable."},{"lineNumber":1027,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1028,"author":{"gitID":"deborahlow97"},"content":"`ThemeCommandParser` takes in an argument in the form of `THEME_COLOUR` that defines the theme colour of what CollegeZone"},{"lineNumber":1029,"author":{"gitID":"deborahlow97"},"content":"will be. You may customise the theme colour you want out of the 3 that we have. It checks for validity against a few keywords."},{"lineNumber":1030,"author":{"gitID":"deborahlow97"},"content":"`THEME_COLOUR` only accepts 3 keywords: `light`, `dark` or `bubblegum`."},{"lineNumber":1031,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1032,"author":{"gitID":"deborahlow97"},"content":"`ThemeCommandParser` returns a new `ThemeCommand` object. `ThemeCommand` then executes the new"},{"lineNumber":1033,"author":{"gitID":"deborahlow97"},"content":"event change by calling `ThemeSwitchRequestEvent`. The updating of theme colour will be"},{"lineNumber":1034,"author":{"gitID":"deborahlow97"},"content":"done by `handleChangeThemeEvent` method. +"},{"lineNumber":1035,"author":{"gitID":"deborahlow97"},"content":"The following code snippet shows how the theme switch event is handled. +"},{"lineNumber":1036,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1037,"author":{"gitID":"deborahlow97"},"content":"[source,java]"},{"lineNumber":1038,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":1039,"author":{"gitID":"deborahlow97"},"content":"@Subscribe"},{"lineNumber":1040,"author":{"gitID":"deborahlow97"},"content":"private void handleChangeThemeEvent(ThemeSwitchRequestEvent event) {"},{"lineNumber":1041,"author":{"gitID":"deborahlow97"},"content":"    themeColour \u003d event.themeToChangeTo;"},{"lineNumber":1042,"author":{"gitID":"deborahlow97"},"content":"    Platform.runLater("},{"lineNumber":1043,"author":{"gitID":"deborahlow97"},"content":"            this::changeThemeColour"},{"lineNumber":1044,"author":{"gitID":"deborahlow97"},"content":"    );"},{"lineNumber":1045,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":1046,"author":{"gitID":"deborahlow97"},"content":"----"},{"lineNumber":1047,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"deborahlow97"},"content":"**Aspect:** Storing user choice of theme +"},{"lineNumber":1051,"author":{"gitID":"deborahlow97"},"content":"**Alternative 1 (current choice):** User prefs will be set to `dark` theme colour by default +"},{"lineNumber":1052,"author":{"gitID":"deborahlow97"},"content":"**Pros:** Lesser coding required as there\u0027s no need to store theme colour as a part of the model component +"},{"lineNumber":1053,"author":{"gitID":"deborahlow97"},"content":"**Cons:** _CollegeZone_ does not remember user\u0027s preferred theme upon restarting _CollegeZone_ +"},{"lineNumber":1054,"author":{"gitID":"deborahlow97"},"content":"**Alternative 2 (current choice): ** Initialising in `UserPref`  +"},{"lineNumber":1055,"author":{"gitID":"deborahlow97"},"content":"**Pros:** _CollegeZone_ will remember user\u0027s preferred theme upon restarting _CollegeZone_  +"},{"lineNumber":1056,"author":{"gitID":"deborahlow97"},"content":"**Cons:** More coding required to store theme colour"},{"lineNumber":1057,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1058,"author":{"gitID":"deborahlow97"},"content":"---"},{"lineNumber":1059,"author":{"gitID":"deborahlow97"},"content":"// end::theme[]"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"// tag::meetCommand[]"},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Meet Command [Since v1.2]"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"The new meet up command was implemented specifically to provide a platform in CollegeZone for RC4 students to set up"},{"lineNumber":1066,"author":{"gitID":"-"},"content":"meetings with other students with ease."},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"*Meet Command Features:* +"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"The `MeetCommand` allows you to add a `MeetDate` into CollegeZone and is stored as a attribute of the `Person` class of `UniquePersonList`, in `AddressBook`."},{"lineNumber":1071,"author":{"gitID":"-"},"content":"The `DeleteMeetCommand` allows you to delete a `MeetDate` from CollegeZone. The `MeetDate` of the `Person` you deleted is set to an empty string."},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"Meet commands are undoable and redoable for the benefit of RC4 Students to redo and undo a command they did or did not intend to change. +"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"Hence, both `MeetCommand` and `DeleteMeetCommand` are implemented as `UndoableCommand`."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation +"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"*Meet Object* +"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"Every time a User sets up a meet up with someone else: +"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"1. `Meet`: This object contains a single string variable, `meetDate`, that is verified to be a valid date of the format DD/MM/YYYY. This is format is enforced to ensure user ease of usage.  +"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"2. `Person`: The Meet Attribute that is a part of the Person attribute is then updated with the relevant `meetDate` +"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"Users can delete meet ups on the Calendar if its already due or when they accidentally made a mistake. +"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"*Adding a Meet up date* +"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"When `Meet Command` is executed, it first preprocesses the data to check whether the `Person` you are meeting is a valid `Person` and also not a duplicate `Person`. If there is no `DuplicatePersonException` and `PersonNotFoundException`, then `Person`"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"class is updated with the `meetDate` in the `UniquePersonList`."},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"*Deleting a Meet up* +"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"When `DeleteMeetCommand` is executed, it will first find the `Person` specified by the user using the `Person Index` attribute. If `Person Index` specified by user"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"is not found in `UniquePersonList`, `PersonNotFoundException` will be thrown. If `Person` is found, his/her \"meetDate\" attribute will then be removed from. The code snippet to find and remove the `Meet Date`"},{"lineNumber":1096,"author":{"gitID":"fuadsahmawi"},"content":"specified by user is shown below."},{"lineNumber":1097,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1100,"author":{"gitID":"fuadsahmawi"},"content":" protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"fuadsahmawi"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"*Syncing Meet ups to Calendar* +"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"To display the meet ups in the calendar, we have a `CalendarPanel` that takes in the `UniquePersonList`."},{"lineNumber":1114,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1115,"author":{"gitID":"fuadsahmawi"},"content":"[source,java]"},{"lineNumber":1116,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":1117,"author":{"gitID":"fuadsahmawi"},"content":"    public CalendarPanel(ObservableList\u003cReminder\u003e reminderList, ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":1118,"author":{"gitID":"fuadsahmawi"},"content":"        super(FXML);"},{"lineNumber":1119,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1120,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderList \u003d reminderList;"},{"lineNumber":1121,"author":{"gitID":"fuadsahmawi"},"content":"        this.personList \u003d personList;"},{"lineNumber":1122,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1123,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":1124,"author":{"gitID":"fuadsahmawi"},"content":"        setupCalendar();"},{"lineNumber":1125,"author":{"gitID":"fuadsahmawi"},"content":"        updateCalendar();"},{"lineNumber":1126,"author":{"gitID":"fuadsahmawi"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":1127,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":1128,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"`UniquePersonList` will then be iterated and each person with a valid meet up date in the list is individually added into the calendar through `updateCalendar()`."},{"lineNumber":1130,"author":{"gitID":"-"},"content":" Every time any `Person` is updated with a new meet up date in `CollegeZone`, an event handler, `handleNewCalendarEvent`, will"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"cause `calendarUpdate()` to run again and `CalendarPanel` will be updated to display the `Person` and his `meetDate`."},{"lineNumber":1132,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1133,"author":{"gitID":"fuadsahmawi"},"content":"[source,java]"},{"lineNumber":1134,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":1135,"author":{"gitID":"fuadsahmawi"},"content":"    @Subscribe"},{"lineNumber":1136,"author":{"gitID":"fuadsahmawi"},"content":"    private void handleNewCalendarEvent(AddressBookChangedEvent event) {"},{"lineNumber":1137,"author":{"gitID":"fuadsahmawi"},"content":"        reminderList \u003d event.data.getReminderList();"},{"lineNumber":1138,"author":{"gitID":"fuadsahmawi"},"content":"        personList \u003d event.data.getPersonList();"},{"lineNumber":1139,"author":{"gitID":"fuadsahmawi"},"content":"        Platform.runLater(this::updateCalendar);"},{"lineNumber":1140,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":1141,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1142,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":1143,"author":{"gitID":"fuadsahmawi"},"content":"     * Updates the Calendar with Reminders that are already added"},{"lineNumber":1144,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":1145,"author":{"gitID":"fuadsahmawi"},"content":"    private void updateCalendar() {"},{"lineNumber":1146,"author":{"gitID":"fuadsahmawi"},"content":"        setDateAndTime();"},{"lineNumber":1147,"author":{"gitID":"fuadsahmawi"},"content":"        CalendarSource myCalendarSource \u003d new CalendarSource(\"Reminders and Meetups\");"},{"lineNumber":1148,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarRDue \u003d new Calendar(\"Reminders Already Due\");"},{"lineNumber":1149,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarRNotDue \u003d new Calendar(\"Reminders Not Due\");"},{"lineNumber":1150,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarM \u003d new Calendar(\"Meetups\");"},{"lineNumber":1151,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRDue.setStyle(Calendar.Style.getStyle(4));"},{"lineNumber":1152,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRDue.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":1153,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRNotDue.setStyle(Calendar.Style.getStyle(1));"},{"lineNumber":1154,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRNotDue.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":1155,"author":{"gitID":"fuadsahmawi"},"content":"        calendarM.setStyle(Calendar.Style.getStyle(3));"},{"lineNumber":1156,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarRDue);"},{"lineNumber":1157,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarRNotDue);"},{"lineNumber":1158,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarM);"},{"lineNumber":1159,"author":{"gitID":"fuadsahmawi"},"content":"        for (Reminder reminder : reminderList) {"},{"lineNumber":1160,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime ldtstart \u003d nattyDateAndTimeParser(reminder.getDateTime().toString()).get();"},{"lineNumber":1161,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime ldtend \u003d nattyDateAndTimeParser(reminder.getEndDateTime().toString()).get();"},{"lineNumber":1162,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":1163,"author":{"gitID":"fuadsahmawi"},"content":"            if (now.isBefore(ldtend)) {"},{"lineNumber":1164,"author":{"gitID":"fuadsahmawi"},"content":"                calendarRNotDue.addEntry(new Entry("},{"lineNumber":1165,"author":{"gitID":"fuadsahmawi"},"content":"                        reminder.getReminderText().toString(), new Interval(ldtstart, ldtend)));"},{"lineNumber":1166,"author":{"gitID":"fuadsahmawi"},"content":"            } else {"},{"lineNumber":1167,"author":{"gitID":"fuadsahmawi"},"content":"                calendarRDue.addEntry(new Entry(reminder.getReminderText().toString(), new Interval(ldtstart, ldtend)));"},{"lineNumber":1168,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":1169,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":1170,"content":"        //@@author sham-sheer"},{"lineNumber":1171,"author":{"gitID":"fuadsahmawi"},"content":"        for (Person person : personList) {"},{"lineNumber":1172,"author":{"gitID":"fuadsahmawi"},"content":"            String meetDate \u003d person.getMeetDate().toString();"},{"lineNumber":1173,"author":{"gitID":"fuadsahmawi"},"content":"            if (!meetDate.isEmpty()) {"},{"lineNumber":1174,"author":{"gitID":"fuadsahmawi"},"content":"                int day \u003d Integer.parseInt(meetDate.substring(0,"},{"lineNumber":1175,"author":{"gitID":"fuadsahmawi"},"content":"                        2));"},{"lineNumber":1176,"author":{"gitID":"fuadsahmawi"},"content":"                int month \u003d Integer.parseInt(meetDate.substring(3,"},{"lineNumber":1177,"author":{"gitID":"fuadsahmawi"},"content":"                        5));"},{"lineNumber":1178,"author":{"gitID":"fuadsahmawi"},"content":"                int year \u003d Integer.parseInt(meetDate.substring(6,"},{"lineNumber":1179,"author":{"gitID":"fuadsahmawi"},"content":"                        10));"},{"lineNumber":1180,"author":{"gitID":"fuadsahmawi"},"content":"                calendarM.addEntry(new Entry(\"Meeting \" + person.getName().toString(),"},{"lineNumber":1181,"author":{"gitID":"fuadsahmawi"},"content":"                        new Interval(LocalDate.of(year, month, day), LocalTime.of(12, 0),"},{"lineNumber":1182,"author":{"gitID":"fuadsahmawi"},"content":"                                LocalDate.of(year, month, day), LocalTime.of(13, 0))));"},{"lineNumber":1183,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":1184,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":1185,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.getCalendarSources().add(myCalendarSource);"},{"lineNumber":1186,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":1187,"author":{"gitID":"fuadsahmawi"},"content":"----"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"When a meet date is deleted, it will go through the same process as adding meet up dates and the changes will then be updated in the calendar."},{"lineNumber":1190,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"*Aspect*: Deleting a `meetDate` from `CollegeZone`."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"*Alternative 1(current choice)*: Delete `meetDate` using an index which is the index of the particular `Person` in `UniquePersonList` +"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"*Pros*: Implementing `DeleteReminderCommand` by parsing an index will be simple and fast. With no need for parsing of data. +"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"*Cons*: When your addressbook gets too large, using indexes to delete meet ups will not be a scalable option as people cant remember the individual `Indexes` relates to a `Person`."},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"*Alternative 2*: Delete `meetDate` identified by `Date` or `Person`. +"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"*Pros*: Reduces the need of a listing and finding function to delete a `meetDate` from `CollegeZone`. +"},{"lineNumber":1201,"author":{"gitID":"fuadsahmawi"},"content":"*Cons*: Implementation of `DeleteReminderCommand` will be more difficult as we will have to integrate a find function to pick out"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"the specific `meetDates` or \u0027Person\u0027 that the user wants to remove."},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"// end::meetCommand[]"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"//tag::sortmech[]"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sort Command [Since v1.4]"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"The Sort Command is facilitated by `SortCommandParser` and `SortCommand`, with both classes residing in the `Logic` component of the address book. Since the address book state will be modified during the sorting process, the `sort` has to be undoable."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"`SortCommandParser` takes in an argument in the form of `INDEX_TYPE` that defines how `UniquePersonList` should be sorted. You may customise the sort operation, with `PREFIX` specifying the sort type. It first checks for validity against a regular expression. Once verified, the argument will be tokenized to identify your specified sort type. A `SortCommand` object is then created with the identified sort type."},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"The `INDEX_TYPE` can be any three of the following: `1` for sorting RC4 Students based on their level of friendship, `2` for sorting persons by meet date, `3` for sorting persons by Birthday. The sorted list is always default to descending order of importance."},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"Upon execution of `SortCommand`, a `Comparator\u003cPerson\u003e` will be initialised based on the sort type it receives. A `sortPersons` function call will be made to `Model`, which propagates down to `UniquePersonList`, where the sorting of the `internalList` occurs. Since sorting of `internalList` results in the change of state to address book, `SortCommand` is to be implemented as an `UndoableCommand`."},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram_Sort.png[width\u003d\"800\"]"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"_Figure 4.5.1 : Structure of Sort Command in the Logic Component_"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"Implementation of the Sort Command requires both the manipulation of `Logic` and `Model` component of address book."},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"The following sequence diagram shows the flow of operation from the point the address book receives an input to the output of the result."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"deborahlow97"},"content":".Interactions Inside the Logic Component for the `sort 1` Command_"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"image::SortPersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"If the list is found to be empty, an `CommandException` will be thrown from `SortCommand`. The command should be terminated without any state change, keeping the redoStack clean of changes."},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"**Aspect:** Initialising of `Comparator\u003cPerson\u003e` +"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"**Alternative 1:** Initialise in `SortCommand` +"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"**Pros:** Clear separation of concerns, `SortCommandParser` to handle identifying of attribute to sort by only. +"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"**Cons:** Hard for new developers to follow as other commands like `AddCommand` handles object creation in its parser. +"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"**Alternative 2 (current choice): ** Initialise in `UniquePersonList` +"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"**Pros:** Straightforward as initialises the `Comparator` where it is used. +"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"**Cons:** `UniquePersonList` is at a lower level and should only handle a minimal set of `Person` related operations, and not logical operations like string matching. +"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"---"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"**Aspect:** Sorting by multiple attribute +"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Only allows sorting by single attribute +"},{"lineNumber":1246,"author":{"gitID":"-"},"content":"**Pros:** Fast and arguments to input is straightforward. +"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"**Cons:** Unable to have fine grain control of how list should appear. +"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"**Alternative 2:** Allow sorting by multiple attribute +"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"**Pros:** Enables fine grain control of how list should appear. +"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"**Cons:** Not necessary as effect is only obvious when contact list is long and has multiple common names. As target audience for iConnect are students, contact list will not be more than few thousand contacts long. +"},{"lineNumber":1251,"author":{"gitID":"-"},"content":""},{"lineNumber":1252,"author":{"gitID":"-"},"content":"// end::sortmech[]"},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"zuweitrack"},"content":"// tag::rate[]"},{"lineNumber":1256,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Rate friends [Since v1.4]"},{"lineNumber":1257,"author":{"gitID":"zuweitrack"},"content":"The Rate friends feature allows RC4 residents to rate their friends and change their levels of friendship."},{"lineNumber":1258,"author":{"gitID":"zuweitrack"},"content":"This feature is implemented by the `RateCommand` and `RateCommandParser` in the Logic component of the CollegeZone code."},{"lineNumber":1259,"author":{"gitID":"zuweitrack"},"content":"The RC4 student is able to rate one or more friends by keying in the new desired level of friendship through the Command Line Interface (CLI)."},{"lineNumber":1260,"author":{"gitID":"zuweitrack"},"content":"The `RateCommand` inherits from `UndoableCommands` as well, as shown in the diagram below."},{"lineNumber":1261,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1262,"author":{"gitID":"zuweitrack"},"content":"image::RateCommandClassDiagram.jpg[width\u003d\"400\"]"},{"lineNumber":1263,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1264,"author":{"gitID":"zuweitrack"},"content":"To rate other RC4 residents and friends, the `LevelOfFriendship` class is being used and is part of the `Person` class."},{"lineNumber":1265,"author":{"gitID":"zuweitrack"},"content":"A `Person` is composed of a `LevelOfFriendship` component, and each person in CollegeZone application has a particular level of friendship between `1` to `10`."},{"lineNumber":1266,"author":{"gitID":"zuweitrack"},"content":"The next diagram illustrates the relationship between a"},{"lineNumber":1267,"author":{"gitID":"zuweitrack"},"content":"`Person` and its `LevelOfFriendship`."},{"lineNumber":1268,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1269,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1270,"author":{"gitID":"deborahlow97"},"content":"image::RC4ModelComponenetClass.JPG[width\u003d\"800\"]"},{"lineNumber":1271,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1272,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1273,"author":{"gitID":"zuweitrack"},"content":"The following shows a part of the code of `RateCommand` and reveals"},{"lineNumber":1274,"author":{"gitID":"zuweitrack"},"content":"the parameters that `RateCommand` makes use of."},{"lineNumber":1275,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1276,"author":{"gitID":"zuweitrack"},"content":"[source,java]"},{"lineNumber":1277,"author":{"gitID":"zuweitrack"},"content":"    public RateCommand(List\u003cIndex\u003e indexList, String levelOfFriendship) {"},{"lineNumber":1278,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":1279,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1280,"author":{"gitID":"zuweitrack"},"content":"As observed, `RateCommand` involves two parameters, namely `indexList` and `leveloffriendship`."},{"lineNumber":1281,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1282,"author":{"gitID":"zuweitrack"},"content":"`indexList` has a `List` of indexes type, and `leveloffriendship` is of `String` type."},{"lineNumber":1283,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1284,"author":{"gitID":"zuweitrack"},"content":"The parameter `indexList` refers to the list of students whose are intended to be rated, and thus"},{"lineNumber":1285,"author":{"gitID":"zuweitrack"},"content":"`RateCommand` is able to help RC4 residents rate multiple people at a time. The `leveloffriendship`"},{"lineNumber":1286,"author":{"gitID":"zuweitrack"},"content":"parameter refers to the new level of friendship that the resident would like to rate their friends to."},{"lineNumber":1287,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1288,"author":{"gitID":"zuweitrack"},"content":"The following code sample shows the execution of `RateCommnad`,"},{"lineNumber":1289,"author":{"gitID":"zuweitrack"},"content":"[source,java]"},{"lineNumber":1290,"author":{"gitID":"zuweitrack"},"content":"public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":1291,"author":{"gitID":"zuweitrack"},"content":"        List\u003cPerson\u003e latestList \u003d model.getFilteredPersonList();"},{"lineNumber":1292,"author":{"gitID":"zuweitrack"},"content":"        for (Index index : indexList) {"},{"lineNumber":1293,"author":{"gitID":"zuweitrack"},"content":"            Person selectedPerson \u003d latestList.get(index.getZeroBased());"},{"lineNumber":1294,"author":{"gitID":"zuweitrack"},"content":"            try {"},{"lineNumber":1295,"author":{"gitID":"zuweitrack"},"content":"                Person editedPerson \u003d new Person(selectedPerson.getName(), selectedPerson.getPhone(),"},{"lineNumber":1296,"author":{"gitID":"zuweitrack"},"content":"                        selectedPerson.getBirthday(), new LevelOfFriendship(levelOfFriendship),"},{"lineNumber":1297,"author":{"gitID":"zuweitrack"},"content":"                        selectedPerson.getUnitNumber(),"},{"lineNumber":1298,"author":{"gitID":"zuweitrack"},"content":"                        selectedPerson.getCcas(), selectedPerson.getMeetDate(), selectedPerson.getTags());"},{"lineNumber":1299,"author":{"gitID":"zuweitrack"},"content":"                model.updatePerson(selectedPerson, editedPerson);"},{"lineNumber":1300,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1301,"author":{"gitID":"zuweitrack"},"content":"As seen, the index of the student whose level of friendship is to be rated and changed, a new `editedPerson` object is created"},{"lineNumber":1302,"author":{"gitID":"zuweitrack"},"content":"and all the details of the person, the name and phone number and other details were copied from the `selectedPerson` and is assigned the new level of friendship from the rate command."},{"lineNumber":1303,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1304,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1305,"author":{"gitID":"zuweitrack"},"content":"[NOTE]"},{"lineNumber":1306,"author":{"gitID":"zuweitrack"},"content":"If an invalid index value is entered, i.e the person with an `index` of which does not exist in CollegeZone contact list is entered with valid `index` entries,"},{"lineNumber":1307,"author":{"gitID":"zuweitrack"},"content":"only the valid entries will have their `Level of friendships` rated and updated."},{"lineNumber":1308,"author":{"gitID":"zuweitrack"},"content":"As seen in the code below, there will be a error message informing the user that they have keyed in an invalid `index` value."},{"lineNumber":1309,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1310,"author":{"gitID":"zuweitrack"},"content":"[source,java]"},{"lineNumber":1311,"author":{"gitID":"zuweitrack"},"content":"            if (index.getZeroBased() \u003e\u003d latestList.size()) {"},{"lineNumber":1312,"author":{"gitID":"zuweitrack"},"content":"                throw new CommandException(MESSAGE_ONE_OR_MORE_INVALID_INDEX);"},{"lineNumber":1313,"author":{"gitID":"zuweitrack"},"content":"            }"},{"lineNumber":1314,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"zuweitrack"},"content":"**Aspect:** Implementation of `RateCommand`. +"},{"lineNumber":1319,"author":{"gitID":"zuweitrack"},"content":"**Alternative 1 (current choice):** Creates a new `Person` object which copies all its respective personal details and adds a new `LevelOfFriendship` value. +"},{"lineNumber":1320,"author":{"gitID":"zuweitrack"},"content":"**Pros:** It uses a pre-existing method, and additional methods to implement `RateCommand` need not be created and added.  +"},{"lineNumber":1321,"author":{"gitID":"zuweitrack"},"content":"**Cons:** Copying all respective personal data in order to change only the `LevelOfFriendship` attribute can be excessive as cause additional processing time if a `person` have many attributes. +"},{"lineNumber":1322,"author":{"gitID":"zuweitrack"},"content":"**Alternative 2:** Add a `changeLevelOfFriendship` setter method in `Person` class +"},{"lineNumber":1323,"author":{"gitID":"zuweitrack"},"content":"**Pros:** Relatively simple to implement. +"},{"lineNumber":1324,"author":{"gitID":"zuweitrack"},"content":"**Cons:** Additional methods have to be added to ensure that the `input values` and `indexes` are valid."},{"lineNumber":1325,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1326,"author":{"gitID":"zuweitrack"},"content":"// end::rate[]"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1335,"author":{"gitID":"-"},"content":""},{"lineNumber":1336,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1339,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1352,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1353,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1354,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1360,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1361,"author":{"gitID":"-"},"content":""},{"lineNumber":1362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1363,"author":{"gitID":"-"},"content":""},{"lineNumber":1364,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1377,"author":{"gitID":"-"},"content":""},{"lineNumber":1378,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1392,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1393,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1394,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1395,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1397,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1398,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1399,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1401,"author":{"gitID":"-"},"content":""},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1407,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1414,"author":{"gitID":"-"},"content":""},{"lineNumber":1415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1416,"author":{"gitID":"-"},"content":""},{"lineNumber":1417,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1422,"author":{"gitID":"-"},"content":""},{"lineNumber":1423,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1424,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1425,"author":{"gitID":"-"},"content":""},{"lineNumber":1426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1429,"author":{"gitID":"-"},"content":""},{"lineNumber":1430,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1431,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1432,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1433,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1434,"author":{"gitID":"-"},"content":""},{"lineNumber":1435,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"deborahlow97"},"content":"A project often depends on third-party libraries. For example, CollegeZone depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1438,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1439,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1443,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1444,"author":{"gitID":"-"},"content":""},{"lineNumber":1445,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"deborahlow97"},"content":"* Current NUS Students living in Residential College 4 (RC4)"},{"lineNumber":1448,"author":{"gitID":"deborahlow97"},"content":"* has a need to manage a significant number of contacts (friends) and tasks to do"},{"lineNumber":1449,"author":{"gitID":"deborahlow97"},"content":"* has a need to be reminded of things to do"},{"lineNumber":1450,"author":{"gitID":"deborahlow97"},"content":"* has a need to keep track of goals that they have"},{"lineNumber":1451,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1452,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1454,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1455,"author":{"gitID":"-"},"content":""},{"lineNumber":1456,"author":{"gitID":"deborahlow97"},"content":"*Value proposition*: manage contacts and tasks faster than a typical mouse/GUI driven app"},{"lineNumber":1457,"author":{"gitID":"-"},"content":""},{"lineNumber":1458,"author":{"gitID":"-"},"content":"*Feature Contribution*:"},{"lineNumber":1459,"author":{"gitID":"-"},"content":"[width\u003d\"90%\",cols\u003d\"20%,\u003c25%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"|Assignee |Major |Minor"},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"|Deborah Low"},{"lineNumber":1464,"author":{"gitID":"deborahlow97"},"content":"|Goals Panel : Allows user to set/edit/delete goals they have for the year and to keep track of their goals progress. +"},{"lineNumber":1465,"author":{"gitID":"deborahlow97"},"content":" Allows user to indicate goal is still ongoing or has already been completed."},{"lineNumber":1466,"author":{"gitID":"deborahlow97"},"content":" Allows user to sort goals."},{"lineNumber":1467,"author":{"gitID":"deborahlow97"},"content":"|Add and Edit : Change add and edit command to suit our target audience ( RC4 Students ) - adding birthday, cca, level of friendship and unit number field for student. +"},{"lineNumber":1468,"author":{"gitID":"deborahlow97"},"content":" GUI : Change the look and feel of the GUI to make it more user friendly. Allows user to switch themes."},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"fuadsahmawi"},"content":"|Fuad B Sahmawi"},{"lineNumber":1471,"author":{"gitID":"fuadsahmawi"},"content":"|Calendar: Integrate CalendarFX onto CollegeZone UI +"},{"lineNumber":1472,"author":{"gitID":"fuadsahmawi"},"content":" Reminder: Allows user to set/delete reminders reflected on the Calendar. Due reminders are marked red while undue reminders marked blue."},{"lineNumber":1473,"author":{"gitID":"fuadsahmawi"},"content":"|Find : Change find command to be able to find persons in contact list according to tags +"},{"lineNumber":1474,"author":{"gitID":"fuadsahmawi"},"content":" Logic : Added command aliases to allow users to be able to perform commands by typing shortcuts"},{"lineNumber":1475,"author":{"gitID":"-"},"content":""},{"lineNumber":1476,"author":{"gitID":"A0158738X"},"content":"|Shamsheer Ahamed"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"|Social (Meet-Up) : This feature allows user to set up meet ups with RC4 students that will be reflected on a Calendar +"},{"lineNumber":1478,"author":{"gitID":"-"},"content":" Social (Sorting) : On top of the meet up dates appearing on the calendar, a sorting tool is also added to keep the user up to date with his meet up dates, birthdays and friendship levels."},{"lineNumber":1479,"author":{"gitID":"-"},"content":"|Command Box Enhancement : Added a autocomplete command that auto fills the required preambles for the individual commands in the command box"},{"lineNumber":1480,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":1481,"author":{"gitID":"zuweitrack"},"content":"|Goh Zu Wei"},{"lineNumber":1482,"author":{"gitID":"zuweitrack"},"content":"|Rate Friends : This feature allows categorize and rate one or more friends by changing their levels of friendships."},{"lineNumber":1483,"author":{"gitID":"zuweitrack"},"content":"|Seek: Add seek command to be able to seek the Resident Assistant (RA) of any particular the student living in RC4"},{"lineNumber":1484,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1488,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1493,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1494,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1495,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |add a new person |"},{"lineNumber":1498,"author":{"gitID":"-"},"content":""},{"lineNumber":1499,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |delete a person |remove entries that I no longer need"},{"lineNumber":1500,"author":{"gitID":"-"},"content":""},{"lineNumber":1501,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1502,"author":{"gitID":"-"},"content":""},{"lineNumber":1503,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |find a person by tags |locate a particular group of people without having to go through the entire list"},{"lineNumber":1504,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1505,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |edit a detail I added |"},{"lineNumber":1506,"author":{"gitID":"-"},"content":""},{"lineNumber":1507,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |add my goals for the year |keep track of the goals I have and have not completed"},{"lineNumber":1508,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1509,"author":{"gitID":"fuadsahmawi"},"content":"|`* * *` |RC student |set a level of friendship with a specific person |maintain my friendships depending on a priority system set by myself"},{"lineNumber":1510,"author":{"gitID":"-"},"content":""},{"lineNumber":1511,"author":{"gitID":"zuweitrack"},"content":"|`* * *` |RC student |Rate my friends |keep track and update of who my close friends are"},{"lineNumber":1512,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1513,"author":{"gitID":"fuadsahmawi"},"content":"|`* * *` |RC student |edit details of my contacts |stay updated with the current information about my contacts"},{"lineNumber":1514,"author":{"gitID":"-"},"content":""},{"lineNumber":1515,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |forgetful RC student |add persistent reminders |periodically remind myself to do something."},{"lineNumber":1516,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1517,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |forgetful RC student |add other RC friends name, birthday, hall CCAs and tags into CollegeZone |"},{"lineNumber":1518,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1519,"author":{"gitID":"A0158738X"},"content":"|`* * *` |forgetful RC student |set up a meet up with another RC4 student |shows who you are meeting up with on the calendar"},{"lineNumber":1520,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":1521,"author":{"gitID":"fuadsahmawi"},"content":"|`* * *` |RC student |note down tasks, events or training sessions in a calendar |make my schedule more organised"},{"lineNumber":1522,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1523,"author":{"gitID":"zuweitrack"},"content":"|`* * *` |RC student |Set down a date for group events |do necessary group preparation prior to a group event"},{"lineNumber":1524,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"|`* * *` |RC student |Set up meetings and keep track of them |I can effectively network and meet new people in my RC"},{"lineNumber":1526,"author":{"gitID":"-"},"content":""},{"lineNumber":1527,"author":{"gitID":"-"},"content":"|`* * *` |RC student |easily find out important dates like meeting dates and birth dates |be up to task with those dates"},{"lineNumber":1528,"author":{"gitID":"-"},"content":""},{"lineNumber":1529,"author":{"gitID":"deborahlow97"},"content":"|`* *` |careless RC student |undo a command I entered |undo a wrong command that I entered"},{"lineNumber":1530,"author":{"gitID":"-"},"content":""},{"lineNumber":1531,"author":{"gitID":"deborahlow97"},"content":"|`* *` |careless RC student |redo a command I entered |redo when I want to undo my \"undo\" command"},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"fuadsahmawi"},"content":"|`* *` |RC student |write down a short reflection of how an event/training session went |remember precious moments easier in the future"},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"fuadsahmawi"},"content":"|`* *` |RC student |list down all past appointments with a particular friend |reminisce past memories with a particular friend"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"|`* *` |RC student |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"deborahlow97"},"content":"|`* *` |RC student | be reminded on when my campus fees are due | pay it on time"},{"lineNumber":1540,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1541,"author":{"gitID":"zuweitrack"},"content":"|`* *` |RC student |know who the Resident Assistant (RA) is of a fellow resident |find the RA of the resident and convey floor issues to the RA"},{"lineNumber":1542,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1543,"author":{"gitID":"deborahlow97"},"content":"|`*` |user with many persons in CollegeZone |sort persons by name |locate a person easily"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"deborahlow97"},"content":"|`*` |user with many persons with the same in CollegeZone |set a display picture of each contact |differentiate persons with the same name"},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1548,"author":{"gitID":"-"},"content":""},{"lineNumber":1549,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1550,"author":{"gitID":"-"},"content":""},{"lineNumber":1551,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1552,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1553,"author":{"gitID":"-"},"content":""},{"lineNumber":1554,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Add student"},{"lineNumber":1555,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1556,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":1557,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1558,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to add a student to the list"},{"lineNumber":1559,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone adds the student"},{"lineNumber":1560,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1561,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1564,"author":{"gitID":"-"},"content":""},{"lineNumber":1565,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1566,"author":{"gitID":"fuadsahmawi"},"content":"* 1a. The given detail format is invalid."},{"lineNumber":1567,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1568,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1569,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1570,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1571,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1572,"author":{"gitID":"-"},"content":""},{"lineNumber":1573,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: List students"},{"lineNumber":1574,"author":{"gitID":"deborahlow97"},"content":"1. User requests to list students"},{"lineNumber":1575,"author":{"gitID":"deborahlow97"},"content":"2. CollegeZone shows a list of students"},{"lineNumber":1576,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1577,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1578,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1579,"author":{"gitID":"zuweitrack"},"content":"*Extensions*"},{"lineNumber":1580,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1581,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1582,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1583,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1584,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1585,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1586,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Delete student"},{"lineNumber":1587,"author":{"gitID":"-"},"content":""},{"lineNumber":1588,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1589,"author":{"gitID":"-"},"content":""},{"lineNumber":1590,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to list students"},{"lineNumber":1591,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone shows a list of students"},{"lineNumber":1592,"author":{"gitID":"deborahlow97"},"content":"3.  User requests to delete a specific student in the list"},{"lineNumber":1593,"author":{"gitID":"deborahlow97"},"content":"4.  CollegeZone deletes the student"},{"lineNumber":1594,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1595,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1596,"author":{"gitID":"-"},"content":""},{"lineNumber":1597,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1600,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1601,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1602,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1603,"author":{"gitID":"-"},"content":""},{"lineNumber":1604,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1605,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1606,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1607,"author":{"gitID":"deborahlow97"},"content":"** 3a1. CollegeZone shows an error message."},{"lineNumber":1608,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Edit student"},{"lineNumber":1612,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to list students"},{"lineNumber":1613,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone shows a list of students"},{"lineNumber":1614,"author":{"gitID":"deborahlow97"},"content":"3.  User requests to edit a detail or multiple details of a student in the list"},{"lineNumber":1615,"author":{"gitID":"deborahlow97"},"content":"4. CollegeZone edits the detail or details of the student"},{"lineNumber":1616,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1617,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1618,"author":{"gitID":"-"},"content":""},{"lineNumber":1619,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1620,"author":{"gitID":"-"},"content":""},{"lineNumber":1621,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1622,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1623,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1624,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1625,"author":{"gitID":"-"},"content":""},{"lineNumber":1626,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1627,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1628,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1629,"author":{"gitID":"deborahlow97"},"content":"** 3a1. CollegeZone shows an error message."},{"lineNumber":1630,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1631,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1632,"author":{"gitID":"deborahlow97"},"content":"* 3b. The given detail format is invalid."},{"lineNumber":1633,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1634,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1635,"author":{"gitID":"deborahlow97"},"content":"** 3b1. CollegeZone shows an error message."},{"lineNumber":1636,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1637,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1638,"author":{"gitID":"-"},"content":""},{"lineNumber":1639,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Find student"},{"lineNumber":1640,"author":{"gitID":"deborahlow97"},"content":"1. User requests to find student by tag or name using keywords"},{"lineNumber":1641,"author":{"gitID":"deborahlow97"},"content":"2. CollegeZone shows a list of students"},{"lineNumber":1642,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1643,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1644,"author":{"gitID":"-"},"content":""},{"lineNumber":1645,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1648,"author":{"gitID":"fuadsahmawi"},"content":"* 1a. The given detail format is invalid."},{"lineNumber":1649,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1650,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1651,"author":{"gitID":"fuadsahmawi"},"content":"** 1a1. CollegeZone shows an error message"},{"lineNumber":1652,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1653,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1654,"author":{"gitID":"deborahlow97"},"content":"* 2a. The list has all students with name or tag that matches keywords"},{"lineNumber":1655,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1656,"author":{"gitID":"fuadsahmawi"},"content":"Use case ends."},{"lineNumber":1657,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1658,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1659,"author":{"gitID":"fuadsahmawi"},"content":"* 2b. The list is empty"},{"lineNumber":1660,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1661,"author":{"gitID":"fuadsahmawi"},"content":"Use case ends."},{"lineNumber":1662,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1663,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Select student or goal"},{"lineNumber":1664,"author":{"gitID":"deborahlow97"},"content":"1. User requests to list students"},{"lineNumber":1665,"author":{"gitID":"deborahlow97"},"content":"2. CollegeZone shows a list of students"},{"lineNumber":1666,"author":{"gitID":"deborahlow97"},"content":"3. User requests to select a student or goal"},{"lineNumber":1667,"author":{"gitID":"deborahlow97"},"content":"4. CollegeZone shows the detail of the student or goal"},{"lineNumber":1668,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1669,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1670,"author":{"gitID":"-"},"content":""},{"lineNumber":1671,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1674,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1675,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1677,"author":{"gitID":"-"},"content":""},{"lineNumber":1678,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1679,"author":{"gitID":"deborahlow97"},"content":"* 3a. The given INDEX for either student or goal is invalid."},{"lineNumber":1680,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1681,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1682,"author":{"gitID":"deborahlow97"},"content":"** 3a1. CollegeZone shows an error message"},{"lineNumber":1683,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1684,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1685,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1686,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Use case: Add reminder"},{"lineNumber":1687,"author":{"gitID":"-"},"content":""},{"lineNumber":1688,"author":{"gitID":"-"},"content":"1.  User requests to add a reminder on a certain date"},{"lineNumber":1689,"author":{"gitID":"fuadsahmawi"},"content":"2.  CollegeZone adds the reminder in the calendar and changes are reflected on the calendar"},{"lineNumber":1690,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1691,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1692,"author":{"gitID":"-"},"content":""},{"lineNumber":1693,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1694,"author":{"gitID":"-"},"content":""},{"lineNumber":1695,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1696,"author":{"gitID":"-"},"content":"* 1a. The given date detail in invalid."},{"lineNumber":1697,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1698,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1699,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1700,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1701,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1702,"author":{"gitID":"-"},"content":""},{"lineNumber":1703,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1704,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Use case: Delete reminder"},{"lineNumber":1705,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1706,"author":{"gitID":"-"},"content":""},{"lineNumber":1707,"author":{"gitID":"-"},"content":"1.  User requests to delete a certain reminder on a certain date"},{"lineNumber":1708,"author":{"gitID":"-"},"content":"2.  CollegeZone delete the reminder from the calendar and changes is reflected on the calendar"},{"lineNumber":1709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1710,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1711,"author":{"gitID":"-"},"content":""},{"lineNumber":1712,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1713,"author":{"gitID":"-"},"content":""},{"lineNumber":1714,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1715,"author":{"gitID":"-"},"content":"* 1a. The given reminder to delete does not exist."},{"lineNumber":1716,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1717,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1718,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1719,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1720,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1721,"author":{"gitID":"-"},"content":""},{"lineNumber":1722,"author":{"gitID":"-"},"content":"* 1b. The given details to delete reminder is invalid."},{"lineNumber":1723,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1724,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1725,"author":{"gitID":"-"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":1726,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1727,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1728,"author":{"gitID":"-"},"content":""},{"lineNumber":1729,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1730,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1731,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Meet student"},{"lineNumber":1732,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":1733,"author":{"gitID":"deborahlow97"},"content":"1. User request to add a meet up date on a certain date with a student using his index"},{"lineNumber":1734,"author":{"gitID":"A0158738X"},"content":"2. CollegeZone adds the meet up in the calendar and changes are reflected in the calendar"},{"lineNumber":1735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1736,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1737,"author":{"gitID":"-"},"content":""},{"lineNumber":1738,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1739,"author":{"gitID":"-"},"content":""},{"lineNumber":1740,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1741,"author":{"gitID":"A0158738X"},"content":"* 1a. The given date is invalid."},{"lineNumber":1742,"author":{"gitID":"A0158738X"},"content":"+"},{"lineNumber":1743,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1744,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1745,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1746,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"deborahlow97"},"content":"* 1b. The given student\u0027s index is invalid."},{"lineNumber":1749,"author":{"gitID":"A0158738X"},"content":"+"},{"lineNumber":1750,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1751,"author":{"gitID":"-"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":1752,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1753,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1754,"author":{"gitID":"-"},"content":""},{"lineNumber":1755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort students"},{"lineNumber":1756,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1757,"author":{"gitID":"-"},"content":"1. Users requests to sort the RC4 Students list according to meet up dates."},{"lineNumber":1758,"author":{"gitID":"-"},"content":"2. CollegeZone sorts the list and shows the upcoming the meet dates first."},{"lineNumber":1759,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1760,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1763,"author":{"gitID":"-"},"content":""},{"lineNumber":1764,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1765,"author":{"gitID":"-"},"content":"* 1a. The list is empty"},{"lineNumber":1766,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1767,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1768,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1769,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1770,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1771,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1772,"author":{"gitID":"-"},"content":"* 1b. The given sorting index type is invalid."},{"lineNumber":1773,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1774,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1775,"author":{"gitID":"-"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":1776,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1777,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1778,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1779,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Add goal"},{"lineNumber":1780,"author":{"gitID":"deborahlow97"},"content":"1. User requests to add a goal in the list"},{"lineNumber":1781,"author":{"gitID":"deborahlow97"},"content":"2. CollegeZone adds the goal"},{"lineNumber":1782,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1783,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1784,"author":{"gitID":"-"},"content":""},{"lineNumber":1785,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1786,"author":{"gitID":"-"},"content":""},{"lineNumber":1787,"author":{"gitID":"deborahlow97"},"content":"* 1a. The given goal details is invalid."},{"lineNumber":1788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1789,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1790,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1791,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1792,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1793,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1794,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1795,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Edit goal"},{"lineNumber":1796,"author":{"gitID":"deborahlow97"},"content":"1.  CollegeZone shows a list of goals"},{"lineNumber":1797,"author":{"gitID":"deborahlow97"},"content":"2.  User requests to edit a detail or multiple details of a goal in the list"},{"lineNumber":1798,"author":{"gitID":"deborahlow97"},"content":"3. CollegeZone edits the detail or details of the selected goal"},{"lineNumber":1799,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1800,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1801,"author":{"gitID":"-"},"content":""},{"lineNumber":1802,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1803,"author":{"gitID":"-"},"content":""},{"lineNumber":1804,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1805,"author":{"gitID":"deborahlow97"},"content":"* 1a. The list is empty."},{"lineNumber":1806,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1807,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1808,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1809,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given index is invalid."},{"lineNumber":1810,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1811,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1812,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":1813,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1814,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1815,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1816,"author":{"gitID":"deborahlow97"},"content":"* 2b. The given goal detail format is invalid."},{"lineNumber":1817,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1818,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1819,"author":{"gitID":"deborahlow97"},"content":"** 2b1. CollegeZone shows an error message."},{"lineNumber":1820,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1821,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1822,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1823,"author":{"gitID":"deborahlow97"},"content":"* 2c. The given goal details is invalid."},{"lineNumber":1824,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1825,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1826,"author":{"gitID":"deborahlow97"},"content":"** 2c1. CollegeZone shows an error message."},{"lineNumber":1827,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1828,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1829,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1830,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Delete goal"},{"lineNumber":1831,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1832,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":1833,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1834,"author":{"gitID":"deborahlow97"},"content":"1.  CollegeZone shows a list of goals"},{"lineNumber":1835,"author":{"gitID":"deborahlow97"},"content":"2.  User requests to delete a specific goal in the list"},{"lineNumber":1836,"author":{"gitID":"deborahlow97"},"content":"3.  CollegeZone deletes the goal"},{"lineNumber":1837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1838,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1839,"author":{"gitID":"-"},"content":""},{"lineNumber":1840,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1841,"author":{"gitID":"-"},"content":""},{"lineNumber":1842,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1843,"author":{"gitID":"deborahlow97"},"content":"* 1a. The list is empty."},{"lineNumber":1844,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1845,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1846,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1847,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given index is invalid."},{"lineNumber":1848,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1849,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1850,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":1851,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1852,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1853,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1854,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Complete goal"},{"lineNumber":1855,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1856,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":1857,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1858,"author":{"gitID":"deborahlow97"},"content":"1.  CollegeZone shows a list of goals"},{"lineNumber":1859,"author":{"gitID":"deborahlow97"},"content":"2.  User requests to complete a specific goal in the list"},{"lineNumber":1860,"author":{"gitID":"deborahlow97"},"content":"3.  CollegeZone indicates the specified goal is completed"},{"lineNumber":1861,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1862,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1863,"author":{"gitID":"-"},"content":""},{"lineNumber":1864,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1865,"author":{"gitID":"-"},"content":""},{"lineNumber":1866,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1867,"author":{"gitID":"deborahlow97"},"content":"* 1a. The list is empty."},{"lineNumber":1868,"author":{"gitID":"A0158738X"},"content":"+"},{"lineNumber":1869,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1870,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1871,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1872,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given index is invalid."},{"lineNumber":1873,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1874,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1875,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":1876,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1877,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1878,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1879,"author":{"gitID":"deborahlow97"},"content":"* 2b. The specified goal is already completed."},{"lineNumber":1880,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1881,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1882,"author":{"gitID":"deborahlow97"},"content":"** 2b1. CollegeZone shows an error message."},{"lineNumber":1883,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1884,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1885,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1886,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Ongoing goal"},{"lineNumber":1887,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1888,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":1889,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1890,"author":{"gitID":"deborahlow97"},"content":"1.  CollegeZone shows a list of goals"},{"lineNumber":1891,"author":{"gitID":"deborahlow97"},"content":"2.  User requests to indicate goal is ongoing to a specific goal in the list"},{"lineNumber":1892,"author":{"gitID":"deborahlow97"},"content":"3.  CollegeZone indicates the specified goal is ongoing"},{"lineNumber":1893,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1894,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1895,"author":{"gitID":"-"},"content":""},{"lineNumber":1896,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1897,"author":{"gitID":"-"},"content":""},{"lineNumber":1898,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1899,"author":{"gitID":"deborahlow97"},"content":"* 1a. The list is empty."},{"lineNumber":1900,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1901,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1902,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1903,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1904,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1905,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1906,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given index is invalid."},{"lineNumber":1907,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1908,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1909,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":1910,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1911,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1912,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1913,"author":{"gitID":"deborahlow97"},"content":"* 2b. The specified goal is already ongoing."},{"lineNumber":1914,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1915,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1916,"author":{"gitID":"deborahlow97"},"content":"** 2b1. CollegeZone shows an error message."},{"lineNumber":1917,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1918,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1919,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1920,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Sort goal"},{"lineNumber":1921,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1922,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":1923,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1924,"author":{"gitID":"deborahlow97"},"content":"1.  CollegeZone shows a list of goals"},{"lineNumber":1925,"author":{"gitID":"deborahlow97"},"content":"2.  User requests sort goal based on field and order to sort"},{"lineNumber":1926,"author":{"gitID":"deborahlow97"},"content":"3.  CollegeZone sort the goal list based on field and order specified"},{"lineNumber":1927,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1928,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1929,"author":{"gitID":"-"},"content":""},{"lineNumber":1930,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1931,"author":{"gitID":"-"},"content":""},{"lineNumber":1932,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1933,"author":{"gitID":"deborahlow97"},"content":"* 1a. The list is empty."},{"lineNumber":1934,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1935,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1936,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1937,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1938,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1939,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1940,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given format is invalid."},{"lineNumber":1941,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1942,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1943,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":1944,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1945,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1946,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1947,"author":{"gitID":"deborahlow97"},"content":"* 2b. The given field is invalid."},{"lineNumber":1948,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1949,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1950,"author":{"gitID":"deborahlow97"},"content":"** 2b1. CollegeZone shows an error message."},{"lineNumber":1951,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1952,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1953,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1954,"author":{"gitID":"deborahlow97"},"content":"* 2c. The given order is invalid."},{"lineNumber":1955,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1956,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1957,"author":{"gitID":"deborahlow97"},"content":"** 2c1. CollegeZone shows an error message."},{"lineNumber":1958,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1959,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1960,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1961,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Use case: Seek Resident Assistant (RA)"},{"lineNumber":1962,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1963,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":1964,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1965,"author":{"gitID":"zuweitrack"},"content":"1. User requests to find students\u0027 RA by name using keywords."},{"lineNumber":1966,"author":{"gitID":"zuweitrack"},"content":"2. CollegeZone shows a list of students and Resident assistants (RA)."},{"lineNumber":1967,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1968,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1969,"author":{"gitID":"-"},"content":""},{"lineNumber":1970,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1971,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1972,"author":{"gitID":"fuadsahmawi"},"content":"* 1a. The given detail format is invalid."},{"lineNumber":1973,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1974,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1975,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1976,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1977,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1978,"author":{"gitID":"zuweitrack"},"content":"* 2a. The list has all students and RA(s) with name that matches keywords."},{"lineNumber":1979,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1980,"author":{"gitID":"zuweitrack"},"content":"Use case ends."},{"lineNumber":1981,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1982,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1983,"author":{"gitID":"zuweitrack"},"content":"* 2b. The list is empty"},{"lineNumber":1984,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1985,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1986,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1987,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Use case: Rate friends"},{"lineNumber":1988,"author":{"gitID":"zuweitrack"},"content":"*MSS*"},{"lineNumber":1989,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":1990,"author":{"gitID":"zuweitrack"},"content":"1.  User requests to list or show students of a particular level of friendship."},{"lineNumber":1991,"author":{"gitID":"zuweitrack"},"content":"2.  CollegeZone shows a list of students."},{"lineNumber":1992,"author":{"gitID":"zuweitrack"},"content":"3.  User requests to rate one or more student in the list."},{"lineNumber":1993,"author":{"gitID":"zuweitrack"},"content":"4. CollegeZone rates and changes the level of friendship of the student(s)."},{"lineNumber":1994,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1995,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":1996,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1997,"author":{"gitID":"zuweitrack"},"content":"*Extensions*"},{"lineNumber":1998,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1999,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2000,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":2001,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2002,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2003,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2004,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":2005,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2006,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2007,"author":{"gitID":"deborahlow97"},"content":"** 3a1. CollegeZone shows an error message."},{"lineNumber":2008,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2009,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2010,"author":{"gitID":"deborahlow97"},"content":"* 3b. The given detail format is invalid."},{"lineNumber":2011,"author":{"gitID":"zuweitrack"},"content":"+"},{"lineNumber":2012,"author":{"gitID":"zuweitrack"},"content":"[none]"},{"lineNumber":2013,"author":{"gitID":"deborahlow97"},"content":"** 3b1. CollegeZone shows an error message."},{"lineNumber":2014,"author":{"gitID":"zuweitrack"},"content":"+"},{"lineNumber":2015,"author":{"gitID":"zuweitrack"},"content":"Use case ends."},{"lineNumber":2016,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2017,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Use case: Show student"},{"lineNumber":2018,"author":{"gitID":"zuweitrack"},"content":"*MSS*"},{"lineNumber":2019,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2020,"author":{"gitID":"zuweitrack"},"content":"1. User requests to show student by level of friendship using valid value."},{"lineNumber":2021,"author":{"gitID":"zuweitrack"},"content":"2. CollegeZone shows a list of students of a particular level of friendship."},{"lineNumber":2022,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2023,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2024,"author":{"gitID":"-"},"content":""},{"lineNumber":2025,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2026,"author":{"gitID":"zuweitrack"},"content":"[none]"},{"lineNumber":2027,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2028,"author":{"gitID":"fuadsahmawi"},"content":"* 1a. The given detail format is invalid."},{"lineNumber":2029,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":2030,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":2031,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":2032,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2033,"author":{"gitID":"zuweitrack"},"content":"[none]"},{"lineNumber":2034,"author":{"gitID":"zuweitrack"},"content":"* 2a. The list has all students with level of friendship that matches input value."},{"lineNumber":2035,"author":{"gitID":"zuweitrack"},"content":"+"},{"lineNumber":2036,"author":{"gitID":"zuweitrack"},"content":"Use case ends."},{"lineNumber":2037,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2038,"author":{"gitID":"zuweitrack"},"content":"[none]"},{"lineNumber":2039,"author":{"gitID":"zuweitrack"},"content":"* 2b. The list is empty."},{"lineNumber":2040,"author":{"gitID":"zuweitrack"},"content":"+"},{"lineNumber":2041,"author":{"gitID":"zuweitrack"},"content":"Use case ends."},{"lineNumber":2042,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":2043,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Switch theme colour"},{"lineNumber":2044,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2045,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2046,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2047,"author":{"gitID":"deborahlow97"},"content":"1.  CollegeZone has a theme colour"},{"lineNumber":2048,"author":{"gitID":"deborahlow97"},"content":"2.  User requests to switch theme colour"},{"lineNumber":2049,"author":{"gitID":"deborahlow97"},"content":"3.  CollegeZone switches theme colour"},{"lineNumber":2050,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2051,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2052,"author":{"gitID":"-"},"content":""},{"lineNumber":2053,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2054,"author":{"gitID":"-"},"content":""},{"lineNumber":2055,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2056,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given theme colour is invalid."},{"lineNumber":2057,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2058,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2059,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":2060,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2061,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2062,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2063,"author":{"gitID":"deborahlow97"},"content":"* 2b. The given theme colour is currently in use."},{"lineNumber":2064,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2065,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2066,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2067,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Undo"},{"lineNumber":2068,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2069,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2070,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2071,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to undo a command"},{"lineNumber":2072,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone undo the command and update _CollegeZone_"},{"lineNumber":2073,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2074,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2075,"author":{"gitID":"-"},"content":""},{"lineNumber":2076,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2077,"author":{"gitID":"-"},"content":""},{"lineNumber":2078,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2079,"author":{"gitID":"deborahlow97"},"content":"* 1a. The given format is invalid."},{"lineNumber":2080,"author":{"gitID":"A0158738X"},"content":"+"},{"lineNumber":2081,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2082,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":2083,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2084,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2085,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2086,"author":{"gitID":"deborahlow97"},"content":"* 1b. There are no more commands to undo."},{"lineNumber":2087,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2088,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2089,"author":{"gitID":"deborahlow97"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":2090,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2091,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2092,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2093,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Redo"},{"lineNumber":2094,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2095,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2096,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2097,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to redo a command"},{"lineNumber":2098,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone redo the command and update _CollegeZone_"},{"lineNumber":2099,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2100,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2101,"author":{"gitID":"-"},"content":""},{"lineNumber":2102,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2103,"author":{"gitID":"-"},"content":""},{"lineNumber":2104,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2105,"author":{"gitID":"deborahlow97"},"content":"* 1a. The given format is invalid."},{"lineNumber":2106,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2107,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2108,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":2109,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2110,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2111,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2112,"author":{"gitID":"deborahlow97"},"content":"* 1b. There are no more commands to redo."},{"lineNumber":2113,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2114,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2115,"author":{"gitID":"-"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":2116,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2117,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2118,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2119,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Use case: Seek Resident Assistant (RA)"},{"lineNumber":2120,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2121,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: History"},{"lineNumber":2122,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2123,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2124,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2125,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to toggle command history"},{"lineNumber":2126,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone displays command history"},{"lineNumber":2127,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2128,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2129,"author":{"gitID":"-"},"content":""},{"lineNumber":2130,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2131,"author":{"gitID":"-"},"content":""},{"lineNumber":2132,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2133,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given format is invalid."},{"lineNumber":2134,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2135,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2136,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":2137,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2138,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2139,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2140,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Clear"},{"lineNumber":2141,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2142,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2143,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2144,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to clear CollegeZone"},{"lineNumber":2145,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone deletes all data"},{"lineNumber":2146,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2147,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2148,"author":{"gitID":"-"},"content":""},{"lineNumber":2149,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2150,"author":{"gitID":"-"},"content":""},{"lineNumber":2151,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2152,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given format is invalid."},{"lineNumber":2153,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2154,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2155,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":2156,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2157,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2158,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2159,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Help"},{"lineNumber":2160,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2161,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2162,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2163,"author":{"gitID":"deborahlow97"},"content":"1.  User requests for help page in CollegeZone"},{"lineNumber":2164,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone opens help page"},{"lineNumber":2165,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2166,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2167,"author":{"gitID":"-"},"content":""},{"lineNumber":2168,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2169,"author":{"gitID":"-"},"content":""},{"lineNumber":2170,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2171,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given format is invalid."},{"lineNumber":2172,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2173,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2174,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":2175,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2176,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2177,"author":{"gitID":"-"},"content":""},{"lineNumber":2178,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Exit CollegeZone"},{"lineNumber":2179,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2180,"author":{"gitID":"deborahlow97"},"content":"*MSS*"},{"lineNumber":2181,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2182,"author":{"gitID":"deborahlow97"},"content":"1.  User requests to exit CollegeZone"},{"lineNumber":2183,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone displays command history"},{"lineNumber":2184,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2185,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2186,"author":{"gitID":"-"},"content":""},{"lineNumber":2187,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2188,"author":{"gitID":"-"},"content":""},{"lineNumber":2189,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2190,"author":{"gitID":"deborahlow97"},"content":"* 2a. The given format is invalid."},{"lineNumber":2191,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2192,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":2193,"author":{"gitID":"deborahlow97"},"content":"** 2a1. CollegeZone shows an error message."},{"lineNumber":2194,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":2195,"author":{"gitID":"deborahlow97"},"content":"Use case ends."},{"lineNumber":2196,"author":{"gitID":"-"},"content":""},{"lineNumber":2197,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2198,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":2199,"author":{"gitID":"-"},"content":""},{"lineNumber":2200,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":2201,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":2202,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2203,"author":{"gitID":"-"},"content":".  Should be intuitive to use for users who are not tech-savvy."},{"lineNumber":2204,"author":{"gitID":"deborahlow97"},"content":".  Should be able to be accessed offline."},{"lineNumber":2205,"author":{"gitID":"-"},"content":".  The system should respond within 2 seconds."},{"lineNumber":2206,"author":{"gitID":"-"},"content":".  Should work on 32-bit and 64-bit environment."},{"lineNumber":2207,"author":{"gitID":"deborahlow97"},"content":".  Should store data locally and should be in a .xml file."},{"lineNumber":2208,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":2209,"author":{"gitID":"-"},"content":""},{"lineNumber":2210,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2211,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2212,"author":{"gitID":"-"},"content":""},{"lineNumber":2213,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":2214,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":2215,"author":{"gitID":"-"},"content":""},{"lineNumber":2216,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":2217,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":2218,"author":{"gitID":"-"},"content":""},{"lineNumber":2219,"author":{"gitID":"deborahlow97"},"content":"[[CCA]] Co-Curricular Activities::"},{"lineNumber":2220,"author":{"gitID":"deborahlow97"},"content":"Co-Curricular Activities offered within Residential College 4 (RC4)"},{"lineNumber":2221,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2222,"author":{"gitID":"deborahlow97"},"content":"[[RC4]] Residential College 4::"},{"lineNumber":2223,"author":{"gitID":"deborahlow97"},"content":"A campus living area at NUS U-Town for NUS undergraduate students"},{"lineNumber":2224,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":2225,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2226,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":2227,"author":{"gitID":"-"},"content":""},{"lineNumber":2228,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":2229,"author":{"gitID":"-"},"content":""},{"lineNumber":2230,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":2231,"author":{"gitID":"-"},"content":""},{"lineNumber":2232,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":2233,"author":{"gitID":"-"},"content":""},{"lineNumber":2234,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2235,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2236,"author":{"gitID":"-"},"content":""},{"lineNumber":2237,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":2238,"author":{"gitID":"-"},"content":""},{"lineNumber":2239,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2240,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2241,"author":{"gitID":"-"},"content":""},{"lineNumber":2242,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2243,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":2244,"author":{"gitID":"-"},"content":""},{"lineNumber":2245,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":2246,"author":{"gitID":"-"},"content":""},{"lineNumber":2247,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2248,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":2249,"author":{"gitID":"-"},"content":""},{"lineNumber":2250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":2251,"author":{"gitID":"-"},"content":""},{"lineNumber":2252,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":2253,"author":{"gitID":"-"},"content":""},{"lineNumber":2254,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":2255,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":2256,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":2257,"author":{"gitID":"-"},"content":""},{"lineNumber":2258,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":2259,"author":{"gitID":"-"},"content":""},{"lineNumber":2260,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":2261,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":2262,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":2263,"author":{"gitID":"-"},"content":""},{"lineNumber":2264,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":2265,"author":{"gitID":"-"},"content":""},{"lineNumber":2266,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Deleting a student"},{"lineNumber":2267,"author":{"gitID":"-"},"content":""},{"lineNumber":2268,"author":{"gitID":"deborahlow97"},"content":". Deleting a student while all students are listed"},{"lineNumber":2269,"author":{"gitID":"-"},"content":""},{"lineNumber":2270,"author":{"gitID":"deborahlow97"},"content":".. Prerequisites: List all students using the `list` command. Multiple students in the list."},{"lineNumber":2271,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":2272,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":2273,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":2274,"author":{"gitID":"deborahlow97"},"content":"   Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2275,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":2276,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2277,"author":{"gitID":"-"},"content":""},{"lineNumber":2278,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":2279,"author":{"gitID":"-"},"content":""},{"lineNumber":2280,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":2281,"author":{"gitID":"-"},"content":""},{"lineNumber":2282,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":2283,"author":{"gitID":"-"},"content":""},{"lineNumber":2284,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":2285,"author":{"gitID":"-"},"content":""},{"lineNumber":2286,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"null":1,"A0158738X":17,"zuweitrack":129,"fuadsahmawi":342,"-":1031,"deborahlow97":766}},{"path":"src/test/java/seedu/address/logic/parser/CompleteGoalCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand.CompleteGoalDescriptor;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" * outside of the CompleteGoalCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" * same path through the CompleteGoalCommand, and therefore we test only one of them."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"public class CompleteGoalCommandParserTest {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    private CompleteGoalCommandParser parser \u003d new CompleteGoalCommandParser();"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public void parse_validArgs_returnsCompleteGoalCommand() {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor completeGoalDescriptor \u003d new CompleteGoalDescriptor();"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        completeGoalDescriptor.setCompletion(new Completion(true));"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        completeGoalDescriptor.setEndDateTime(new EndDateTime(\"today\"));"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        assertParseSuccess(parser, \"1\", new CompleteGoalCommand(INDEX_FIRST_GOAL, completeGoalDescriptor));"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"                CompleteGoalCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":35}},{"path":"src/test/java/seedu/address/logic/commands/AddGoalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"//import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"//import seedu.address.logic.commands.AddCommandTest.ModelStub;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"//import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommandTest {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_nullGoal_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        new AddGoalCommand(null);"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public void execute_duplicateGoal_throwsCommandException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        AddCommandTest.ModelStub modelStub \u003d new ModelStubThrowingDuplicateGoalException();"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        Goal validGoal \u003d new GoalBuilder().build();"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        thrown.expectMessage(AddGoalCommand.MESSAGE_DUPLICATE_GOAL);"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        getAddGoalCommandForGoal(validGoal, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    public void equals() {"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        Goal a \u003d new GoalBuilder().withGoalText(\"A\").build();"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        Goal b \u003d new GoalBuilder().withGoalText(\"B\").build();"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand addGoalACommand \u003d new AddGoalCommand(a);"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand addGoalBCommand \u003d new AddGoalCommand(b);"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(addGoalACommand.equals(addGoalACommand));"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        // same values -\u003e returns true"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand addGoalACommandCopy \u003d new AddGoalCommand(a);"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(addGoalACommand.equals(addGoalACommandCopy));"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(addGoalACommand.equals(1));"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(addGoalACommand.equals(null));"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        // different goal -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(addGoalACommand.equals(addGoalBCommand));"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"     * Generates a new AddGoalCommand with the details of the given goal."},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"    private AddGoalCommand getAddGoalCommandForGoal(Goal goal, Model model) {"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand command \u003d new AddGoalCommand(goal);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     * A Model stub that always throw a DuplicateGoalException when trying to add a goal."},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    private class ModelStubThrowingDuplicateGoalException extends AddCommandTest.ModelStub {"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        public void addGoal(Goal goal) throws DuplicateGoalException {"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"            throw new DuplicateGoalException();"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"            return new AddressBook();"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"     * A Model stub that always accept the goal being added."},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    private class ModelStubAcceptingGoalAdded extends AddCommandTest.ModelStub {"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        final ArrayList\u003cGoal\u003e goalsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        public void addGoal(Goal goal) throws DuplicateGoalException {"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"            requireNonNull(goal);"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"            goalsAdded.add(goal);"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":15,"deborahlow97":96}},{"path":"src/test/java/seedu/address/logic/commands/AddReminderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"public class AddReminderCommandTest {"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    public void constructor_nullReminder_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        new AddReminderCommand(null);"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    /*"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder validReminder \u003d new ReminderBuilder().build();"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        CommandResult commandResult \u003d getAddReminderCommandForReminder(validReminder, modelStub).execute();"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"        assertEquals(String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder), commandResult.feedbackToUser);"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"        assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_duplicateReminder_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateReminderException();"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder validReminder \u003d new ReminderBuilder().build();"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        thrown.expectMessage(AddReminderCommand.MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"        getAddReminderCommandForReminder(validReminder, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    */"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    public void equals() {"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder a \u003d new ReminderBuilder().withReminderText(\"A\").build();"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder b \u003d new ReminderBuilder().withReminderText(\"B\").build();"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"        AddReminderCommand addReminderACommand \u003d new AddReminderCommand(a);"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"        AddReminderCommand addReminderBCommand \u003d new AddReminderCommand(b);"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"        // same object -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(addReminderACommand.equals(addReminderACommand));"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        // same values -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"        AddReminderCommand addReminderACommandCopy \u003d new AddReminderCommand(a);"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(addReminderACommand.equals(addReminderACommandCopy));"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"        // different types -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(addReminderACommand.equals(1));"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        // null -\u003e returns false"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(addReminderACommand.equals(null));"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":"        // different reminder -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(addReminderACommand.equals(addReminderBCommand));"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"fuadsahmawi"},"content":"     * Generates a new AddReminderCommand with the details of the given reminder."},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"    private AddReminderCommand getAddReminderCommandForReminder(Reminder reminder, Model model) {"},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":"        AddReminderCommand command \u003d new AddReminderCommand(reminder);"},{"lineNumber":87,"author":{"gitID":"fuadsahmawi"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"        return command;"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"     * A Model stub that always throw a DuplicateReminderException when trying to add a reminder."},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":"    private class ModelStubThrowingDuplicateReminderException extends AddCommandTest.ModelStub {"},{"lineNumber":95,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"fuadsahmawi"},"content":"        public void addReminder(Reminder reminder) throws DuplicateReminderException {"},{"lineNumber":97,"author":{"gitID":"fuadsahmawi"},"content":"            throw new DuplicateReminderException();"},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":100,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"fuadsahmawi"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":102,"author":{"gitID":"fuadsahmawi"},"content":"            return new AddressBook();"},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"fuadsahmawi"},"content":"     * A Model stub that always accept the reminder being added."},{"lineNumber":108,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"    private class ModelStubAcceptingReminderAdded extends AddCommandTest.ModelStub {"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":112,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"fuadsahmawi"},"content":"        public void addReminder(Reminder reminder) throws DuplicateReminderException {"},{"lineNumber":114,"author":{"gitID":"fuadsahmawi"},"content":"            requireNonNull(reminder);"},{"lineNumber":115,"author":{"gitID":"fuadsahmawi"},"content":"            remindersAdded.add(reminder);"},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":101,"-":15,"deborahlow97":2}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"    public static final String VALID_MEETDATE_AMY \u003d \"14/04/2018\";"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"    public static final String VALID_MEETDATE_BOB \u003d \"15/04/2018\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"10/10/2000\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"03/04/1997\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_LEVEL_OF_FRIENDSHIP_AMY \u003d \"1\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_LEVEL_OF_FRIENDSHIP_BOB \u003d \"10\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_UNIT_NUMBER_AMY \u003d \"#10-10\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_UNIT_NUMBER_BOB \u003d \"#05-45\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_CCA_DANCE \u003d \"dance\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_CCA_BADMINTON \u003d \"badminton\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String LEVEL_OF_FRIENDSHIP_DESC_AMY \u003d \" \" + PREFIX_LEVEL_OF_FRIENDSHIP"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + VALID_LEVEL_OF_FRIENDSHIP_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String LEVEL_OF_FRIENDSHIP_DESC_BOB \u003d \" \" + PREFIX_LEVEL_OF_FRIENDSHIP"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + VALID_LEVEL_OF_FRIENDSHIP_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String UNIT_NUMBER_DESC_AMY \u003d \" \" + PREFIX_UNIT_NUMBER + VALID_UNIT_NUMBER_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String UNIT_NUMBER_DESC_BOB \u003d \" \" + PREFIX_UNIT_NUMBER + VALID_UNIT_NUMBER_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String CCA_DESC_DANCE \u003d \" \" + PREFIX_CCA + VALID_CCA_DANCE;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String CCA_DESC_BADMINTON \u003d \" \" + PREFIX_CCA + VALID_CCA_BADMINTON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            + \"24/15/1997\"; // month is invalid"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_LEVEL_OF_FRIENDSHIP_DESC \u003d \" \" + PREFIX_LEVEL_OF_FRIENDSHIP"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            + \"1Oa\"; // alphabets are not allowed in levelOfFriendships"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_UNIT_NUMBER_DESC \u003d \" \""},{"lineNumber":76,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER; // empty string not allowed for unit number"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_CCA_DESC \u003d \" \" + PREFIX_CCA + \"hubby*\"; // \u0027*\u0027 not allowed in ccas"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP_AMY).withUnitNumber(VALID_UNIT_NUMBER_AMY)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .withCcas(VALID_CCA_DANCE).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP_BOB).withUnitNumber(VALID_UNIT_NUMBER_BOB)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withCcas(VALID_CCA_BADMINTON, VALID_CCA_DANCE).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":3,"-":175}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SORT_BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SORT_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SORT_MEET_DATE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"content":"//@@author sham-sheer"},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SortCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index sortType \u003d INDEX_SORT_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        SortCommand sortCommand \u003d prepareCommand(sortType);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORTED_SUCCESS_LEVEL_OF_FRIENDSHIP, sortType);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedModel.sortPersons(sortType);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList2_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Index sortType \u003d INDEX_SORT_MEET_DATE;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SortCommand sortCommand \u003d prepareCommand(sortType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORTED_SUCCESS_MEET_DATE, sortType);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        expectedModel.sortPersons(sortType);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList3_success() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Index sortType \u003d INDEX_SORT_BIRTHDAY;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        SortCommand sortCommand \u003d prepareCommand(sortType);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SORTED_SUCCESS_BIRTHDAY, sortType);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.sortPersons(sortType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(sortCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(4);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        SortCommand sortCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(sortCommand, model, String.format(SortCommand.MESSAGE_INVALID_COMMAND_FORMAT, 4));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        SortCommand sortFirstCommand \u003d prepareCommand(Index.fromOneBased(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        SortCommand sortSecondCommand \u003d prepareCommand(Index.fromOneBased(3));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(sortFirstCommand.equals(sortFirstCommand));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        SortCommand sortFirstCommandCopy \u003d prepareCommand(Index.fromOneBased(1));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(sortFirstCommand.equals(sortFirstCommandCopy));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        sortFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertTrue(sortFirstCommand.equals(sortFirstCommandCopy));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertFalse(sortFirstCommand.equals(1));"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertFalse(sortFirstCommand.equals(null));"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertFalse(sortFirstCommand.equals(sortSecondCommand));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private SortCommand prepareCommand(Index index) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        SortCommand sortCommand \u003d new SortCommand(index);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return sortCommand;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":2,"-":115}},{"path":"src/test/java/seedu/address/logic/commands/AddGoalCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_B;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":" * Contains integration tests (interaction with the Model) for {@code AddGoalCommand}."},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        model \u003d new ModelManager(getTypicalGoalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public void execute_newGoal_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        Goal validGoal \u003d new GoalBuilder().withImportance(VALID_GOAL_IMPORTANCE_B).build();"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.addGoal(validGoal);"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(prepareCommand(validGoal, model), model,"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"                String.format(AddGoalCommand.MESSAGE_SUCCESS, validGoal), expectedModel);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    public void execute_duplicateGoal_throwsCommandException() {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        Goal goalInList \u003d model.getAddressBook().getGoalList().get(0);"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(prepareCommand(goalInList, model), model, AddGoalCommand.MESSAGE_DUPLICATE_GOAL);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"     * Generates a new {@code AddGoalCommand} which upon execution, adds {@code goal} into the {@code model}."},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    private AddGoalCommand prepareCommand(Goal goal, Model model) {"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        AddGoalCommand command \u003d new AddGoalCommand(goal);"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        return command;"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"-":9,"deborahlow97":49}},{"path":"src/test/java/seedu/address/logic/commands/ReminderCommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TEXT;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.getLocalDateTimeFromString;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":" * Contains helper methods for testing reminder commands."},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderCommandTestUtil {"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_TEXT_A \u003d \"Medical Appointment\";"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_TEXT_B \u003d \"CG2271 Finals\";"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_START_DATE_TIME_STRING_A \u003d \"2018-03-03 10:30\";"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_START_DATE_TIME_STRING_B \u003d \"2018-03-03 10:31\";"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_END_DATE_TIME_STRING_A \u003d \"2018-03-03 12:30\";"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_END_DATE_TIME_STRING_B \u003d \"\";"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_END_DATE_TIME_STRING_C \u003d \"14/10/2018 3pm\";"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String VALID_REMINDER_END_DATE_TIME_STRING_D \u003d \"10/10/2018 4pm\";"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_TEXT_DESC_A \u003d \" \" + PREFIX_REMINDER_TEXT + VALID_REMINDER_TEXT_A;"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_TEXT_DESC_B \u003d \" \" + PREFIX_REMINDER_TEXT + VALID_REMINDER_TEXT_B;"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_START_DATE_TIME_DESC_A \u003d \" \" + PREFIX_DATE"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"            + VALID_REMINDER_START_DATE_TIME_STRING_A;"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_START_DATE_TIME_DESC_B \u003d \" \" + PREFIX_DATE"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"            + VALID_REMINDER_START_DATE_TIME_STRING_B;"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_END_DATE_TIME_DESC_A \u003d \" \" + PREFIX_END_DATE"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"            + VALID_REMINDER_END_DATE_TIME_STRING_A;"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_END_DATE_TIME_DESC_B \u003d \" \" + PREFIX_END_DATE"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"            + VALID_REMINDER_END_DATE_TIME_STRING_B;"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String INVALID_REMINDER_TEXT_DESC \u003d \" \" + PREFIX_REMINDER_TEXT + \"\";"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    public static final LocalDateTime VALID_REMINDER_START_DATE_TIME_A;"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"    public static final LocalDateTime VALID_REMINDER_START_DATE_TIME_B;"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"    static {"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"        VALID_REMINDER_START_DATE_TIME_A \u003d getLocalDateTimeFromString(VALID_REMINDER_START_DATE_TIME_STRING_A);"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"        VALID_REMINDER_START_DATE_TIME_B \u003d getLocalDateTimeFromString(VALID_REMINDER_START_DATE_TIME_STRING_B);"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"                                            Model expectedModel) {"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (CommandException ce) {"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"     * - the address book and the filtered REMINDER list in the {@code actualModel} remain unchanged"},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"        // only do so by copying its components."},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":83,"author":{"gitID":"fuadsahmawi"},"content":"        List\u003cReminder\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredReminderList());"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":"            command.execute();"},{"lineNumber":87,"author":{"gitID":"fuadsahmawi"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (CommandException e) {"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredReminderList());"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":95,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"fuadsahmawi"},"content":"     * Deletes the first REMINDER in {@code model}\u0027s list from {@code model}\u0027s address book."},{"lineNumber":97,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"    public static void deleteFirstReminder(Model model) {"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder firstReminder \u003d model.getFilteredReminderList().get(0);"},{"lineNumber":100,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"fuadsahmawi"},"content":"            model.deleteReminder(firstReminder);"},{"lineNumber":102,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (ReminderNotFoundException pnfe) {"},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"            throw new AssertionError(\"Reminder in filtered list must exist in model.\", pnfe);"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"fuadsahmawi":92,"-":7,"deborahlow97":6}},{"path":"src/test/java/seedu/address/logic/commands/DeleteGoalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoalAddressBook;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOAL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":" * {@code DeleteGoalCommand}."},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"public class DeleteGoalCommandTest {"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    private Model model \u003d new ModelManager(getTypicalGoalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        Goal goalToDelete \u003d model.getFilteredGoalList().get(INDEX_FIRST_GOAL.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteGoalCommand \u003d prepareCommand(INDEX_FIRST_GOAL);"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(DeleteGoalCommand.MESSAGE_DELETE_GOAL_SUCCESS, goalToDelete);"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.deleteGoal(goalToDelete);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(deleteGoalCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteGoalCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(deleteGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        Goal goalToDelete \u003d model.getFilteredGoalList().get(INDEX_FIRST_GOAL.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteGoalCommand \u003d prepareCommand(INDEX_FIRST_GOAL);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        // delete -\u003e first goal deleted"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        deleteGoalCommand.execute();"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        undoRedoStack.push(deleteGoalCommand);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered goal list to show all goals"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        // redo -\u003e same first goal deleted again"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.deleteGoal(goalToDelete);"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteGoalCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        // execution failed -\u003e deleteGoalCommand not pushed into undoRedoStack"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(deleteGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"    public void equals() throws Exception {"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_GOAL);"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_GOAL);"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        // same object -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_GOAL);"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        // different types -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        // different goal -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"     * Returns a {@code DeleteGoalCommand} with the parameter {@code index}."},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    private DeleteGoalCommand prepareCommand(Index index) {"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"        DeleteGoalCommand deleteGoalCommand \u003d new DeleteGoalCommand(index);"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"        deleteGoalCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        return deleteGoalCommand;"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    private void showNoGoal(Model model) {"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"        model.updateFilteredGoalList(p -\u003e false);"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(model.getFilteredGoalList().isEmpty());"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":3,"-":15,"deborahlow97":116}},{"path":"src/test/java/seedu/address/logic/commands/ShowLofCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.model.person.LofContainsValuePredicate;"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":" * Contains integration tests (interaction with the Model) for {@code ShowLofCommand}."},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"public class ShowLofCommandTest {"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    public void execute_zeroValues_noPersonFound() {"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"        ShowLofCommand command \u003d prepareLofCommand(\" \");"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"    public void execute_multipleKeyValues_multiplePersonsFound() {"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"        ShowLofCommand command \u003d prepareLofCommand(\"7 10 3\");"},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":"     * Parses {@code userInput} into a {@code ShowLofCommand}."},{"lineNumber":52,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"zuweitrack"},"content":"    private ShowLofCommand prepareLofCommand(String userInput) {"},{"lineNumber":54,"author":{"gitID":"zuweitrack"},"content":"        ShowLofCommand command \u003d"},{"lineNumber":55,"author":{"gitID":"zuweitrack"},"content":"                new ShowLofCommand(new LofContainsValuePredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":56,"author":{"gitID":"zuweitrack"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"zuweitrack"},"content":"        return command;"},{"lineNumber":58,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":60,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"zuweitrack"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"zuweitrack"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"zuweitrack"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"zuweitrack"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":65,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":"    private void assertCommandSuccess(ShowLofCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":67,"author":{"gitID":"zuweitrack"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":68,"author":{"gitID":"zuweitrack"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":69,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":70,"author":{"gitID":"zuweitrack"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":71,"author":{"gitID":"zuweitrack"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":72,"author":{"gitID":"zuweitrack"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":73,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":53,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/AddReminderCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.VALID_REMINDER_TEXT_B;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.commands.ReminderCommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalReminderAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":" * Contains integration tests (interaction with the Model) for {@code AddReminderCommand}."},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"public class AddReminderCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        model \u003d new ModelManager(getTypicalReminderAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_newReminder_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder validReminder \u003d new ReminderBuilder().withReminderText(VALID_REMINDER_TEXT_B).build();"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        expectedModel.addReminder(validReminder);"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        assertCommandSuccess(prepareCommand(validReminder, model), model,"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"                String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder), expectedModel);"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_duplicateReminder_throwsCommandException() {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder reminderInList \u003d model.getAddressBook().getReminderList().get(0);"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        assertCommandFailure(prepareCommand(reminderInList, model),"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"                model, AddReminderCommand.MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"     * Generates a new {@code AddRemminderCommand} which upon execution, adds {@code reminder} into the {@code model}."},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    private AddReminderCommand prepareCommand(Reminder reminder, Model model) {"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"        AddReminderCommand command \u003d new AddReminderCommand(reminder);"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"        return command;"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":49,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/CompleteGoalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.DESC_GOAL_COMPLETED_C;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.DESC_GOAL_COMPLETED_D;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_COMPLETION_D;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_END_DATE_TIME_STRING_D;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.prepareRedoCommand;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.prepareUndoCommand;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoalAddressBook;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOAL;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand.CompleteGoalDescriptor;"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.CompleteGoalDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":" * CompleteGoalCommand."},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"public class CompleteGoalCommandTest {"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private Model model \u003d new ModelManager(getTypicalGoalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public void execute_allPreSpecifiedFieldsUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        Index indexLastGoal \u003d Index.fromOneBased(model.getFilteredGoalList().size());"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        Goal lastGoal \u003d model.getFilteredGoalList().get(indexLastGoal.getZeroBased());"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        GoalBuilder goalInList \u003d new GoalBuilder(lastGoal);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        Goal completedGoal \u003d goalInList.withCompletion(VALID_GOAL_COMPLETION_D)"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_D).build();"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_D)"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_D).build();"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand completeGoalCommand \u003d prepareCommand(indexLastGoal, descriptor);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(CompleteGoalCommand.MESSAGE_COMPLETE_GOAL_SUCCESS, completedGoal);"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.updateGoalWithoutParameters(lastGoal, completedGoal);"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(completeGoalCommand, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"    public void execute_invalidGoalIndexUnfilteredList_failure() {"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_D)"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_D).build();"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand completeGoalCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(completeGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        Goal completedGoal \u003d new GoalBuilder().build();"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        Goal goalToEdit \u003d model.getFilteredGoalList().get(INDEX_FIRST_GOAL.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder(completedGoal).build();"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand completeGoalCommand \u003d prepareCommand(INDEX_FIRST_GOAL, descriptor);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        // edit -\u003e first goal completed"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        completeGoalCommand.execute();"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        undoRedoStack.push(completeGoalCommand);"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered goal list to show all goals"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        // redo -\u003e same first goal completed again"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.updateGoalWithoutParameters(goalToEdit, completedGoal);"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor descriptor \u003d new CompleteGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_D)"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_D).build();"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand completeGoalCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"        // execution failed -\u003e completeGoalCommand not pushed into undoRedoStack"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(completeGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"    public void equals() throws Exception {"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        final CompleteGoalCommand standardCommand \u003d prepareCommand(INDEX_FIRST_GOAL, DESC_GOAL_COMPLETED_C);"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"        // same values -\u003e returns true"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor copyDescriptor \u003d new CompleteGoalDescriptor(DESC_GOAL_COMPLETED_C);"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_GOAL, copyDescriptor);"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"        // same object -\u003e returns true"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"        // null -\u003e returns false"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        // different types -\u003e returns false"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"        // different index -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new CompleteGoalCommand(INDEX_SECOND_GOAL, DESC_GOAL_COMPLETED_C)));"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new CompleteGoalCommand(INDEX_FIRST_GOAL, DESC_GOAL_COMPLETED_D)));"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code CompleteGoalCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"    private CompleteGoalCommand prepareCommand(Index index, CompleteGoalDescriptor descriptor) {"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand completeGoalCommand \u003d new CompleteGoalCommand(index, descriptor);"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        completeGoalCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"        return completeGoalCommand;"},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"A0158738X":11,"-":4,"deborahlow97":136}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        TagContainsKeywordsPredicate thirdPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"third\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        // null -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(findThirdCommand.equals(null));"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        // different predicate -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(findFirstCommand.equals(findThirdCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d prepareNameCommand(\" \");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_multipleNameKeywords_multiplePersonsFound() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d prepareNameCommand(\"Kurz Elle Kunz\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_multipleTagKeywords_multiplePersonsFound() {"},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d prepareTagCommand(\"friends owesMoney\");"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"    private FindCommand prepareNameCommand(String userInput) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"fuadsahmawi"},"content":"    private FindCommand prepareTagCommand(String userInput) {"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":28,"-":101}},{"path":"src/test/java/seedu/address/logic/commands/MeetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETDATE_BOB;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":30,"content":"//@@author sham-sheer"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"public class MeetCommandTest {"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    public static final String MEETDATE_STUB \u003d \"14/04/2018\";"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":"    public void execute_addMeetDateUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson).withMeetDate(MEETDATE_STUB).build();"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getMeetDate().value);"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":"        String expectedMessage \u003d String.format(MeetCommand.MESSAGE_ADD_MEETDATE_SUCCESS, editedPerson.getName());"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"A0158738X"},"content":"        expectedModel.updatePerson(firstPerson, editedPerson);"},{"lineNumber":52,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(meetCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":56,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"    public void execute_deleteMeetDateUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"A0158738X"},"content":"        Person editedPerson \u003d new PersonBuilder(firstPerson).withMeetDate(\"\").build();"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getMeetDate().toString());"},{"lineNumber":62,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"        String expectedMessage \u003d String.format(MeetCommand.MESSAGE_DELETE_MEETDATE_SUCCESS, editedPerson.getName());"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"A0158738X"},"content":"        expectedModel.updatePerson(firstPerson, editedPerson);"},{"lineNumber":67,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(meetCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"A0158738X"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":75,"author":{"gitID":"A0158738X"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"A0158738X"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":77,"author":{"gitID":"A0158738X"},"content":"                .withMeetDate(MEETDATE_STUB).build();"},{"lineNumber":78,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":79,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getMeetDate().value);"},{"lineNumber":80,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":81,"author":{"gitID":"A0158738X"},"content":"        String expectedMessage \u003d String.format(MeetCommand.MESSAGE_ADD_MEETDATE_SUCCESS, editedPerson.getName());"},{"lineNumber":82,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":83,"author":{"gitID":"A0158738X"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"A0158738X"},"content":"        expectedModel.updatePerson(firstPerson, editedPerson);"},{"lineNumber":85,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":86,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(meetCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":89,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"A0158738X"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":91,"author":{"gitID":"A0158738X"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":92,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(outOfBoundIndex, VALID_MEETDATE_BOB);"},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"        assertCommandFailure(meetCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":97,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"A0158738X"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":99,"author":{"gitID":"A0158738X"},"content":"     * but smaller than size of address book"},{"lineNumber":100,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"A0158738X"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":108,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(outOfBoundIndex, VALID_MEETDATE_BOB);"},{"lineNumber":109,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":110,"author":{"gitID":"A0158738X"},"content":"        assertCommandFailure(meetCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":111,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":113,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"A0158738X"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":115,"author":{"gitID":"A0158738X"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":116,"author":{"gitID":"A0158738X"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":117,"author":{"gitID":"A0158738X"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":118,"author":{"gitID":"A0158738X"},"content":"        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"A0158738X"},"content":"        Person modifiedPerson \u003d new PersonBuilder(personToModify).withMeetDate(MEETDATE_STUB).build();"},{"lineNumber":120,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(INDEX_FIRST_PERSON, MEETDATE_STUB);"},{"lineNumber":121,"author":{"gitID":"A0158738X"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":122,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":123,"author":{"gitID":"A0158738X"},"content":"        // meet date -\u003e first person meet date changed"},{"lineNumber":124,"author":{"gitID":"A0158738X"},"content":"        meetCommand.execute();"},{"lineNumber":125,"author":{"gitID":"A0158738X"},"content":"        undoRedoStack.push(meetCommand);"},{"lineNumber":126,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":127,"author":{"gitID":"A0158738X"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":128,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":129,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":130,"author":{"gitID":"A0158738X"},"content":"        // redo -\u003e same first person modified again"},{"lineNumber":131,"author":{"gitID":"A0158738X"},"content":"        expectedModel.updatePerson(personToModify, modifiedPerson);"},{"lineNumber":132,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":133,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":135,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"A0158738X"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":137,"author":{"gitID":"A0158738X"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":138,"author":{"gitID":"A0158738X"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":139,"author":{"gitID":"A0158738X"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":140,"author":{"gitID":"A0158738X"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":141,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d prepareCommand(outOfBoundIndex, \"\");"},{"lineNumber":142,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":143,"author":{"gitID":"A0158738X"},"content":"        // execution failed -\u003e remarkCommand not pushed into undoRedoStack"},{"lineNumber":144,"author":{"gitID":"A0158738X"},"content":"        assertCommandFailure(meetCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":145,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":146,"author":{"gitID":"A0158738X"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":147,"author":{"gitID":"A0158738X"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":148,"author":{"gitID":"A0158738X"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":149,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":151,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"A0158738X"},"content":"     * 1. Modifies {@code Person#remark} from a filtered list."},{"lineNumber":153,"author":{"gitID":"A0158738X"},"content":"     * 2. Undo the modification."},{"lineNumber":154,"author":{"gitID":"A0158738X"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"},{"lineNumber":155,"author":{"gitID":"A0158738X"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":156,"author":{"gitID":"A0158738X"},"content":"     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."},{"lineNumber":157,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"A0158738X"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":160,"author":{"gitID":"A0158738X"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":161,"author":{"gitID":"A0158738X"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"A0158738X"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"A0158738X"},"content":"        MeetCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, MEETDATE_STUB);"},{"lineNumber":164,"author":{"gitID":"A0158738X"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":165,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":166,"author":{"gitID":"A0158738X"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":167,"author":{"gitID":"A0158738X"},"content":"        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":168,"author":{"gitID":"A0158738X"},"content":"        Person modifiedPerson \u003d new PersonBuilder(personToModify).withMeetDate(MEETDATE_STUB).build();"},{"lineNumber":169,"author":{"gitID":"A0158738X"},"content":"        // meet date -\u003e modifies second person in unfiltered person list / first person in filtered person list"},{"lineNumber":170,"author":{"gitID":"A0158738X"},"content":"        remarkCommand.execute();"},{"lineNumber":171,"author":{"gitID":"A0158738X"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":172,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":173,"author":{"gitID":"A0158738X"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":174,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":176,"author":{"gitID":"A0158738X"},"content":"        expectedModel.updatePerson(personToModify, modifiedPerson);"},{"lineNumber":177,"author":{"gitID":"A0158738X"},"content":"        assertNotEquals(personToModify, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":178,"author":{"gitID":"A0158738X"},"content":"        // redo -\u003e modifies same second person in unfiltered person list"},{"lineNumber":179,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":180,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":182,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":183,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":184,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"A0158738X"},"content":"    public void equals() {"},{"lineNumber":186,"author":{"gitID":"A0158738X"},"content":"        String testDate \u003d \"15/03/2018\";"},{"lineNumber":187,"author":{"gitID":"A0158738X"},"content":"        String testDateTwo \u003d \"16/03/2018\";"},{"lineNumber":188,"author":{"gitID":"A0158738X"},"content":"        final MeetCommand standardCommand \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(testDate));"},{"lineNumber":189,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":190,"author":{"gitID":"A0158738X"},"content":"        // same values -\u003e returns true"},{"lineNumber":191,"author":{"gitID":"A0158738X"},"content":"        MeetCommand commandWithSameValues \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(testDate));"},{"lineNumber":192,"author":{"gitID":"A0158738X"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":193,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":194,"author":{"gitID":"A0158738X"},"content":"        // same object -\u003e returns true"},{"lineNumber":195,"author":{"gitID":"A0158738X"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":196,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":197,"author":{"gitID":"A0158738X"},"content":"        // null -\u003e returns false"},{"lineNumber":198,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":199,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":200,"author":{"gitID":"A0158738X"},"content":"        // different types -\u003e returns false"},{"lineNumber":201,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":202,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":203,"author":{"gitID":"A0158738X"},"content":"        // different index -\u003e returns false"},{"lineNumber":204,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(new MeetCommand(INDEX_SECOND_PERSON, new Meet(testDate))));"},{"lineNumber":205,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":206,"author":{"gitID":"A0158738X"},"content":"        // different remark -\u003e returns false"},{"lineNumber":207,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(new MeetCommand(INDEX_FIRST_PERSON, new Meet(testDateTwo))));"},{"lineNumber":208,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":210,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"A0158738X"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}."},{"lineNumber":212,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"A0158738X"},"content":"    private MeetCommand prepareCommand(Index index, String date) {"},{"lineNumber":214,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d new MeetCommand(index, new Meet(date));"},{"lineNumber":215,"author":{"gitID":"A0158738X"},"content":"        meetCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":216,"author":{"gitID":"A0158738X"},"content":"        return meetCommand;"},{"lineNumber":217,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"A0158738X"},"content":"}"},{"lineNumber":219,"author":{"gitID":"A0158738X"},"content":""}],"authorContributionMap":{"null":1,"A0158738X":214,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMeetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"content":"//@@author sham-sheer"},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteMeetCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteMeetCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel.deleteMeetDate(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteMeetCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteMeetCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /*@Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteMeetCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deleteMeetDate(personToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteMeetCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }*/"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteMeetCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteMeetCommand.execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteMeetCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.deleteMeetDate(personToDelete);"},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"A0158738X"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"A0158738X"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"A0158738X"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"A0158738X"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteMeetCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        deleteMeetCommand.execute();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteMeetCommand);"},{"lineNumber":142,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":143,"author":{"gitID":"A0158738X"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":144,"author":{"gitID":"A0158738X"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":145,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedModel.deleteMeetDate(personToDelete);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteFirstMeetCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteSecondMeetCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstMeetCommand.equals(deleteFirstMeetCommand));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteFirstMeetCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstMeetCommand.equals(deleteFirstMeetCommandCopy));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        deleteFirstMeetCommandCopy.preprocessUndoableCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstMeetCommand.equals(deleteFirstMeetCommandCopy));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstMeetCommand.equals(1));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstMeetCommand.equals(null));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstMeetCommand.equals(deleteSecondMeetCommand));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteMeetCommand} with the parameter {@code index}."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private DeleteMeetCommand prepareCommand(Index index) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        DeleteMeetCommand deleteMeetCommand \u003d new DeleteMeetCommand(index);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        deleteMeetCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return deleteMeetCommand;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":14,"-":180}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"    public static class ModelStub implements Model {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":113,"author":{"gitID":"A0158738X"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"A0158738X"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"content":"        //@@author sham-sheer"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void sortPersons(Index index) throws IndexOutOfBoundsException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"A0158738X"},"content":"        public void deleteMeetDate(Person person) throws PersonNotFoundException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"content":"        //@@author"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"        //@@author deborahlow97"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"        public void addGoal(Goal goal) throws DuplicateGoalException {"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"        public ObservableList\u003cGoal\u003e getFilteredGoalList() {"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"            return null;"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"        public void updateFilteredGoalList(Predicate\u003cGoal\u003e predicate) {"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"        public void deleteGoal(Goal target) throws GoalNotFoundException {"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"        public void updateGoal(Goal target, Goal editedGoal)"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"                throws DuplicateGoalException {"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":190,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"deborahlow97"},"content":"        public void updateGoalWithoutParameters(Goal target, Goal editedGoal)"},{"lineNumber":192,"author":{"gitID":"deborahlow97"},"content":"                throws GoalNotFoundException {"},{"lineNumber":193,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":194,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":196,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"deborahlow97"},"content":"        public void sortGoal(String goalField, String goalOrder) throws EmptyGoalListException {"},{"lineNumber":198,"author":{"gitID":"deborahlow97"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":199,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":201,"author":{"gitID":"fuadsahmawi"},"content":"        //@@author fuadsahmawi"},{"lineNumber":202,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"fuadsahmawi"},"content":"        public void addReminder(Reminder reminder) throws DuplicateReminderException {"},{"lineNumber":204,"author":{"gitID":"fuadsahmawi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":207,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"fuadsahmawi"},"content":"        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"},{"lineNumber":209,"author":{"gitID":"fuadsahmawi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":212,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"fuadsahmawi"},"content":"        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"},{"lineNumber":214,"author":{"gitID":"fuadsahmawi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"fuadsahmawi"},"content":"            return null;"},{"lineNumber":216,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":218,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"fuadsahmawi"},"content":"        public void deleteReminder(Reminder target) throws ReminderNotFoundException {"},{"lineNumber":220,"author":{"gitID":"fuadsahmawi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":221,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":223,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":225,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"fuadsahmawi"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":227,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"fuadsahmawi"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":229,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"fuadsahmawi"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":231,"author":{"gitID":"fuadsahmawi"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":232,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":234,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"fuadsahmawi"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":236,"author":{"gitID":"fuadsahmawi"},"content":"            return new AddressBook();"},{"lineNumber":237,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":240,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"fuadsahmawi"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":242,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"fuadsahmawi"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":244,"author":{"gitID":"fuadsahmawi"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":245,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":246,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"fuadsahmawi"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":248,"author":{"gitID":"fuadsahmawi"},"content":"            requireNonNull(person);"},{"lineNumber":249,"author":{"gitID":"fuadsahmawi"},"content":"            personsAdded.add(person);"},{"lineNumber":250,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":252,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"fuadsahmawi"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":254,"author":{"gitID":"fuadsahmawi"},"content":"            return new AddressBook();"},{"lineNumber":255,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":258,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"null":2,"A0158738X":6,"fuadsahmawi":62,"-":143,"deborahlow97":45}},{"path":"src/test/java/seedu/address/logic/commands/GoalCommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL_TEXT;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_FIELD;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.getLocalDateTimeFromString;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.CompleteGoalDescriptorBuilder;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.EditGoalDescriptorBuilder;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.OngoingGoalDescriptorBuilder;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"public class GoalCommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_TEXT_A \u003d \"Make 10 new friends in university\";"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_TEXT_B \u003d \"Drink 8 glasses of water everyday - stay hydrated!!\";"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_IMPORTANCE_A \u003d \"1\";"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_IMPORTANCE_B \u003d \"10\";"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_START_DATE_TIME_STRING_A \u003d \"2018-03-03 10:30\";"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_START_DATE_TIME_STRING_B \u003d \"2018-03-03 10:31\";"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_END_DATE_TIME_STRING_A \u003d \"2018-04-04 10:30\";"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_END_DATE_TIME_STRING_B \u003d \"\";"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_END_DATE_TIME_STRING_C \u003d \"14/10/2018 3pm\";"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_END_DATE_TIME_STRING_D \u003d \"10/10/2018 4pm\";"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean VALID_GOAL_COMPLETION_A \u003d true;"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean VALID_GOAL_COMPLETION_B \u003d false;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean VALID_GOAL_COMPLETION_C \u003d true;"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean VALID_GOAL_COMPLETION_D \u003d true;"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean VALID_GOAL_COMPLETION_E \u003d false;"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_END_DATE_TIME \u003d \"\";"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_SORT_FIELD_A \u003d \"importance\";"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_SORT_FIELD_B \u003d \"startdatetime\";"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_SORT_ORDER_A \u003d \"ascending\";"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    public static final String VALID_GOAL_SORT_ORDER_B \u003d \"descending\";"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    public static final String INVALID_GOAL_SORT_ORDER \u003d \" \" + PREFIX_SORT_ORDER + \"increasing\";"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    public static final String INVALID_GOAL_SORT_FIELD \u003d \" \" + PREFIX_SORT_FIELD + \"invalid\";"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_TEXT_DESC_A \u003d \" \" + PREFIX_GOAL_TEXT + VALID_GOAL_TEXT_A;"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_TEXT_DESC_B \u003d \" \" + PREFIX_GOAL_TEXT + VALID_GOAL_TEXT_B;"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_IMPORTANCE_DESC_A \u003d \" \" + PREFIX_IMPORTANCE + VALID_GOAL_IMPORTANCE_A;"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_IMPORTANCE_DESC_B \u003d \" \" + PREFIX_IMPORTANCE + VALID_GOAL_IMPORTANCE_B;"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_SORT_ORDER_DESC_A \u003d \" \" + PREFIX_SORT_ORDER + VALID_GOAL_SORT_ORDER_A;"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_SORT_ORDER_DESC_B \u003d \" \" + PREFIX_SORT_ORDER + VALID_GOAL_SORT_ORDER_B;"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_SORT_FIELD_DESC_A \u003d \" \" + PREFIX_SORT_FIELD + VALID_GOAL_SORT_FIELD_A;"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_SORT_FIELD_DESC_B \u003d \" \" + PREFIX_SORT_FIELD + VALID_GOAL_SORT_FIELD_B;"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"    public static final String INVALID_IMPORTANCE_DESC \u003d \" \" + PREFIX_IMPORTANCE + \"-1\";"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    // negative numbers not allowed in importance"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    public static final String INVALID_GOAL_TEXT_DESC \u003d \" \" + PREFIX_GOAL_TEXT + \"\";"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    public static final LocalDateTime VALID_GOAL_START_DATE_TIME_A;"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    public static final LocalDateTime VALID_GOAL_START_DATE_TIME_B;"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"    public static final EditGoalCommand.EditGoalDescriptor DESC_GOAL_A;"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    public static final EditGoalCommand.EditGoalDescriptor DESC_GOAL_B;"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    public static final CompleteGoalCommand.CompleteGoalDescriptor DESC_GOAL_COMPLETED_C;"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    public static final CompleteGoalCommand.CompleteGoalDescriptor DESC_GOAL_COMPLETED_D;"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    public static final OngoingGoalCommand.OngoingGoalDescriptor DESC_GOAL_COMPLETED_E;"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"    public static final OngoingGoalCommand.OngoingGoalDescriptor DESC_GOAL_COMPLETED_F;"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    static {"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        VALID_GOAL_START_DATE_TIME_A \u003d getLocalDateTimeFromString(VALID_GOAL_START_DATE_TIME_STRING_A);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        VALID_GOAL_START_DATE_TIME_B \u003d getLocalDateTimeFromString(VALID_GOAL_START_DATE_TIME_STRING_B);"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        DESC_GOAL_A \u003d new EditGoalDescriptorBuilder().withImportance(VALID_GOAL_IMPORTANCE_A)"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"                .withGoalText(VALID_GOAL_TEXT_A).build();"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        DESC_GOAL_B \u003d new EditGoalDescriptorBuilder().withGoalText(VALID_GOAL_TEXT_A)"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"                .withImportance(VALID_GOAL_IMPORTANCE_B).build();"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        DESC_GOAL_COMPLETED_C \u003d new CompleteGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_C)"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_C).build();"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        DESC_GOAL_COMPLETED_D \u003d new CompleteGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_D)"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_D).build();"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        DESC_GOAL_COMPLETED_E \u003d new OngoingGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_E)"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME).build();"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        DESC_GOAL_COMPLETED_F \u003d new OngoingGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_E)"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME).build();"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"                                            Model expectedModel) {"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        } catch (CommandException ce) {"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"     * - the address book and the filtered goal list in the {@code actualModel} remain unchanged"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"        // only do so by copying its components."},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredGoalList());"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"            command.execute();"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"        } catch (CommandException e) {"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredGoalList());"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"     * Deletes the first GOAL in {@code model}\u0027s list from {@code model}\u0027s address book."},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"    public static void deleteFirstGoal(Model model) {"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        Goal firstGoal \u003d model.getFilteredGoalList().get(0);"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"            model.deleteGoal(firstGoal);"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"        } catch (GoalNotFoundException pnfe) {"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"Goal in filtered list must exist in model.\", pnfe);"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"        return undoCommand;"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"        return redoCommand;"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":159}},{"path":"src/test/java/seedu/address/logic/commands/OngoingGoalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.DESC_GOAL_COMPLETED_E;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_COMPLETION_E;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_END_DATE_TIME;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoalAddressBook;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOAL;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand.OngoingGoalDescriptor;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.OngoingGoalDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":" * OngoingGoalCommand."},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"public class OngoingGoalCommandTest {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    private Model model \u003d new ModelManager(getTypicalGoalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public void execute_goalAlreadyOngoingUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        Index indexLastGoal \u003d Index.fromOneBased(model.getFilteredGoalList().size());"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        Goal lastGoal \u003d model.getFilteredGoalList().get(indexLastGoal.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        GoalBuilder goalInList \u003d new GoalBuilder(lastGoal);"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        Goal ongoingGoal \u003d goalInList.withCompletion(VALID_GOAL_COMPLETION_E)"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME).build();"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor descriptor \u003d new OngoingGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_E)"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME).build();"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand ongoingGoalCommand \u003d prepareCommand(indexLastGoal, descriptor);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        String expectedCommandException \u003d Messages.MESSAGE_GOAL_ONGOING_ERROR;"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.updateGoalWithoutParameters(lastGoal, ongoingGoal);"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(ongoingGoalCommand, model, expectedCommandException);"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    public void execute_invalidGoalIndexUnfilteredList_failure() {"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor descriptor \u003d new OngoingGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_E)"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME).build();"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand ongoingGoalCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(ongoingGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor descriptor \u003d new OngoingGoalDescriptorBuilder().withCompletion(VALID_GOAL_COMPLETION_E)"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"                .withEndDateTime(VALID_GOAL_END_DATE_TIME).build();"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand ongoingGoalCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        // execution failed -\u003e ongoingGoalCommand not pushed into undoRedoStack"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(ongoingGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    public void equals() throws Exception {"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        final OngoingGoalCommand standardCommand \u003d prepareCommand(INDEX_FIRST_GOAL, DESC_GOAL_COMPLETED_E);"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        // same values -\u003e returns true"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor copyDescriptor \u003d new OngoingGoalDescriptor(DESC_GOAL_COMPLETED_E);"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_GOAL, copyDescriptor);"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        // null -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        // different types -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        // different index -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new OngoingGoalCommand(INDEX_SECOND_GOAL, DESC_GOAL_COMPLETED_E)));"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code OngoingGoalCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    private OngoingGoalCommand prepareCommand(Index index, OngoingGoalDescriptor descriptor) {"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand ongoingGoalCommand \u003d new OngoingGoalCommand(index, descriptor);"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        ongoingGoalCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        return ongoingGoalCommand;"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":7,"-":7,"deborahlow97":104}},{"path":"src/test/java/seedu/address/logic/commands/EditGoalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.DESC_GOAL_A;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.DESC_GOAL_B;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_B;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_TEXT_B;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.prepareRedoCommand;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.prepareUndoCommand;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoalAddressBook;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GOAL;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GOAL;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand.EditGoalDescriptor;"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.EditGoalDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.GoalBuilder;"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":" * EditGoalCommand."},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"public class EditGoalCommandTest {"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private Model model \u003d new ModelManager(getTypicalGoalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        Goal editedGoal \u003d new GoalBuilder().build();"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder(editedGoal).build();"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(INDEX_FIRST_GOAL, descriptor);"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(EditGoalCommand.MESSAGE_EDIT_GOAL_SUCCESS, editedGoal);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.updateGoal(model.getFilteredGoalList().get(0), editedGoal);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(editGoalCommand, model, expectedMessage, expectedModel);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        Index indexLastGoal \u003d Index.fromOneBased(model.getFilteredGoalList().size());"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        Goal lastGoal \u003d model.getFilteredGoalList().get(indexLastGoal.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        GoalBuilder goalInList \u003d new GoalBuilder(lastGoal);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        Goal editedGoal \u003d goalInList.withGoalText(VALID_GOAL_TEXT_B).withImportance(VALID_GOAL_IMPORTANCE_B).build();"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withGoalText(VALID_GOAL_TEXT_B)"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"                .withImportance(VALID_GOAL_IMPORTANCE_B).build();"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(indexLastGoal, descriptor);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(EditGoalCommand.MESSAGE_EDIT_GOAL_SUCCESS, editedGoal);"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.updateGoal(lastGoal, editedGoal);"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(editGoalCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(INDEX_FIRST_GOAL, new EditGoalDescriptor());"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        Goal editedGoal \u003d model.getFilteredGoalList().get(INDEX_FIRST_GOAL.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(EditGoalCommand.MESSAGE_EDIT_GOAL_SUCCESS, editedGoal);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(editGoalCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    public void execute_duplicateGoalUnfilteredList_failure() {"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        Goal firstGoal \u003d model.getFilteredGoalList().get(INDEX_FIRST_GOAL.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder(firstGoal).build();"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(INDEX_SECOND_GOAL, descriptor);"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(editGoalCommand, model, EditGoalCommand.MESSAGE_DUPLICATE_GOAL);"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    public void execute_invalidGoalIndexUnfilteredList_failure() {"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withImportance(VALID_GOAL_IMPORTANCE_B).build();"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(editGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        Goal editedGoal \u003d new GoalBuilder().build();"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        Goal goalToEdit \u003d model.getFilteredGoalList().get(INDEX_FIRST_GOAL.getZeroBased());"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder(editedGoal).build();"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(INDEX_FIRST_GOAL, descriptor);"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        // edit -\u003e first goal edited"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"        editGoalCommand.execute();"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"        undoRedoStack.push(editGoalCommand);"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered goal list to show all goals"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        // redo -\u003e same first goal edited again"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"        expectedModel.updateGoal(goalToEdit, editedGoal);"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGoalList().size() + 1);"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor descriptor \u003d new EditGoalDescriptorBuilder().withGoalText(VALID_GOAL_TEXT_B).build();"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        // execution failed -\u003e editGoalCommand not pushed into undoRedoStack"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(editGoalCommand, model, Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"    public void equals() throws Exception {"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        final EditGoalCommand standardCommand \u003d prepareCommand(INDEX_FIRST_GOAL, DESC_GOAL_A);"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"        // same values -\u003e returns true"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor copyDescriptor \u003d new EditGoalDescriptor(DESC_GOAL_A);"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_GOAL, copyDescriptor);"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"        // same object -\u003e returns true"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"        // null -\u003e returns false"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"        // different types -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"        // different index -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new EditGoalCommand(INDEX_SECOND_GOAL, DESC_GOAL_A)));"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(standardCommand.equals(new EditGoalCommand(INDEX_FIRST_GOAL, DESC_GOAL_B)));"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code EditGoalCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"    private EditGoalCommand prepareCommand(Index index, EditGoalDescriptor descriptor) {"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand editGoalCommand \u003d new EditGoalCommand(index, descriptor);"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"        editGoalCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"        return editGoalCommand;"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":11,"-":4,"deborahlow97":167}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_UNIT_NUMBER \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"example\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_LEVEL_OF_FRIENDSHIP \u003d \"10a\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_CCA \u003d \"222!@\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_LEVEL_OF_FRIENDSHIP \u003d BENSON.getLevelOfFriendship().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_UNIT_NUMBER \u003d BENSON.getUnitNumber().toString();"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"    private static final String VALID_MEETDATE \u003d BENSON.getMeetDate().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedCca\u003e VALID_CCAS \u003d BENSON.getCcas().stream()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedCca::new)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"                        VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":"                VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":"                        VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_BIRTHDAY,"},{"lineNumber":78,"author":{"gitID":"A0158738X"},"content":"                VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_invalidBirthday_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_BIRTHDAY,"},{"lineNumber":87,"author":{"gitID":"A0158738X"},"content":"                        VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_nullBirthday_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":"                VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_invalidLevelOfFriendship_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":"                        INVALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d LevelOfFriendship.MESSAGE_LEVEL_OF_FRIENDSHIP_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void toModelType_nullLevelOfFriendship_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":"                 null, VALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LevelOfFriendship.class.getSimpleName());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void toModelType_invalidUnitNumber_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":121,"author":{"gitID":"A0158738X"},"content":"                        VALID_LEVEL_OF_FRIENDSHIP, INVALID_UNIT_NUMBER, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d UnitNumber.MESSAGE_UNIT_NUMBER_CONSTRAINTS;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void toModelType_nullUnitNumber_throwsIllegalValueException() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":129,"author":{"gitID":"A0158738X"},"content":"                VALID_LEVEL_OF_FRIENDSHIP, null, VALID_MEETDATE, VALID_CCAS, VALID_TAGS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, UnitNumber.class.getSimpleName());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void toModelType_invalidCcas_throwsIllegalValueException() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedCca\u003e invalidCcas \u003d new ArrayList\u003c\u003e(VALID_CCAS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        invalidCcas.add(new XmlAdaptedCca(INVALID_CCA));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":140,"author":{"gitID":"A0158738X"},"content":"                        VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, \"\", invalidCcas, VALID_TAGS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_BIRTHDAY,"},{"lineNumber":150,"author":{"gitID":"A0158738X"},"content":"                        VALID_LEVEL_OF_FRIENDSHIP, VALID_UNIT_NUMBER, \"\", VALID_CCAS, invalidTags);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":13,"-":141}},{"path":"src/test/java/seedu/address/logic/commands/SeekRaCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RA_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumberContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":" * Contains integration tests (interaction with the Model) for {@code SeekRaCommand}."},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"public class SeekRaCommandTest {"},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand seekRaFirstCommand \u003d new SeekRaCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand seekRaSecondCommand \u003d new SeekRaCommand(secondPredicate);"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(seekRaFirstCommand.equals(seekRaFirstCommand));"},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand seekRaFirstCommandCopy \u003d new SeekRaCommand(firstPredicate);"},{"lineNumber":53,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(seekRaFirstCommand.equals(seekRaFirstCommandCopy));"},{"lineNumber":54,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":55,"author":{"gitID":"zuweitrack"},"content":"        // different types -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(seekRaFirstCommand.equals(1));"},{"lineNumber":57,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":58,"author":{"gitID":"zuweitrack"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(seekRaFirstCommand.equals(null));"},{"lineNumber":60,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":61,"author":{"gitID":"zuweitrack"},"content":"        // different person -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(seekRaFirstCommand.equals(seekRaSecondCommand));"},{"lineNumber":63,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":65,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":67,"author":{"gitID":"zuweitrack"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RA_LISTED_OVERVIEW, 0);"},{"lineNumber":68,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand command \u003d prepareNameCommand(\" \");"},{"lineNumber":69,"author":{"gitID":"zuweitrack"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":72,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"zuweitrack"},"content":"    public void execute_multipleNameKeywords_multiplePersonsFound() {"},{"lineNumber":74,"author":{"gitID":"zuweitrack"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RA_LISTED_OVERVIEW, 3);"},{"lineNumber":75,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand command \u003d prepareNameCommand(\"Kurz Elle Kunz\");"},{"lineNumber":76,"author":{"gitID":"zuweitrack"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":77,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":79,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"zuweitrack"},"content":"    public void execute_multipleTagKeywords_multiplePersonsFound() {"},{"lineNumber":81,"author":{"gitID":"zuweitrack"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RA_LISTED_OVERVIEW, 7);"},{"lineNumber":82,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand command \u003d prepareTagCommand(\"friends owesMoney\");"},{"lineNumber":83,"author":{"gitID":"zuweitrack"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":84,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":86,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"zuweitrack"},"content":"     * Parses {@code userInput} into a {@code SeekRaCommand}."},{"lineNumber":88,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"zuweitrack"},"content":"    private SeekRaCommand prepareNameCommand(String userInput) {"},{"lineNumber":90,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand command \u003d"},{"lineNumber":91,"author":{"gitID":"zuweitrack"},"content":"                new SeekRaCommand(new UnitNumberContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":92,"author":{"gitID":"zuweitrack"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"zuweitrack"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":96,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"zuweitrack"},"content":"     * Parses {@code userInput} into a {@code SeekRaCommand}."},{"lineNumber":98,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"zuweitrack"},"content":"    private SeekRaCommand prepareTagCommand(String userInput) {"},{"lineNumber":100,"author":{"gitID":"zuweitrack"},"content":"        SeekRaCommand command \u003d"},{"lineNumber":101,"author":{"gitID":"zuweitrack"},"content":"                new SeekRaCommand(new UnitNumberContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":102,"author":{"gitID":"zuweitrack"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"zuweitrack"},"content":"        return command;"},{"lineNumber":104,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":106,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"zuweitrack"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"zuweitrack"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"zuweitrack"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"zuweitrack"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":111,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"zuweitrack"},"content":"    private void assertCommandSuccess(SeekRaCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":113,"author":{"gitID":"zuweitrack"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":114,"author":{"gitID":"zuweitrack"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":115,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":116,"author":{"gitID":"zuweitrack"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":117,"author":{"gitID":"zuweitrack"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":118,"author":{"gitID":"zuweitrack"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":119,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":91,"fuadsahmawi":4,"-":25}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":99,"author":{"gitID":"zuweitrack"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"zuweitrack"},"content":"        public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":3,"-":103}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":127,"author":{"gitID":"zuweitrack"},"content":"        backupAddressBook(null, \"SomeFile.xml.backup\");"},{"lineNumber":128,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":130,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"zuweitrack"},"content":"     * Backup {@code addressBook} at the specified {@code filePath.backup}."},{"lineNumber":132,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"zuweitrack"},"content":"    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":144,"author":{"gitID":"zuweitrack"},"content":"        backupAddressBook(new AddressBook(), null);"},{"lineNumber":145,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":146,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":13,"-":135}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedReminderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.storage.XmlAdaptedReminder.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalReminders.REMINDER_B;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.DateTime;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.EndDateTime;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderText;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"public class XmlAdaptedReminderTest {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    private static final String INVALID_REMINDER_TEXT \u003d \" \";"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    private static final String VALID_REMINDER_TEXT \u003d REMINDER_B.getReminderText().toString();"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    private static final String VALID_START_DATE_TIME \u003d REMINDER_B.getDateTime().toString();"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    private static final String VALID_END_DATE_TIME \u003d REMINDER_B.getEndDateTime().toString();"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"    public void toModelType_invalidReminderText_throwsIllegalValueException() {"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        XmlAdaptedReminder reminder \u003d"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"                new XmlAdaptedReminder(INVALID_REMINDER_TEXT, VALID_START_DATE_TIME, VALID_END_DATE_TIME);"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d ReminderText.MESSAGE_REMINDER_TEXT_CONSTRAINTS;"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    public void toModelType_nullReminderText_throwsIllegalValueException() {"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        XmlAdaptedReminder reminder \u003d new XmlAdaptedReminder(null, VALID_START_DATE_TIME,"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"                VALID_END_DATE_TIME);"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ReminderText.class.getSimpleName());"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    public void toModelType_nullStartDateTime_throwsIllegalValueException() {"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"        XmlAdaptedReminder reminder \u003d new XmlAdaptedReminder(VALID_REMINDER_TEXT, null, VALID_END_DATE_TIME);"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    public void toModelType_nullEndDateTime_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        XmlAdaptedReminder reminder \u003d new XmlAdaptedReminder(VALID_REMINDER_TEXT, VALID_START_DATE_TIME,"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"                null);"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDateTime.class.getSimpleName());"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, reminder::toModelType);"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":52,"-":2}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.testutil.TypicalGoals;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    private static final File TYPICAL_GOALS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalGoalsAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    private static final File INVALID_GOAL_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidGoalAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_invalidGoalFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_GOAL_FILE,"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        dataFromFile.toModelType();"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_typicalGoalsFile_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_GOALS_FILE,"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalGoals.getTypicalGoalAddressBook();"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":50,"deborahlow97":22}},{"path":"src/test/java/seedu/address/logic/commands/SortGoalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.SortGoalCommand.MESSAGE_SUCCESS;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.getTypicalGoalAddressBook;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":" * Contains integration tests (interaction with the Model) and unit tests for Sort Goal Command."},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"public class SortGoalCommandTest {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_GOAL_FIELD \u003d \"importance\";"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_GOAL_ORDER \u003d \"descending\";"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    private Model expectedModel;"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    private SortGoalCommand sortGoalCommandA;"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private SortGoalCommand sortGoalCommandB;"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    private SortGoalCommand sortGoalCommandC;"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        model \u003d new ModelManager(getTypicalGoalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        sortGoalCommandA \u003d new SortGoalCommand(VALID_GOAL_FIELD, VALID_GOAL_ORDER);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        sortGoalCommandA.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        sortGoalCommandB \u003d new SortGoalCommand(\"startdatetime\", \"ascending\");"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        sortGoalCommandB.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        sortGoalCommandC \u003d new SortGoalCommand(\"completion\", VALID_GOAL_ORDER);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        sortGoalCommandC.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    public void execute_goalListIsNotFiltered_showsSortedList() {"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(sortGoalCommandA, model, String.format(MESSAGE_SUCCESS, VALID_GOAL_FIELD,"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"                VALID_GOAL_ORDER), expectedModel);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(sortGoalCommandB, model, String.format(MESSAGE_SUCCESS, \"startdatetime\","},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"                \"ascending\"), expectedModel);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        assertCommandSuccess(sortGoalCommandC, model, String.format(MESSAGE_SUCCESS, \"completion\","},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"                VALID_GOAL_ORDER), expectedModel);"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    public void execute_emptyGoalList_throwsCommandException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        AddCommandTest.ModelStub modelStub \u003d new ModelStubThrowingEmptyGoalListException();"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        thrown.expectMessage(Messages.MESSAGE_INVALID_SORT_COMMAND_USAGE);"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        getSortGoalCommandForGoal(VALID_GOAL_FIELD, VALID_GOAL_ORDER, modelStub).execute();"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"     * Generates a new SortGoalCommand with the details of the given goal."},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"    private SortGoalCommand getSortGoalCommandForGoal(String goalField, String goalOrder, Model model) {"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        SortGoalCommand command \u003d new SortGoalCommand(goalField, goalOrder);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"     * A Model stub that always throw a EmptyGoalListException when trying to sort goal list."},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    private class ModelStubThrowingEmptyGoalListException extends AddCommandTest.ModelStub {"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        public void sortGoal(String goalField, String goalOrder) throws EmptyGoalListException {"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"            throw new EmptyGoalListException();"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"            return new AddressBook();"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":11,"deborahlow97":86}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedGoalTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.storage.XmlAdaptedGoal.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.GOAL_B;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"public class XmlAdaptedGoalTest {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    private static final String INVALID_IMPORTANCE \u003d \"11\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    private static final String INVALID_GOAL_TEXT \u003d \" \";"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_IMPORTANCE \u003d GOAL_B.getImportance().toString();"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_GOAL_TEXT \u003d GOAL_B.getGoalText().toString();"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_START_DATE_TIME \u003d GOAL_B.getStartDateTime().toString();"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_COMPLETION \u003d GOAL_B.getCompletion().toString();"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    private static final String VALID_END_DATE_TIME \u003d GOAL_B.getEndDateTime().toString();"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_validGoalDetails_returnsGoal() throws Exception {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d new XmlAdaptedGoal(GOAL_B);"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(GOAL_B, goal.toModelType());"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_invalidImportance_throwsIllegalValueException() {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"                new XmlAdaptedGoal(INVALID_IMPORTANCE, VALID_GOAL_TEXT, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"                        VALID_COMPLETION);"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d Importance.MESSAGE_IMPORTANCE_CONSTRAINTS;"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_nullImportance_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d new XmlAdaptedGoal(null, VALID_GOAL_TEXT, VALID_START_DATE_TIME,"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"                VALID_END_DATE_TIME, VALID_COMPLETION);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Importance.class.getSimpleName());"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_invalidGoalText_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"                new XmlAdaptedGoal(VALID_IMPORTANCE, INVALID_GOAL_TEXT, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"                        VALID_COMPLETION);"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_nullGoalText_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d new XmlAdaptedGoal(VALID_IMPORTANCE, null, VALID_START_DATE_TIME, VALID_END_DATE_TIME,"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"                VALID_COMPLETION);"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GoalText.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_nullStartDateTime_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d new XmlAdaptedGoal(VALID_IMPORTANCE, VALID_GOAL_TEXT, null, VALID_END_DATE_TIME,"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"                VALID_COMPLETION);"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartDateTime.class.getSimpleName());"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_nullCompletion_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d new XmlAdaptedGoal(VALID_IMPORTANCE, VALID_GOAL_TEXT, VALID_START_DATE_TIME,"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"                VALID_END_DATE_TIME, null);"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Completion.class.getSimpleName());"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    public void toModelType_nullEndDateTime_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal goal \u003d new XmlAdaptedGoal(VALID_IMPORTANCE, VALID_GOAL_TEXT, VALID_START_DATE_TIME, null,"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"                VALID_COMPLETION);"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDateTime.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, goal::toModelType);"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":9,"deborahlow97":84}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class BirthdayTest {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        String invalidBirthday \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void isValidBirthday() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        // null birthday"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        // blank birthday"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        // missing parts"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"12--1997\")); // missing month part"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"--12-1998\")); // missing date part"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"//12/1998\")); // missing date part"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"12-12-\")); // missing year part"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"12/12/\")); // missing year part"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        // invalid parts"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"32-Jan-2000\")); // invalid day"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"33.01.2000\")); // invalid day"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"20/20/2000\")); // invalid month"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"20/13/1997\")); // invalid month"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"29/Feb/2001\")); // invalid due to leap year"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"31/04/2000\")); // invalid day for month of April"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"31/Sep/2000\")); // invalid day for month of September"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"31//01/2000\")); // invalid birthday format"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"31..01..2000\")); // invalid birthday format"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"20--2-1997\")); // invalid birthday format"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"20*2*1997\")); // invalid symbols"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"12 / 12 / 2012\")); // contains spaces"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"01/Jan/2000\"));  // using /"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"31.Jan.2000\"));   // using ."},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"01-12-2000\")); // using -"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"28-Feb-2001\"));"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Birthday.isValidBirthday(\"28/Feb/9999\")); //birthday later than today\u0027s date"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        // valid birthday"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Birthday.isValidBirthday(\"01/01/2000\"));"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":9,"deborahlow97":53}},{"path":"src/test/java/seedu/address/model/person/CcaTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class CcaTest {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Cca(null));"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_invalidCcaName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        String invalidCcaName \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Cca(invalidCcaName));"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void isValidCcaName() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        // null cca name"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Cca.isValidCcaName(null));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        // invalid cca name"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Cca.isValidCcaName(\"!3\")); // contains \u0027!\u0027"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Cca.isValidCcaName(\"abc%\")); // contains \u0027%\u0027"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Cca.isValidCcaName(\"abc-1\")); // contains \u0027-\u0027"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Cca.isValidCcaName(\"abc@@@1\")); // contains \u0027@\u0027"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        // valid cca name"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Cca.isValidCcaName(\"Hackathon\")); // alphabets"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Cca.isValidCcaName(\"Walkathon 2018\")); // using .alphanumeric with spaces"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Cca.isValidCcaName(\"Basketball\")); // valid alphabets"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Cca.isValidCcaName(\"Hackathon2018\")); //alphanumeric"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":9,"deborahlow97":32}},{"path":"src/test/java/seedu/address/model/person/LevelOfFriendshipTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class LevelOfFriendshipTest {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new LevelOfFriendship(null));"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_invalidLevelOfFriendship_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        String invalidLevelOfFriendship \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new LevelOfFriendship(invalidLevelOfFriendship));"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void isValidLevelOfFriendship() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        // null level of friendship"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e LevelOfFriendship.isValidLevelOfFriendship(null));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        // blank level of friendship"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        // invalid parts"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"22\")); // invalid positive level of friendship"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"-1\")); // invalid negative level of friendship"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"11\")); // invalid positive level of friendship"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"a\")); // invalid character"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"11a\")); // invalid extra character and number"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"10b\")); // invalid extra character"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"9*\")); // \u0027*\u0027 symbol"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"^\")); // \u0027^\u0027 symbol"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"0\")); // invalid number"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(LevelOfFriendship.isValidLevelOfFriendship(\"1.1\")); // number in decimal"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        // valid level of friendship"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(LevelOfFriendship.isValidLevelOfFriendship(\"1\"));"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(LevelOfFriendship.isValidLevelOfFriendship(\"10\"));  // minimal"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(LevelOfFriendship.isValidLevelOfFriendship(\"2\"));   // alphabets only"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(LevelOfFriendship.isValidLevelOfFriendship(\"5\")); // special characters local part"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(LevelOfFriendship.isValidLevelOfFriendship(\"7\"));  // numeric local part and domain name"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":9,"deborahlow97":43}},{"path":"src/test/java/seedu/address/model/person/MeetTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":10,"content":"//@@author sham-sheer"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"public class MeetTest {"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"        Meet meet \u003d new Meet(\"14/01/2018\");"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"        // same object -\u003e return true"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"        assertTrue(meet.equals(meet));"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"        // same values -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"        Meet meetDuplicate \u003d new Meet(meet.value);"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"        assertTrue(meet.equals(meetDuplicate));"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"        // different types -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"        assertFalse(meet.equals(\"14/01/2018\"));"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"        assertFalse(meet.equals(null));"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"        // different meet -\u003e returns false;"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"        Meet differentMeet \u003d new Meet(\"15/01/2018\");"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"        assertFalse(meet.equals(differentMeet));"},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void isValidDate() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // null meet date"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Meet.isValidDate(null));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // blank meet date"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"\")); // empty string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\" \")); // spaces only"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"12--1997\")); // missing month part"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"--12-1998\")); // missing date part"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"//12/1998\")); // missing date part"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"12-12-\")); // missing year part"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"12/12/\")); // missing year part"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"32-Jan-2000\")); // invalid day"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"33.01.2000\")); // invalid day"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"20/20/2000\")); // invalid month"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"20/13/1997\")); // invalid month"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"29/Feb/2001\")); // invalid due to leap year"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"31/04/2000\")); // invalid day for month of April"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"31/Sep/2000\")); // invalid day for month of September"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"31//01/2000\")); // invalid meet date format"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"31..01..2000\")); // invalid meet date format"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"20--2-1997\")); // invalid meet date format"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"20*2*1997\")); // invalid symbols"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"12 / 12 / 2012\")); // contains spaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"01/Jan/2000\"));  // using /"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"31.Jan.2000\"));   // using ."},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"01-12-2000\")); // using -"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(Meet.isValidDate(\"28-Feb-2001\"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // valid meet date"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(Meet.isValidDate(\"01/01/2000\"));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":25,"-":48}},{"path":"src/test/java/seedu/address/model/person/UnitNumberTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class UnitNumberTest {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new UnitNumber(null));"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_invalidUnitNumber_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        String invalidUnitNumber \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new UnitNumber(invalidUnitNumber));"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void isValidUnitNumber() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        // null unit number"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e UnitNumber.isValidUnitNumber(null));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        // invalid unit numbers"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(UnitNumber.isValidUnitNumber(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(UnitNumber.isValidUnitNumber(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(UnitNumber.isValidUnitNumber(\"#12222-1312414\")); // long unit number"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(UnitNumber.isValidUnitNumber(\"#1-1\")); // one character only"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        // valid unit numbers"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(UnitNumber.isValidUnitNumber(\"#01-355\"));"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(UnitNumber.isValidUnitNumber(\"#1-12\"));"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(UnitNumber.isValidUnitNumber(\"#12-12\"));"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":9,"deborahlow97":32}},{"path":"src/test/java/seedu/address/model/person/UnitNumberContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"public class UnitNumberContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":52,"author":{"gitID":"zuweitrack"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new UnitNumberContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":54,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":55,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":56,"author":{"gitID":"zuweitrack"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new UnitNumberContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":58,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":60,"author":{"gitID":"zuweitrack"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new UnitNumberContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":62,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":63,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":65,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitID":"zuweitrack"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitID":"zuweitrack"},"content":"        UnitNumberContainsKeywordsPredicate predicate \u003d"},{"lineNumber":69,"author":{"gitID":"zuweitrack"},"content":"                new UnitNumberContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":71,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":72,"author":{"gitID":"zuweitrack"},"content":"        // Non-matching keyword"},{"lineNumber":73,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new UnitNumberContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":74,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":75,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":76,"author":{"gitID":"zuweitrack"},"content":"        // Keywords match phone, birthday, level of friendship, unit number, but does not match name"},{"lineNumber":77,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new UnitNumberContainsKeywordsPredicate(Arrays.asList(\"92474733\", \"23/06/1996\", \"3\", \"#4-49\"));"},{"lineNumber":78,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"92474733\")"},{"lineNumber":79,"author":{"gitID":"zuweitrack"},"content":"                .withBirthday(\"23/06/1996\").withLevelOfFriendship(\"3\").withUnitNumber(\"#4-49\").build()));"},{"lineNumber":80,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":68,"-":13}},{"path":"src/test/java/seedu/address/model/person/UniqueCcaListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"public class UniqueCcaListTest {"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"    @Rule"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"        UniqueCcaList uniqueCcaList \u003d new UniqueCcaList();"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"        uniqueCcaList.asObservableList().remove(0);"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"-":6,"deborahlow97":13}},{"path":"src/test/java/seedu/address/model/reminder/ReminderTextTest.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderTextTest {"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new ReminderText(null));"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public void constructor_invalidReminderText_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"        String invalidReminderText \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ReminderText(invalidReminderText));"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    public void isValidGoalText() {"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        // null reminder text"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ReminderText.isValidReminderText(null));"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        // blank reminder text"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(ReminderText.isValidReminderText(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(ReminderText.isValidReminderText(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        // valid reminder text"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(ReminderText.isValidReminderText(\"1\"));"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(ReminderText.isValidReminderText(\"aaa0\")); // alphanumerical"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(ReminderText.isValidReminderText(\"!@$#()_+\")); // symbols only"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(ReminderText.isValidReminderText(\"-1.122ewk:!@|!+@!*~\")); // all kinds of symbols and alphanumerical"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(ReminderText.isValidReminderText(\"! 1 wq \")); // with spaces"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(ReminderText.isValidReminderText(\"            7\")); // spaces with a value"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":33,"-":8}},{"path":"src/test/java/seedu/address/model/reminder/DateTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"public class DateTimeTest {"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public void isValidGoalText() {"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"        // null reminder text"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ReminderText.isValidReminderText(null));"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"        // blank reminder text"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(DateTime.isValidDateTime(\"\")); // empty string"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(DateTime.isValidDateTime(\"aaa0\")); // alphanumerical"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(DateTime.isValidDateTime(\"!@$#()_+\")); // symbols only"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        // valid reminder text"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(DateTime.isValidDateTime(\"1\"));"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(DateTime.isValidDateTime(\"-1.122ewk:!@|!+@!*~\")); // all kinds of symbols and alphanumerical"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(DateTime.isValidDateTime(\"! 1 wq \")); // with spaces"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(DateTime.isValidDateTime(\"            7\")); // spaces with a value"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":27,"-":8}},{"path":"src/test/java/seedu/address/model/person/LofContainsValuePredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"public class LofContainsValuePredicateTest {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"        LofContainsValuePredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":"                new LofContainsValuePredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"        LofContainsValuePredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"                new LofContainsValuePredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"        LofContainsValuePredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"                new LofContainsValuePredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"    public void test_lofContainsValues_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":"        LofContainsValuePredicate predicate \u003d"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":"                new LofContainsValuePredicate(Collections.singletonList(\"1\"));"},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLevelOfFriendship(\"1\").build()));"},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":52,"author":{"gitID":"zuweitrack"},"content":"        // Multiple key values"},{"lineNumber":53,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new LofContainsValuePredicate(Arrays.asList(\"1\", \"3\"));"},{"lineNumber":54,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLevelOfFriendship(\"1\").build()));"},{"lineNumber":55,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":56,"author":{"gitID":"zuweitrack"},"content":"        // Only one matching key value"},{"lineNumber":57,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new LofContainsValuePredicate(Arrays.asList(\"3\", \"4\"));"},{"lineNumber":58,"author":{"gitID":"zuweitrack"},"content":"        assertTrue(predicate.test(new PersonBuilder().withLevelOfFriendship(\"4\").build()));"},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":60,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":62,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"zuweitrack"},"content":"    public void test_lofDoesNotContainKeyValues_returnsFalse() {"},{"lineNumber":64,"author":{"gitID":"zuweitrack"},"content":"        // Zero keywords"},{"lineNumber":65,"author":{"gitID":"zuweitrack"},"content":"        LofContainsValuePredicate predicate \u003d"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":"                new LofContainsValuePredicate(Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLevelOfFriendship(\"2\").build()));"},{"lineNumber":68,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":69,"author":{"gitID":"zuweitrack"},"content":"        // Non-matching keyword"},{"lineNumber":70,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new LofContainsValuePredicate(Arrays.asList(\"2\"));"},{"lineNumber":71,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(predicate.test(new PersonBuilder().withLevelOfFriendship(\"4\").build()));"},{"lineNumber":72,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":73,"author":{"gitID":"zuweitrack"},"content":"        // Keywords match phone, birthday, level of friendship, unit number,"},{"lineNumber":74,"author":{"gitID":"zuweitrack"},"content":"        // but does not match level of friendship"},{"lineNumber":75,"author":{"gitID":"zuweitrack"},"content":"        predicate \u003d new LofContainsValuePredicate(Arrays.asList(\"96667444\", \"25/03/1997\", \"3\", \"#04-28\"));"},{"lineNumber":76,"author":{"gitID":"zuweitrack"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"96667444\")"},{"lineNumber":77,"author":{"gitID":"zuweitrack"},"content":"                .withBirthday(\"25/03/1997\").withLevelOfFriendship(\"4\").withUnitNumber(\"#04-28\").build()));"},{"lineNumber":78,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":66,"-":13}},{"path":"src/test/java/seedu/address/model/UniqueGoalListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.UniqueGoalList;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"public class UniqueGoalListTest {"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"        UniqueGoalList uniquePersonList \u003d new UniqueGoalList();"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":6,"deborahlow97":14}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.GOAL_A;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.GOAL_B;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"            .withPerson(AMY).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(Collections.emptyList(), addressBook.getGoalList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getCcaList());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e newGoals \u003d Arrays.asList(GOAL_A, GOAL_B);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cCca\u003e newCcas \u003d new ArrayList\u003c\u003e(ALICE.getCcas());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newGoals, newCcas, newTags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"    public void getGoalList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        addressBook.getGoalList().remove(0);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void getCcaList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBook.getCcaList().remove(0);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"A0158738X"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":108,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":109,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":111,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":113,"author":{"gitID":"A0158738X"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":114,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":115,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":116,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":117,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":118,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":120,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"A0158738X"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":122,"author":{"gitID":"A0158738X"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":123,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":124,"author":{"gitID":"A0158738X"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":125,"author":{"gitID":"A0158738X"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":126,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":127,"author":{"gitID":"A0158738X"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":128,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":129,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":130,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        private final ObservableList\u003cGoal\u003e goals \u003d FXCollections.observableArrayList();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cCca\u003e ccas \u003d FXCollections.observableArrayList();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":140,"author":{"gitID":"fuadsahmawi"},"content":"        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cGoal\u003e goals, Collection\u003c? extends Cca\u003e ccas,"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"                        Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"            this.goals.setAll(goals);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            this.ccas.setAll(ccas);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"        public ObservableList\u003cGoal\u003e getGoalList() {"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"            return goals;"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCca\u003e getCcaList() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return ccas;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":170,"author":{"gitID":"fuadsahmawi"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"fuadsahmawi"},"content":"        public ObservableList\u003cReminder\u003e getReminderList() {"},{"lineNumber":172,"author":{"gitID":"fuadsahmawi"},"content":"            return reminders;"},{"lineNumber":173,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":39,"fuadsahmawi":7,"-":110,"deborahlow97":20}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.GOAL_A;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.testutil.TypicalGoals.GOAL_B;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public void getSortedGoalList_modifyGoalList_modelSorted() throws EmptyGoalListException {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withGoal(GOAL_A).withGoal(GOAL_B).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        modelManager.sortGoal(\"importance\", \"ascending\");"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":51,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"A0158738X"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":59,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":62,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":69,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":73,"author":{"gitID":"A0158738X"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":74,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":75,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":76,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":31,"-":76,"deborahlow97":7}},{"path":"src/test/java/seedu/address/model/reminder/ReminderTextPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderTextPredicateTest {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"        ReminderTextPredicate firstPredicate \u003d new ReminderTextPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        ReminderTextPredicate secondPredicate \u003d new ReminderTextPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        ReminderTextPredicate firstPredicateCopy \u003d new ReminderTextPredicate(firstPredicateKeywordList);"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        // different reminder -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    public void test_reminderTextContainsKeywords_returnsTrue() {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        // One keyword"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        ReminderTextPredicate predicate \u003d new ReminderTextPredicate(Collections.singletonList(\"gym\"));"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withReminderText(\"Go gym\").build()));"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        // Multiple keywords"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        predicate \u003d new ReminderTextPredicate(Arrays.asList(\"Go\", \"gym\"));"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withReminderText(\"Go gym\").build()));"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"        // Only one matching keyword"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"        predicate \u003d new ReminderTextPredicate(Arrays.asList(\"Star\", \"Gym\"));"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withReminderText(\"Start Gym\").build()));"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        // Mixed-case keywords"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        predicate \u003d new ReminderTextPredicate(Arrays.asList(\"gO\", \"gYM\"));"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withReminderText(\"Go gym\").build()));"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"    public void test_reminderTextDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        // Zero keywords"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"        ReminderTextPredicate predicate \u003d new ReminderTextPredicate(Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(predicate.test(new ReminderBuilder().withReminderText(\"Gym\").build()));"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        // Non-matching keyword"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"        predicate \u003d new ReminderTextPredicate(Arrays.asList(\"Finals\"));"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(predicate.test(new ReminderBuilder().withReminderText(\"Midterms\").build()));"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"        // Keywords match start date time and end date time, but does not match reminder text"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"        predicate \u003d new ReminderTextPredicate(Arrays.asList(\"tmr\", \"8pm\", \"tmr\", \"10pm\"));"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(predicate.test(new ReminderBuilder().withReminderText(\"Alice\").withDateTime(\"tmr 8pm\")"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"                .withEndDateTime(\"tmr 10pm\").build()));"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":67,"-":10}},{"path":"src/test/java/seedu/address/model/goal/ImportanceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class ImportanceTest {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    private final Importance importanceObjectOne \u003d new Importance(\"10\");"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    private final Importance importanceObjectTwo \u003d new Importance(\"1\");"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    private final Importance importanceObjectThree \u003d new Importance(\"10\");"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public void importanceCompareTo_testEquals_success() {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        int result \u003d importanceObjectOne.compareTo(importanceObjectThree);"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(result \u003d\u003d 0);"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void importanceCompareTo_testGreaterThan_success() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        int result \u003d importanceObjectOne.compareTo(importanceObjectTwo);"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(result \u003d\u003d 1);"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public void importanceCompareTo_testLessThan_success() {"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        int result \u003d importanceObjectTwo.compareTo(importanceObjectThree);"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(result \u003d\u003d -1);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Importance(null));"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_invalidImportance_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        String invalidImportance \u003d \"\";"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Importance(invalidImportance));"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    public void isValidImportance() {"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        // null importance"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Importance.isValidImportance(null));"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        // blank importance"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"\")); // empty string"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\" \")); // spaces only"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        // invalid parts"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"22\")); // invalid positive level of friendship"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"-1\")); // invalid negative level of friendship"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"11\")); // invalid positive level of friendship"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"a\")); // invalid character"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"11a\")); // invalid extra character and number"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"10b\")); // invalid extra character"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"9*\")); // \u0027*\u0027 symbol"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"^\")); // \u0027^\u0027 symbol"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"0\")); // invalid number"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(Importance.isValidImportance(\"1.1\")); // number in decimal"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        // valid importance"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Importance.isValidImportance(\"1\"));"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Importance.isValidImportance(\"10\"));  // minimal"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Importance.isValidImportance(\"2\"));   // alphabets only"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Importance.isValidImportance(\"5\")); // special characters local part"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(Importance.isValidImportance(\"7\"));  // numeric local part and domain name"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":8,"deborahlow97":66}},{"path":"src/test/java/seedu/address/model/goal/StartDateTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"public class StartDateTimeTest {"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"    private final StartDateTime startDateTimeObjectOne \u003d new StartDateTime(\"Date: 18 April 2018, Time: 20:20\");"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"    private final StartDateTime startDateTimeObjectTwo \u003d new StartDateTime(\"Date: 17 April 2018, Time: 20:20\");"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"    private final StartDateTime startDateTimeObjectThree \u003d new StartDateTime(\"Date: 17 April 2018, Time: 20:20\");"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public void startDateTimeCompareTo_testGreaterThan_success() {"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"        int result \u003d startDateTimeObjectOne.compareTo(startDateTimeObjectTwo);"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(result \u003d\u003d 1);"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public void startDateTimeCompareTo_testLessThan_success() {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        int result \u003d startDateTimeObjectThree.compareTo(startDateTimeObjectOne);"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(result \u003d\u003d -1);"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":4,"deborahlow97":22}},{"path":"src/test/java/seedu/address/testutil/TypicalGoals.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_COMPLETION_A;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_COMPLETION_B;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_END_DATE_TIME_STRING_A;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_END_DATE_TIME_STRING_B;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_A;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_IMPORTANCE_B;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_START_DATE_TIME_STRING_A;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_START_DATE_TIME_STRING_B;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_TEXT_A;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.commands.GoalCommandTestUtil.VALID_GOAL_TEXT_B;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":" * A utility class containing a list of {@code Goal} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"public class TypicalGoals {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_A \u003d new GoalBuilder().withCompletion(false)"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            .withEndDateTime(\"\").withGoalText(\"stay fit\").withImportance(\"1\")"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"            .withStartDateTime(\"2017-04-08 12:30\").build();"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_B \u003d new GoalBuilder().withCompletion(false)"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"            .withEndDateTime(\"\").withGoalText(\"eat fruits daily\").withImportance(\"2\")"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            .withStartDateTime(\"2017-05-08 12:30\").build();"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_C \u003d new GoalBuilder().withCompletion(true).withEndDateTime(\"2018-04-08 12:30\")"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"aa\").withImportance(\"7\").withStartDateTime(\"2017-06-08 12:30\").build();"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_D \u003d new GoalBuilder().withCompletion(true).withEndDateTime(\"2018-04-08 12:31\")"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"bb\").withImportance(\"4\").withStartDateTime(\"2017-06-08 12:31\").build();"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_E \u003d new GoalBuilder().withCompletion(false).withEndDateTime(\"\")"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"cc\").withImportance(\"10\").withStartDateTime(\"2017-06-08 12:32\")"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"            .build();"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_F \u003d new GoalBuilder().withCompletion(false).withEndDateTime(\"\")"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"dd\").withImportance(\"3\").withStartDateTime(\"2017-06-08 12:33\").build();"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_G \u003d new GoalBuilder().withCompletion(false).withEndDateTime(\"\")"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"ee\").withImportance(\"8\").withStartDateTime(\"2017-06-08 12:35\")"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"            .build();"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    // Manually added"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal HOON \u003d new GoalBuilder().withCompletion(false).withEndDateTime(\"\")"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"ff\").withImportance(\"1\").withStartDateTime(\"2017-06-08 12:36\")"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"            .build();"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal IDA \u003d new GoalBuilder().withCompletion(false).withEndDateTime(\"\")"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"gg\").withImportance(\"3\").withStartDateTime(\"2017-06-08 12:38\")"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"            .build();"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal JAKE \u003d new GoalBuilder().withCompletion(false).withEndDateTime(\"\")"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(\"hii\").withImportance(\"3\").withStartDateTime(\"2018-04-08 12:30\")"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"            .build();"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    // Manually added - Goal\u0027s details found in {@code GoalCommandTestUtil}"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_A1 \u003d new GoalBuilder().withCompletion(VALID_GOAL_COMPLETION_A)"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"            .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_A)"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(VALID_GOAL_TEXT_A).withImportance(VALID_GOAL_IMPORTANCE_A)"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"            .withStartDateTime(VALID_GOAL_START_DATE_TIME_STRING_A).build();"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"    public static final Goal GOAL_A2 \u003d new GoalBuilder().withCompletion(VALID_GOAL_COMPLETION_B)"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"            .withEndDateTime(VALID_GOAL_END_DATE_TIME_STRING_B)"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"            .withGoalText(VALID_GOAL_TEXT_B).withImportance(VALID_GOAL_IMPORTANCE_B)"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"            .withStartDateTime(VALID_GOAL_START_DATE_TIME_STRING_B).build();"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    private TypicalGoals() {} // prevents instantiation"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code AddressBook} with all the typical goals."},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    public static AddressBook getTypicalGoalAddressBook() {"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        for (Goal goal : getTypicalGoals()) {"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"            try {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"                ab.addGoal(goal);"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"            } catch (DuplicateGoalException e) {"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        return ab;"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    public static List\u003cGoal\u003e getTypicalGoals() {"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GOAL_A, GOAL_B, GOAL_C, GOAL_D, GOAL_E, GOAL_F, GOAL_G));"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":6,"deborahlow97":82}},{"path":"src/test/java/seedu/address/testutil/TypicalReminders.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":" * A utility class containing a list of {@code Reminder} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"public class TypicalReminders {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Reminder REMINDER_A \u003d new ReminderBuilder()"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"            .withDateTime(\"2017-04-08 12:30\")"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"            .withEndDateTime(\"2017-04-08 14:30\")"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"            .withReminderText(\"go to the gym\").build();"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Reminder REMINDER_B \u003d new ReminderBuilder()"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"            .withDateTime(\"2017-06-08 15:30\")"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"            .withEndDateTime(\"2017-06-08 17:30\")"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"            .withReminderText(\"medical appointment\").build();"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Reminder REMINDER_C \u003d new ReminderBuilder()"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"            .withDateTime(\"2017-05-10 12:30\")"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"            .withEndDateTime(\"2017-05-10 14:30\")"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"            .withReminderText(\"cc\").build();"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Reminder REMINDER_D \u003d new ReminderBuilder()"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"            .withDateTime(\"2018-04-08 12:30\")"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"            .withEndDateTime(\"2018-04-08 14:30\")"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"            .withReminderText(\"dd\").build();"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Reminder REMINDER_E \u003d new ReminderBuilder()"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"            .withDateTime(\"2017-07-07 13:30\")"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"            .withEndDateTime(\"2017-07-07 14:30\")"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"            .withReminderText(\"ee\").build();"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Reminder REMINDER_F \u003d new ReminderBuilder()"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"            .withDateTime(\"2017-03-10 09:30\")"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"            .withEndDateTime(\"2017-03-10 10:30\")"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"            .withReminderText(\"ff\").build();"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    private TypicalReminders() {} // prevents instantiation"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns an {@code AddressBook} with all the typical reminders."},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"    public static AddressBook getTypicalReminderAddressBook() {"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        for (Reminder reminder : getTypicalReminders()) {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"            try {"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"                ab.addReminder(reminder);"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"            } catch (DuplicateReminderException e) {"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"        return ab;"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    public static List\u003cReminder\u003e getTypicalReminders() {"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(REMINDER_A, REMINDER_B, REMINDER_C, REMINDER_D, REMINDER_E, REMINDER_F));"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":56,"-":5}},{"path":"src/test/java/seedu/address/model/goal/GoalTextTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class GoalTextTest {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new GoalText(null));"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public void constructor_invalidGoalText_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        String invalidGoalText \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new GoalText(invalidGoalText));"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public void isValidGoalText() {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        // null goal text"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e GoalText.isValidGoalText(null));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        // blank goal text"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(GoalText.isValidGoalText(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        assertFalse(GoalText.isValidGoalText(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        // valid goal text"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(GoalText.isValidGoalText(\"1\"));"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(GoalText.isValidGoalText(\"aaa0\"));  // alphanumerical"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(GoalText.isValidGoalText(\"!@$#()_+\"));   // symbols only"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(GoalText.isValidGoalText(\"-1.122ewk:!@|!+@!*~\"));   // all kinds of symbols and alphanumerical"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(GoalText.isValidGoalText(\"! 1 wq \")); // with spaces"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        assertTrue(GoalText.isValidGoalText(\"            7\"));  // spaces with a value"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":8,"deborahlow97":33}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withCca(\"ballet)"},{"lineNumber":16,"author":{"gitID":"-"},"content":" *     .withTag(\"Friend\").build();}"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"     * Adds a new {@code Goal} to the {@code AddressBook} that we are building."},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    public AddressBookBuilder withGoal(Goal goal) {"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            addressBook.addGoal(goal);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateGoalException dge) {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalArgumentException(\"goal is expected to be unique.\");"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Parses {@code ccaName} into a {@code Cca} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withCca(String ccaName) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addCca(new Cca(ccaName));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"ccaName is expected to be valid.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":67,"deborahlow97":14}},{"path":"src/test/java/seedu/address/testutil/EditGoalDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand.EditGoalDescriptor;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" * A utility class to help with building EditGoalDescriptor objects."},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"public class EditGoalDescriptorBuilder {"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    private EditGoalDescriptor descriptor;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalDescriptorBuilder() {"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new EditGoalDescriptor();"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalDescriptorBuilder(EditGoalDescriptor descriptor) {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        this.descriptor \u003d new EditGoalDescriptor(descriptor);"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code EditGoalDescriptor} with fields containing {@code goal}\u0027s details"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalDescriptorBuilder(Goal goal) {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new EditGoalDescriptor();"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setGoalText(goal.getGoalText());"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setImportance(goal.getImportance());"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code GoalText} of the {@code EditGoalDescriptor} that we are building."},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalDescriptorBuilder withGoalText(String goalText) {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setGoalText(new GoalText(goalText));"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code Importance} of the {@code EditGoalDescriptor} that we are building."},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalDescriptorBuilder withImportance(String importance) {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setImportance(new Importance(importance));"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalDescriptor build() {"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        return descriptor;"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"deborahlow97":53}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    public static final Index INDEX_FIRST_GOAL \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final Index INDEX_SECOND_GOAL \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public static final Index INDEX_THIRD_GOAL \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SORT_LEVEL_OF_FRIENDSHIP \u003d Index.fromOneBased(1);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SORT_MEET_DATE \u003d Index.fromOneBased(2);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SORT_BIRTHDAY \u003d Index.fromOneBased(3);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SORT_INVALID \u003d Index.fromOneBased(4);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":17,"deborahlow97":4}},{"path":"src/test/java/seedu/address/testutil/GoalBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.getLocalDateTimeFromString;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" * A utility class to help with building Person objects."},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"public class GoalBuilder {"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean DEFAULT_COMPLETION \u003d false;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public static final String DEFAULT_EMPTY_END_DATE_TIME \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public static final String DEFAULT_END_DATE_TIME \u003d \"today\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static final String DEFAULT_GOAL_TEXT \u003d \"er yea acadamic no la no la\";"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public static final String DEFAULT_IMPORTANCE \u003d \"1\";"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    public static final String DEFAULT_START_DATE_TIME \u003d \"2017-04-08 12:30\";"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    private Completion completion;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    private EndDateTime endDateTime;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    private GoalText goalText;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    private Importance importance;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    private StartDateTime startDateTime;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder() {"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        completion \u003d new Completion(DEFAULT_COMPLETION);"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        endDateTime \u003d new EndDateTime(DEFAULT_EMPTY_END_DATE_TIME);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        goalText \u003d new GoalText(DEFAULT_GOAL_TEXT);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        importance \u003d new Importance(DEFAULT_IMPORTANCE);"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        startDateTime \u003d new StartDateTime(getLocalDateTimeFromString(DEFAULT_START_DATE_TIME));"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder(boolean isCompleted) {"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        completion \u003d new Completion(isCompleted);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        endDateTime \u003d new EndDateTime(DEFAULT_END_DATE_TIME);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        goalText \u003d new GoalText(DEFAULT_GOAL_TEXT);"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        importance \u003d new Importance(DEFAULT_IMPORTANCE);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        startDateTime \u003d new StartDateTime(getLocalDateTimeFromString(DEFAULT_START_DATE_TIME));"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"     * Initializes the GoalBuilder with the data of {@code goalToCopy}."},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder(Goal goalToCopy) {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        completion \u003d goalToCopy.getCompletion();"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        endDateTime \u003d goalToCopy.getEndDateTime();"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        goalText \u003d goalToCopy.getGoalText();"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        importance \u003d goalToCopy.getImportance();"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        startDateTime \u003d goalToCopy.getStartDateTime();"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code Completion} of the {@code Goal} that we are building."},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder withCompletion(Boolean completion) {"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        this.completion \u003d new Completion(completion);"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code EndDateTime} of the {@code Goal} that we are building."},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder withEndDateTime(String endDateTime) {"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        this.endDateTime \u003d new EndDateTime(endDateTime);"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code GoalText} of the {@code Goal} that we are building."},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder withGoalText(String goalText) {"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        this.goalText \u003d new GoalText(goalText);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code Importance} of the {@code Goal} that we are building."},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder withImportance(String importance) {"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        this.importance \u003d new Importance(importance);"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code StartDateTime} of the {@code Goal} that we are building."},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    public GoalBuilder withStartDateTime(String startDateTime) {"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        this.startDateTime \u003d new StartDateTime(getLocalDateTimeFromString(startDateTime));"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"    public Goal build() {"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        return new Goal(importance, goalText, startDateTime, endDateTime, completion);"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"deborahlow97":103}},{"path":"src/test/java/seedu/address/testutil/ReminderUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TEXT;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":" * A utility class for Reminder."},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderUtil {"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns an addreminder command string for adding the {@code reminder}."},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static String getAddReminderCommand(Reminder reminder) {"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"        return AddReminderCommand.COMMAND_WORD + \" \" + getReminderDetails(reminder);"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns the part of command string for the given {@code goal}\u0027s details."},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    public static String getReminderDetails(Reminder reminder) {"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"        sb.append(PREFIX_REMINDER_TEXT + reminder.getReminderText().toString() + \" \");"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        sb.append(PREFIX_DATE + reminder.getDateTime().toString() + \" \");"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        sb.append(PREFIX_END_DATE + reminder.getEndDateTime().toString() + \" \");"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        return sb.toString();"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"fuadsahmawi":32}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"01/01/1991\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_LEVEL_OF_FRIENDSHIP \u003d \"1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_UNIT_NUMBER \u003d \"#12-21\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CCAS \u003d \"hockey\";"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    public static final String DEFAULT_DATE \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Birthday birthday;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private LevelOfFriendship levelOfFriendship;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private UnitNumber unitNumber;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Set\u003cCca\u003e ccas;"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"    private Meet meetDate;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        levelOfFriendship \u003d new LevelOfFriendship(DEFAULT_LEVEL_OF_FRIENDSHIP);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        unitNumber \u003d new UnitNumber(DEFAULT_UNIT_NUMBER);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ccas \u003d SampleDataUtil.getCcaSet(DEFAULT_CCAS);"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"        meetDate \u003d new Meet(DEFAULT_DATE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        birthday \u003d personToCopy.getBirthday();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        levelOfFriendship \u003d personToCopy.getLevelOfFriendship();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        unitNumber \u003d personToCopy.getUnitNumber();"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":"        meetDate \u003d personToCopy.getMeetDate();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ccas \u003d new HashSet\u003c\u003e(personToCopy.getCcas());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses the {@code ccas} into a {@code Set\u003cCca\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public PersonBuilder withCcas(String ... ccas) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.ccas \u003d SampleDataUtil.getCcaSet(ccas);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.birthday \u003d new Birthday(birthday);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Sets the {@code LevelOfFriendship} of the {@code Person} that we are building."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public PersonBuilder withLevelOfFriendship(String levelOfFriendship) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        this.levelOfFriendship \u003d new LevelOfFriendship(levelOfFriendship);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Sets the {@code UnitNumber} of the {@code Person} that we are building."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public PersonBuilder withUnitNumber(String unitNumber) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        this.unitNumber \u003d new UnitNumber(unitNumber);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"content":"    //@@author sham-sheer"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"A0158738X"},"content":"    public PersonBuilder withMeetDate(String meetDate) {"},{"lineNumber":125,"author":{"gitID":"A0158738X"},"content":"        this.meetDate \u003d new Meet(meetDate);"},{"lineNumber":126,"author":{"gitID":"A0158738X"},"content":"        return this;"},{"lineNumber":127,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return new Person(name, phone, birthday, levelOfFriendship, unitNumber, ccas, meetDate, tags);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":10,"-":122}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CCA_BADMINTON;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CCA_DANCE;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_OF_FRIENDSHIP_AMY;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_OF_FRIENDSHIP_BOB;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIT_NUMBER_AMY;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIT_NUMBER_BOB;"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\").withBirthday(\"01/01/1991\").withLevelOfFriendship(\"1\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withUnitNumber(\"#12-21\").withCcas(\"hockey\").withTags(\"friends\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withPhone(\"98765432\").withBirthday(\"19/01/1998\").withLevelOfFriendship(\"2\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withUnitNumber(\"#4-44\").withCcas(\"Skating\", \"swimming\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withBirthday(\"12/02/1994\").withLevelOfFriendship(\"7\").withUnitNumber(\"#2-69\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withBirthday(\"12/03/1994\").withLevelOfFriendship(\"4\").withUnitNumber(\"#03-033\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withBirthday(\"09/09/1999\").withLevelOfFriendship(\"10\").withUnitNumber(\"#9-434\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withCcas(\"modern dance\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withBirthday(\"10/10/1990\").withLevelOfFriendship(\"3\").withUnitNumber(\"#10-10\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withBirthday(\"11/11/2000\").withLevelOfFriendship(\"8\").withUnitNumber(\"#2-65\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withMeetDate(\"14/04/2018\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withBirthday(\"15/05/1995\").withLevelOfFriendship(\"1\").withUnitNumber(\"#6-66\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withCcas(\"floorball\").build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withBirthday(\"14/04/1994\").withLevelOfFriendship(\"3\").withUnitNumber(\"#4-44\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withTags(\"colleagues\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person JAKE \u003d new PersonBuilder().withName(\"Jake Black\").withPhone(\"8482131\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withBirthday(\"14/04/1995\").withLevelOfFriendship(\"3\").withUnitNumber(\"#4-45\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withBirthday(VALID_BIRTHDAY_AMY).withLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP_AMY)"},{"lineNumber":67,"author":{"gitID":"A0158738X"},"content":"            .withUnitNumber(VALID_UNIT_NUMBER_AMY).withCcas(VALID_CCA_DANCE)"},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withBirthday(VALID_BIRTHDAY_BOB).withLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP_BOB)"},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"            .withUnitNumber(VALID_UNIT_NUMBER_BOB)"},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":"            .withCcas(VALID_CCA_DANCE, VALID_CCA_BADMINTON)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":22,"-":76}},{"path":"src/test/java/seedu/address/testutil/OngoingGoalDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand.OngoingGoalDescriptor;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" * A utility class to help with building OngoingGoalDescriptor objects."},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"public class OngoingGoalDescriptorBuilder {"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    private OngoingGoalDescriptor descriptor;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalDescriptorBuilder() {"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new OngoingGoalDescriptor();"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalDescriptorBuilder(OngoingGoalDescriptor descriptor) {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        this.descriptor \u003d new OngoingGoalDescriptor(descriptor);"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code OngoingGoalDescriptor} with fields containing {@code goal}\u0027s details"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalDescriptorBuilder(Goal goal) {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new OngoingGoalDescriptor();"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setCompletion(new Completion(false));"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setEndDateTime(new EndDateTime(\"\"));"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code Completion} of the {@code OngoingGoalDescriptor} that we are building."},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalDescriptorBuilder withCompletion(boolean isOngoing) {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setCompletion(new Completion(isOngoing));"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code EndDateTime} of the {@code OngoingGoalDescriptor} that we are building."},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalDescriptorBuilder withEndDateTime(String endDateTime) {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setEndDateTime(new EndDateTime(endDateTime));"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalDescriptor build() {"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        return descriptor;"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":52}},{"path":"src/test/java/seedu/address/testutil/CompleteGoalDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.properDateTimeFormat;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand.CompleteGoalDescriptor;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" * A utility class to help with building CompleteGoalDescriptor objects."},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"public class CompleteGoalDescriptorBuilder {"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    private CompleteGoalDescriptor descriptor;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalDescriptorBuilder() {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new CompleteGoalDescriptor();"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalDescriptorBuilder(CompleteGoalDescriptor descriptor) {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        this.descriptor \u003d new CompleteGoalDescriptor(descriptor);"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"     * Returns an {@code CompleteGoalDescriptor} with fields containing {@code goal}\u0027s details"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalDescriptorBuilder(Goal goal) {"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        descriptor \u003d new CompleteGoalDescriptor();"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setCompletion(new Completion(true));"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setEndDateTime(new EndDateTime(properDateTimeFormat(LocalDateTime.now())));"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code Completion} of the {@code CompleteGoalDescriptor} that we are building."},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalDescriptorBuilder withCompletion(boolean isCompleted) {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setCompletion(new Completion(isCompleted));"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"     * Sets the {@code EndDateTime} of the {@code CompleteGoalDescriptor} that we are building."},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalDescriptorBuilder withEndDateTime(String endDateTime) {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        descriptor.setEndDateTime(new EndDateTime(endDateTime));"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalDescriptor build() {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        return descriptor;"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":56}},{"path":"src/test/java/seedu/address/testutil/GoalUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL_TEXT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.ui.StatusBarFooter.PERCENTAGE_KEY_NUMBER;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.AddGoalCommand;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" * A utility class for Goal."},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"public class GoalUtil {"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     * Returns an add goal command string for adding the {@code goal}."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static String getAddGoalCommand(Goal goal) {"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"        return AddGoalCommand.COMMAND_WORD + \" \" + getGoalDetails(goal);"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     * Returns the part of command string for the given {@code goal}\u0027s details."},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public static String getGoalDetails(Goal goal) {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        sb.append(PREFIX_IMPORTANCE + goal.getImportance().value + \" \");"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        sb.append(PREFIX_GOAL_TEXT + goal.getGoalText().value + \" \");"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        return sb.toString();"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public static int getGoalCompletion(ObservableList\u003cGoal\u003e goalList) {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        int totalGoal \u003d goalList.size();"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        int totalGoalCompleted \u003d 0;"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        String completionStatus;"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        for (int i \u003d 0; i \u003c totalGoal; i++) {"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"            completionStatus \u003d goalList.get(i).getCompletion().value;"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"            totalGoalCompleted +\u003d isCompletedGoal(completionStatus);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        int percentageGoalCompletion \u003d (int) (((float) totalGoalCompleted / totalGoal) * PERCENTAGE_KEY_NUMBER);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        return percentageGoalCompletion;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"     * @param completionStatus gives a String that should be either \"true\" or \"false\", indicating if the goal is"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"     * completed."},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"     * @return true or false"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    private static int isCompletedGoal(String completionStatus) {"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        int valueToAdd;"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        if (completionStatus.equals(\"true\")) {"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"            valueToAdd \u003d 1;"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"            valueToAdd \u003d 0;"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        return valueToAdd;"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":61}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String LEVEL_OF_FRIENDSHIP_FIELD_ID \u003d \"#levelOfFriendship\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String UNIT_NUMBER_FIELD_ID \u003d \"#unitNumber\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String CCAS_FIELD_ID \u003d \"#ccas\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"    private static final String MEET_FIELD_ID \u003d \"#meetDate\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label birthdayLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Label levelOfFriendshipLabel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Label unitNumberLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Label ccaLabel;"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"    private final Label meetLabel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.levelOfFriendshipLabel \u003d getChildNode(LEVEL_OF_FRIENDSHIP_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.unitNumberLabel \u003d getChildNode(UNIT_NUMBER_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.ccaLabel \u003d getChildNode(CCAS_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"        this.meetLabel \u003d getChildNode(MEET_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String getBirthday() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return birthdayLabel.getText();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public String getLevelOfFriendship() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return levelOfFriendshipLabel.getText();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String getUnitNumber() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return unitNumberLabel.getText();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public String getCcas() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return ccaLabel.getText().trim();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Takes in @param value representing the level of friendship value"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @return a number of hearts string."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public String changeLevelOfFriendshipToHeart(String value) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        int intValue \u003d Integer.parseInt(value);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String heartString \u003d \"\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c intValue; i++) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            heartString \u003d heartString + \u0027\\u2665\u0027 + \" \";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return heartString;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":"    public String getMeetDate() {"},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"        return meetLabel.getText();"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"                .findFirst()"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":7,"-":98,"deborahlow97":7}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_COMPLETED_STATUS_ID \u003d \"#goalCompletionStatus\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    private final StatusBar goalCompletedStatusNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    private String lastRememberedGoalCompletedStatus;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        this.goalCompletedStatusNode \u003d getChildNode(GOAL_COMPLETED_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public String getGoalCompletedStatus() {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        return goalCompletedStatusNode.getText();"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"     * Remembers the content of the \u0027goal completion status\u0027 portion of the status bar."},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    public void rememberGoalCompletedStatus() {"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        lastRememberedGoalCompletedStatus \u003d getGoalCompletedStatus();"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if the current content of the \u0027goal completion status\u0027 is different from the value remembered"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"     * by the most"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"     * recent {@code rememberGoalCompletedStatus()} call."},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"    public boolean isGoalCompletedStatusChanged() {"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        return !lastRememberedGoalCompletedStatus.equals(getGoalCompletedStatus());"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":70,"deborahlow97":31}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/college_zone.jpeg\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":118,"deborahlow97":1}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public static final int PERCENTAGE_KEY_NUMBER \u003d 100;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    private StatusBar goalCompletionStatus;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    public StatusBarFooter(String saveLocation, int goalCompletion) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        setGoalCompletion(goalCompletion);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    private void setGoalCompletion(int goalCompletion) {"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        Platform.runLater(() -\u003e this.goalCompletionStatus.setText(\"Goal \" + goalCompletion + \"% completed.\"));"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    public int getGoalCompletion(ObservableList\u003cGoal\u003e goalList) {"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        int totalGoal \u003d goalList.size();"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        int totalGoalCompleted \u003d 0;"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        String completionStatus;"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        for (int i \u003d 0; i \u003c totalGoal; i++) {"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"            completionStatus \u003d goalList.get(i).getCompletion().value;"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"            totalGoalCompleted +\u003d isCompletedGoal(completionStatus);"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        int percentageGoalCompletion \u003d (int) (((float) totalGoalCompleted / totalGoal) * PERCENTAGE_KEY_NUMBER);"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        return percentageGoalCompletion;"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"     * @param completionStatus gives a String that should be either \"true\" or \"false\", indicating if the goal is"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"     *                         completed."},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"     * @return 1 or 0"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    private int isCompletedGoal(String completionStatus) {"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        int valueToAdd;"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        if (completionStatus.equals(\"true\")) {"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"            valueToAdd \u003d 1;"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"            valueToAdd \u003d 0;"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        return valueToAdd;"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        setGoalCompletion(getGoalCompletion(abce.data.getGoalList()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":78,"deborahlow97":40}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d new String[]{\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"                                                                  \"green\", \"pink\", \"black\", \"purple\"};"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label birthday;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label levelOfFriendship;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label unitNumber;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label ccas;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"    private Label meetDate;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        birthday.setText(person.getBirthday().value);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        levelOfFriendship.setText(changeLevelOfFriendshipToHeart(person.getLevelOfFriendship().value));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        unitNumber.setText(person.getUnitNumber().value);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ccas.setText(getCcasInString(person.getCcas()));"},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"        meetDate.setText(\"Meet Date: \" + person.getMeetDate().value);"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        initTags(person);"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        // between diffe 11rent runs of the program while still making it random enough between tags."},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"    private void initTags(Person person) {"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    private String getCcasInString(Set\u003cCca\u003e ccas) {"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        String ccasValue \u003d \"\";"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        Iterator iterator \u003d ccas.iterator();"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"            ccasValue \u003d ccasValue + iterator.next().toString() + \" \";"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        return ccasValue;"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"     * Takes in @param value representing the level of friendship value"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"     * @return a number of hearts string."},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"    public static String changeLevelOfFriendshipToHeart(String value) {"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        int intValue \u003d Integer.parseInt(value);"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        String heartString \u003d \"\";"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        for (int i \u003d 0; i \u003c intValue; i++) {"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"            heartString \u003d heartString + \u0027\\u2665\u0027 + \" \";"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        return heartString;"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":2,"-":77,"deborahlow97":49}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    private ListView\u003cGoalCard\u003e goalListView;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList, ObservableList\u003cGoal\u003e goalList) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        setConnections(personList, goalList);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList, ObservableList\u003cGoal\u003e goalList) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":41,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        ObservableList\u003cGoalCard\u003e mappedGoalList \u003d EasyBind.map("},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                goalList, (goal) -\u003e new GoalCard(goal, goalList.indexOf(goal) + 1));"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        goalListView.setItems(mappedGoalList);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        goalListView.setCellFactory(listView -\u003e new GoalListViewCell());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    private void handleJumpToGoalListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        scrollToGoal(event.targetIndex);"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"     * Scrolls to the {@code GoalCard} at the {@code index} and selects it."},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"    private void scrollToGoal(int index) {"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"            goalListView.scrollTo(index);"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"            goalListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        });"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code GoalCard}."},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"    class GoalListViewCell extends ListCell\u003cGoalCard\u003e {"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"        protected void updateItem(GoalCard goal, boolean empty) {"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"            super.updateItem(goal, empty);"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"            if (empty || goal \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"                setGraphic(null);"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"                setText(null);"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"            } else {"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"                setGraphic(goal.getRoot());"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":84,"deborahlow97":45}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"            \"Start Date cannot be later than End Date or Start/End Date cannot be earlier than current date! \\n%1$s\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_INVALID_GOAL_DISPLAYED_INDEX \u003d \"The goal index provided is invalid\";"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_INVALID_REMINDER_TEXT_DATE \u003d \"The reminder text or start date \""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"            + \"provided is invalid\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_RA_LISTED_OVERVIEW \u003d \"%1$d Searched Persons and \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"their Resident Assistant(s) (RA) listed!\";"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_INVALID_SORT_COMMAND_USAGE \u003d \"Sort command cannot be done on an empty \""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"            + \"goal list!\";"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_GOAL_ONGOING_ERROR \u003d \"Goal is already ongoing.\";"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_GOAL_COMPLETED_ERROR \u003d \"Goal is already completed.\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":4,"-":18,"deborahlow97":5}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    private String appTitle \u003d \"CollegeZone\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":71}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.ThemeColourUtil.getThemeHashMap;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.events.ui.ThemeSwitchRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    private static final int PERCENTAGE_KEY_NUMBER \u003d 100;"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    private static final String EXTENSIONS_STYLESHEET \u003d \"view/Extensions.css\";"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    private static final String DEFAULT_THEME_COLOUR \u003d \"dark\";"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private static final HashMap\u003cString, String\u003e themeHashMap;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    private AddressBook addressBook;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    private String themeColour;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"    static {"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        themeHashMap \u003d getThemeHashMap();"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        setThemeColour();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":111,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":117,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":121,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":134,"author":{"gitID":"A0158738X"},"content":"        calendarPanel \u003d new CalendarPanel(logic.getFilteredReminderList(), logic.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"fuadsahmawi"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.getFilteredGoalList());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"                calculateGoalCompletion());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":210,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":211,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"deborahlow97"},"content":"     * Calculation of percentage of goal completed"},{"lineNumber":213,"author":{"gitID":"deborahlow97"},"content":"     * @return"},{"lineNumber":214,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"deborahlow97"},"content":"    private int calculateGoalCompletion() {"},{"lineNumber":216,"author":{"gitID":"deborahlow97"},"content":"        int totalGoal \u003d logic.getFilteredGoalList().size();"},{"lineNumber":217,"author":{"gitID":"deborahlow97"},"content":"        int totalGoalCompleted \u003d 0;"},{"lineNumber":218,"author":{"gitID":"deborahlow97"},"content":"        String completionStatus;"},{"lineNumber":219,"author":{"gitID":"deborahlow97"},"content":"        for (int i \u003d 0; i \u003c totalGoal; i++) {"},{"lineNumber":220,"author":{"gitID":"deborahlow97"},"content":"            completionStatus \u003d logic.getFilteredGoalList().get(i).getCompletion().value;"},{"lineNumber":221,"author":{"gitID":"deborahlow97"},"content":"            totalGoalCompleted +\u003d isCompletedGoal(completionStatus);"},{"lineNumber":222,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"deborahlow97"},"content":"        int percentageGoalCompletion \u003d (int) (((float) totalGoalCompleted / totalGoal) * PERCENTAGE_KEY_NUMBER);"},{"lineNumber":224,"author":{"gitID":"deborahlow97"},"content":"        return percentageGoalCompletion;"},{"lineNumber":225,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":227,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"deborahlow97"},"content":"     * @param completionStatus gives a String that should be either \"true\" or \"false\", indicating if the goal is"},{"lineNumber":229,"author":{"gitID":"deborahlow97"},"content":"     *                         completed."},{"lineNumber":230,"author":{"gitID":"deborahlow97"},"content":"     * @return true or false"},{"lineNumber":231,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"deborahlow97"},"content":"    private int isCompletedGoal(String completionStatus) {"},{"lineNumber":233,"author":{"gitID":"deborahlow97"},"content":"        int valueToAdd;"},{"lineNumber":234,"author":{"gitID":"deborahlow97"},"content":"        if (completionStatus.equals(\"true\")) {"},{"lineNumber":235,"author":{"gitID":"deborahlow97"},"content":"            valueToAdd \u003d 1;"},{"lineNumber":236,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":237,"author":{"gitID":"deborahlow97"},"content":"            valueToAdd \u003d 0;"},{"lineNumber":238,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"deborahlow97"},"content":"        return valueToAdd;"},{"lineNumber":240,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":242,"author":{"gitID":"deborahlow97"},"content":"    private void setThemeColour() {"},{"lineNumber":243,"author":{"gitID":"deborahlow97"},"content":"        setThemeColour(DEFAULT_THEME_COLOUR);"},{"lineNumber":244,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":246,"author":{"gitID":"deborahlow97"},"content":"    private void setThemeColour(String themeColour) {"},{"lineNumber":247,"author":{"gitID":"deborahlow97"},"content":"        primaryStage.getScene().getStylesheets().add(EXTENSIONS_STYLESHEET);"},{"lineNumber":248,"author":{"gitID":"deborahlow97"},"content":"        primaryStage.getScene().getStylesheets().add(themeHashMap.get(themeColour));"},{"lineNumber":249,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":251,"author":{"gitID":"deborahlow97"},"content":"    private void changeThemeColour() {"},{"lineNumber":252,"author":{"gitID":"deborahlow97"},"content":"        primaryStage.getScene().getStylesheets().clear();"},{"lineNumber":253,"author":{"gitID":"deborahlow97"},"content":"        setThemeColour(themeColour);"},{"lineNumber":254,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":256,"author":{"gitID":"deborahlow97"},"content":"    @Subscribe"},{"lineNumber":257,"author":{"gitID":"deborahlow97"},"content":"    private void handleChangeThemeEvent(ThemeSwitchRequestEvent event) {"},{"lineNumber":258,"author":{"gitID":"deborahlow97"},"content":"        themeColour \u003d event.themeToChangeTo;"},{"lineNumber":259,"author":{"gitID":"deborahlow97"},"content":"        Platform.runLater("},{"lineNumber":260,"author":{"gitID":"deborahlow97"},"content":"                this::changeThemeColour"},{"lineNumber":261,"author":{"gitID":"deborahlow97"},"content":"        );"},{"lineNumber":262,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"fuadsahmawi":3,"-":185,"deborahlow97":74}},{"path":"src/test/java/seedu/address/testutil/ReminderBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.DateTime;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.EndDateTime;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderText;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":" * A utility class to help with building Reminder objects."},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderBuilder {"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String DEFAULT_END_DATE_TIME \u003d \"2017-04-08 13:30\";"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String DEFAULT_REMINDER_TEXT \u003d \"go home play game\";"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String DEFAULT_START_DATE_TIME \u003d \"2017-04-08 12:30\";"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    private EndDateTime endDateTime;"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    private ReminderText reminderText;"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    private DateTime dateTime;"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderBuilder() {"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"        endDateTime \u003d new EndDateTime(DEFAULT_END_DATE_TIME);"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        reminderText \u003d new ReminderText(DEFAULT_REMINDER_TEXT);"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        dateTime \u003d new DateTime(DEFAULT_START_DATE_TIME);"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"     * Initializes the GoalBuilder with the data of {@code goalToCopy}."},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderBuilder(Reminder reminderToCopy) {"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"        endDateTime \u003d reminderToCopy.getEndDateTime();"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        reminderText \u003d reminderToCopy.getReminderText();"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        dateTime \u003d reminderToCopy.getDateTime();"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"     * Sets the {@code EndDateTime} of the {@code Reminder} that we are building."},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderBuilder withEndDateTime(String endDateTime) {"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        this.endDateTime \u003d new EndDateTime(endDateTime);"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"        return this;"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"     * Sets the {@code ReminderText} of the {@code Reminder} that we are building."},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderBuilder withReminderText(String reminderText) {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderText \u003d new ReminderText(reminderText);"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"     * Sets the {@code StartDateTime} of the {@code Goal} that we are building."},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderBuilder withDateTime(String startDateTime) {"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        this.dateTime \u003d new DateTime(startDateTime);"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"    public Reminder build() {"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"        return new Reminder(reminderText, dateTime, endDateTime);"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":64}},{"path":"src/main/java/seedu/address/ui/GoalCard.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.util.AppUtil;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" * An UI component that displays information of a {@code Goal}."},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"public class GoalCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    private static final int NOT_COMPLETED_COLOUR_STYLE \u003d 0;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    private static final int COMPLETED_COLOUR_STYLE \u003d 1;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    private static final String FXML \u003d \"GoalListCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public final Goal goal;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    private HBox goalCardPane;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    private Label goalText;"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    private FlowPane importance;"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private Label startDateTime;"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    private Label endDateTime;"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    private FlowPane completion;"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public GoalCard(Goal goal, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        this.goal \u003d goal;"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        goalText.setText(goal.getGoalText().value);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        initImportance(goal);"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        startDateTime.setText(\"Start \" + goal.getStartDateTime().value);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        if (goal.getEndDateTime().value.equals(\"\")) {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"            endDateTime.setText(goal.getEndDateTime().value);"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"            endDateTime.setText(\"End \" + goal.getEndDateTime().value);"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        initCompletion(goal);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"     * Creates the completion label for {@code goal}."},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    private void initCompletion(Goal goal) {"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        String trueOrFalseString \u003d goal.getCompletion().value;"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        if (trueOrFalseString.equals(\"true\")) {"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"            Image completedImage \u003d AppUtil.getImage(\"/images/completedImage.png\");"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"            ImageView completedImageView \u003d new ImageView(completedImage);"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"            completedImageView.setFitHeight(30);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"            completedImageView.setFitWidth(30);"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"            Label completionLabel \u003d new Label(\"Completed\", completedImageView);"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"            completion.getChildren().add(completionLabel);"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            Image ongoingImage \u003d AppUtil.getImage(\"/images/ongoingImage.png\");"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"            ImageView ongoingImageView \u003d new ImageView(ongoingImage);"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"            ongoingImageView.setFitHeight(27);"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            ongoingImageView.setFitWidth(27);"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"            Label completionLabel \u003d new Label(\"Ongoing\", ongoingImageView);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"            completion.getChildren().add(completionLabel);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"     * Creates the importance label for {@code goal}."},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    private void initImportance(Goal goal) {"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        String starValue \u003d changeImportanceToStar(goal.getImportance().value);"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        Label importanceLabel \u003d new Label(starValue);"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        importanceLabel.getStyleClass().add(\"yellow\");"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        importance.getChildren().add(importanceLabel);"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"     * Takes in @param value representing the importance value"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"     * @return a number of star string."},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    public static String changeImportanceToStar(String value) {"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        int intValue \u003d Integer.parseInt(value);"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        String starString \u003d \"\";"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        for (int i \u003d 0; i \u003c intValue; i++) {"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"            starString \u003d starString + \u0027\\u2605\u0027 + \" \";"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        return starString;"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof GoalCard)) {"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"        // state check"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"        GoalCard card \u003d (GoalCard) other;"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 goal.equals(card.goal);"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":118}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    /** Returns an unmodifiable view of the filtered list of reminders */"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    ObservableList\u003cReminder\u003e getFilteredReminderList();"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    ObservableList\u003cGoal\u003e getFilteredGoalList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":4,"-":29,"deborahlow97":2}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_BIRTHDAY,"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"                        PREFIX_LEVEL_OF_FRIENDSHIP, PREFIX_UNIT_NUMBER, PREFIX_CCA, PREFIX_TAG);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_UNIT_NUMBER,"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"                PREFIX_LEVEL_OF_FRIENDSHIP, PREFIX_UNIT_NUMBER)"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"            Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"            UnitNumber unitNumber \u003d ParserUtil.parseUnitNumber(argMultimap.getValue(PREFIX_UNIT_NUMBER)).get();"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"            LevelOfFriendship levelOfFriendship \u003d ParserUtil.parseLevelOfFriendship(argMultimap"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"                    .getValue(PREFIX_LEVEL_OF_FRIENDSHIP)).get();"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"            Set\u003cCca\u003e ccaList \u003d ParserUtil.parseCcas(argMultimap.getAllValues(PREFIX_CCA));"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"            Meet meetDate \u003d new Meet(\"\");"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"            Person person \u003d new Person(name, phone, birthday, levelOfFriendship, unitNumber, ccaList, meetDate,"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"                    tagList);"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"            return new AddCommand(person);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":14,"-":34,"deborahlow97":36}},{"path":"src/main/java/seedu/address/commons/events/ui/ThemeSwitchRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":" * Indicates that a theme switch is requested."},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"public class ThemeSwitchRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"    public final String themeToChangeTo;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"    public ThemeSwitchRequestEvent(String themeToChangeTo) {"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"        this.themeToChangeTo \u003d themeToChangeTo;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":4,"deborahlow97":16}},{"path":"src/main/java/seedu/address/logic/CommandFormatListUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.AddGoalCommand;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.DeleteGoalCommand;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.DeleteMeetCommand;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand;"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.ShowLofCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortGoalCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"content":"//@@author sham-sheer"},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Initialises and returns a list which contains different command formats"},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public final class CommandFormatListUtil {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static ArrayList\u003cString\u003e commandFormatList;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static ArrayList\u003cString\u003e getCommandFormatList () {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandFormatList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        createCommandFormatList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return commandFormatList;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Creates commandFormatList for existing commands"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static void createCommandFormatList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        commandFormatList.add(AddCommand.COMMAND_FORMAT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        commandFormatList.add(AddGoalCommand.COMMAND_FORMAT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        commandFormatList.add(AddReminderCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        commandFormatList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        commandFormatList.add(CompleteGoalCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        commandFormatList.add(DeleteCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        commandFormatList.add(DeleteGoalCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        commandFormatList.add(DeleteMeetCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        commandFormatList.add(DeleteReminderCommand.COMMAND_ALIAS_2);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        commandFormatList.add(EditCommand.COMMAND_FORMAT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        commandFormatList.add(EditGoalCommand.COMMAND_WORD);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        commandFormatList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandFormatList.add(FindCommand.COMMAND_FORMAT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        commandFormatList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        commandFormatList.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        commandFormatList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        commandFormatList.add(MeetCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        commandFormatList.add(OngoingGoalCommand.COMMAND_WORD);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        commandFormatList.add(RateCommand.COMMAND_WORD);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        commandFormatList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandFormatList.add(SelectCommand.COMMAND_WORD);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        commandFormatList.add(SortCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        commandFormatList.add(SortGoalCommand.COMMAND_WORD);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        commandFormatList.add(ShowLofCommand.COMMAND_WORD);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        commandFormatList.add(ThemeCommand.COMMAND_WORD);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        commandFormatList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        //sorting the commandFormatList"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collections.sort(commandFormatList);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":2,"zuweitrack":2,"fuadsahmawi":2,"-":69,"deborahlow97":5}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.FindCommand.FindPersonDescriptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        FindPersonDescriptor findPersonDescriptor \u003d new FindPersonDescriptor();"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        argMultimap.getValue(PREFIX_NAME).ifPresent(findPersonDescriptor::setNameKeywords);"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        argMultimap.getValue(PREFIX_TAG).ifPresent(findPersonDescriptor::setTagKeywords);"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        if (!findPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException(FindCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"            return new FindCommand("},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"                    new NameContainsKeywordsPredicate(Arrays.asList(findPersonDescriptor.getNameKeywords())));"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"            return new FindCommand("},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"                    new TagContainsKeywordsPredicate(Arrays.asList(findPersonDescriptor.getTagKeyWords())));"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":42,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.AddGoalCommand;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.DeleteGoalCommand;"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.DeleteMeetCommand;"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand;"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SeekRaCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.ShowLofCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.SortGoalCommand;"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":"@SuppressWarnings(\"CheckStyle\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"fuadsahmawi"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"zuweitrack"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"zuweitrack"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":109,"author":{"gitID":"zuweitrack"},"content":"        case RateCommand.COMMAND_ALIAS:"},{"lineNumber":110,"author":{"gitID":"zuweitrack"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case SeekRaCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new SeekRaCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case SeekRaCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new SeekRaCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":118,"author":{"gitID":"zuweitrack"},"content":"        case ShowLofCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"zuweitrack"},"content":"            return new ShowLofCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":121,"author":{"gitID":"zuweitrack"},"content":"        case ShowLofCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"zuweitrack"},"content":"            return new ShowLofCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"fuadsahmawi"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"fuadsahmawi"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"fuadsahmawi"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"fuadsahmawi"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"A0158738X"},"content":"        case MeetCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        case MeetCommand.COMMAND_ALIAS:"},{"lineNumber":156,"author":{"gitID":"A0158738X"},"content":"            return new MeetCommandParser().parse(arguments);"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":158,"author":{"gitID":"A0158738X"},"content":"        case DeleteMeetCommand.COMMAND_WORD:"},{"lineNumber":159,"author":{"gitID":"A0158738X"},"content":"            return new DeleteMeetCommandParser().parse(arguments);"},{"lineNumber":160,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":161,"author":{"gitID":"A0158738X"},"content":"        case DeleteMeetCommand.COMMAND_ALIAS:"},{"lineNumber":162,"author":{"gitID":"A0158738X"},"content":"            return new DeleteMeetCommandParser().parse(arguments);"},{"lineNumber":163,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":164,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"        case AddGoalCommand.COMMAND_WORD:"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"        case AddGoalCommand.COMMAND_ALIAS_1:"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"        case AddGoalCommand.COMMAND_ALIAS_2:"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"            return new AddGoalCommandParser().parse(arguments);"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"        case EditGoalCommand.COMMAND_WORD:"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"        case EditGoalCommand.COMMAND_ALIAS_1:"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"        case EditGoalCommand.COMMAND_ALIAS_2:"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":"            return new EditGoalCommandParser().parse(arguments);"},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"        case DeleteGoalCommand.COMMAND_WORD:"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"        case DeleteGoalCommand.COMMAND_ALIAS_1:"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"        case DeleteGoalCommand.COMMAND_ALIAS_2:"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"            return new DeleteGoalCommandParser().parse(arguments);"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"        case CompleteGoalCommand.COMMAND_WORD:"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"        case CompleteGoalCommand.COMMAND_ALIAS_1:"},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"        case CompleteGoalCommand.COMMAND_ALIAS_2:"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"            return new CompleteGoalCommandParser().parse(arguments);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"        case OngoingGoalCommand.COMMAND_WORD:"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"        case OngoingGoalCommand.COMMAND_ALIAS_1:"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":"        case OngoingGoalCommand.COMMAND_ALIAS_2:"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":"            return new OngoingGoalCommandParser().parse(arguments);"},{"lineNumber":189,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":190,"author":{"gitID":"fuadsahmawi"},"content":"        case AddReminderCommand.COMMAND_WORD:"},{"lineNumber":191,"author":{"gitID":"fuadsahmawi"},"content":"        case AddReminderCommand.COMMAND_ALIAS:"},{"lineNumber":192,"author":{"gitID":"fuadsahmawi"},"content":"        case AddReminderCommand.COMMAND_ALIAS_2:"},{"lineNumber":193,"author":{"gitID":"fuadsahmawi"},"content":"            return new AddReminderCommandParser().parse(arguments);"},{"lineNumber":194,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":195,"author":{"gitID":"fuadsahmawi"},"content":"        case DeleteReminderCommand.COMMAND_WORD:"},{"lineNumber":196,"author":{"gitID":"fuadsahmawi"},"content":"        case DeleteReminderCommand.COMMAND_ALIAS:"},{"lineNumber":197,"author":{"gitID":"fuadsahmawi"},"content":"        case DeleteReminderCommand.COMMAND_ALIAS_2:"},{"lineNumber":198,"author":{"gitID":"fuadsahmawi"},"content":"            return new DeleteReminderCommandParser().parse(arguments);"},{"lineNumber":199,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"deborahlow97"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":205,"author":{"gitID":"deborahlow97"},"content":"        case ThemeCommand.COMMAND_ALIAS:"},{"lineNumber":206,"author":{"gitID":"deborahlow97"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":207,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":208,"author":{"gitID":"deborahlow97"},"content":"        case SortGoalCommand.COMMAND_WORD:"},{"lineNumber":209,"author":{"gitID":"deborahlow97"},"content":"        case SortGoalCommand.COMMAND_ALIAS:"},{"lineNumber":210,"author":{"gitID":"deborahlow97"},"content":"            return new SortGoalCommandParser().parse(arguments);"},{"lineNumber":211,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":13,"zuweitrack":14,"fuadsahmawi":22,"-":128,"deborahlow97":41}},{"path":"src/main/java/seedu/address/logic/parser/RateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":" * Parses input arguments and creates a new RateCommand object"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"public class RateCommandParser {"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":"     * Returns true if the level of friendship prefix \"/*\" is present"},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"    private static boolean isPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"        return Stream.of(prefix).allMatch(groupPrefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"     * Returns true if the level of friendship is between 1 - 10"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"    private static boolean containsValidRange(String levelOfFriendship) {"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"        return levelOfFriendship.matches(\"0?[1-9]|[1][0]\");"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"     * Parses the given {@code String} of arguments in the context of the RateCommand"},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"     * and returns an RateCommand object for execution."},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"    public RateCommand parse (String args) throws ParseException {"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"        requireNonNull(args);"},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LEVEL_OF_FRIENDSHIP);"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"        if (!isPrefixesPresent(argumentMultimap, PREFIX_LEVEL_OF_FRIENDSHIP)) {"},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":"        String levelOfFriendship \u003d argumentMultimap.getValue(PREFIX_LEVEL_OF_FRIENDSHIP).get();"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":"        if (!containsValidRange(levelOfFriendship)) {"},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":54,"author":{"gitID":"zuweitrack"},"content":"        String preamble;"},{"lineNumber":55,"author":{"gitID":"zuweitrack"},"content":"        String[] indexString;"},{"lineNumber":56,"author":{"gitID":"zuweitrack"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":58,"author":{"gitID":"zuweitrack"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":"            preamble \u003d argumentMultimap.getPreamble();"},{"lineNumber":60,"author":{"gitID":"zuweitrack"},"content":"            indexString \u003d preamble.split(\"\\\\s+\");"},{"lineNumber":61,"author":{"gitID":"zuweitrack"},"content":"            for (String index : indexString) {"},{"lineNumber":62,"author":{"gitID":"zuweitrack"},"content":"                indexList.add(ParserUtil.parseIndex(index));"},{"lineNumber":63,"author":{"gitID":"zuweitrack"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":65,"author":{"gitID":"zuweitrack"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":67,"author":{"gitID":"zuweitrack"},"content":"                    RateCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":70,"author":{"gitID":"zuweitrack"},"content":"        return new RateCommand(indexList, new String(levelOfFriendship));"},{"lineNumber":71,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":73,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"A0158738X":3,"zuweitrack":60,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/OngoingGoalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.OngoingGoalCommand.OngoingGoalDescriptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new OngoingGoalCommand object"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"public class OngoingGoalCommandParser implements Parser\u003cOngoingGoalCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean ONGOING_BOOLEAN_VALUE \u003d false;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the OngoingGoalCommand"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     * and returns an OngoingGoalCommand object for execution."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        Index index;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"            index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OngoingGoalCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalDescriptor ongoingGoalDescriptor \u003d new OngoingGoalDescriptor();"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        Optional\u003cString\u003e empty \u003d Optional.empty();"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        Completion completion \u003d new Completion(ONGOING_BOOLEAN_VALUE);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(\"\");"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        ongoingGoalDescriptor.setCompletion(completion);"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        ongoingGoalDescriptor.setEndDateTime(endDateTime);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        return new OngoingGoalCommand(index, ongoingGoalDescriptor);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":6,"deborahlow97":42}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"import javafx.application.Platform;"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":" * The Calendar Panel of the App."},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    private CalendarView calendarView;"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    private ObservableList\u003cReminder\u003e reminderList;"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    private ObservableList\u003cPerson\u003e personList;"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    public CalendarPanel(ObservableList\u003cReminder\u003e reminderList, ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderList \u003d reminderList;"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        this.personList \u003d personList;"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        setupCalendar();"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        updateCalendar();"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    @Subscribe"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"    private void handleNewCalendarEvent(AddressBookChangedEvent event) {"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"        reminderList \u003d event.data.getReminderList();"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"        personList \u003d event.data.getPersonList();"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        Platform.runLater(this::updateCalendar);"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"     * Updates the Calendar with Reminders that are already added"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"    private void updateCalendar() {"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        setDateAndTime();"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"        CalendarSource myCalendarSource \u003d new CalendarSource(\"Reminders and Meetups\");"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarRDue \u003d new Calendar(\"Reminders Already Due\");"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarRNotDue \u003d new Calendar(\"Reminders Not Due\");"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        Calendar calendarM \u003d new Calendar(\"Meetups\");"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRDue.setStyle(Calendar.Style.getStyle(4));"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRDue.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRNotDue.setStyle(Calendar.Style.getStyle(1));"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"        calendarRNotDue.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"        calendarM.setStyle(Calendar.Style.getStyle(3));"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarRDue);"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarRNotDue);"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"        myCalendarSource.getCalendars().add(calendarM);"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"        for (Reminder reminder : reminderList) {"},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime ldtstart \u003d nattyDateAndTimeParser(reminder.getDateTime().toString()).get();"},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime ldtend \u003d nattyDateAndTimeParser(reminder.getEndDateTime().toString()).get();"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"            if (now.isBefore(ldtend)) {"},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"                calendarRNotDue.addEntry(new Entry("},{"lineNumber":83,"author":{"gitID":"fuadsahmawi"},"content":"                        reminder.getReminderText().toString(), new Interval(ldtstart, ldtend)));"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"                calendarRDue.addEntry(new Entry(reminder.getReminderText().toString(), new Interval(ldtstart, ldtend)));"},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"        //@@author sham-sheer"},{"lineNumber":89,"author":{"gitID":"A0158738X"},"content":"        for (Person person : personList) {"},{"lineNumber":90,"author":{"gitID":"A0158738X"},"content":"            String meetDate \u003d person.getMeetDate().toString();"},{"lineNumber":91,"author":{"gitID":"A0158738X"},"content":"            if (!meetDate.isEmpty()) {"},{"lineNumber":92,"author":{"gitID":"A0158738X"},"content":"                int day \u003d Integer.parseInt(meetDate.substring(0,"},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":"                        2));"},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"                int month \u003d Integer.parseInt(meetDate.substring(3,"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":"                        5));"},{"lineNumber":96,"author":{"gitID":"A0158738X"},"content":"                int year \u003d Integer.parseInt(meetDate.substring(6,"},{"lineNumber":97,"author":{"gitID":"A0158738X"},"content":"                        10));"},{"lineNumber":98,"author":{"gitID":"A0158738X"},"content":"                calendarM.addEntry(new Entry(\"Meeting \" + person.getName().toString(),"},{"lineNumber":99,"author":{"gitID":"A0158738X"},"content":"                        new Interval(LocalDate.of(year, month, day), LocalTime.of(12, 0),"},{"lineNumber":100,"author":{"gitID":"A0158738X"},"content":"                                LocalDate.of(year, month, day), LocalTime.of(13, 0))));"},{"lineNumber":101,"author":{"gitID":"A0158738X"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.getCalendarSources().add(myCalendarSource);"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"    //@@author fuadsahmawi"},{"lineNumber":107,"author":{"gitID":"fuadsahmawi"},"content":"    private void setDateAndTime() {"},{"lineNumber":108,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.getCalendarSources().clear();"},{"lineNumber":111,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":113,"author":{"gitID":"fuadsahmawi"},"content":"    private void setupCalendar() {"},{"lineNumber":114,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":115,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":117,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":118,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":119,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":120,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":121,"author":{"gitID":"fuadsahmawi"},"content":"        calendarView.showMonthPage();"},{"lineNumber":122,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":124,"author":{"gitID":"fuadsahmawi"},"content":"    public CalendarView getRoot() {"},{"lineNumber":125,"author":{"gitID":"fuadsahmawi"},"content":"        return this.calendarView;"},{"lineNumber":126,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":128,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"A0158738X":18,"fuadsahmawi":108,"-":1,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/parser/SortGoalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_FIELD;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.SortGoalCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new SortGoalCommand object"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"public class SortGoalCommandParser implements Parser\u003cSortGoalCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public SortGoalCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_SORT_FIELD, PREFIX_SORT_ORDER);"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_SORT_FIELD, PREFIX_SORT_ORDER)"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortGoalCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"            String sortField \u003d ParserUtil.parseSortGoalField(argMultimap.getValue(PREFIX_SORT_FIELD)).get();"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            String sortOrder \u003d ParserUtil.parseSortGoalOrder(argMultimap.getValue(PREFIX_SORT_ORDER)).get();"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"            return new SortGoalCommand(sortField, sortOrder);"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortGoalCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":7,"deborahlow97":36}},{"path":"src/main/java/seedu/address/logic/parser/SeekRaCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SeekRaCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumberContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":" * Parses input arguments and creates a new SeekRaCommand object"},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"public class SeekRaCommandParser implements Parser\u003cSeekRaCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"     * Parses the given {@code String} of arguments in the context of the SeekRaCommand"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"     * and returns an SeekRaCommand object for execution."},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"    public SeekRaCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SeekRaCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"        trimmedArgs \u003d trimmedArgs + \" \" + \"RA\";"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"        String[] nameKeywords \u003d (trimmedArgs.split(\"\\\\s+\"));"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"        return new SeekRaCommand(new UnitNumberContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":27,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMeetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.DeleteMeetCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":" * Parses input arguments and creates a new DeleteMeetCommand object"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"public class DeleteMeetCommandParser implements Parser\u003cDeleteMeetCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMeetCommand"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"     * and returns an DeleteMeetCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"    public DeleteMeetCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"            return new DeleteMeetCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"A0158738X":17,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.DateTime;"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.EndDateTime;"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderText;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_INVALID_SORT_FIELD \u003d \"Sort field entered is not a valid field.\";"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_INVALID_ORDER_FIELD \u003d \"Sort order field entered is not a valid field.\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String birthday} into an {@code birthday}."},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    public static Birthday parseBirthday(String birthday) throws IllegalValueException {"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(birthday);"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        if (!Birthday.isValidBirthday(trimmedBirthday)) {"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"        return new Birthday(trimmedBirthday);"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(birthday);"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"        return birthday.isPresent() ? Optional.of(parseBirthday(birthday.get())) : Optional.empty();"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String levelOfFriendship} into a {@code LevelOfFriendship}."},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code levelOfFriendship} is invalid."},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"    public static LevelOfFriendship parseLevelOfFriendship(String levelOfFriendship) throws IllegalValueException {"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(levelOfFriendship);"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        String trimmedLevelOfFriendship \u003d levelOfFriendship.trim();"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"        if (!LevelOfFriendship.isValidLevelOfFriendship(trimmedLevelOfFriendship)) {"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(LevelOfFriendship.MESSAGE_LEVEL_OF_FRIENDSHIP_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"        return new LevelOfFriendship(trimmedLevelOfFriendship);"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cLevelOfFriendship\u003e parseLevelOfFriendship(Optional\u003cString\u003e levelOfFriendship)"},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"            throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(levelOfFriendship);"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        return levelOfFriendship.isPresent() ? Optional.of(parseLevelOfFriendship(levelOfFriendship.get()))"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"                : Optional.empty();"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String unitNumber} into an {@code UnitNumber}."},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code unitNumber} is invalid."},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"    public static UnitNumber parseUnitNumber(String unitNumber) throws IllegalValueException {"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(unitNumber);"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"        String trimmedUnitNumber \u003d unitNumber.trim();"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"        if (!UnitNumber.isValidUnitNumber(trimmedUnitNumber)) {"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(UnitNumber.MESSAGE_UNIT_NUMBER_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"        return new UnitNumber(trimmedUnitNumber);"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e unitNumber} into an {@code Optional\u003cUnitNumber\u003e} if {@code unitNumber}"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"     * is present."},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cUnitNumber\u003e parseUnitNumber(Optional\u003cString\u003e unitNumber) throws IllegalValueException {"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(unitNumber);"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"        return unitNumber.isPresent() ? Optional.of(parseUnitNumber(unitNumber.get())) : Optional.empty();"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"    //@@author sham-sheer"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Parses a {@code String unitNumber} into an {@code UnitNumber}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code unitNumber} is invalid."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"A0158738X"},"content":"    public static Meet parseMeetDate(String meetDate) throws IllegalValueException {"},{"lineNumber":187,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(meetDate);"},{"lineNumber":188,"author":{"gitID":"A0158738X"},"content":"        String trimmedMeetDate \u003d meetDate.trim();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        if (!Meet.isValidDate(meetDate)) {"},{"lineNumber":190,"author":{"gitID":"A0158738X"},"content":"            throw new IllegalValueException(Meet.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"A0158738X"},"content":"        return new Meet(trimmedMeetDate);"},{"lineNumber":193,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"A0158738X"},"content":"     * Parses a {@code Optional\u003cString\u003e meetDate} into an {@code Optional\u003cmeetDate\u003e} if {@code meetDate}"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * is present."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"A0158738X"},"content":"    public static Optional\u003cMeet\u003e parseMeetDate(Optional\u003cString\u003e meetDate) throws IllegalValueException {"},{"lineNumber":200,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(meetDate);"},{"lineNumber":201,"author":{"gitID":"A0158738X"},"content":"        return meetDate.isPresent() ? Optional.of(parseMeetDate(meetDate.get())) : Optional.empty();"},{"lineNumber":202,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":204,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":205,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String cca} into a {@code Cca}"},{"lineNumber":207,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":208,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":209,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code cca} is invalid."},{"lineNumber":210,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"deborahlow97"},"content":"    public static Cca parseCca(String cca) throws IllegalValueException {"},{"lineNumber":212,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(cca);"},{"lineNumber":213,"author":{"gitID":"deborahlow97"},"content":"        String trimmedCca \u003d cca.trim();"},{"lineNumber":214,"author":{"gitID":"deborahlow97"},"content":"        if (!Cca.isValidCcaName(trimmedCca)) {"},{"lineNumber":215,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(Cca.MESSAGE_CCA_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"deborahlow97"},"content":"        return new Cca(trimmedCca);"},{"lineNumber":218,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":220,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"deborahlow97"},"content":"     * Parses {@code Collection\u003cString\u003e ccas} into a {@code Set\u003cCca\u003e}."},{"lineNumber":222,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"deborahlow97"},"content":"    public static Set\u003cCca\u003e parseCcas(Collection\u003cString\u003e ccas) throws IllegalValueException {"},{"lineNumber":224,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(ccas);"},{"lineNumber":225,"author":{"gitID":"deborahlow97"},"content":"        final Set\u003cCca\u003e ccaSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":226,"author":{"gitID":"deborahlow97"},"content":"        for (String ccaName : ccas) {"},{"lineNumber":227,"author":{"gitID":"deborahlow97"},"content":"            ccaSet.add(parseCca(ccaName));"},{"lineNumber":228,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"deborahlow97"},"content":"        return ccaSet;"},{"lineNumber":230,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":232,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":260,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":261,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String importance} into an {@code Importance}."},{"lineNumber":263,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":264,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":265,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code importance} is invalid."},{"lineNumber":266,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"deborahlow97"},"content":"    public static Importance parseImportance(String importance) throws IllegalValueException {"},{"lineNumber":268,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(importance);"},{"lineNumber":269,"author":{"gitID":"deborahlow97"},"content":"        String trimmedImportance \u003d importance.trim();"},{"lineNumber":270,"author":{"gitID":"deborahlow97"},"content":"        if (!Importance.isValidImportance(trimmedImportance)) {"},{"lineNumber":271,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(Importance.MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":272,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"deborahlow97"},"content":"        return new Importance(trimmedImportance);"},{"lineNumber":274,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":276,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e importance} into an {@code Optional\u003cImportance\u003e} if {@code importance}"},{"lineNumber":278,"author":{"gitID":"deborahlow97"},"content":"     * is present."},{"lineNumber":279,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":280,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cImportance\u003e parseImportance(Optional\u003cString\u003e importance) throws IllegalValueException {"},{"lineNumber":282,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(importance);"},{"lineNumber":283,"author":{"gitID":"deborahlow97"},"content":"        return importance.isPresent() ? Optional.of(parseImportance(importance.get())) : Optional.empty();"},{"lineNumber":284,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":286,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String goalText} into an {@code GoalText}."},{"lineNumber":288,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":289,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":290,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code goalText} is invalid."},{"lineNumber":291,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"deborahlow97"},"content":"    public static GoalText parseGoalText(String goalText) throws IllegalValueException {"},{"lineNumber":293,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(goalText);"},{"lineNumber":294,"author":{"gitID":"deborahlow97"},"content":"        String trimmedGoalText \u003d goalText.trim();"},{"lineNumber":295,"author":{"gitID":"deborahlow97"},"content":"        if (!GoalText.isValidGoalText(trimmedGoalText)) {"},{"lineNumber":296,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":297,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"deborahlow97"},"content":"        return new GoalText(trimmedGoalText);"},{"lineNumber":299,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":301,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e goalText} into an {@code Optional\u003cGoalText\u003e} if {@code goalText}"},{"lineNumber":303,"author":{"gitID":"deborahlow97"},"content":"     * is present."},{"lineNumber":304,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":305,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":306,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cGoalText\u003e parseGoalText(Optional\u003cString\u003e goalText) throws IllegalValueException {"},{"lineNumber":307,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(goalText);"},{"lineNumber":308,"author":{"gitID":"deborahlow97"},"content":"        return goalText.isPresent() ? Optional.of(parseGoalText(goalText.get())) : Optional.empty();"},{"lineNumber":309,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":311,"author":{"gitID":"fuadsahmawi"},"content":"    //@@author fuadsahmawi"},{"lineNumber":312,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":313,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":314,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses a {@code String reminderText} into an {@code ReminderText}."},{"lineNumber":315,"author":{"gitID":"fuadsahmawi"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":316,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":317,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws IllegalValueException if the given {@code reminderText} is invalid."},{"lineNumber":318,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"fuadsahmawi"},"content":"    public static ReminderText parseReminderText(String reminderText) throws IllegalValueException {"},{"lineNumber":320,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(reminderText);"},{"lineNumber":321,"author":{"gitID":"fuadsahmawi"},"content":"        String trimmedReminderText \u003d reminderText.trim();"},{"lineNumber":322,"author":{"gitID":"fuadsahmawi"},"content":"        if (!ReminderText.isValidReminderText(trimmedReminderText)) {"},{"lineNumber":323,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(ReminderText.MESSAGE_REMINDER_TEXT_CONSTRAINTS);"},{"lineNumber":324,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"fuadsahmawi"},"content":"        return new ReminderText(trimmedReminderText);"},{"lineNumber":326,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":328,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":329,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses a {@code Optional\u003cString\u003e reminderText} into an {@code Optional\u003cReminderText\u003e} if {@code reminderText}"},{"lineNumber":330,"author":{"gitID":"fuadsahmawi"},"content":"     * is present."},{"lineNumber":331,"author":{"gitID":"fuadsahmawi"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":332,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":333,"author":{"gitID":"fuadsahmawi"},"content":"    public static Optional\u003cReminderText\u003e parseReminderText(Optional\u003cString\u003e reminderText) throws IllegalValueException {"},{"lineNumber":334,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(reminderText);"},{"lineNumber":335,"author":{"gitID":"fuadsahmawi"},"content":"        return reminderText.isPresent() ? Optional.of(parseReminderText(reminderText.get())) : Optional.empty();"},{"lineNumber":336,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":338,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":339,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses a {@code String reminderText} into an {@code ReminderText}."},{"lineNumber":340,"author":{"gitID":"fuadsahmawi"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":341,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":342,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws IllegalValueException if the given {@code reminderText} is invalid."},{"lineNumber":343,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":344,"author":{"gitID":"fuadsahmawi"},"content":"    public static DateTime parseDateTime(String dateTime) throws IllegalValueException {"},{"lineNumber":345,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(dateTime);"},{"lineNumber":346,"author":{"gitID":"fuadsahmawi"},"content":"        String trimmedDateTime \u003d dateTime.trim();"},{"lineNumber":347,"author":{"gitID":"fuadsahmawi"},"content":"        if (!DateTime.isValidDateTime(trimmedDateTime)) {"},{"lineNumber":348,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":349,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"fuadsahmawi"},"content":"        return new DateTime(trimmedDateTime);"},{"lineNumber":351,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":353,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":354,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses a {@code Optional\u003cString\u003e reminderText} into an {@code Optional\u003cReminderText\u003e} if {@code reminderText}"},{"lineNumber":355,"author":{"gitID":"fuadsahmawi"},"content":"     * is present."},{"lineNumber":356,"author":{"gitID":"fuadsahmawi"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":357,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":358,"author":{"gitID":"fuadsahmawi"},"content":"    public static Optional\u003cDateTime\u003e parseDateTime(Optional\u003cString\u003e dateTime) throws IllegalValueException {"},{"lineNumber":359,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(dateTime);"},{"lineNumber":360,"author":{"gitID":"fuadsahmawi"},"content":"        return dateTime.isPresent() ? Optional.of(parseDateTime(dateTime.get())) : Optional.empty();"},{"lineNumber":361,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":363,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses a {@code String reminderText} into an {@code ReminderText}."},{"lineNumber":365,"author":{"gitID":"fuadsahmawi"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":366,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":367,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws IllegalValueException if the given {@code reminderText} is invalid."},{"lineNumber":368,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":369,"author":{"gitID":"fuadsahmawi"},"content":"    public static EndDateTime parseEndDateTime(String endDateTime) throws IllegalValueException {"},{"lineNumber":370,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(endDateTime);"},{"lineNumber":371,"author":{"gitID":"fuadsahmawi"},"content":"        String trimmedEndDateTime \u003d endDateTime.trim();"},{"lineNumber":372,"author":{"gitID":"fuadsahmawi"},"content":"        if (!DateTime.isValidDateTime(trimmedEndDateTime)) {"},{"lineNumber":373,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(EndDateTime.MESSAGE_END_DATE_TIME_CONSTRAINTS);"},{"lineNumber":374,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":375,"author":{"gitID":"fuadsahmawi"},"content":"        return new EndDateTime(trimmedEndDateTime);"},{"lineNumber":376,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":378,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":379,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses a {@code Optional\u003cString\u003e reminderText} into an {@code Optional\u003cReminderText\u003e} if {@code reminderText}"},{"lineNumber":380,"author":{"gitID":"fuadsahmawi"},"content":"     * is present."},{"lineNumber":381,"author":{"gitID":"fuadsahmawi"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":382,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":383,"author":{"gitID":"fuadsahmawi"},"content":"    public static Optional\u003cEndDateTime\u003e parseEndDateTime(Optional\u003cString\u003e endDateTime) throws IllegalValueException {"},{"lineNumber":384,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(endDateTime);"},{"lineNumber":385,"author":{"gitID":"fuadsahmawi"},"content":"        return endDateTime.isPresent() ? Optional.of(parseEndDateTime(endDateTime.get())) : Optional.empty();"},{"lineNumber":386,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":388,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":389,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":390,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String sortField} and checks if it is a valid sortField parameter."},{"lineNumber":391,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":392,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if specified String is an invalid field."},{"lineNumber":393,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":394,"author":{"gitID":"deborahlow97"},"content":"    public static String parseSortGoalField(String sortField) throws IllegalValueException {"},{"lineNumber":395,"author":{"gitID":"deborahlow97"},"content":"        String trimmedSortField \u003d sortField.trim();"},{"lineNumber":396,"author":{"gitID":"deborahlow97"},"content":"        switch (trimmedSortField) {"},{"lineNumber":397,"author":{"gitID":"deborahlow97"},"content":"        case \"importance\":"},{"lineNumber":398,"author":{"gitID":"deborahlow97"},"content":"        case \"completion\":"},{"lineNumber":399,"author":{"gitID":"deborahlow97"},"content":"        case \"startdatetime\":"},{"lineNumber":400,"author":{"gitID":"deborahlow97"},"content":"            return trimmedSortField;"},{"lineNumber":401,"author":{"gitID":"deborahlow97"},"content":"        default:"},{"lineNumber":402,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_SORT_FIELD);"},{"lineNumber":403,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":404,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":406,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e sortField} into an {@code Optional\u003cString\u003e} if {@code sortField}"},{"lineNumber":408,"author":{"gitID":"deborahlow97"},"content":"     * is present."},{"lineNumber":409,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":410,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":411,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cString\u003e parseSortGoalField(Optional\u003cString\u003e sortField) throws IllegalValueException {"},{"lineNumber":412,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(sortField);"},{"lineNumber":413,"author":{"gitID":"deborahlow97"},"content":"        return sortField.isPresent() ? Optional.of(parseSortGoalField(sortField.get())) : Optional.empty();"},{"lineNumber":414,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":415,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":416,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":417,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code String order} and check if it is a valid order parameter."},{"lineNumber":418,"author":{"gitID":"deborahlow97"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":419,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":420,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if the given {@code order} is invalid."},{"lineNumber":421,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":422,"author":{"gitID":"deborahlow97"},"content":"    public static String parseSortGoalOrder(String order) throws IllegalValueException {"},{"lineNumber":423,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(order);"},{"lineNumber":424,"author":{"gitID":"deborahlow97"},"content":"        String trimmedOrder \u003d order.trim();"},{"lineNumber":425,"author":{"gitID":"deborahlow97"},"content":"        switch (trimmedOrder) {"},{"lineNumber":426,"author":{"gitID":"deborahlow97"},"content":"        case \"ascending\":"},{"lineNumber":427,"author":{"gitID":"deborahlow97"},"content":"        case \"descending\":"},{"lineNumber":428,"author":{"gitID":"deborahlow97"},"content":"            return trimmedOrder;"},{"lineNumber":429,"author":{"gitID":"deborahlow97"},"content":"        default:"},{"lineNumber":430,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_ORDER_FIELD);"},{"lineNumber":431,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":432,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":434,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":435,"author":{"gitID":"deborahlow97"},"content":"     * Parses a {@code Optional\u003cString\u003e sortOrder} into an {@code Optional\u003cString\u003e} if {@code sortOrder}"},{"lineNumber":436,"author":{"gitID":"deborahlow97"},"content":"     * is present."},{"lineNumber":437,"author":{"gitID":"deborahlow97"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":438,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":439,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cString\u003e parseSortGoalOrder(Optional\u003cString\u003e sortOrder) throws IllegalValueException {"},{"lineNumber":440,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(sortOrder);"},{"lineNumber":441,"author":{"gitID":"deborahlow97"},"content":"        return sortOrder.isPresent() ? Optional.of(parseSortGoalOrder(sortOrder.get())) : Optional.empty();"},{"lineNumber":442,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":15,"fuadsahmawi":80,"-":131,"deborahlow97":217}},{"path":"src/main/java/seedu/address/logic/parser/MeetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":23,"content":"//@@author sham-sheer"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":" * Parses input arguments and creates a new {@code RemarkCommand} object"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"public class MeetCommandParser implements Parser {"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code MeetCommand}"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"     * and returns a {@code MeetCommand} object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"    public MeetCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE) || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"            Meet meetDate \u003d ParserUtil.parseMeetDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":"            return new MeetCommand(index, meetDate);"},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":55,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":48,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_LEVEL_OF_FRIENDSHIP \u003d new Prefix(\"*/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_UNIT_NUMBER \u003d new Prefix(\"u/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_CCA \u003d new Prefix(\"cca/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public static final Prefix PREFIX_GOAL_TEXT \u003d new Prefix(\"text/\");"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    public static final Prefix PREFIX_IMPORTANCE \u003d new Prefix(\"impt/\");"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Prefix PREFIX_REMINDER_TEXT \u003d new Prefix(\"text/\");"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"e/\");"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static final Prefix PREFIX_SORT_FIELD \u003d new Prefix(\"f/\");"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public static final Prefix PREFIX_SORT_ORDER \u003d new Prefix(\"o/\");"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"fuadsahmawi":2,"-":17,"deborahlow97":6}},{"path":"src/main/java/seedu/address/logic/parser/EditGoalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL_TEXT;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand.EditGoalDescriptor;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.EditGoalCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new EditGoalCommand object"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"public class EditGoalCommandParser implements Parser\u003cEditGoalCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the EditGoalCommand"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     * and returns an EditGoalCommand object for execution."},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GOAL_TEXT, PREFIX_IMPORTANCE);"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditGoalCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        EditGoalDescriptor editGoalDescriptor \u003d new EditGoalDescriptor();"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"            ParserUtil.parseGoalText(argMultimap.getValue(PREFIX_GOAL_TEXT)).ifPresent(editGoalDescriptor::setGoalText);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"            ParserUtil.parseImportance(argMultimap.getValue(PREFIX_IMPORTANCE))"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"                    .ifPresent(editGoalDescriptor::setImportance);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        if (!editGoalDescriptor.isAnyFieldEdited()) {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(EditGoalCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        return new EditGoalCommand(index, editGoalDescriptor);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":8,"deborahlow97":46}},{"path":"src/main/java/seedu/address/logic/parser/DeleteReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TEXT;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.DateTimeParser.properReminderDateTimeFormat;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderTextPredicate;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":" * Parses input arguments and creates a new DeleteReminderCommand object"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"public class DeleteReminderCommandParser {"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteReminderCommand"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"     * and returns an DeleteReminderCommand object for execution."},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    public DeleteReminderCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER_TEXT, PREFIX_DATE);"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER_TEXT, PREFIX_DATE)"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        String reminderText \u003d argMultimap.getValue(PREFIX_REMINDER_TEXT).get();"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        String dateTime \u003d argMultimap.getValue(PREFIX_DATE).get();"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        LocalDateTime localDateTime \u003d nattyDateAndTimeParser(dateTime).get();"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        dateTime \u003d properReminderDateTimeFormat(localDateTime);"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"        String trimmedArgs \u003d reminderText.trim();"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException("},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        return new DeleteReminderCommand(new ReminderTextPredicate(Arrays.asList(nameKeywords)), dateTime);"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":57,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/DateTimeParser.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import java.time.format.TextStyle;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import java.util.Locale;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import com.joestelmach.natty.DateGroup;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import com.joestelmach.natty.Parser;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * Contains utility methods used for parsing DateTime in the various *Parser classes."},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"public class DateTimeParser {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    private static final int BEGIN_INDEX \u003d 6;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     * Parses user input String specified{@code args} into LocalDateTime objects"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * @return Empty Optional if args could not be parsed"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     * @Disclaimer : The parser used is a NLP API called \u0027natty\u0027 developed by \u0027Joe Stelmach\u0027"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public static Optional\u003cLocalDateTime\u003e nattyDateAndTimeParser(String args) {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"            return Optional.empty();"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        List groups \u003d parser.parse(args);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        //Cannot be parsed"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        if (groups.size() \u003c\u003d 0) {"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"            return Optional.empty();"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        DateGroup dateGroup \u003d (DateGroup) groups.get(0);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        if (dateGroup.getDates().size() \u003c 0) {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"            return Optional.empty();"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        Date date \u003d dateGroup.getDates().get(0);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        LocalDateTime localDateTime \u003d LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        return Optional.ofNullable(localDateTime);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"     * Receives a LocalDateTime and formats the {@code dateTime}"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"     * @return a formatted dateTime in String"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public static String properDateTimeFormat(LocalDateTime dateTime) {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        int day \u003d dateTime.getDayOfMonth();"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        int year \u003d dateTime.getYear();"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        int hour \u003d dateTime.getHour();"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        int minute \u003d dateTime.getMinute();"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        builder.append(\"Date: \")"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"                .append(day)"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"                .append(\" \")"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"                .append(month)"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"                .append(\" \")"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"                .append(year)"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"                .append(\",  Time: \")"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"                .append(String.format(\"%02d\", hour))"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"                .append(\":\")"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"                .append(String.format(\"%02d\", minute));"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        return builder.toString();"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    public static LocalDateTime getLocalDateTimeFromProperDateTime(String properDateTimeString) {"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        String trimmedArgs \u003d properDateTimeString.trim();"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        int size \u003d trimmedArgs.length();"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        String stringFormat \u003d properDateTimeString.substring(BEGIN_INDEX, size);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        stringFormat \u003d stringFormat.replace(\", Time: \", \"\");"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        return nattyDateAndTimeParser(stringFormat).get();"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"     * Receives a LocalDateTime and formats the {@code dateTime}"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"     * @return a formatted dateTime in String"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"    public static String properReminderDateTimeFormat(LocalDateTime dateTime) {"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        int day \u003d dateTime.getDayOfMonth();"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        int year \u003d dateTime.getYear();"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        int hour \u003d dateTime.getHour();"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        int minute \u003d dateTime.getMinute();"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"        builder.append(day)"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"                .append(\"/\")"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"                .append(month)"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"                .append(\"/\")"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"                .append(year)"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"                .append(\" \")"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"                .append(String.format(\"%02d\", hour))"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"                .append(\":\")"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"                .append(String.format(\"%02d\", minute));"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        return builder.toString();"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"    public static boolean containsDateAndTime(String args) {"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        return nattyDateAndTimeParser(args).isPresent();"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    public static LocalDateTime getLocalDateTimeFromString(String dateString) {"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(dateString, formatter);"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        return dateTime;"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":118}},{"path":"src/main/java/seedu/address/logic/parser/CompleteGoalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.properDateTimeFormat;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.CompleteGoalCommand.CompleteGoalDescriptor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new CompleteGoalCommand object"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"public class CompleteGoalCommandParser implements Parser\u003cCompleteGoalCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean COMPLETED_BOOLEAN_VALUE \u003d true;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the CompleteGoalCommand"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     * and returns an CompleteGoalCommand object for execution."},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteGoalCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalDescriptor completeGoalDescriptor \u003d new CompleteGoalDescriptor();"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        Completion completion \u003d new Completion(COMPLETED_BOOLEAN_VALUE);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        EndDateTime endDateTime \u003d new EndDateTime(properDateTimeFormat(LocalDateTime.now()));"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        completeGoalDescriptor.setCompletion(completion);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        completeGoalDescriptor.setEndDateTime(endDateTime);"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        return new CompleteGoalCommand(index, completeGoalDescriptor);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":6,"deborahlow97":43}},{"path":"src/main/java/seedu/address/logic/parser/ShowLofCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.logic.commands.ShowLofCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.model.person.LofContainsValuePredicate;"},{"lineNumber":10,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":" * Parses input arguments and creates a new ShowLofCommand object"},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"public class ShowLofCommandParser implements Parser\u003cShowLofCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"     * Parses the given {@code String} of arguments in the context of the ShowLofCommand"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"     * and returns an ShowLofCommand object for execution."},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"    public ShowLofCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLofCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"        String[] nameKeywords \u003d (trimmedArgs.split(\"\\\\s+\"));"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"        return new ShowLofCommand(new LofContainsValuePredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":28,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_BIRTHDAY,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                        PREFIX_LEVEL_OF_FRIENDSHIP,  PREFIX_UNIT_NUMBER, PREFIX_CCA, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY))"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setBirthday);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseLevelOfFriendship(argMultimap.getValue(PREFIX_LEVEL_OF_FRIENDSHIP))"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setLevelOfFriendship);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parseUnitNumber(argMultimap.getValue(PREFIX_UNIT_NUMBER))"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setUnitNumber);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            parseCcasForEdit(argMultimap.getAllValues(PREFIX_CCA)).ifPresent(editPersonDescriptor::setCcas);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"     * Parses {@code Collection\u003cString\u003e ccas} into a {@code Set\u003cCca\u003e} if {@code ccas} is non-empty."},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"     * If {@code ccas} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"     * {@code Set\u003cCca\u003e} containing zero ccas."},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    private Optional\u003cSet\u003cCca\u003e\u003e parseCcasForEdit(Collection\u003cString\u003e ccas) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        assert ccas !\u003d null;"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        if (ccas.isEmpty()) {"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"            return Optional.empty();"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        Collection\u003cString\u003e ccaSet \u003d ccas.size() \u003d\u003d 1 \u0026\u0026 ccas.contains(\"\") ? Collections.emptySet() : ccas;"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        return Optional.of(ParserUtil.parseCcas(ccaSet));"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":88,"deborahlow97":17}},{"path":"src/main/java/seedu/address/logic/parser/AddGoalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL_TEXT;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.AddGoalCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new AddGoalCommand object"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommandParser implements Parser\u003cAddGoalCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public static final String EMPTY_END_DATE_TIME \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public static final boolean INITIAL_COMPLETION_STATUS \u003d false;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the AddGoalCommand"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"     * and returns an AddGoalCommand object for execution."},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public AddGoalCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_IMPORTANCE, PREFIX_GOAL_TEXT);"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_IMPORTANCE, PREFIX_GOAL_TEXT)"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGoalCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"            Importance importance \u003d ParserUtil.parseImportance(argMultimap.getValue(PREFIX_IMPORTANCE)).get();"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            GoalText goalText \u003d ParserUtil.parseGoalText(argMultimap.getValue(PREFIX_GOAL_TEXT)).get();"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"            StartDateTime startDateTime \u003d new StartDateTime(LocalDateTime.now());"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"            EndDateTime endDateTime \u003d new EndDateTime(EMPTY_END_DATE_TIME);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            Completion completion \u003d new Completion(INITIAL_COMPLETION_STATUS);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"            Goal goal \u003d new Goal(importance, goalText, startDateTime, endDateTime, completion);"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            return new AddGoalCommand(goal);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":7,"deborahlow97":56}},{"path":"src/main/java/seedu/address/logic/parser/DeleteGoalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.DeleteGoalCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new DeleteGoalCommand object"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"public class DeleteGoalCommandParser implements Parser\u003cDeleteGoalCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteGoalCommand"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"     * and returns an DeleteGoalCommand object for execution."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public DeleteGoalCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"            return new DeleteGoalCommand(index);"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGoalCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":8,"deborahlow97":23}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.ThemeColourUtil.getThemeHashMap;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":" * Parses input arguments and creates a new ThemeCommand object"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"     * Parses the given {@code String} of arguments in the context of the ThemeCommand"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     * and returns a ThemeCommand object for execution."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        if (!isValidThemeColour(trimmedArgs)) {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_INVALID_THEME_COLOUR));"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        return new ThemeCommand(trimmedArgs);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"     * @param themeColour"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"     * @return"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    private boolean isValidThemeColour(String themeColour) {"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        HashMap\u003cString, String\u003e themes \u003d getThemeHashMap();"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        if (themes.containsKey(themeColour.toLowerCase())) {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"-":5,"deborahlow97":46}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":" * Lists all persons in CollegeZone to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":19,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":" * Deletes a person identified using it\u0027s last displayed index from CollegeZone."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":66,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/commands/MeetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":18,"content":"//@@author sham-sheer"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" * Adds a meeting to CollegeZone."},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"public class MeetCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"    public static final String COMMAND_WORD \u003d \"meet\";"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"    public static final String COMMAND_ALIAS \u003d \"m\";"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the date of meetup for the person identified \""},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"            + PREFIX_DATE + \"[REMARK]\\n\""},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_DATE + \"01/04/2018\";"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_ADD_MEETDATE_SUCCESS \u003d \"%1$s added for meet up! Check out your Calendar!\";"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_DELETE_MEETDATE_SUCCESS \u003d \"You are not meeting %1$s anymore!!\";"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person has already been set to have meeting.\";"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"    private final Index targetIndex;"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"    private final Meet date;"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"    private Person personToEdit;"},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":"    private Person editedPerson;"},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":"     * @param targetIndex of the person in the filtered person list you want to meet"},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"     * @param date you want to meet the person"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"    public MeetCommand(Index targetIndex, Meet date) {"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":51,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(date);"},{"lineNumber":52,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":54,"author":{"gitID":"A0158738X"},"content":"        this.date \u003d date;"},{"lineNumber":55,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":62,"author":{"gitID":"A0158738X"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"A0158738X"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":67,"author":{"gitID":"A0158738X"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"A0158738X"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":74,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"A0158738X"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"A0158738X"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":77,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":78,"author":{"gitID":"A0158738X"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitID":"A0158738X"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":82,"author":{"gitID":"A0158738X"},"content":"        personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"A0158738X"},"content":"        editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getBirthday(),"},{"lineNumber":84,"author":{"gitID":"A0158738X"},"content":"                personToEdit.getLevelOfFriendship(), personToEdit.getUnitNumber(), personToEdit.getCcas(),"},{"lineNumber":85,"author":{"gitID":"A0158738X"},"content":"                date, personToEdit.getTags());"},{"lineNumber":86,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":88,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"A0158738X"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":90,"author":{"gitID":"A0158738X"},"content":"     * {@code personToEdit}."},{"lineNumber":91,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"A0158738X"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":"        String message \u003d !date.value.isEmpty() ? MESSAGE_ADD_MEETDATE_SUCCESS : MESSAGE_DELETE_MEETDATE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"        return String.format(message, personToEdit.getName());"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":97,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"A0158738X"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"A0158738X"},"content":"        // short circuit if same object"},{"lineNumber":100,"author":{"gitID":"A0158738X"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"A0158738X"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":"        // instanceof handles nulls"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":"        if (!(other instanceof MeetCommand)) {"},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"            return false;"},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":109,"author":{"gitID":"A0158738X"},"content":"        // state check"},{"lineNumber":110,"author":{"gitID":"A0158738X"},"content":"        MeetCommand e \u003d (MeetCommand) other;"},{"lineNumber":111,"author":{"gitID":"A0158738X"},"content":"        return targetIndex.equals(e.targetIndex)"},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":"                \u0026\u0026 date.equals(e.date);"},{"lineNumber":113,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":115,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":116,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":117,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":118,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":119,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":115,"-":1,"deborahlow97":2}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMeetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"content":"//@@author sham-sheer"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":" * Removes the meet up set with a person using the person\u0027s displayed index from CollegeZone."},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"public class DeleteMeetCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"    public static final String COMMAND_WORD \u003d \"-meet\";"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"    public static final String COMMAND_ALIAS \u003d \"-m\";"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"            + \": Deletes the person\u0027s meet date identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"You are not meeting %1$s anymore. \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"    public DeleteMeetCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":"            model.deleteMeetDate(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"                || (other instanceof DeleteMeetCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"A0158738X"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteMeetCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"A0158738X"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteMeetCommand) other).personToDelete));"},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":17,"fuadsahmawi":1,"-":51,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/parser/AddReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TEXT;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.DateTime;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.EndDateTime;"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderText;"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":" * Parses input arguments and creates a new AddReminderCommand object"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"public class AddReminderCommandParser implements Parser\u003cAddReminderCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddReminderCommand"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"     * and returns an AddReminderCommand object for execution."},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    public AddReminderCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER_TEXT, PREFIX_DATE, PREFIX_END_DATE);"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER_TEXT, PREFIX_DATE, PREFIX_END_DATE)"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        if (nattyDateAndTimeParser(argMultimap.getValue(PREFIX_DATE).get()).get().compareTo("},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"                nattyDateAndTimeParser(argMultimap.getValue(PREFIX_END_DATE).get()).get()) \u003e 0"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"                || nattyDateAndTimeParser(argMultimap.getValue(PREFIX_END_DATE).get()).get().compareTo("},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"                        LocalDateTime.now()) \u003c 0"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"                || nattyDateAndTimeParser(argMultimap.getValue(PREFIX_DATE).get()).get().compareTo("},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"                        LocalDateTime.now()) \u003c 0) {"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT, AddReminderCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"            ReminderText reminderText \u003d ParserUtil.parseReminderText(argMultimap.getValue(PREFIX_REMINDER_TEXT)).get();"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"            DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"            EndDateTime endDateTime \u003d ParserUtil.parseEndDateTime(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"            Reminder reminder \u003d new Reminder(reminderText, dateTime, endDateTime);"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"            return new AddReminderCommand(reminder);"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"fuadsahmawi":61,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ShowLofCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"zuweitrack"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":3,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.model.person.LofContainsValuePredicate;"},{"lineNumber":4,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":5,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":6,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"zuweitrack"},"content":" * Finds and lists the person(s)"},{"lineNumber":8,"author":{"gitID":"zuweitrack"},"content":" * in address book whose level of friendship matches the input value"},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":" * of the argument keywords."},{"lineNumber":10,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":"public class ShowLofCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":"    public static final String COMMAND_WORD \u003d \"show\";"},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"    public static final String COMMAND_ALIAS \u003d \"sh\";"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"            + \": Shows person(s) in CollegeZone with the\""},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"            + \" whose level of friendship contains any of \""},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"            + \"specified level and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"            + \"Parameters: LEVELOFFRIENDSHIP [MORE_LEVELOFFRIENDSHIP]...\\n\""},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 7\";"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"    private final LofContainsValuePredicate predicate;"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"    public ShowLofCommand(LofContainsValuePredicate predicate) {"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"                || (other instanceof ShowLofCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"                \u0026\u0026 this.predicate.equals(((ShowLofCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":42}},{"path":"src/main/java/seedu/address/logic/commands/SeekRaCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumberContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":6,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"zuweitrack"},"content":" * Finds and lists the Resident Assistant (RA) of an individual RC Student"},{"lineNumber":8,"author":{"gitID":"zuweitrack"},"content":" * in address book whose name contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":"public class SeekRaCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":"    public static final String COMMAND_WORD \u003d \"seek\";"},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"    public static final String COMMAND_ALIAS \u003d \"sk\";"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"            + \": Seeks and lists all Resident Assistants (RA) of RC4 with the\""},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"            + \" individual RC student whose name contain any of \""},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"    private final UnitNumberContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"    public SeekRaCommand(UnitNumberContainsKeywordsPredicate predicate) {"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"        return new CommandResult(getMessageForRaShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"                || (other instanceof SeekRaCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"                \u0026\u0026 this.predicate.equals(((SeekRaCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":38,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/SortGoalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_FIELD;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOALS;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":" * Sorts goal list in CollegeZone based on sort field entered by user."},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"public class SortGoalCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"sortgoal\";"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS \u003d \"sgoal\";"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"            + \": Sorts CollegeZone\u0027s goals based on the field entered.\\n\""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_SORT_FIELD + \"FIELD (must be \u0027importance\u0027, \u0027startdatetime\u0027 or \u0027completion\u0027) \""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_SORT_ORDER + \"ORDER (must be either \u0027ascending\u0027 or \u0027descending\u0027)\\n\""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" f/completion o/ascending\";"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all goals by %s and %s\";"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    private String sortField;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    private String sortOrder;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public SortGoalCommand(String field, String order) {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        this.sortField \u003d field;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        this.sortOrder \u003d order;"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"            model.sortGoal(sortField, sortOrder);"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        } catch (EmptyGoalListException egle) {"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_SORT_COMMAND_USAGE);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        model.updateFilteredGoalList(PREDICATE_SHOW_ALL_GOALS);"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, sortField, sortOrder));"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof SortGoalCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 sortField.equals(((SortGoalCommand) other).sortField));"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":1,"deborahlow97":51}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" * Clears CollegeZone."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"CollegeZone has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":20,"deborahlow97":2}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * Adds a person to CollegeZone."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"LEVEL OF FRIENDSHIP \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER + \"UNIT NUMBER \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"CCA \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"24/05/1997 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"9 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER + \"#02-25 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"Badminton \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"tennis \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"   \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"   \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"   \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"   \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER + \"   \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"   \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"   \";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":81,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.commons.events.ui.ThemeSwitchRequestEvent;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" * Changes the CollegeZone colour theme to either dark, bubblegum or light."},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS \u003d \"th\";"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Theme successfully changed!\";"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the theme to the theme word entered.\\n\""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: COLOUR THEME\\n\""},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"            + \"(Colour theme words: dark, bubblegum, light)\\n\""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\\n\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_INVALID_THEME_COLOUR \u003d \"Theme colour entered is invalid.\\n\""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"            + \"Possible theme colours:\\n\""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"            + \"(Colour theme words: dark, bubblegum, light)\\n\";"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    private final String themeColour;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"     * Creates a ThemeCommand based on the specified themeColour."},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    public ThemeCommand (String themeColour) {"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(themeColour);"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        this.themeColour \u003d themeColour;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        EventsCenter.getInstance().post(new ThemeSwitchRequestEvent(themeColour));"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, themeColour));"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 themeColour.equals(((ThemeCommand) other).themeColour));"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":4,"deborahlow97":43}},{"path":"src/main/java/seedu/address/logic/commands/DeleteGoalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":" * Deletes a goal identified using it\u0027s last displayed index from CollegeZone."},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"public class DeleteGoalCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"-goal\";"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_1 \u003d \"-g\";"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"deletegoal\";"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"            + \": Deletes the goal identified by the index number used in the goal listing.\\n\""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_DELETE_GOAL_SUCCESS \u003d \"Deleted Goal: %1$s\";"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    private Goal goalToDelete;"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    public DeleteGoalCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(goalToDelete);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"            model.deleteGoal(goalToDelete);"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        } catch (GoalNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"The target goal cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_GOAL_SUCCESS, goalToDelete));"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e lastShownList \u003d model.getFilteredGoalList();"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        goalToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof DeleteGoalCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteGoalCommand) other).targetIndex) // state check"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(this.goalToDelete, ((DeleteGoalCommand) other).goalToDelete));"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":10,"deborahlow97":61}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":" * Selects a person identified using it\u0027s last displayed index from CollegeZone."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":51,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"content":"//@@author sham-sheer"},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":" * Sort the persons in CollegeZone based on the users parameters"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final  String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid sort type: %1$s\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"CollegeZone student list is empty, There is nothing to sort!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SORTED_SUCCESS_LEVEL_OF_FRIENDSHIP \u003d \"List sorted according to Friendship lvl!\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SORTED_SUCCESS_MEET_DATE \u003d \"List sorted according to your latest meet date!\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SORTED_SUCCESS_BIRTHDAY \u003d \"List sorted according to show latest birthday!\";"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \": Sorts the person list identified by the index number used in the last person listing.\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public SortCommand(Index index) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            model.sortPersons(index);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ioe) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The index is out of bounds\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (index.getOneBased() \u003d\u003d 1) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SORTED_SUCCESS_LEVEL_OF_FRIENDSHIP));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (index.getOneBased() \u003d\u003d 2) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SORTED_SUCCESS_MEET_DATE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SORTED_SUCCESS_BIRTHDAY));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (index.getOneBased() \u003e 3) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(String.format(SortCommand.MESSAGE_INVALID_COMMAND_FORMAT, index.getOneBased()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (lastShownList.size() \u003d\u003d 0) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new CommandException(String.format(SortCommand.MESSAGE_EMPTY_LIST));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.index.equals(((SortCommand) other).index)); // state check"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"},{"lineNumber":84,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"null":1,"A0158738X":2,"fuadsahmawi":1,"-":79,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":" * Finds and lists all persons in CollegeZone whose name contains any of the argument keywords."},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":" * Keyword matching is case sensitive."},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"public class FindCommand extends Command {"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" 1\""},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_NAME + \"   \""},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_PHONE + \"   \""},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_BIRTHDAY + \"   \""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"   \""},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_UNIT_NUMBER + \"   \""},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_CCA + \"   \""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_TAG + \"   \";"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names or tags contain any of \""},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Parameters: n/KEYWORD [MORE_KEYWORDS]... or t/KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/alice bob charlie\";"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"A keyword to find name or tag must be provided.\";"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"    private TagContainsKeywordsPredicate predicateT \u003d null;"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"    private NameContainsKeywordsPredicate predicateN \u003d null;"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicateName) {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        this.predicateN \u003d predicateName;"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"    public FindCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"        this.predicateT \u003d predicate;"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"    public CommandResult execute() {"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        if (predicateT \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"            model.updateFilteredPersonList(predicateN);"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"            model.updateFilteredPersonList(predicateT);"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        if (this.predicateT \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"            return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"                    || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"                    \u0026\u0026 this.predicateN.equals(((FindCommand) other).predicateN)); // state check"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"            return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"                    || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"                    \u0026\u0026 this.predicateT.equals(((FindCommand) other).predicateT)); // state check"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"     * corresponding field value of the person."},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"fuadsahmawi"},"content":"    public static class FindPersonDescriptor {"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"        private String[] nameKeywords;"},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"        private String[] tagKeywords;"},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":87,"author":{"gitID":"fuadsahmawi"},"content":"        public FindPersonDescriptor() {"},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"        /**"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"         */"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":"            return CollectionUtil.isAnyNonNull(this.nameKeywords, this.tagKeywords);"},{"lineNumber":95,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":97,"author":{"gitID":"fuadsahmawi"},"content":"        public void setNameKeywords(String name) {"},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"            this.nameKeywords \u003d name.split(\"\\\\s+\");"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":"            ;"},{"lineNumber":100,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":102,"author":{"gitID":"fuadsahmawi"},"content":"        public void setTagKeywords(String tags) {"},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"            this.tagKeywords \u003d tags.split(\"\\\\s+\");"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"        public String[] getNameKeywords() {"},{"lineNumber":107,"author":{"gitID":"fuadsahmawi"},"content":"            return this.nameKeywords;"},{"lineNumber":108,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        public String[] getTagKeyWords() {"},{"lineNumber":111,"author":{"gitID":"fuadsahmawi"},"content":"            return this.tagKeywords;"},{"lineNumber":112,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":99,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":" * Edits the details of an existing person in CollegeZone."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" 1\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"   \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"   \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"   \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"   \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER + \"   \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"   \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"   \";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_LEVEL_OF_FRIENDSHIP + \"LEVEL OF FRIENDSHIP] \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_UNIT_NUMBER + \"UNIT NUMBER] \""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_CCA + \"CCA]... \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":65,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"21/3/1990 \";"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        LevelOfFriendship updatedLevelOfFriendship \u003d editPersonDescriptor.getLevelOfFriendship()"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .orElse(personToEdit.getLevelOfFriendship());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        UnitNumber updatedUnitNumber \u003d editPersonDescriptor.getUnitNumber().orElse(personToEdit.getUnitNumber());"},{"lineNumber":129,"author":{"gitID":"A0158738X"},"content":"        Meet updatedMeetDate \u003d personToEdit.getMeetDate();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Set\u003cCca\u003e updatedCcas \u003d editPersonDescriptor.getCcas().orElse(personToEdit.getCcas());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedBirthday, updatedLevelOfFriendship, updatedUnitNumber,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                updatedCcas, updatedMeetDate, updatedTags);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private Birthday birthday;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        private LevelOfFriendship levelOfFriendship;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        private UnitNumber unitNumber;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private Set\u003cCca\u003e ccas;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            setBirthday(toCopy.birthday);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            setLevelOfFriendship(toCopy.levelOfFriendship);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            setUnitNumber(toCopy.unitNumber);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            setCcas(toCopy.ccas);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":187,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.birthday,"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                    this.levelOfFriendship, this.unitNumber, this.ccas, this.tags);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void setLevelOfFriendship(LevelOfFriendship levelOfFriendship) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public Optional\u003cLevelOfFriendship\u003e getLevelOfFriendship() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(levelOfFriendship);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void setUnitNumber(UnitNumber unitNumber) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            this.unitNumber \u003d unitNumber;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cUnitNumber\u003e getUnitNumber() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(unitNumber);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * Sets {@code ccas} to this object\u0027s {@code ccas}."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code ccas} is used internally."},{"lineNumber":237,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        public void setCcas(Set\u003cCca\u003e ccas) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            this.ccas \u003d (ccas !\u003d null) ? new HashSet\u003c\u003e(ccas) : null;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable cca set, which throws {@code UnsupportedOperationException}"},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code ccas} is null."},{"lineNumber":246,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cCca\u003e\u003e getCcas() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            return (ccas !\u003d null) ? Optional.of(Collections.unmodifiableSet(ccas)) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":254,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":261,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":262,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":263,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":286,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getLevelOfFriendship().equals(e.getLevelOfFriendship())"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getUnitNumber().equals(e.getUnitNumber())"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getCcas().equals(e.getCcas())"},{"lineNumber":289,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":2,"fuadsahmawi":2,"-":287,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/commands/AddReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TEXT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":" * Adds a reminder to the Calendar."},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"public class AddReminderCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_WORD \u003d \"+reminder\";"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"+r\";"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"addreminder\";"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to Calendar.\\n\""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_REMINDER_TEXT + \"TEXT \""},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_DATE + \"START_DATETIME \""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_END_DATE + \"END_DATETIME\\n\""},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_REMINDER_TEXT + \" do homework \""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_DATE + \" tonight 8pm \""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"            + PREFIX_END_DATE + \" tonight 10pm\";"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\\n\""},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Disclaimer: If date \u0026 time parsed wrongly, delete the reminder and refer to User Guide for correct\""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"            + \" format of date and time\";"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the Calendar\";"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    private final Reminder toAdd;"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"     * Creates an AddReminderCommand to add the specified {@code Reminder}"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"    public AddReminderCommand(Reminder reminder) {"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(reminder);"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        toAdd \u003d reminder;"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"            model.addReminder(toAdd);"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (DuplicateReminderException e) {"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof AddReminderCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 toAdd.equals(((AddReminderCommand) other).toAdd));"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":59,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/AddGoalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL_TEXT;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":" * Adds a goal to CollegeZone."},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"public class AddGoalCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"+goal\";"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_1 \u003d \"+g\";"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"addgoal\";"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_IMPORTANCE + \"   \""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_GOAL_TEXT + \"   \";"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a goal to Goals Page. \\n\""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_IMPORTANCE + \"IMPORTANCE \""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_GOAL_TEXT + \"TEXT \\n\""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_IMPORTANCE + \"3 \""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_GOAL_TEXT + \"lose weight \\n\";"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New goal added: %1$s\";"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_DUPLICATE_GOAL \u003d \"This goal already exists in the Goals Page\";"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    private final Goal toAdd;"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"     * Creates an AddGoalCommand to add the specified {@code Goal}"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    public AddGoalCommand(Goal goal) {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(goal);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"        toAdd \u003d goal;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            model.addGoal(toAdd);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateGoalException e) {"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_GOAL);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof AddGoalCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 toAdd.equals(((AddGoalCommand) other).toAdd));"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":57}},{"path":"src/main/java/seedu/address/logic/commands/DeleteReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderTextPredicate;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":" * Deletes a reminder identified using its title in the calendar"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"public class DeleteReminderCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_WORD \u003d \"-reminder\";"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"-r\";"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"deletereminder\";"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"            + \": Deletes the reminder identified by its title \u0026 start time in the calendar.\\n\""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Parameters: REMINDER_TITLE \u0026 START_DATETIME\\n\""},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"            + \"Example: \" + COMMAND_WORD + \" text/Eat pills d/tmr 8pm\";"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"    private Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    private String dateTime;"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    private ReminderTextPredicate predicate;"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"    private Reminder reminderToDelete;"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"    public DeleteReminderCommand(ReminderTextPredicate predicate, String dateTime) {"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(reminderToDelete);"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"            model.deleteReminder(reminderToDelete);"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (ReminderNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"            throw new AssertionError(\"The target reminder cannot be missing\");"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete));"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        model.updateFilteredReminderList(predicate);"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        List\u003cReminder\u003e lastShownList \u003d model.getFilteredReminderList();"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"        targetIndex \u003d Index.fromOneBased(1);"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        if (lastShownList.size() \u003e 1) {"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"            for (Reminder reminder : lastShownList) {"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"                if (reminder.getDateTime().toString().equals(dateTime)) {"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"                    reminderToDelete \u003d reminder;"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"                }"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_TEXT_DATE);"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"            reminderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"A0158738X":3,"fuadsahmawi":67,"-":3,"deborahlow97":1}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        return model.getFilteredReminderList();"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    public ObservableList\u003cGoal\u003e getFilteredGoalList() {"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        return model.getFilteredGoalList();"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":6,"-":57,"deborahlow97":6}},{"path":"src/main/java/seedu/address/logic/commands/EditGoalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL_TEXT;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IMPORTANCE;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOALS;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":" * Edits the details of an existing goal in CollegeZone."},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"public class EditGoalCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"~goal\";"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_1 \u003d \"~g\";"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"editgoal\";"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the goal identified \""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"            + \"by the index number used in the last goal listing. \""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"            + \"[\" + PREFIX_GOAL_TEXT + \"GOAL TEXT] \""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"            + \"[\" + PREFIX_IMPORTANCE + \"IMPORTANCE] \\n\""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"            + PREFIX_IMPORTANCE + \"2 \";"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_EDIT_GOAL_SUCCESS \u003d \"Edited Goal: %1$s\";"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_DUPLICATE_GOAL \u003d \"This goal already exists in the address book.\";"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    private final Index index;"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    private final EditGoalDescriptor editGoalDescriptor;"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    private Goal goalToEdit;"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    private Goal editedGoal;"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"     * @param index of the goal in the filtered goal list to edit"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"     * @param editGoalDescriptor details to edit the goal with"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    public EditGoalCommand(Index index, EditGoalDescriptor editGoalDescriptor) {"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(index);"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(editGoalDescriptor);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        this.index \u003d index;"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        this.editGoalDescriptor \u003d new EditGoalDescriptor(editGoalDescriptor);"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"            model.updateGoal(goalToEdit, editedGoal);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateGoalException dpe) {"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_GOAL);"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        } catch (GoalNotFoundException pnfe) {"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"The target goal cannot be missing\");"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        model.updateFilteredGoalList(PREDICATE_SHOW_ALL_GOALS);"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_GOAL_SUCCESS, editedGoal));"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e lastShownList \u003d model.getFilteredGoalList();"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        goalToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        editedGoal \u003d createEditedGoal(goalToEdit, editGoalDescriptor);"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"     * Creates and returns a {@code Goal} with the details of {@code goalToEdit}"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"     * edited with {@code editGoalDescriptor}."},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"    private static Goal createEditedGoal(Goal goalToEdit, EditGoalDescriptor editGoalDescriptor) {"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        assert goalToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        GoalText updatedGoalText \u003d editGoalDescriptor.getGoalText().orElse(goalToEdit.getGoalText());"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        Importance updatedImportance \u003d editGoalDescriptor.getImportance().orElse(goalToEdit.getImportance());"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        StartDateTime startDateTime \u003d goalToEdit.getStartDateTime();"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        EndDateTime endDateTime \u003d goalToEdit.getEndDateTime();"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        Completion completion \u003d goalToEdit.getCompletion();"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        return new Goal(updatedImportance, updatedGoalText, startDateTime, endDateTime, completion);"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof EditGoalCommand)) {"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"        // state check"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"        EditGoalCommand e \u003d (EditGoalCommand) other;"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"        return index.equals(e.index)"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 editGoalDescriptor.equals(e.editGoalDescriptor)"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(goalToEdit, e.goalToEdit);"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"     * Stores the details to edit the goal with. Each non-empty field value will replace the"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"     * corresponding field value of the goal."},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    public static class EditGoalDescriptor {"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"        private GoalText goalText;"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"        private Importance importance;"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"        public EditGoalDescriptor() {}"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"        /**"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"         * Copy constructor."},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        public EditGoalDescriptor(EditGoalDescriptor toCopy) {"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"            setGoalText(toCopy.goalText);"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"            setImportance(toCopy.importance);"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"        /**"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"         */"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"            return CollectionUtil.isAnyNonNull(this.goalText, this.importance);"},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        public void setGoalText(GoalText goalText) {"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"            this.goalText \u003d goalText;"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cGoalText\u003e getGoalText() {"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(goalText);"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"        public void setImportance(Importance importance) {"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"            this.importance \u003d importance;"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cImportance\u003e getImportance() {"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(importance);"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"        public boolean equals(Object other) {"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"            // short circuit if same object"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"                return true;"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"            // instanceof handles nulls"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"            if (!(other instanceof EditGoalDescriptor)) {"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"                return false;"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"            // state check"},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"            EditGoalDescriptor e \u003d (EditGoalDescriptor) other;"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"            return getGoalText().equals(e.getGoalText())"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"                    \u0026\u0026 getImportance().equals(e.getImportance());"},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"-":11,"deborahlow97":176}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to a temporary local backup file."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":4,"-":47}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"zuweitrack"},"content":"        logger.fine(\"Attempting to write to backup local data file\");"},{"lineNumber":83,"author":{"gitID":"zuweitrack"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":84,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":6,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":84,"author":{"gitID":"zuweitrack"},"content":"     * @param addressBook addressBook. Cannot be null"},{"lineNumber":85,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":89,"author":{"gitID":"zuweitrack"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":90,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":7,"-":85}},{"path":"src/main/java/seedu/address/logic/commands/RateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":" * Rates existing person(s) in CollegeZone."},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"public class RateCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":"    public static final String COMMAND_WORD \u003d \"rate\";"},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\";"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rates person(s) in College Zone \""},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"            + \"and changes the level of friendship \""},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"            + \"by the index number used in the latest listing.\\n\""},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"            + \"Existing level of friendship will be overwritten by the input values.\\n\""},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"            + \"Parameters: INDEX(s) (must be a positive integer) \""},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"            + \"[\" + PREFIX_LEVEL_OF_FRIENDSHIP + \"LEVELOFFRIENDSHIP] (between 1 and 10)\\n\""},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 3 \""},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"5 \";"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    private static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Rated person(s) successfully\";"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":"    private static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"    private static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The selected person cannot be missing\";"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"    private static final String MESSAGE_ONE_OR_MORE_INVALID_INDEX \u003d"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"            \"One or more index inputs may not be valid\""},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"                    + \" and only the person(s) of valid indexes are being rated!\";"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"    private final List\u003cIndex\u003e indexList;"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":"    private final String levelOfFriendship;"},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":46,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"zuweitrack"},"content":"     * @param indexList list of index(es) of the person in the filtered person list"},{"lineNumber":48,"author":{"gitID":"zuweitrack"},"content":"     * @param levelOfFriendship new level of friendship to add to the person"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":"    public RateCommand(List\u003cIndex\u003e indexList, String levelOfFriendship) {"},{"lineNumber":51,"author":{"gitID":"zuweitrack"},"content":"        requireNonNull(indexList);"},{"lineNumber":52,"author":{"gitID":"zuweitrack"},"content":"        requireNonNull(levelOfFriendship);"},{"lineNumber":53,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":54,"author":{"gitID":"zuweitrack"},"content":"        this.indexList \u003d indexList;"},{"lineNumber":55,"author":{"gitID":"zuweitrack"},"content":"        this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":56,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":58,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"zuweitrack"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"zuweitrack"},"content":"        List\u003cPerson\u003e latestList \u003d model.getFilteredPersonList();"},{"lineNumber":61,"author":{"gitID":"zuweitrack"},"content":"        for (Index index : indexList) {"},{"lineNumber":62,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":63,"author":{"gitID":"zuweitrack"},"content":"            if (index.getZeroBased() \u003e\u003d latestList.size()) {"},{"lineNumber":64,"author":{"gitID":"zuweitrack"},"content":"                throw new CommandException(MESSAGE_ONE_OR_MORE_INVALID_INDEX);"},{"lineNumber":65,"author":{"gitID":"zuweitrack"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":67,"author":{"gitID":"zuweitrack"},"content":"            Person selectedPerson \u003d latestList.get(index.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":69,"author":{"gitID":"zuweitrack"},"content":"            try {"},{"lineNumber":70,"author":{"gitID":"zuweitrack"},"content":"                Person editedPerson \u003d new Person(selectedPerson.getName(), selectedPerson.getPhone(),"},{"lineNumber":71,"author":{"gitID":"zuweitrack"},"content":"                        selectedPerson.getBirthday(), new LevelOfFriendship(levelOfFriendship),"},{"lineNumber":72,"author":{"gitID":"zuweitrack"},"content":"                        selectedPerson.getUnitNumber(),"},{"lineNumber":73,"author":{"gitID":"zuweitrack"},"content":"                        selectedPerson.getCcas(), selectedPerson.getMeetDate(), selectedPerson.getTags());"},{"lineNumber":74,"author":{"gitID":"zuweitrack"},"content":"                model.updatePerson(selectedPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":76,"author":{"gitID":"zuweitrack"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":77,"author":{"gitID":"zuweitrack"},"content":"                throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"},{"lineNumber":78,"author":{"gitID":"zuweitrack"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":79,"author":{"gitID":"zuweitrack"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":81,"author":{"gitID":"zuweitrack"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":83,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":85,"author":{"gitID":"zuweitrack"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":87,"author":{"gitID":"zuweitrack"},"content":"        return new CommandResult(MESSAGE_EDIT_PERSON_SUCCESS);"},{"lineNumber":88,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":89,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":91,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"A0158738X":4,"zuweitrack":77,"-":10}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String birthday;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String levelOfFriendship;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String unitNumber;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"    private String meetDate;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedCca\u003e ccas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String birthday, String levelOfFriendship, String unitNumber,"},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"                            String meetDate, List\u003cXmlAdaptedCca\u003e ccas, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.unitNumber \u003d unitNumber;"},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"        this.meetDate \u003d meetDate;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (ccas !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            this.ccas \u003d new ArrayList\u003c\u003e(ccas);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        levelOfFriendship \u003d source.getLevelOfFriendship().value;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        unitNumber \u003d source.getUnitNumber().value;"},{"lineNumber":83,"author":{"gitID":"A0158738X"},"content":"        meetDate \u003d source.getMeetDate().value;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ccas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Cca cca : source.getCcas()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            ccas.add(new XmlAdaptedCca(cca));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        //@@author deborahlow97"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        final List\u003cCca\u003e personCcas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        for (XmlAdaptedCca cca : ccas) {"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"            personCcas.add(cca.toModelType());"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"        //@@author deborahlow97"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"        if (this.birthday \u003d\u003d null) {"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"                    Birthday.class.getSimpleName()));"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"        if (!Birthday.isValidBirthday(this.birthday)) {"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"        if (this.levelOfFriendship \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, LevelOfFriendship"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"                    .class.getSimpleName()));"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"        if (!LevelOfFriendship.isValidLevelOfFriendship(this.levelOfFriendship)) {"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(LevelOfFriendship.MESSAGE_LEVEL_OF_FRIENDSHIP_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"        final LevelOfFriendship levelOfFriendship \u003d new LevelOfFriendship(this.levelOfFriendship);"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        //@@author sham-sheer"},{"lineNumber":148,"author":{"gitID":"A0158738X"},"content":"        final Meet meetDate \u003d new Meet(this.meetDate);"},{"lineNumber":149,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"        //@@author deborahlow97"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        if (this.unitNumber \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"                    UnitNumber.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"        if (!UnitNumber.isValidUnitNumber(this.unitNumber)) {"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(UnitNumber.MESSAGE_UNIT_NUMBER_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"        final UnitNumber unitNumber \u003d new UnitNumber(this.unitNumber);"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"        final Set\u003cCca\u003e ccas \u003d new HashSet\u003c\u003e(personCcas);"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"        //@@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return new Person(name, phone, birthday, levelOfFriendship, unitNumber, ccas, meetDate, tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(birthday, otherPerson.birthday)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(levelOfFriendship, otherPerson.levelOfFriendship)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(unitNumber, otherPerson.unitNumber)"},{"lineNumber":182,"author":{"gitID":"A0158738X"},"content":"                //\u0026\u0026 Objects.equals(meetDate, otherPerson.meetDate)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                \u0026\u0026 ccas.equals(otherPerson.ccas)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":9,"-":139,"deborahlow97":38}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    private List\u003cXmlAdaptedGoal\u003e goals;"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedCca\u003e ccas;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    private List\u003cXmlAdaptedReminder\u003e reminders;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        goals \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ccas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        reminders \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        goals.addAll(src.getGoalList().stream().map(XmlAdaptedGoal::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ccas.addAll(src.getCcaList().stream().map(XmlAdaptedCca::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        reminders.addAll(src.getReminderList().stream().map(XmlAdaptedReminder::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"     * {@code XmlAdaptedPerson}or {@code XmlAdaptedCca} or {@code XmlAdaptedTag} or (@code XmlAdaptedReminder)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedCca c : ccas) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addCca(c.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        for (XmlAdaptedGoal g : goals) {"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"            addressBook.addGoal(g.toModelType());"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        for (XmlAdaptedReminder r : reminders) {"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"            addressBook.addReminder(r.toModelType());"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 ccas.equals(otherAb.ccas)"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 reminders.equals(otherAb.reminders);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":10,"-":79,"deborahlow97":7}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCca.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" * JAXB-friendly adapted version of the Cca."},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"public class XmlAdaptedCca {"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    private String ccaName;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"     * Constructs an XmlAdaptedCca."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public XmlAdaptedCca() {}"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code XmlAdaptedCca} with the given {@code ccaName}."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public XmlAdaptedCca(String ccaName) {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        this.ccaName \u003d ccaName;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public XmlAdaptedCca(Cca source) {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        ccaName \u003d source.ccaName;"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"     * Converts this jaxb-friendly adapted cca object into the model\u0027s Cca object."},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    public Cca toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        if (!Cca.isValidCcaName(ccaName)) {"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(Cca.MESSAGE_CCA_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        return new Cca(ccaName);"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof XmlAdaptedCca)) {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        return ccaName.equals(((XmlAdaptedCca) other).ccaName);"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":7,"deborahlow97":56}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.util.SampleCollegeZone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 1, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CollegeZone ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"                logger.info(\"Data file not found. Will be starting with a sample CollegeZone\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleCollegeZone::getSampleCollegeZone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty CollegeZone\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty CollegeZone\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty CollegeZone\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"        logger.info(\"Starting CollegeZone \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"deborahlow97"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CollegeZone ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":202,"deborahlow97":10}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedReminder.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.DateTime;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.EndDateTime;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderText;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":" * JAXB-friendly version of the Reminder."},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"public class XmlAdaptedReminder {"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    private String reminderText;"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"    private String dateTime;"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    private String endDateTime;"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"     * Constructs an XmlAdaptedReminder."},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    public XmlAdaptedReminder() {}"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"     * Constructs an {@code XmlAdaptedReminder} with the given person details."},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    public XmlAdaptedReminder(String reminderText, String dateTime, String endDateTime) {"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderText \u003d reminderText;"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"     * Converts a given Reminder into this class for JAXB use."},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedReminder"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    public XmlAdaptedReminder(Reminder source) {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        reminderText \u003d source.getReminderText().toString();"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        dateTime \u003d source.getDateTime().toString();"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        endDateTime \u003d source.getEndDateTime().toString();"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"     * Converts this jaxb-friendly adapted reminder object into the model\u0027s Reminder object."},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    public Reminder toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        if (this.reminderText \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"                    ReminderText.class.getSimpleName()));"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        if (!ReminderText.isValidReminderText(this.reminderText)) {"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(ReminderText.MESSAGE_REMINDER_TEXT_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"        final ReminderText reminderText \u003d new ReminderText(this.reminderText);"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"        if (this.dateTime \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"                    DateTime.class.getSimpleName()));"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"        if (!DateTime.isValidDateTime(this.dateTime)) {"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"        final DateTime dateTime \u003d new DateTime(this.dateTime);"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":"        if (this.endDateTime \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"                    EndDateTime.class.getSimpleName()));"},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"        if (!DateTime.isValidDateTime(this.endDateTime)) {"},{"lineNumber":83,"author":{"gitID":"fuadsahmawi"},"content":"            throw new IllegalValueException(EndDateTime.MESSAGE_END_DATE_TIME_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"        final EndDateTime endDateTime \u003d new EndDateTime(this.endDateTime);"},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":87,"author":{"gitID":"fuadsahmawi"},"content":"        return new Reminder(reminderText, dateTime, endDateTime);"},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"            return true;"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":96,"author":{"gitID":"fuadsahmawi"},"content":"        if (!(other instanceof XmlAdaptedReminder)) {"},{"lineNumber":97,"author":{"gitID":"fuadsahmawi"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":100,"author":{"gitID":"fuadsahmawi"},"content":"        XmlAdaptedReminder otherPerson \u003d (XmlAdaptedReminder) other;"},{"lineNumber":101,"author":{"gitID":"fuadsahmawi"},"content":"        return Objects.equals(reminderText, otherPerson.reminderText)"},{"lineNumber":102,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 Objects.equals(dateTime, otherPerson.dateTime)"},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 Objects.equals(endDateTime, otherPerson.endDateTime);"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":101,"-":4}},{"path":"src/main/java/seedu/address/model/util/SampleCollegeZone.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.util.SampleDataUtil.getSamplePersons;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.util.SampleGoalDataUtil.getSampleGoals;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.model.util.SampleReminderDataUtil.getSampleReminders;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" * Contains method to get a sample CollegeZone data"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"public class SampleCollegeZone {"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    public static ReadOnlyAddressBook getSampleCollegeZone() {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        AddressBook sampleCz \u003d new AddressBook();"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"                sampleCz.addPerson(samplePerson);"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            for (Goal sampleGoal : getSampleGoals()) {"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                sampleCz.addGoal(sampleGoal);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateGoalException e) {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate goals\", e);"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"            for (Reminder sampleReminder : getSampleReminders()) {"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"                sampleCz.addReminder(sampleReminder);"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateReminderException e) {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate reminders\", e);"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        return sampleCz;"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":3,"-":3,"deborahlow97":42}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":" * Contains utility methods for populating {@code CollegeZone} with sample data."},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public static final Meet MEET_DATE \u003d new Meet(\"15/04/2018\");"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        return new Person[] {"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Birthday(\"01/01/1997\"),"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"5\"), new UnitNumber(\"#06-40\"), getCcaSet(\"Basketball\"),"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"                MEET_DATE, getTagSet(\"friends\", \"RA\")),"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Birthday(\"21/02/1990\"),"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"9\"), new UnitNumber(\"#07-18\"), getCcaSet(),"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                new Meet(\"15/05/2018\"), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Birthday(\"05/09/1980\"),"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"1\"), new UnitNumber(\"#11-04\"), getCcaSet(\"Swimming\"),"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"15/05/2018\"), getTagSet(\"neighbours\")),"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Birthday(\"20/02/1995\"),"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"6\"), new UnitNumber(\"#16-43\"), getCcaSet(),"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"16/04/2018\"), getTagSet(\"family\")),"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Birthday(\"01/01/1999\"),"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"7\"), new UnitNumber(\"#16-41\"), getCcaSet(),"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"17/04/2018\"), getTagSet(\"classmates\")),"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Birthday(\"02/04/1995\"),"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"10\"), new UnitNumber(\"#6-43\"), getCcaSet(\"Computing club\", \"Anime Club\"),"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"18/04/2018\"), getTagSet(\"colleagues\")),"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"James Mee\"), new Phone(\"98887555\"), new Birthday(\"22/08/1992\"),"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"1\"), new UnitNumber(\"#06-40\"), getCcaSet(\"Tennis\"),"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"19/04/2018\"), getTagSet(\"RA\")),"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Jane Ray\"), new Phone(\"93336444\"), new Birthday(\"25/09/1991\"),"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"                new LevelOfFriendship(\"1\"), new UnitNumber(\"#07-40\"), getCcaSet(\"Chess Club\"),"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"20/04/2018\"), getTagSet(\"RA\")),"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Deborah Low\"), new Phone(\"91162930\"), new Birthday(\"24/05/1997\"),"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"9\"), new UnitNumber(\"#10-24\"), getCcaSet(\"Aerobics Club\"),"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"21/04/2018\"), getTagSet(\"colleagues\")),"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Royce Lew\"), new Phone(\"93265932\"), new Birthday(\"10/04/1996\"),"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"5\"), new UnitNumber(\"#02-021\"), getCcaSet(),"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"22/04/2018\"), getTagSet(\"boyfriend\")),"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Kaden Yeo\"), new Phone(\"82350332\"), new Birthday(\"28/03/2001\"),"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"6\"), new UnitNumber(\"#6-20\"), getCcaSet(\"shooting\"),"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"23/04/2018\"), getTagSet(\"friends\")),"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Matthew Chiang\"), new Phone(\"92624417\"), new Birthday(\"02/04/1995\"),"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"4\"), new UnitNumber(\"#20-43\"), getCcaSet(\"Anime Club\"),"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"24/04/2018\"), getTagSet(\"classmate\")),"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Loh Sin Yuen\"), new Phone(\"92624417\"), new Birthday(\"02/05/1995\"),"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"10\"), new UnitNumber(\"#03-63\"), getCcaSet(\"dance\"),"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"25/04/2018\"), getTagSet(\"schoolmate\")),"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Florence Chiang\"), new Phone(\"92624417\"), new Birthday(\"02/06/1995\"),"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"10\"), new UnitNumber(\"#6-97\"), getCcaSet(\"volleyball\"),"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"26/04/2018\"), getTagSet(\"bff\")),"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Daniel Low\"), new Phone(\"92624417\"), new Birthday(\"12/04/1995\"),"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"1\"), new UnitNumber(\"#7-473\"), getCcaSet(\"Muay Thai\"),"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"27/04/2018\"), getTagSet(\"cousin\")),"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Rachel Lee Yan Ling\"), new Phone(\"92624417\"), new Birthday(\"23/04/1995\"),"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"3\"), new UnitNumber(\"#6-69\"), getCcaSet(\"Computing club\", \"Anime Club\"),"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"28/04/2018\"), getTagSet(\"cousin\")),"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Sarah tan\"), new Phone(\"92624417\"), new Birthday(\"27/04/1999\"),"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"2\"), new UnitNumber(\"#8-43\"), getCcaSet(\"Computing club\", \"Anime Club\"),"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"28/04/2018\"), getTagSet()),"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Amanda Soh\"), new Phone(\"92624417\"), new Birthday(\"02/12/1995\"),"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"1\"), new UnitNumber(\"#24-579\"), getCcaSet(\"Computing club\", \"Anime Club\"),"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"17/06/2018\"), getTagSet(\"exgirlfriend\")),"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Marlene Koh\"), new Phone(\"92624417\"), new Birthday(\"02/07/1997\"),"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"10\"), new UnitNumber(\"#02-222\"), getCcaSet(\"Pool\"),"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"17/07/2018\"), getTagSet(\"closefriend\")),"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Johnny Depp\"), new Phone(\"92624417\"), new Birthday(\"02/12/1994\"),"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"2\"), new UnitNumber(\"#01-346\"), getCcaSet(\"Pool\"),"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"17/08/2018\"), getTagSet(\"malafriend\")),"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Aditya\"), new Phone(\"92624417\"), new Birthday(\"02/04/1998\"),"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"3\"), new UnitNumber(\"#6-43\"), getCcaSet(),"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"17/09/2018\"), getTagSet(\"malafriend\")),"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"            new Person(new Name(\"Fuad\"), new Phone(\"92624417\"), new Birthday(\"20/04/1995\"),"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"                    new LevelOfFriendship(\"9\"), new UnitNumber(\"#6-43\"), getCcaSet(\"Floorball\"),"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"                    new Meet(\"17/04/2018\"), getTagSet(\"colleagues\"))"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        };"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"            return sampleAb;"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"     * Returns a cca set containing the list of strings given."},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    public static Set\u003cCca\u003e getCcaSet(String... strings) {"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        HashSet\u003cCca\u003e ccas \u003d new HashSet\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        for (String s : strings) {"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"            ccas.add(new Cca(s));"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"        return ccas;"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        for (String s : strings) {"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"            tags.add(new Tag(s));"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"        return tags;"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"-":17,"deborahlow97":116}},{"path":"src/main/java/seedu/address/model/util/SampleReminderDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.DateTime;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.EndDateTime;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.ReminderText;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":" * Contains utility methods for populating {@code CollegeZone} with sample reminder data."},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"public class SampleReminderDataUtil {"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    public static Reminder[] getSampleReminders() {"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"        return new Reminder[] {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"CS2103T Submission\"),"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-15 23:00\"),"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-15 23:59\")),"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Gym Session\"),"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-13 14:00\"),"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-13 16:00\")),"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Gym Session\"),"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-06 14:00\"),"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-06 16:00\")),"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Gym Session\"),"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-20 14:00\"),"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-20 16:00\")),"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Gym Session\"),"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-27 14:00\"),"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-27 16:00\")),"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Recess Week\"),"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-23 00:00\"),"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-27 23:59\")),"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"CS2103T Software Demo\"),"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-19 09:00\"),"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-19 10:00\")),"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"CS2103T Group Meeting\"),"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-14 11:00\"),"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-14 18:00\")),"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Chalet\"),"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-21 10:00\"),"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-22 20:00\")),"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"            new Reminder(new ReminderText(\"Medical Appointment\"),"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"                    new DateTime(\"2018-04-05 15:00\"),"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"                    new EndDateTime(\"2018-04-05 17:00\")),"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        };"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":49}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedGoal.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * JAXB-friendly version of the Goal."},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"public class XmlAdaptedGoal {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Goal\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    private String importance;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    private String goalText;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    private String startDateTime;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    private String endDateTime;"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    private String completion;"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"     * Constructs an XmlAdaptedGoal."},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public XmlAdaptedGoal() {}"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"     * Constructs an {@code XmlAdaptedGoal} with the given goal details."},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    public XmlAdaptedGoal(String importance, String goalText, String startDateTime, String endDateTime,"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"                          String completion) {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        this.importance \u003d importance;"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        this.goalText \u003d goalText;"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        this.startDateTime \u003d startDateTime;"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        this.completion \u003d completion;"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"     * Converts a given Goal into this class for JAXB use."},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedGoal"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public XmlAdaptedGoal(Goal source) {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        importance \u003d source.getImportance().value;"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        goalText \u003d source.getGoalText().value;"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        startDateTime \u003d source.getStartDateTime().value;"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        endDateTime \u003d source.getEndDateTime().value;"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        completion \u003d source.getCompletion().value;"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"     * Converts this jaxb-friendly adapted goal object into the model\u0027s Goal object."},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted goal"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    public Goal toModelType() throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        if (this.importance \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"                    Importance.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        if (!Importance.isValidImportance(this.importance)) {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(Importance.MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        final Importance importance \u003d new Importance(this.importance);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        if (this.goalText \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"                    GoalText.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        if (!GoalText.isValidGoalText(this.goalText)) {"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(GoalText.MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        final GoalText goalText \u003d new GoalText(this.goalText);"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        if (this.startDateTime \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"                    StartDateTime.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        final StartDateTime startDateTime \u003d new StartDateTime(this.startDateTime);"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"        if (this.endDateTime \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDateTime"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"                    .class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        final EndDateTime endDateTime \u003d new EndDateTime(this.endDateTime);"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        if (this.completion \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"                    Completion.class.getSimpleName()));"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        final Completion completion \u003d new Completion((this.completion.equals(\"true\")));"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"        return new Goal(importance, goalText, startDateTime, endDateTime, completion);"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof XmlAdaptedGoal)) {"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        XmlAdaptedGoal otherGoal \u003d (XmlAdaptedGoal) other;"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"        return Objects.equals(importance, otherGoal.importance)"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(goalText, otherGoal.goalText)"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(startDateTime, otherGoal.startDateTime)"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(endDateTime, otherGoal.endDateTime)"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(completion, otherGoal.completion);"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"}"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":""}],"authorContributionMap":{"-":4,"deborahlow97":127}},{"path":"src/main/java/seedu/address/logic/commands/CompleteGoalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOALS;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":" * Edits the details of an existing goal in CollegeZone."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"public class CompleteGoalCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"!goal\";"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_1 \u003d \"!g\";"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"completegoal\";"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Indicate completion of the goal identified \""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            + \"by the index number used in the last goal listing.\\n \""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_COMPLETE_GOAL_SUCCESS \u003d \"Completed Goal! : %1$s\";"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    private final Index index;"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    private final CompleteGoalDescriptor completeGoalDescriptor;"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    private Goal goalToUpdate;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    private Goal updatedGoal;"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"     * @param index of the goal in the filtered goal list to update"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    public CompleteGoalCommand(Index index, CompleteGoalDescriptor completeGoalDescriptor) {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(index);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(completeGoalDescriptor);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        this.index \u003d index;"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        this.completeGoalDescriptor \u003d new CompleteGoalDescriptor(completeGoalDescriptor);"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"            model.updateGoalWithoutParameters(goalToUpdate, updatedGoal);"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        } catch (GoalNotFoundException pnfe) {"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"The target goal cannot be missing\");"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        model.updateFilteredGoalList(PREDICATE_SHOW_ALL_GOALS);"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        return new CommandResult(String.format(MESSAGE_COMPLETE_GOAL_SUCCESS, updatedGoal));"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e lastShownList \u003d model.getFilteredGoalList();"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        goalToUpdate \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        if (goalToUpdate.getCompletion().hasCompleted) {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_GOAL_COMPLETED_ERROR);"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        updatedGoal \u003d createUpdatedGoal(goalToUpdate, completeGoalDescriptor);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"     * Creates and returns a {@code Goal} with the details of {@code goalToUpdate}"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"     * edited with {@code completeGoalDescriptor}."},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    private static Goal createUpdatedGoal(Goal goalToUpdate, CompleteGoalDescriptor completeGoalDescriptor) {"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        assert goalToUpdate !\u003d null;"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        GoalText goalText \u003d goalToUpdate.getGoalText();"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        Importance importance \u003d goalToUpdate.getImportance();"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        StartDateTime startDateTime \u003d goalToUpdate.getStartDateTime();"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        EndDateTime updatedEndDateTime \u003d completeGoalDescriptor.getEndDateTime()"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"                .orElse(goalToUpdate.getEndDateTime());"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        Completion updatedCompletion \u003d completeGoalDescriptor.getCompletion().orElse(goalToUpdate.getCompletion());"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        return new Goal(importance, goalText, startDateTime, updatedEndDateTime, updatedCompletion);"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"        // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        // instanceof handles nulls"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof CompleteGoalCommand)) {"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        // state check"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"        CompleteGoalCommand e \u003d (CompleteGoalCommand) other;"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        return index.equals(e.index)"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 completeGoalDescriptor.equals(e.completeGoalDescriptor)"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(goalToUpdate, e.goalToUpdate);"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"     * Stores the details to update the goal with."},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"    public static class CompleteGoalDescriptor {"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        private EndDateTime endDateTime;"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"        private Completion completion;"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"        public CompleteGoalDescriptor() {}"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"        /**"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"         * Copy constructor."},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"         * A defensive copy of {@code toCopy} is used internally."},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"         */"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        public CompleteGoalDescriptor(CompleteGoalDescriptor toCopy) {"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"            setEndDateTime(toCopy.endDateTime);"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"            setCompletion(toCopy.completion);"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        public void setEndDateTime(EndDateTime endDateTime) {"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"            this.endDateTime \u003d endDateTime;"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cEndDateTime\u003e getEndDateTime() {"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(endDateTime);"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"        public void setCompletion(Completion completion) {"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"            this.completion \u003d completion;"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cCompletion\u003e getCompletion() {"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(completion);"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"        public boolean equals(Object other) {"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"            // short circuit if same object"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"                return true;"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"            // instanceof handles nulls"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"            if (!(other instanceof CompleteGoalDescriptor)) {"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"                return false;"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"            // state check"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"            CompleteGoalDescriptor e \u003d (CompleteGoalDescriptor) other;"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"            return getEndDateTime().equals(e.getEndDateTime())"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"                    \u0026\u0026 getCompletion().equals(e.getCompletion());"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":10,"deborahlow97":162}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean test(Person person) {"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        Iterator\u003cTag\u003e ir \u003d person.getTags().iterator();"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        StringBuilder tag \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        while (ir.hasNext()) {"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"            tag.append(ir.next().tagName);"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"            tag.append(\" \");"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        String tagS \u003d tag.toString();"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        return keywords.stream()"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tagS, keyword));"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":41,"-":3}},{"path":"src/main/java/seedu/address/model/util/SampleGoalDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.getLocalDateTimeFromString;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * Contains utility methods for populating {@code CollegeZone} with sample data."},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"public class SampleGoalDataUtil {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    public static final EndDateTime EMPTY_END_DATE_TIME \u003d new EndDateTime(\"\");"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    public static Goal[] getSampleGoals() {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        return new Goal[] {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"1\"), new GoalText(\"finish cs2103\"),"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"2\"), new GoalText(\"no\"),"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2018-04-08 12:12\")),"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"3\"), new GoalText(\"grow taller\"),"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"1997-04-08 12:30\")),"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"3\"), new GoalText(\"finish cs2105 assignments\"),"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2018-04-08 10:30\")),"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"1\"), new GoalText(\"learning digital art\"),"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:39\")),"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"2\"), new GoalText(\"finish cs2103!!!!\"),"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"10\"), new GoalText(\"finish cs2103!!!!\"),"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2018-03-18 08:30\")),"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/04/2018 12:30\"), new Completion(true)),"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"6\"), new GoalText(\"lose 0.5kg by this week\"),"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2018-04-06 19:30\")),"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"10\"), new GoalText(\"Find love \u003c3\"),"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2014-04-08 20:30\")),"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"02/02/2018 12:30\"), new Completion(true)),"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"7\"), new GoalText(\"water plants\"),"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"5\"), new GoalText(\"buy dog food\"),"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"4\"), new GoalText(\"Take the stairs more often!\"),"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"04/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"10\"), new GoalText(\"Eat PGP MALA once every week\"),"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"07/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"7\"), new GoalText(\"Make more friends in uni\"),"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:45\")),"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"9\"), new GoalText(\"Go CCA regularly\"),"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 13:30\")),"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"9\"), new GoalText(\"Drink 8 cups of water everyday\"),"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 01:59\")),"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"8\"), new GoalText(\"Get A for CS2105\"),"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 02:30\")),"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"8\"), new GoalText(\"Get A- for GEH1036\"),"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 03:30\")),"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"10\"), new GoalText(\"Aim to increase CAP by 0.2 by the end of this semester\"),"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-02-18 12:30\")),"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"                    EMPTY_END_DATE_TIME, new Completion(false)),"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"            new Goal(new Importance(\"4\"), new GoalText(\"Do 50 squats EVERYDAY\"),"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"                    new StartDateTime(getLocalDateTimeFromString(\"2017-04-08 12:30\")),"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"                    new EndDateTime(\"03/06/2018 12:30\"), new Completion(true)),"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"        };"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    public static ReadOnlyAddressBook getSampleGoalAddressBook() {"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"            for (Goal sampleGoal : getSampleGoals()) {"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"                sampleAb.addGoal(sampleGoal);"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"            return sampleAb;"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateGoalException e) {"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate goals\", e);"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":2,"deborahlow97":98}},{"path":"src/main/java/seedu/address/model/person/UnitNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a RC4 resident Unit Number in CollegeZone."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUnitNumber(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UnitNumber {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNIT_NUMBER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Unit Number should contain #, - and alphanumerical values.\";"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final String UNIT_NUMBER_VALIDATION_REGEX \u003d \"\\\\#[0-9]{1,2}\\\\-[0-9]{2,3}\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     * * Constructs an {@code UnitNumber}."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     * @param unitNumber A valid unit number."},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    public UnitNumber(String unitNumber) {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(unitNumber);"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        checkArgument(isValidUnitNumber(unitNumber), MESSAGE_UNIT_NUMBER_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d unitNumber;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is a valid unit number."},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public static boolean isValidUnitNumber(String test) {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        return test.matches(UNIT_NUMBER_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getFloor() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String[] floor \u003d value.split(\"-\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return floor[0];"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof UnitNumber // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((UnitNumber) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":20,"deborahlow97":40}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Birthday.birthDateToInt;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Meet.dateToInt;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Birthday birthday;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final LevelOfFriendship levelOfFriendship;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UnitNumber unitNumber;"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"    private final Meet meetDate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueCcaList ccas;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Birthday birthday, LevelOfFriendship levelOfFriendship,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                  UnitNumber unitNumber, Set\u003cCca\u003e ccas, Meet meetDate, Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, birthday, levelOfFriendship, unitNumber, ccas, tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.unitNumber \u003d unitNumber;"},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"        this.meetDate \u003d meetDate;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal tags and ccas from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.ccas \u003d new UniqueCcaList(ccas);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Birthday getBirthday() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return birthday;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public LevelOfFriendship getLevelOfFriendship() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return levelOfFriendship;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"    public Meet getMeetDate() {"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"        return meetDate;"},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public UnitNumber getUnitNumber() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return unitNumber;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns an immutable cca set, which throws {@code UnsupportedOperationException}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public Set\u003cCca\u003e getCcas() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(ccas.toSet());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Seperate methods for sorting"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public int getLevelOfFriendshipInt() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return Integer.parseInt(levelOfFriendship.value);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public long getMeetDateInt() { return dateToInt(meetDate.toString()); }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public long getBirthdayInt() { return birthDateToInt(birthday.toString()); }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday())"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getLevelOfFriendship().equals(this.getLevelOfFriendship())"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getUnitNumber().equals(this.getUnitNumber());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, birthday, levelOfFriendship, unitNumber, ccas, tags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .append(\" Birthday: \")"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(getBirthday())"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(\" Level Of Friendship: \")"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .append(getLevelOfFriendship())"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(\" Unit Number: \")"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .append(getUnitNumber())"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(\" Ccas: \");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        getCcas().forEach(builder::append);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        builder.append(\" Tags: \");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":6,"-":132}},{"path":"src/main/java/seedu/address/model/person/LevelOfFriendship.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" * Represents a Person\u0027s Level of Friendship in the address book."},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLevelOfFriendship(String)}"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class LevelOfFriendship {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_LEVEL_OF_FRIENDSHIP_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"            \"Level of Friendship should only be a numerical integer value between 1 to 10\";"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public static final String LEVEL_OF_FRIENDSHIP_VALIDATION_REGEX \u003d \"[0-9]+\";"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    private static final int MINIMUM_LEVEL_OF_FRIENDSHIP \u003d 1;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    private static final int MAXIMUM_LEVEL_OF_FRIENDSHIP \u003d 10;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    private static int levelOfFriendshipInIntegerForm;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"     * * Constructs an {@code LevelOfFriendship}."},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     * @param levelOfFriendship A valid level of friendship number."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    public LevelOfFriendship(String levelOfFriendship) {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(levelOfFriendship);"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        checkArgument(isValidLevelOfFriendship(levelOfFriendship), MESSAGE_LEVEL_OF_FRIENDSHIP_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d levelOfFriendship;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is a valid person level of friendship."},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public static boolean isValidLevelOfFriendship(String test) {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        return test.matches(LEVEL_OF_FRIENDSHIP_VALIDATION_REGEX) \u0026\u0026 isAnIntegerWithinRange(test);"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is an integer and within range of level of friendship."},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    private static boolean isAnIntegerWithinRange(String test) {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        levelOfFriendshipInIntegerForm \u003d Integer.parseInt(test);"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        if (levelOfFriendshipInIntegerForm \u003e\u003d MINIMUM_LEVEL_OF_FRIENDSHIP"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 levelOfFriendshipInIntegerForm \u003c\u003d MAXIMUM_LEVEL_OF_FRIENDSHIP) {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof LevelOfFriendship // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((LevelOfFriendship) other).value)); // state check"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":65}},{"path":"src/main/java/seedu/address/model/person/Cca.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" * Represents a Person\u0027s CCAs in CollegeZone."},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCcaName(String)}"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class Cca {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_CCA_CONSTRAINTS \u003d \"CCAs should be in alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final String CCA_VALIDATION_REGEX \u003d \"\\\\s*\\\\p{Alnum}[\\\\p{Alnum}\\\\s]*\";"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public final String ccaName;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code CCA}."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     * @param ccaName A valid CCA."},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public Cca(String ccaName) {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(ccaName);"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"        checkArgument(isValidCcaName(ccaName), MESSAGE_CCA_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        this.ccaName \u003d ccaName;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is a valid CCA name."},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public static boolean isValidCcaName(String test) {"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        return test.matches(CCA_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof Cca // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.ccaName.equals(((Cca) other).ccaName)); // state check"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        return ccaName.hashCode();"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        return \u0027[\u0027 + ccaName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":5,"deborahlow97":49}},{"path":"src/main/java/seedu/address/logic/commands/OngoingGoalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GOALS;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Completion;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.EndDateTime;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.GoalText;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Importance;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.StartDateTime;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":" * Edits the details of an existing goal in CollegeZone."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"public class OngoingGoalCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_WORD \u003d \"-!goal\";"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_1 \u003d \"-!g\";"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public static final String COMMAND_ALIAS_2 \u003d \"ongoinggoal\";"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Indicate identified goal is not completed \""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"            + \"and still ongoing.\\n\""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"            + \"Goal is identified \""},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"            + \"by the index number used in the last goal listing.\\n\""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_ONGOING_GOAL_SUCCESS \u003d \"Ongoing Goal! : %1$s\";"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    private final Index index;"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    private final OngoingGoalDescriptor ongoingGoalDescriptor;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    private Goal goalToUpdate;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    private Goal updatedGoal;"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"     * @param index of the goal in the filtered goal list to update"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public OngoingGoalCommand(Index index, OngoingGoalDescriptor ongoingGoalDescriptor) {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(index);"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(ongoingGoalDescriptor);"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        this.index \u003d index;"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        this.ongoingGoalDescriptor \u003d new OngoingGoalDescriptor(ongoingGoalDescriptor);"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"            model.updateGoalWithoutParameters(goalToUpdate, updatedGoal);"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        } catch (GoalNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"The target goal cannot be missing\");"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        model.updateFilteredGoalList(PREDICATE_SHOW_ALL_GOALS);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        return new CommandResult(String.format(MESSAGE_ONGOING_GOAL_SUCCESS, updatedGoal));"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e lastShownList \u003d model.getFilteredGoalList();"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_GOAL_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        goalToUpdate \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        if (!goalToUpdate.getCompletion().hasCompleted) {"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"            throw new CommandException(Messages.MESSAGE_GOAL_ONGOING_ERROR);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        updatedGoal \u003d createUpdatedGoal(goalToUpdate, ongoingGoalDescriptor);"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     * Creates and returns a {@code Goal} with the details of {@code goalToUpdate}"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"     * edited with {@code ongoingGoalDescriptor}."},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    private static Goal createUpdatedGoal(Goal goalToUpdate, OngoingGoalDescriptor ongoingGoalDescriptor) {"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"        assert goalToUpdate !\u003d null;"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        GoalText goalText \u003d ongoingGoalDescriptor.getGoalText().orElse(goalToUpdate.getGoalText());"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        Importance importance \u003d ongoingGoalDescriptor.getImportance().orElse(goalToUpdate.getImportance());"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        StartDateTime startDateTime \u003d ongoingGoalDescriptor.getStartDateTime().orElse(goalToUpdate.getStartDateTime());"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        EndDateTime updatedEndDateTime \u003d ongoingGoalDescriptor.getEndDateTime()"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"                .orElse(goalToUpdate.getEndDateTime());"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        Completion updatedCompletion \u003d ongoingGoalDescriptor.getCompletion().orElse(goalToUpdate.getCompletion());"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        return new Goal(importance, goalText, startDateTime, updatedEndDateTime, updatedCompletion);"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        // short circuit if same object"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        // instanceof handles nulls"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof OngoingGoalCommand)) {"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        // state check"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"        OngoingGoalCommand e \u003d (OngoingGoalCommand) other;"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"        return index.equals(e.index)"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 ongoingGoalDescriptor.equals(e.ongoingGoalDescriptor)"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 Objects.equals(goalToUpdate, e.goalToUpdate);"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"     * Stores the details to update the goal with."},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"    public static class OngoingGoalDescriptor {"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"        private GoalText goalText;"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        private Importance importance;"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"        private StartDateTime startDateTime;"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        private EndDateTime endDateTime;"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"        private Completion completion;"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"        public OngoingGoalDescriptor() {}"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        /**"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"         * Copy constructor."},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"         * A defensive copy of {@code toCopy} is used internally."},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"         */"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"        public OngoingGoalDescriptor(OngoingGoalDescriptor toCopy) {"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"            setEndDateTime(toCopy.endDateTime);"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"            setCompletion(toCopy.completion);"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"        public void setEndDateTime(EndDateTime endDateTime) {"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"            this.endDateTime \u003d endDateTime;"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cEndDateTime\u003e getEndDateTime() {"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(endDateTime);"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"        public void setCompletion(Completion completion) {"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"            this.completion \u003d completion;"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cCompletion\u003e getCompletion() {"},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(completion);"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cStartDateTime\u003e getStartDateTime() {"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(startDateTime);"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cImportance\u003e getImportance() {"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(importance);"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"        public Optional\u003cGoalText\u003e getGoalText() {"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"            return Optional.ofNullable(goalText);"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"        public boolean equals(Object other) {"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"            // short circuit if same object"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"                return true;"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"            // instanceof handles nulls"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"            if (!(other instanceof OngoingGoalDescriptor)) {"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"                return false;"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"            }"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"            // state check"},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"            OngoingGoalDescriptor e \u003d (OngoingGoalDescriptor) other;"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"            return getGoalText().equals(e.getGoalText())"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"                    \u0026\u0026 getImportance().equals(e.getImportance())"},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":"                    \u0026\u0026 getStartDateTime().equals(e.getStartDateTime())"},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"                    \u0026\u0026 getEndDateTime().equals(e.getEndDateTime())"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"                    \u0026\u0026 getCompletion().equals(e.getCompletion());"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":10,"deborahlow97":179}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Calendar;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.GregorianCalendar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" * Represents a Person\u0027s birthday in CollegeZone."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"public class Birthday {"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d \"Person birthday should be a valid date and cannot \""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"            + \"be later than today\u0027s date.\";"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    public static final String BIRTHDAY_VALIDATION_REGEX \u003d"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"            \"^(((0[1-9]|[12]\\\\d|3[01])\\\\/(0[13578]|1[02])\\\\/((19|[2-9]\\\\d)\\\\d{2}))|((0[1-9]|[12]\\\\d|30)\""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"                    + \"\\\\/(0[13456789]|1[012])\\\\/((19|[2-9]\\\\d)\\\\d{2}))|((0[1-9]|1\\\\d|2[0-8])\\\\/02\\\\/((19|[2-9]\\\\d)\""},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"                    + \"\\\\d{2}))|(29\\\\/02\\\\/((1[6-9]|[2-9]\\\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|\""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"                    + \"[3579][26])00))))$\";"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     * Constructs an {@code Birthday}."},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"     * @param birthday A valid birthday."},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public Birthday(String birthday) {"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(birthday);"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        checkArgument(isValidBirthday(birthday), MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d birthday;"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"     * Returns if a given string is a valid person birthday (before current date)."},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    public static boolean isValidBirthday(String test) {"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        LocalDateTime birthdayLocalDateTime \u003d null;"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        LocalDateTime currentLocalDateTime \u003d LocalDateTime.now();"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        if (test.matches(BIRTHDAY_VALIDATION_REGEX)) {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"            String birthdayInDifferentFormat \u003d getDifferentBirthdayFormat(test);"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"            birthdayLocalDateTime \u003d nattyDateAndTimeParser(birthdayInDifferentFormat).get();"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        return isBeforeCurrentDate(birthdayLocalDateTime, currentLocalDateTime);"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"     * Takes in @param birthdayLocalDateTime and @param currentLocalDateTime and checks if 1st parameter is later"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"     * than the second parameter"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"     * @return boolean"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    private static boolean isBeforeCurrentDate(LocalDateTime birthdayLocalDateTime,"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"                                               LocalDateTime currentLocalDateTime) {"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        if (birthdayLocalDateTime.isBefore(currentLocalDateTime)) {"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"     * Takes in @param date in dd/mm/yyyy format"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"     * @return birthday string in mm/dd/yyyy format"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    public static String getDifferentBirthdayFormat(String date) {"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        String day \u003d date.substring(0, 2);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        String month \u003d date.substring(3, 5);"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        String year \u003d date.substring(6, 10);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        builder.append(month)"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"                .append(\"/\")"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"                .append(day)"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"                .append(\"/\")"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"                .append(year);"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        return builder.toString();"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"    //@@author sham-sheer"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Converts Birth date to a time that is relative to current date, for sorting purposes"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static long birthDateToInt(String date) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        long longDate \u003d convertbirthDateToSeconds(date.toString());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        long currentDate \u003d calendar.getTimeInMillis();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        long timeDiff \u003d longDate - currentDate;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (timeDiff \u003c 0) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return Long.MAX_VALUE;"},{"lineNumber":101,"author":{"gitID":"zuweitrack"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return timeDiff;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Converts Birth date to seconds"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static long convertbirthDateToSeconds(String date) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (date \u003d\u003d \"\") {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return 0;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        int day \u003d Integer.parseInt(date.toString().substring(0,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                2));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        int month \u003d Integer.parseInt(date.toString().substring(3,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                5));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        int year \u003d 2018;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Calendar calendar \u003d new GregorianCalendar();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        calendar.set(year, month - 1, day);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        long seconds \u003d calendar.getTimeInMillis();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return seconds;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((Birthday) other).value)); // state check"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"A0158738X":2,"zuweitrack":1,"-":42,"deborahlow97":97}},{"path":"src/main/java/seedu/address/model/person/Meet.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Calendar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.GregorianCalendar;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":12,"content":"//@@author sham-sheer"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":" * Represents a Person\u0027s date of meeting in the address book."},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":" * Guarantees: immutable; is always valid"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"public class Meet {"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            \"Make sure date is in this format: DD/MM/YYYY\";"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            \"^(((0[1-9]|[12]\\\\d|3[01])\\\\/(0[13578]|1[02])\\\\/((19|[2-9]\\\\d)\\\\d{2}))|((0[1-9]|[12]\\\\d|30)\\\\/\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"                    + \"(0[13456789]|1[012])\\\\/((19|[2-9]\\\\d)\\\\d{2}))|((0[1-9]|1\\\\d|2[0-8])\\\\/02\\\\/((19|[2-9]\\\\d)\\\\\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"                    + \"d{2}))|(29\\\\/02\\\\/((1[6-9]|[2-9]\\\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579]\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"                    + \"[26])00))))$\";"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"    public final String value;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    public Meet(String meet) {"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(meet);"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"        if (meet.isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"            this.value \u003d \"\";"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"            checkArgument(isValidDate(meet), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"            this.value \u003d meet;"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Converts  date to seconds"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static long convertDateToSeconds(String date) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (date \u003d\u003d \"\") {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return 0;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        int day \u003d Integer.parseInt(date.toString().substring(0,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                2));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        int month \u003d Integer.parseInt(date.toString().substring(3,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                5));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        int year \u003d Integer.parseInt(date.toString().substring(6,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                10));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Calendar calendar \u003d new GregorianCalendar();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        calendar.set(year, month - 1, day);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        long seconds \u003d calendar.getTimeInMillis();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return seconds;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Converts meet date to a time that is relative to current date, for sorting purposes"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static long dateToInt(String date) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        long longDate \u003d convertDateToSeconds(date.toString());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        long currentDate \u003d calendar.getTimeInMillis();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        long timeDiff \u003d longDate - currentDate;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (timeDiff \u003c 0) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return Long.MAX_VALUE;"},{"lineNumber":66,"author":{"gitID":"zuweitrack"},"content":"        } else {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return timeDiff;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":73,"author":{"gitID":"A0158738X"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":74,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"A0158738X"},"content":"                || (other instanceof Meet // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"A0158738X"},"content":"                \u0026\u0026 this.value.equals(((Meet) other).value)); // state check"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":92,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":34,"zuweitrack":1,"-":58}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     * Returns an unmodifiable view of the ccas list."},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * This list will not contain any duplicate ccas."},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    ObservableList\u003cCca\u003e getCcaList();"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"     * Returns an unmodifiable view of the goals list."},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"     * This list will not contain any duplicate goals."},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    ObservableList\u003cGoal\u003e getGoalList();"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"    //@@author fuadsahmawi"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns an unmodifiable view of the reminders list."},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"     * This list will not contain any duplicate reminders."},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"    ObservableList\u003cReminder\u003e getReminderList();"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":9,"-":25,"deborahlow97":15}},{"path":"src/main/java/seedu/address/model/ThemeColourUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":" * Contains utility methods for ThemeColour."},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"public class ThemeColourUtil {"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"    private static final HashMap\u003cString, String\u003e themes;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    static {"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"        themes \u003d new HashMap\u003c\u003e();"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"        themes.put(\"light\", \"view/LightTheme.css\");"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"        themes.put(\"bubblegum\", \"view/BubblegumTheme.css\");"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"        themes.put(\"dark\", \"view/DarkTheme.css\");"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public static HashMap\u003cString, String\u003e getThemeHashMap() {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"        return themes;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":23}},{"path":"src/main/java/seedu/address/model/person/LofContainsValuePredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":9,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"zuweitrack"},"content":" * Tests that a {@code Person}\u0027s {@code UnitNumber} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":"public class LofContainsValuePredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"    public LofContainsValuePredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase"},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"                        (person.getLevelOfFriendship().toString(), keyword));"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":"                || (other instanceof LofContainsValuePredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"                \u0026\u0026 this.keywords.equals(((LofContainsValuePredicate) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":27,"-":7}},{"path":"src/main/java/seedu/address/model/person/UnitNumberContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":10,"author":{"gitID":"zuweitrack"},"content":"//@@author zuweitrack"},{"lineNumber":11,"author":{"gitID":"zuweitrack"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"zuweitrack"},"content":" * Tests that a {@code Person}\u0027s {@code UnitNumber} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"zuweitrack"},"content":" */"},{"lineNumber":14,"author":{"gitID":"zuweitrack"},"content":"public class UnitNumberContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"zuweitrack"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":17,"author":{"gitID":"zuweitrack"},"content":"    public UnitNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"zuweitrack"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":21,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"zuweitrack"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":24,"author":{"gitID":"zuweitrack"},"content":"        Iterator\u003cTag\u003e ir \u003d person.getTags().iterator();"},{"lineNumber":25,"author":{"gitID":"zuweitrack"},"content":"        StringBuilder tag \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitID":"zuweitrack"},"content":"        while (ir.hasNext()) {"},{"lineNumber":27,"author":{"gitID":"zuweitrack"},"content":"            tag.append(ir.next().tagName);"},{"lineNumber":28,"author":{"gitID":"zuweitrack"},"content":"            tag.append(\" \");"},{"lineNumber":29,"author":{"gitID":"zuweitrack"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":31,"author":{"gitID":"zuweitrack"},"content":"        return keywords.stream()"},{"lineNumber":32,"author":{"gitID":"zuweitrack"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"},{"lineNumber":33,"author":{"gitID":"zuweitrack"},"content":"                | keywords.stream()"},{"lineNumber":34,"author":{"gitID":"zuweitrack"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.toString(), keyword));"},{"lineNumber":35,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":36,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":38,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"zuweitrack"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"zuweitrack"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"zuweitrack"},"content":"                || (other instanceof UnitNumberContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"zuweitrack"},"content":"                \u0026\u0026 this.keywords.equals(((UnitNumberContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":43,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"}"}],"authorContributionMap":{"zuweitrack":36,"fuadsahmawi":6,"-":3}},{"path":"src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder.exceptions;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":" * Signals that the operation will result in duplicate Reminder objects."},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"public class DuplicateReminderException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"    public DuplicateReminderException() {"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"        super(\"Operation will result in duplicate reminders\");"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":12,"-":1}},{"path":"src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder.exceptions;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":" * Signals that the operation is unable to find the specified reminder."},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":8}},{"path":"src/main/java/seedu/address/model/person/UniqueCcaList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":" * A list of ccas that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" *"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" *"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":" * @see Cca#equals(Object)"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"public class UniqueCcaList implements Iterable\u003cCca\u003e {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"    private final ObservableList\u003cCca\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"     * Constructs empty CcaList."},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public UniqueCcaList() {}"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"     * Creates a UniqueCcaList using given ccas."},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public UniqueCcaList(Set\u003cCca\u003e ccas) {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(ccas);"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        internalList.addAll(ccas);"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"     * Returns all ccas in this list as a Set."},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    public Set\u003cCca\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the Ccas in this list with those in the argument cca list."},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    public void setCcas(Set\u003cCca\u003e ccas) {"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(ccas);"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        internalList.setAll(ccas);"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    public void mergeFrom(UniqueCcaList from) {"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        final Set\u003cCca\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        from.internalList.stream()"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"                .filter(cca -\u003e !alreadyInside.contains(cca))"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"                .forEach(internalList::add);"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if the list contains an equivalent Cca as the given argument."},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    public boolean contains(Cca toCheck) {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(toCheck);"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"     * Adds a Cca to the list."},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"     * @throws DuplicateCcaException if the Cca to add is a duplicate of an existing Cca in the list."},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    public void add(Cca toAdd) throws DuplicateCcaException {"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"            throw new DuplicateCcaException();"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    public Iterator\u003cCca\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":"    public ObservableList\u003cCca\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof UniqueCcaList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueCcaList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"    public boolean equalsOrderInsensitive(UniqueCcaList other) {"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"    public static class DuplicateCcaException extends DuplicateDataException {"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"        protected DuplicateCcaException() {"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"            super(\"Operation would result in duplicate ccas\");"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":14,"deborahlow97":129}},{"path":"src/main/java/seedu/address/model/reminder/ReminderText.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":" * Represents a Reminder\u0027s text in the Calendar."},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidReminderText(String)}"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderText {"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_REMINDER_TEXT_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"            \"Reminder text can be any expression that are not just whitespaces.\";"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String REMINDER_TEXT_VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public final String reminderText;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"     * Constructs a {@code ReminderText}."},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"     * @param reminderText A valid reminder text."},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderText(String reminderText) {"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(reminderText);"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        checkArgument(isValidGoalText(reminderText), MESSAGE_REMINDER_TEXT_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderText \u003d reminderText;"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if a given string is a valid reminder text."},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    public static boolean isValidReminderText(String test) {"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        return test.matches(REMINDER_TEXT_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if a given string is a valid reminder text."},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    public static boolean isValidGoalText(String test) {"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        return test.matches(REMINDER_TEXT_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        return reminderText;"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof seedu.address.model.goal.GoalText // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.reminderText.equals((("},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"                        seedu.address.model.reminder.ReminderText) other).reminderText)); // state check"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        return reminderText.hashCode();"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":57,"-":4}},{"path":"src/main/java/seedu/address/model/reminder/Reminder.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":" * Represents a Reminder"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"public class Reminder {"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    private final ReminderText reminderText;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"    private final DateTime dateTime;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    private final EndDateTime endDateTime;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    public Reminder(ReminderText reminderText, DateTime dateTime, EndDateTime endDateTime) {"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"        requireAllNonNull(reminderText, dateTime);"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        this.reminderText \u003d reminderText;"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderText getReminderText() {"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        return reminderText;"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"    public DateTime getDateTime() {"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        return dateTime;"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    public EndDateTime getEndDateTime() {"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        return endDateTime;"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"            return true;"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"        if (!(other instanceof Reminder)) {"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        Reminder otherReminder \u003d (Reminder) other;"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        return otherReminder.getReminderText().equals(this.getReminderText())"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 otherReminder.getDateTime().equals(this.getDateTime())"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 otherReminder.getEndDateTime().equals(this.getEndDateTime());"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        return Objects.hash(reminderText, dateTime, endDateTime);"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        builder.append(\" Reminder: \")"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"                .append(getReminderText())"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"                .append(\" Date \u0026 Time: \")"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"                .append(getDateTime())"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"                .append(\" End Date \u0026 Time: \")"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"                .append(getEndDateTime());"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"        return builder.toString();"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":70,"-":2,"deborahlow97":3}},{"path":"src/main/java/seedu/address/model/reminder/ReminderTextPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":" * Tests that a {@code Reminder}\u0027s {@code ReminderText} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"public class ReminderTextPredicate implements Predicate\u003cReminder\u003e {"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"    public ReminderTextPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean test(Reminder reminder) {"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(reminder.getReminderText().toString(), keyword));"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof ReminderTextPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.keywords.equals(((ReminderTextPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":28,"-":3}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    private final FilteredList\u003cGoal\u003e filteredGoals;"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"    private final FilteredList\u003cReminder\u003e filteredReminders;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        filteredGoals \u003d new FilteredList\u003c\u003e(this.addressBook.getGoalList());"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        filteredReminders \u003d new FilteredList\u003c\u003e(this.addressBook.getReminderList());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void deleteTag (Tag t) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        addressBook.removeTag(t);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"content":"    //@@author sham-sheer"},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"    public void deleteMeetDate (Person person) throws PersonNotFoundException {"},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":"        addressBook.removeMeetFromPerson(person);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":109,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public synchronized void sortPersons(Index index) throws IndexOutOfBoundsException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        addressBook.sortPersons(index);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"content":"    //@@author"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"    public void addGoal(Goal goal) throws DuplicateGoalException {"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"        addressBook.addGoal(goal);"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"        updateFilteredGoalList(PREDICATE_SHOW_ALL_GOALS);"},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":"    public ObservableList\u003cGoal\u003e getFilteredGoalList() {"},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"        return FXCollections.unmodifiableObservableList(filteredGoals);"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":"    public void updateFilteredGoalList(Predicate\u003cGoal\u003e predicate) {"},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(predicate);"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"        filteredGoals.setPredicate(predicate);"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"    public synchronized void deleteGoal(Goal target) throws GoalNotFoundException {"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":"        addressBook.removeGoal(target);"},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"    public void updateGoal(Goal target, Goal editedGoal)"},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"            throws DuplicateGoalException, GoalNotFoundException {"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(target, editedGoal);"},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"        addressBook.updateGoal(target, editedGoal);"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":189,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"deborahlow97"},"content":"    public void updateGoalWithoutParameters(Goal target, Goal editedGoal)"},{"lineNumber":191,"author":{"gitID":"deborahlow97"},"content":"            throws GoalNotFoundException {"},{"lineNumber":192,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(target, editedGoal);"},{"lineNumber":193,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":194,"author":{"gitID":"deborahlow97"},"content":"        addressBook.updateGoalWithoutParameters(target, editedGoal);"},{"lineNumber":195,"author":{"gitID":"deborahlow97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":196,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":198,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"deborahlow97"},"content":"    public void sortGoal(String sortGoalType, String sortGoalOrder) throws EmptyGoalListException {"},{"lineNumber":200,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(sortGoalType, sortGoalOrder);"},{"lineNumber":201,"author":{"gitID":"deborahlow97"},"content":"        addressBook.sortGoal(sortGoalType, sortGoalOrder);"},{"lineNumber":202,"author":{"gitID":"deborahlow97"},"content":"        indicateAddressBookChanged();"},{"lineNumber":203,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":205,"author":{"gitID":"fuadsahmawi"},"content":"    //@@author fuadsahmawi"},{"lineNumber":206,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"fuadsahmawi"},"content":"    public void addReminder(Reminder reminder) throws DuplicateReminderException {"},{"lineNumber":208,"author":{"gitID":"fuadsahmawi"},"content":"        addressBook.addReminder(reminder);"},{"lineNumber":209,"author":{"gitID":"fuadsahmawi"},"content":"        updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"},{"lineNumber":210,"author":{"gitID":"fuadsahmawi"},"content":"        indicateAddressBookChanged();"},{"lineNumber":211,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":213,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"fuadsahmawi"},"content":"    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"},{"lineNumber":215,"author":{"gitID":"fuadsahmawi"},"content":"        return FXCollections.unmodifiableObservableList(filteredReminders);"},{"lineNumber":216,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":218,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"fuadsahmawi"},"content":"    public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"},{"lineNumber":220,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(predicate);"},{"lineNumber":221,"author":{"gitID":"fuadsahmawi"},"content":"        filteredReminders.setPredicate(predicate);"},{"lineNumber":222,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":224,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"fuadsahmawi"},"content":"    public synchronized void deleteReminder(Reminder reminder) throws ReminderNotFoundException {"},{"lineNumber":226,"author":{"gitID":"fuadsahmawi"},"content":"        addressBook.removeReminder(reminder);"},{"lineNumber":227,"author":{"gitID":"fuadsahmawi"},"content":"        indicateAddressBookChanged();"},{"lineNumber":228,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"fuadsahmawi"},"content":"    /*"},{"lineNumber":230,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"fuadsahmawi"},"content":"    public void updateReminder(Reminder target, Reminder editedReminder)"},{"lineNumber":232,"author":{"gitID":"fuadsahmawi"},"content":"            throws DuplicateReminderException, ReminderNotFoundException {"},{"lineNumber":233,"author":{"gitID":"fuadsahmawi"},"content":"        requireAllNonNull(target, editedReminder);"},{"lineNumber":234,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":235,"author":{"gitID":"fuadsahmawi"},"content":"        addressBook.updateReminder(target, editedReminder);"},{"lineNumber":236,"author":{"gitID":"fuadsahmawi"},"content":"        indicateAddressBookChanged();"},{"lineNumber":237,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"fuadsahmawi"},"content":"    */"},{"lineNumber":239,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"null":2,"A0158738X":5,"fuadsahmawi":40,"-":135,"deborahlow97":57}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":54}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.UniqueGoalList;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.UniqueCcaList;"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.UniqueReminderList;"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final UniqueCcaList ccas;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    private final UniqueGoalList goals;"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"    private final UniqueReminderList reminders;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ccas \u003d new UniqueCcaList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        goals \u003d new UniqueGoalList();"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        reminders \u003d new UniqueReminderList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"     * Creates a CollegeZone using the Persons, Ccas, Tags and Goals in the {@code toBeCopied}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"content":"    //@@author sham-sheer"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void sortPersons(Index index) throws IndexOutOfBoundsException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.persons.sortPersons(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"    public void setCcas(Set\u003cCca\u003e ccas) {"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        this.ccas.setCcas(ccas); }"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"    public void setGoals(List\u003cGoal\u003e goals) throws DuplicateGoalException {"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        this.goals.setGoals(goals);"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    public void setReminders(List\u003cReminder\u003e reminders) throws DuplicateReminderException {"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"        this.reminders.setReminders(reminders);"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        setCcas(new HashSet\u003c\u003e(newData.getCcaList()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterCcaList)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"CollegeZone should not have duplicate persons\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"        List\u003cGoal\u003e syncedGoalList \u003d newData.getGoalList().stream().collect(Collectors.toList());"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"            setGoals(syncedGoalList);"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"        } catch (DuplicateGoalException e) {"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"            throw new AssertionError(\"Goal Page should not have duplicate goals\");"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":127,"author":{"gitID":"fuadsahmawi"},"content":"        List\u003cReminder\u003e syncedReminderList \u003d newData.getReminderList().stream().collect(Collectors.toList());"},{"lineNumber":128,"author":{"gitID":"fuadsahmawi"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"fuadsahmawi"},"content":"            setReminders(syncedReminderList);"},{"lineNumber":130,"author":{"gitID":"fuadsahmawi"},"content":"        } catch (DuplicateReminderException e) {"},{"lineNumber":131,"author":{"gitID":"fuadsahmawi"},"content":"            throw new AssertionError(\"Reminder list should not have duplicate reminders\");"},{"lineNumber":132,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Adds a person to CollegeZone."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s ccas and tags, and updates {@link #ccas #tags} with any new cca and tags found,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * and updates the Cca and Tag objects in the person to point to those in {@link #ccas #tags}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterCcaList(p);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        person \u003d syncWithMasterTagList(person);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":150,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * {@code CollegeZone}\u0027s cca and tag list will be updated with the ccas and tags of {@code editedPerson}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterCcaList(Person)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterCcaList(editedPerson);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        syncedEditedPerson \u003d syncWithMasterTagList(syncedEditedPerson);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":172,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        removeUnusedCcas();"},{"lineNumber":174,"author":{"gitID":"A0158738X"},"content":"        removeUnusedTags();"},{"lineNumber":175,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"     * Removes all {@code Ccas}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"    private void removeUnusedCcas() {"},{"lineNumber":182,"author":{"gitID":"deborahlow97"},"content":"        Set\u003cCca\u003e ccasInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"                .map(Person::getCcas)"},{"lineNumber":184,"author":{"gitID":"deborahlow97"},"content":"                .flatMap(Set::stream)"},{"lineNumber":185,"author":{"gitID":"deborahlow97"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":186,"author":{"gitID":"deborahlow97"},"content":"        ccas.setCcas(ccasInPersons);"},{"lineNumber":187,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":189,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":190,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"A0158738X"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":192,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"A0158738X"},"content":"    private void removeUnusedTags() {"},{"lineNumber":194,"author":{"gitID":"A0158738X"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":195,"author":{"gitID":"A0158738X"},"content":"                .map(Person::getTags)"},{"lineNumber":196,"author":{"gitID":"A0158738X"},"content":"                .flatMap(Set::stream)"},{"lineNumber":197,"author":{"gitID":"A0158738X"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":198,"author":{"gitID":"A0158738X"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":199,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":202,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"deborahlow97"},"content":"     *  Updates the master cca list to include ccas in {@code person} that are not in the list."},{"lineNumber":204,"author":{"gitID":"deborahlow97"},"content":"     *  @return a copy of this {@code person} such that every cca in this person points to a Cca object in the master"},{"lineNumber":205,"author":{"gitID":"deborahlow97"},"content":"     *  list."},{"lineNumber":206,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"deborahlow97"},"content":"    private Person syncWithMasterCcaList(Person person) {"},{"lineNumber":208,"author":{"gitID":"deborahlow97"},"content":"        final UniqueCcaList personCcas \u003d new UniqueCcaList(person.getCcas());"},{"lineNumber":209,"author":{"gitID":"deborahlow97"},"content":"        ccas.mergeFrom(personCcas);"},{"lineNumber":210,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":211,"author":{"gitID":"deborahlow97"},"content":"        // Create map with values \u003d cca object references in the master list"},{"lineNumber":212,"author":{"gitID":"deborahlow97"},"content":"        // used for checking person cca references"},{"lineNumber":213,"author":{"gitID":"deborahlow97"},"content":"        final Map\u003cCca, Cca\u003e masterCcaObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":214,"author":{"gitID":"deborahlow97"},"content":"        ccas.forEach(cca -\u003e masterCcaObjects.put(cca, cca));"},{"lineNumber":215,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":216,"author":{"gitID":"deborahlow97"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":217,"author":{"gitID":"deborahlow97"},"content":"        final Set\u003cCca\u003e correctCcaReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":218,"author":{"gitID":"deborahlow97"},"content":"        personCcas.forEach(cca -\u003e correctCcaReferences.add(masterCcaObjects.get(cca)));"},{"lineNumber":219,"author":{"gitID":"deborahlow97"},"content":"        return new Person("},{"lineNumber":220,"author":{"gitID":"deborahlow97"},"content":"                person.getName(), person.getPhone(), person.getBirthday(),"},{"lineNumber":221,"author":{"gitID":"deborahlow97"},"content":"                person.getLevelOfFriendship(),  person.getUnitNumber(), correctCcaReferences, person.getMeetDate(),"},{"lineNumber":222,"author":{"gitID":"deborahlow97"},"content":"                person.getTags());"},{"lineNumber":223,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":225,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":241,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":244,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getBirthday(),"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                person.getLevelOfFriendship(),  person.getUnitNumber(), person.getCcas(), person.getMeetDate(),"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                correctTagReferences);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"A0158738X"},"content":"     * Removes {@code meet} from {@code person} in this {@code AddressBook}."},{"lineNumber":263,"author":{"gitID":"A0158738X"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":264,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"A0158738X"},"content":"    public void removeMeetFromPerson(Person person) throws PersonNotFoundException {"},{"lineNumber":266,"author":{"gitID":"A0158738X"},"content":"        Meet newMeetDate \u003d new Meet(\"\");"},{"lineNumber":267,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":268,"author":{"gitID":"A0158738X"},"content":"        Person newPerson \u003d new Person(person.getName(), person.getPhone(), person.getBirthday(),"},{"lineNumber":269,"author":{"gitID":"A0158738X"},"content":"                person.getLevelOfFriendship(), person.getUnitNumber(), person.getCcas(), newMeetDate, person.getTags());"},{"lineNumber":270,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":274,"author":{"gitID":"A0158738X"},"content":"            throw new AssertionError(\"Modifying a person\u0027s meeting date only should not result in a duplicate. \""},{"lineNumber":275,"author":{"gitID":"A0158738X"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    //// cca-level operations"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":282,"author":{"gitID":"deborahlow97"},"content":"    public void addCca(Cca cca) throws UniqueCcaList.DuplicateCcaException {"},{"lineNumber":283,"author":{"gitID":"deborahlow97"},"content":"        ccas.add(cca);"},{"lineNumber":284,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":286,"author":{"gitID":"deborahlow97"},"content":"    //// tag-level operations"},{"lineNumber":287,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":288,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"A0158738X"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":294,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"A0158738X"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":296,"author":{"gitID":"A0158738X"},"content":"        try {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            for (Person person : persons) {"},{"lineNumber":298,"author":{"gitID":"A0158738X"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":299,"author":{"gitID":"A0158738X"},"content":"            }"},{"lineNumber":300,"author":{"gitID":"A0158738X"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":301,"author":{"gitID":"A0158738X"},"content":"            throw new AssertionError(\"Impossible: original person is obtained from the address book.\");"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"A0158738X"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":307,"author":{"gitID":"A0158738X"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":308,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"A0158738X"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"A0158738X"},"content":"        Person newPerson \u003d"},{"lineNumber":317,"author":{"gitID":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getBirthday(), person.getLevelOfFriendship(),"},{"lineNumber":318,"author":{"gitID":"-"},"content":"                        person.getUnitNumber(), person.getCcas(), person.getMeetDate(), newTags);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":322,"author":{"gitID":"A0158738X"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":323,"author":{"gitID":"A0158738X"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"deborahlow97"},"content":"    //// goal-level operations"},{"lineNumber":328,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":329,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":330,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"deborahlow97"},"content":"     * Adds a goal to CollegeZone."},{"lineNumber":332,"author":{"gitID":"deborahlow97"},"content":"     * @throws DuplicateGoalException if an equivalent goal already exists."},{"lineNumber":333,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":334,"author":{"gitID":"deborahlow97"},"content":"    public void addGoal(Goal g) throws DuplicateGoalException {"},{"lineNumber":335,"author":{"gitID":"deborahlow97"},"content":"        goals.add(g);"},{"lineNumber":336,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":338,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":339,"author":{"gitID":"deborahlow97"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":340,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":341,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"deborahlow97"},"content":"    public boolean removeGoal(Goal key) throws GoalNotFoundException {"},{"lineNumber":343,"author":{"gitID":"deborahlow97"},"content":"        if (goals.remove(key)) {"},{"lineNumber":344,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":345,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":346,"author":{"gitID":"deborahlow97"},"content":"            throw new GoalNotFoundException();"},{"lineNumber":347,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":350,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":351,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the given goal {@code target} in the list with {@code editedGoal}."},{"lineNumber":352,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":353,"author":{"gitID":"deborahlow97"},"content":"     * @throws DuplicateGoalException if updating the goal\u0027s details causes the goal to be equivalent to"},{"lineNumber":354,"author":{"gitID":"deborahlow97"},"content":"     *      another existing goal in the list."},{"lineNumber":355,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if {@code target} could not be found in the list."},{"lineNumber":356,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":357,"author":{"gitID":"deborahlow97"},"content":"    public void updateGoal(Goal target, Goal editedGoal)"},{"lineNumber":358,"author":{"gitID":"deborahlow97"},"content":"            throws DuplicateGoalException, GoalNotFoundException {"},{"lineNumber":359,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(editedGoal);"},{"lineNumber":360,"author":{"gitID":"deborahlow97"},"content":"        goals.setGoal(target, editedGoal);"},{"lineNumber":361,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":363,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the given goal {@code target} in the list with {@code editedGoal}."},{"lineNumber":365,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if {@code target} could not be found in the list."},{"lineNumber":366,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":367,"author":{"gitID":"deborahlow97"},"content":"    public void updateGoalWithoutParameters(Goal target, Goal editedGoal) throws GoalNotFoundException {"},{"lineNumber":368,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(editedGoal);"},{"lineNumber":369,"author":{"gitID":"deborahlow97"},"content":"        goals.setGoalWithoutParameters(target, editedGoal);"},{"lineNumber":370,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":372,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":373,"author":{"gitID":"deborahlow97"},"content":"     * Sorts goal based on the sort field and sort order input."},{"lineNumber":374,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":375,"author":{"gitID":"deborahlow97"},"content":"    public void sortGoal(String sortField, String sortOrder) throws EmptyGoalListException {"},{"lineNumber":376,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(sortField);"},{"lineNumber":377,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(sortOrder);"},{"lineNumber":378,"author":{"gitID":"deborahlow97"},"content":"        if (goals.getSize() \u003e 0) {"},{"lineNumber":379,"author":{"gitID":"deborahlow97"},"content":"            goals.sortGoal(sortField, sortOrder);"},{"lineNumber":380,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":381,"author":{"gitID":"deborahlow97"},"content":"            throw new EmptyGoalListException();"},{"lineNumber":382,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":383,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"deborahlow97"},"content":"    //// reminder-level operations"},{"lineNumber":385,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":386,"author":{"gitID":"fuadsahmawi"},"content":"    //@@author fuadsahmawi"},{"lineNumber":387,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":388,"author":{"gitID":"fuadsahmawi"},"content":"     * Adds a reminder to CollegeZone."},{"lineNumber":389,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws DuplicateReminderException if an equivalent reminder already exists."},{"lineNumber":390,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":391,"author":{"gitID":"fuadsahmawi"},"content":"    public void addReminder (Reminder r) throws DuplicateReminderException {"},{"lineNumber":392,"author":{"gitID":"fuadsahmawi"},"content":"        reminders.add(r);"},{"lineNumber":393,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":395,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":396,"author":{"gitID":"fuadsahmawi"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":397,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ReminderNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":398,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":399,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean removeReminder(Reminder key) throws ReminderNotFoundException {"},{"lineNumber":400,"author":{"gitID":"fuadsahmawi"},"content":"        if (reminders.remove(key)) {"},{"lineNumber":401,"author":{"gitID":"fuadsahmawi"},"content":"            return true;"},{"lineNumber":402,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":403,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ReminderNotFoundException();"},{"lineNumber":404,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":405,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"fuadsahmawi"},"content":"     * Replaces the given reminder {@code target} in the list with {@code editedReminder}."},{"lineNumber":408,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":409,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws DuplicateReminderException if updating the reminder\u0027s details causes the reminder to be equivalent to"},{"lineNumber":410,"author":{"gitID":"fuadsahmawi"},"content":"     *      another existing reminder in the list."},{"lineNumber":411,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ReminderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":412,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":413,"author":{"gitID":"fuadsahmawi"},"content":"    public void updateReminder(Reminder target, Reminder editedReminder)"},{"lineNumber":414,"author":{"gitID":"fuadsahmawi"},"content":"            throws DuplicateReminderException, ReminderNotFoundException {"},{"lineNumber":415,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(editedReminder);"},{"lineNumber":416,"author":{"gitID":"fuadsahmawi"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":417,"author":{"gitID":"fuadsahmawi"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":418,"author":{"gitID":"fuadsahmawi"},"content":"        // in the person list."},{"lineNumber":419,"author":{"gitID":"fuadsahmawi"},"content":"        reminders.setReminder(target, editedReminder);"},{"lineNumber":420,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":422,"author":{"gitID":"fuadsahmawi"},"content":"    //@@author"},{"lineNumber":423,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":426,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":427,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + ccas.asObservableList().size()"},{"lineNumber":428,"author":{"gitID":"-"},"content":"                + \"ccas, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":429,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":434,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":435,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":438,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCca\u003e getCcaList() {"},{"lineNumber":439,"author":{"gitID":"-"},"content":"        return ccas.asObservableList();"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":443,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":444,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":445,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":448,"author":{"gitID":"deborahlow97"},"content":"    public ObservableList\u003cGoal\u003e getGoalList() {"},{"lineNumber":449,"author":{"gitID":"deborahlow97"},"content":"        return goals.asObservableList();"},{"lineNumber":450,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":451,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":452,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":453,"author":{"gitID":"fuadsahmawi"},"content":"    public ObservableList\u003cReminder\u003e getReminderList() {"},{"lineNumber":454,"author":{"gitID":"fuadsahmawi"},"content":"        return reminders.asObservableList();"},{"lineNumber":455,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":456,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":458,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":459,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":460,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":461,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":462,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.ccas.equalsOrderInsensitive(((AddressBook) other).ccas)"},{"lineNumber":463,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":464,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":467,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":468,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":469,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, ccas, tags);"},{"lineNumber":470,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":471,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"A0158738X":47,"fuadsahmawi":55,"-":227,"deborahlow97":141}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.Goal;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    Predicate\u003cGoal\u003e PREDICATE_SHOW_ALL_GOALS \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"    Predicate\u003cReminder\u003e PREDICATE_SHOW_ALL_REMINDERS \u003d unused -\u003e true;"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /** Sorts a list according to the given type index */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void sortPersons(Index index) throws IndexOutOfBoundsException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":"    /** Deletes the given person\u0027s meet date */"},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"    void deleteMeetDate(Person target) throws PersonNotFoundException;"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":"    /** Removes the given {@code tag} from all {@code Person}s. */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    //@@author deborahlow97"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"    /** Adds the given goal */"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    void addGoal(Goal goal) throws DuplicateGoalException;"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    /** Returns an unmodifiable view of the filtered goal list */"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"    ObservableList\u003cGoal\u003e getFilteredGoalList();"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the given goal {@code target} with {@code editedGoal}."},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"     * @throws DuplicateGoalException if updating the goal\u0027s details causes the goal to be equivalent to"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"     *      another existing goal in the list."},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if {@code target} could not be found in the list."},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"    void updateGoal(Goal target, Goal editedGoal)"},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"            throws DuplicateGoalException, GoalNotFoundException;"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"     * Updates the filter of the filtered goal list to filter by the given {@code predicate}."},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"    void updateFilteredGoalList(Predicate\u003cGoal\u003e predicate);"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"    /** Deletes the given goal. */"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"    void deleteGoal(Goal target) throws GoalNotFoundException;"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the given goal {@code target} with {@code updateGoal}."},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    void updateGoalWithoutParameters(Goal target, Goal editedGoal) throws GoalNotFoundException;"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"     * Sort the goal based on sortType"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"    void sortGoal(String sortType, String sortOrder) throws EmptyGoalListException;"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    //@@author"},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":"    // fuadsahmawi"},{"lineNumber":113,"author":{"gitID":"fuadsahmawi"},"content":"    /** Adds the given reminder. */"},{"lineNumber":114,"author":{"gitID":"fuadsahmawi"},"content":"    void addReminder(Reminder reminder) throws DuplicateReminderException;"},{"lineNumber":115,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"    /** Returns an unmodifiable view of the filtered reminder list */"},{"lineNumber":117,"author":{"gitID":"fuadsahmawi"},"content":"    ObservableList\u003cReminder\u003e getFilteredReminderList();"},{"lineNumber":118,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":119,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"fuadsahmawi"},"content":"     * Updates the filter of the filtered reminder list to filter by the given {@code predicate}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"fuadsahmawi"},"content":"    void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate);"},{"lineNumber":124,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":125,"author":{"gitID":"fuadsahmawi"},"content":"    /** Deletes the given reminder. */"},{"lineNumber":126,"author":{"gitID":"fuadsahmawi"},"content":"    void deleteReminder(Reminder target) throws ReminderNotFoundException;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":5,"fuadsahmawi":17,"-":60,"deborahlow97":45}},{"path":"src/main/java/seedu/address/model/reminder/EndDateTime.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.DateTimeParser.properReminderDateTimeFormat;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":" * Represents a Reminder\u0027s end date and time in the Calendar."},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEndDateTime(String)}"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"public class EndDateTime {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_END_DATE_TIME_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"            \"EndDateTime must be a valid date and time\";"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":"    public final String endDateTime;"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"     * Constructs a {@code EndDateTime}."},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"     * @param endDateTime A valid endDateTime number."},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"    public EndDateTime(String endDateTime) {"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"        if (endDateTime.equals(\"\")) {"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"            this.endDateTime \u003d \"\";"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"            checkArgument(isValidEndDateTime(endDateTime), MESSAGE_END_DATE_TIME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime localEndDateTime \u003d nattyDateAndTimeParser(endDateTime).get();"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"            this.endDateTime \u003d properReminderDateTimeFormat(localEndDateTime);"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if a given string is a valid person endDateTime number."},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"    public static boolean isValidEndDateTime(String test) {"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        Optional\u003cLocalDateTime\u003e localEndDateTime \u003d nattyDateAndTimeParser(test);"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"        if (localEndDateTime.isPresent()) {"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"            return true;"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        return endDateTime;"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof EndDateTime // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.endDateTime.equals(((EndDateTime) other).endDateTime)); // state check"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        return endDateTime.hashCode();"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":60,"-":1,"deborahlow97":5}},{"path":"src/main/java/seedu/address/model/reminder/DateTime.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.DateTimeParser.properReminderDateTimeFormat;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"//@author fuadsahmawi"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":" * Represents a Reminder\u0027s date and time in the Calendar."},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"public class DateTime {"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String MESSAGE_DATE_TIME_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"            \"DateTime must be a valid date and time\";"},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public final String dateTime;"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"     * Constructs a {@code DateTime}."},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"     * @param dateTime A valid DateTime number."},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    public DateTime(String dateTime) {"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"        if (dateTime.equals(\"\")) {"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"            this.dateTime \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"            checkArgument(isValidDateTime(dateTime), MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"            LocalDateTime localDateTime \u003d nattyDateAndTimeParser(dateTime).get();"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"            this.dateTime \u003d properReminderDateTimeFormat(localDateTime);"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if a given string is a valid person DateTime number."},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    public static boolean isValidDateTime(String test) {"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        Optional\u003cLocalDateTime\u003e localEndDateTime \u003d nattyDateAndTimeParser(test);"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"        if (localEndDateTime.isPresent()) {"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        return dateTime;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof DateTime // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.dateTime.equals(((DateTime) other).dateTime)); // state check"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"        return dateTime.hashCode();"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":43,"-":6,"deborahlow97":17}},{"path":"src/main/java/seedu/address/model/goal/Completion.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":" * Represents a Goal\u0027s completion status in the Goals Page."},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"public class Completion {"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"    public final boolean hasCompleted;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code Completion}."},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"     * @param isCompleted A valid boolean."},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    public Completion(Boolean isCompleted) {"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(isCompleted);"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"        if (isCompleted) {"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"            this.hasCompleted \u003d true;"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"            this.value \u003d \"true\";"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"            this.hasCompleted \u003d false;"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"            this.value \u003d \"false\";"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof Completion // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((Completion) other).value)); // state check"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":1,"deborahlow97":44}},{"path":"src/main/java/seedu/address/model/goal/exceptions/DuplicateGoalException.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal.exceptions;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":" * Signals that the operation will result in duplicate Goal objects."},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"public class DuplicateGoalException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"    public DuplicateGoalException() {"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"        super(\"Operation would result in duplicate goals\");"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":1,"deborahlow97":12}},{"path":"src/main/java/seedu/address/model/goal/exceptions/GoalNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal.exceptions;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":" * Signals that the operation is unable to find the specified goal."},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"public class GoalNotFoundException extends Exception {}"}],"authorContributionMap":{"deborahlow97":7}},{"path":"src/main/java/seedu/address/model/reminder/UniqueReminderList.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"//@@author fuadsahmawi"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":" * A list of reminders that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":" *"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":" *"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":" * @see Reminder#equals(Object)"},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"public class UniqueReminderList implements Iterable\u003cReminder\u003e {"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns true if the list contains an equivalent reminder as the given argument."},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean contains(Reminder toCheck) {"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"     * Adds a reminder to the list."},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws DuplicateReminderException if the reminder to add is a duplicate of an existing reminder in the list."},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"    public void add(Reminder toAdd) throws DuplicateReminderException {"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":"            throw new DuplicateReminderException();"},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"     * Replaces the reminder {@code target} in the list with {@code editedReminder}."},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws DuplicateReminderException if the replacement is equivalent to another existing reminder in the list."},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ReminderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    public void setReminder(Reminder target, Reminder editedReminder)"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"            throws DuplicateReminderException, ReminderNotFoundException {"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(editedReminder);"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ReminderNotFoundException();"},{"lineNumber":60,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"        if (!target.equals(editedReminder) \u0026\u0026 internalList.contains(editedReminder)) {"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"            throw new DuplicateReminderException();"},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":"        internalList.set(index, editedReminder);"},{"lineNumber":67,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"     * Removes the equivalent reminder from the list."},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"     * @throws ReminderNotFoundException if no such reminder could be found in the list."},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean remove(Reminder toRemove) throws ReminderNotFoundException {"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitID":"fuadsahmawi"},"content":"        final boolean reminderFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"        if (!reminderFoundAndDeleted) {"},{"lineNumber":78,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ReminderNotFoundException();"},{"lineNumber":79,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"        return reminderFoundAndDeleted;"},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":83,"author":{"gitID":"fuadsahmawi"},"content":"    public void setReminders(UniqueReminderList replacement) {"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":87,"author":{"gitID":"fuadsahmawi"},"content":"    public void setReminders(List\u003cReminder\u003e reminders) throws DuplicateReminderException {"},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"        requireAllNonNull(reminders);"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":"        final UniqueReminderList replacement \u003d new UniqueReminderList();"},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"        for (final Reminder reminder : reminders) {"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"            replacement.add(reminder);"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"        setReminders(replacement);"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":96,"author":{"gitID":"fuadsahmawi"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"fuadsahmawi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":"    public ObservableList\u003cReminder\u003e asObservableList() {"},{"lineNumber":100,"author":{"gitID":"fuadsahmawi"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":101,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":103,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"    public Iterator\u003cReminder\u003e iterator() {"},{"lineNumber":105,"author":{"gitID":"fuadsahmawi"},"content":"        return internalList.iterator();"},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":108,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof UniqueReminderList // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueReminderList) other).internalList));"},{"lineNumber":113,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":115,"author":{"gitID":"fuadsahmawi"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"    public int hashCode() {"},{"lineNumber":117,"author":{"gitID":"fuadsahmawi"},"content":"        return internalList.hashCode();"},{"lineNumber":118,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":110,"-":9}},{"path":"src/main/java/seedu/address/model/goal/exceptions/EmptyGoalListException.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal.exceptions;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":" * Signals that the current goal list is empty."},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"public class EmptyGoalListException extends Exception {"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":8}},{"path":"src/main/java/seedu/address/model/goal/EndDateTime.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.nattyDateAndTimeParser;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.properDateTimeFormat;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" * Represents a Goal\u0027s end date and time in the Goals Page."},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: immutable; is valid"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"public class EndDateTime {"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public final LocalDateTime localDateTimeValue;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code EndDateTime}."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     * @param endDateTime A valid endDateTime number."},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    public EndDateTime(String endDateTime) {"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"        if (endDateTime.equals(\"\")) {"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"            this.value \u003d \"\";"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"            this.localDateTimeValue \u003d null;"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"            LocalDateTime localEndDateTime \u003d nattyDateAndTimeParser(endDateTime).get();"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"            this.value \u003d properDateTimeFormat(localEndDateTime);"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"            this.localDateTimeValue \u003d localEndDateTime;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof EndDateTime // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((EndDateTime) other).value)); // state check"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"deborahlow97":50}},{"path":"src/main/java/seedu/address/model/goal/Goal.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":" * Represents a Goal in the Goals Page."},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"public class Goal {"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    private final Importance importance;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    private final GoalText goalText;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    private final StartDateTime startDateTime;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    private final EndDateTime endDateTime;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    private final Completion completion;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public Goal(Importance importance, GoalText goalText, StartDateTime startDateTime,"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"                  EndDateTime endDateTime, Completion completion) {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(importance, goalText, startDateTime, completion);"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        this.importance \u003d importance;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        this.goalText \u003d goalText;"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        this.startDateTime \u003d startDateTime;"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        this.completion \u003d completion;"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    public Importance getImportance() {"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"        return importance;"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public GoalText getGoalText() {"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        return goalText;"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public StartDateTime getStartDateTime() {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        return startDateTime;"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    public EndDateTime getEndDateTime() {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        return endDateTime;"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public Completion getCompletion() {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        return completion;"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        if (!(other instanceof Goal)) {"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"        Goal otherPerson \u003d (Goal) other;"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        return otherPerson.getImportance().equals(this.getImportance())"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 otherPerson.getGoalText().equals(this.getGoalText());"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        return Objects.hash(importance, goalText, startDateTime);"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        builder.append(\" Importance: \")"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"                .append(getImportance())"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"                .append(\" Goal Text: \")"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"                .append(getGoalText())"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"                .append(\" Start Date Time: \")"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"                .append(getStartDateTime());"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        return builder.toString();"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":2,"deborahlow97":86}},{"path":"src/main/java/seedu/address/model/goal/Importance.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" * Represents a Goal\u0027s importance in CollegeZone."},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidImportance(String)}"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class Importance implements Comparable\u003cImportance\u003e {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_IMPORTANCE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"            \"Importance should only be a numerical integer value between 1 to 10.\";"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public static final String IMPORTANCE_VALIDATION_REGEX \u003d \"[0-9]+\";"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    private static final int MINIMUM_IMPORTANCE \u003d 1;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"    private static final int MAXIMUM_IMPORTANCE \u003d 10;"},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    private static int importanceInIntegerForm;"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code Importance}."},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"     * @param importance A valid importance."},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    public Importance(String importance) {"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(importance);"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"        checkArgument(isValidImportance(importance), MESSAGE_IMPORTANCE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d importance;"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is a valid goal importance."},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    public static boolean isValidImportance(String test) {"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"        return test.matches(IMPORTANCE_VALIDATION_REGEX) \u0026\u0026 isAnIntegerWithinRange(test);"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is an integer and within range of importance."},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    private static boolean isAnIntegerWithinRange(String test) {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        importanceInIntegerForm \u003d Integer.parseInt(test);"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"        if (importanceInIntegerForm \u003e\u003d MINIMUM_IMPORTANCE"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 importanceInIntegerForm \u003c\u003d MAXIMUM_IMPORTANCE) {"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof Importance // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((Importance) other).value)); // state check"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    public int compareTo(Importance importance) {"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"        if ((Integer.valueOf(importance.value)).equals(Integer.valueOf(this.value))) {"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"            return 0;"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        } else if ((Integer.valueOf(importance.value)) \u003c (Integer.valueOf(this.value))) {"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            return 1;"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"        } else if ((Integer.valueOf(importance.value)) \u003e (Integer.valueOf(this.value))) {"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"            return -1;"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        return 0;"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":4,"deborahlow97":76}},{"path":"src/main/java/seedu/address/model/goal/GoalText.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":" * Represents a Goal\u0027s text in the Goals Page."},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGoalText(String)}"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"public class GoalText {"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"    public static final String MESSAGE_GOAL_TEXT_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"            \"Goal text can be any expression that are not just whitespaces.\";"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public static final String GOAL_TEXT_VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code GoalText}."},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"     * @param goalText A valid goal text."},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public GoalText(String goalText) {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(goalText);"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        checkArgument(isValidGoalText(goalText), MESSAGE_GOAL_TEXT_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d goalText;"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if a given string is a valid goal text."},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"    public static boolean isValidGoalText(String test) {"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        return test.matches(GOAL_TEXT_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof GoalText // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((GoalText) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":4,"deborahlow97":50}},{"path":"src/main/java/seedu/address/model/goal/StartDateTime.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.getLocalDateTimeFromProperDateTime;"},{"lineNumber":5,"author":{"gitID":"deborahlow97"},"content":"import static seedu.address.logic.parser.DateTimeParser.properDateTimeFormat;"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":9,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":10,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":" * Represents a Goal\u0027s start date in the address book."},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"public class StartDateTime implements Comparable\u003cStartDateTime\u003e {"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"    public final LocalDateTime localDateTimeValue;"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"     * Constructs a {@code StartDateTime}."},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"     * @param startDateTime A valid LocalDateTime."},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":"    public StartDateTime(LocalDateTime startDateTime) {"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(startDateTime);"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":"        this.localDateTimeValue \u003d startDateTime;"},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d properDateTimeFormat(startDateTime);"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"    public StartDateTime(String startDateTimeInString) {"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(startDateTimeInString);"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"        this.value \u003d startDateTimeInString;"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        this.localDateTimeValue \u003d getLocalDateTimeFromProperDateTime(startDateTimeInString);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof StartDateTime // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.value.equals(((StartDateTime) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"    public int compareTo(StartDateTime startDateTime) {"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"        if ((startDateTime.localDateTimeValue).isBefore(this.localDateTimeValue)) {"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"            return 1;"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"        } else if ((startDateTime.localDateTimeValue).isAfter(this.localDateTimeValue)) {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"            return -1;"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        return 0;"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":1,"deborahlow97":61}},{"path":"src/main/java/seedu/address/model/goal/UniqueGoalList.java","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"package seedu.address.model.goal;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.DuplicateGoalException;"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.EmptyGoalListException;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.model.goal.exceptions.GoalNotFoundException;"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"//@@author deborahlow97"},{"lineNumber":17,"author":{"gitID":"deborahlow97"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":" * A list of goals that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":" *"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":" *"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":" * @see Goal#equals(Object)"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"deborahlow97"},"content":" */"},{"lineNumber":25,"author":{"gitID":"deborahlow97"},"content":"public class UniqueGoalList implements Iterable\u003cGoal\u003e {"},{"lineNumber":26,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":27,"author":{"gitID":"deborahlow97"},"content":"    private final ObservableList\u003cGoal\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":29,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"     * Returns true if the list contains an equivalent goal as the given argument."},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"    public boolean contains(Goal toCheck) {"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":37,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"deborahlow97"},"content":"     * Adds a goal to the list."},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"     * @throws DuplicateGoalException if the goal to add is a duplicate of an existing goal in the list."},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"deborahlow97"},"content":"    public void add(Goal toAdd) throws DuplicateGoalException {"},{"lineNumber":43,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"deborahlow97"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"deborahlow97"},"content":"            throw new DuplicateGoalException();"},{"lineNumber":46,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"deborahlow97"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the goal {@code target} in the list with {@code editedGoal}."},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"     * @throws DuplicateGoalException if the replacement is equivalent to another existing goal in the list."},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"    public void setGoal(Goal target, Goal editedGoal)"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"            throws DuplicateGoalException, GoalNotFoundException {"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(editedGoal);"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"            throw new GoalNotFoundException();"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        if (!target.equals(editedGoal) \u0026\u0026 internalList.contains(editedGoal)) {"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"            throw new DuplicateGoalException();"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        internalList.set(index, editedGoal);"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"     * Replaces the goal {@code target} in the list with {@code editedGoal}."},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if {@code target} could not be found in the list."},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"    public void setGoalWithoutParameters(Goal target, Goal editedGoal)"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            throws GoalNotFoundException {"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(editedGoal);"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"            throw new GoalNotFoundException();"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        internalList.set(index, editedGoal);"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"     * Removes the equivalent goal from the list."},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"     * @throws GoalNotFoundException if no such goal could be found in the list."},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"    public boolean remove(Goal toRemove) throws GoalNotFoundException {"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"        requireNonNull(toRemove);"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"        final boolean goalFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":96,"author":{"gitID":"deborahlow97"},"content":"        if (!goalFoundAndDeleted) {"},{"lineNumber":97,"author":{"gitID":"deborahlow97"},"content":"            throw new GoalNotFoundException();"},{"lineNumber":98,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"deborahlow97"},"content":"        return goalFoundAndDeleted;"},{"lineNumber":100,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"    public void setGoals(UniqueGoalList replacement) {"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":106,"author":{"gitID":"deborahlow97"},"content":"    public void setGoals(List\u003cGoal\u003e goals) throws DuplicateGoalException {"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"        requireAllNonNull(goals);"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"        final UniqueGoalList replacement \u003d new UniqueGoalList();"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"        for (final Goal goal : goals) {"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"            replacement.add(goal);"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"deborahlow97"},"content":"        setGoals(replacement);"},{"lineNumber":113,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":115,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"deborahlow97"},"content":"     * Returns the size of goal list."},{"lineNumber":117,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"deborahlow97"},"content":"    public int getSize() {"},{"lineNumber":119,"author":{"gitID":"deborahlow97"},"content":"        return internalList.size();"},{"lineNumber":120,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":122,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"deborahlow97"},"content":"     * Sort goals internal list using comparator"},{"lineNumber":124,"author":{"gitID":"deborahlow97"},"content":"     * @param sortField"},{"lineNumber":125,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"deborahlow97"},"content":"    public void sortGoal(String sortField, String sortOrder) throws EmptyGoalListException {"},{"lineNumber":127,"author":{"gitID":"deborahlow97"},"content":"        String sortFieldAndOrder \u003d sortField + \" \" + sortOrder;"},{"lineNumber":128,"author":{"gitID":"deborahlow97"},"content":"        switch (sortFieldAndOrder) {"},{"lineNumber":129,"author":{"gitID":"deborahlow97"},"content":"        case \"importance ascending\":"},{"lineNumber":130,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalA.getImportance()"},{"lineNumber":131,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalB.getImportance()));"},{"lineNumber":132,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"deborahlow97"},"content":"        case \"importance descending\":"},{"lineNumber":134,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalB.getImportance()"},{"lineNumber":135,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalA.getImportance()));"},{"lineNumber":136,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":137,"author":{"gitID":"deborahlow97"},"content":"        case \"completion ascending\":"},{"lineNumber":138,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003e new Boolean(goalA.getCompletion().hasCompleted)"},{"lineNumber":139,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalB.getCompletion().hasCompleted));"},{"lineNumber":140,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":141,"author":{"gitID":"deborahlow97"},"content":"        case \"completion descending\":"},{"lineNumber":142,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003e new Boolean(goalB.getCompletion().hasCompleted)"},{"lineNumber":143,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalA.getCompletion().hasCompleted));"},{"lineNumber":144,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":145,"author":{"gitID":"deborahlow97"},"content":"        case \"startdatetime ascending\":"},{"lineNumber":146,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalA.getStartDateTime()"},{"lineNumber":147,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalB.getStartDateTime()));"},{"lineNumber":148,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":149,"author":{"gitID":"deborahlow97"},"content":"        case \"startdatetime descending\":"},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"            FXCollections.sort(internalList, (Goal goalA, Goal goalB) -\u003egoalB.getStartDateTime()"},{"lineNumber":151,"author":{"gitID":"deborahlow97"},"content":"                    .compareTo(goalA.getStartDateTime()));"},{"lineNumber":152,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":153,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":154,"author":{"gitID":"deborahlow97"},"content":"        default:"},{"lineNumber":155,"author":{"gitID":"deborahlow97"},"content":"            break;"},{"lineNumber":156,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"deborahlow97"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":160,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"deborahlow97"},"content":"    public ObservableList\u003cGoal\u003e asObservableList() {"},{"lineNumber":162,"author":{"gitID":"deborahlow97"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":165,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"deborahlow97"},"content":"    public Iterator\u003cGoal\u003e iterator() {"},{"lineNumber":167,"author":{"gitID":"deborahlow97"},"content":"        return internalList.iterator();"},{"lineNumber":168,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":170,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"deborahlow97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":172,"author":{"gitID":"deborahlow97"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":173,"author":{"gitID":"deborahlow97"},"content":"                || (other instanceof UniqueGoalList // instanceof handles nulls"},{"lineNumber":174,"author":{"gitID":"deborahlow97"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueGoalList) other).internalList));"},{"lineNumber":175,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":177,"author":{"gitID":"deborahlow97"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"deborahlow97"},"content":"    public int hashCode() {"},{"lineNumber":179,"author":{"gitID":"deborahlow97"},"content":"        return internalList.hashCode();"},{"lineNumber":180,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"deborahlow97"},"content":"}"}],"authorContributionMap":{"-":10,"deborahlow97":171}}]
