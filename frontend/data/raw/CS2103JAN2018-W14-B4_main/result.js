var resultJson = [{"path":"docs/team/tzerbin.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Ng Tzer Bin - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CelebManager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CelebManager is a software that aims to allow celebrity managers to maintain the schedule of celebrities under them efficiently. CelebManager is optimized for celebrity managers (users) who prefer to work with a Command Line Interface (CLI) while still having a Graphical User Interface (GUI) for visual feedback."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"In CelebManager, the celebrity managers should be able to enter commands using CLI to:"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":".   Manage contacts (including celebrities) in an address book,"},{"lineNumber":16,"author":{"gitID":"-"},"content":".   Manage appointments for celebrities with calendars, and;"},{"lineNumber":17,"author":{"gitID":"-"},"content":".   Plan efficient routes for celebrities with interactive map."},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"This software is developed by a team of 4 for a project in CS2103T Software Engineering in National University of Singapore. This project portfolio aims to demonstrate my project contribution for academic grading, and my programming ability for potential employers or interested parties."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions Summary"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"*Enhancement*"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"In this project, I have added the ability for users to save user data in the hard disk for commands involving calendars and appointments."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* What it does"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** It allows the user to save appointments automatically after adding, editing or deleting appointments in the software using an .xml file."},{"lineNumber":30,"author":{"gitID":"-"},"content":"** It allows the user to retrieve saved appointments automatically from the .xml file automatically when using the software."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Justification"},{"lineNumber":33,"author":{"gitID":"-"},"content":"** This enhancement allows other software components to communicate with the Storage component so that the other features can be saved and retrieved."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Highlight"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** This enhancement affects current commands related to appointments, and commands that will be added in the future."},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"* Credit"},{"lineNumber":39,"author":{"gitID":"-"},"content":"** This enhancement is adapted from the existing code base in the Storage component given to the project team."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"*Code Contribution*"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Please refer to the [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/functional/tzerbin.md[Functional code]] and [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/test/tzerbin.md[Test code]] that I have contributed in GitHub."},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"*Other Contributions*"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"I am also responsible for other contributions which does not involve project enhancements."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"* Project Management"},{"lineNumber":50,"author":{"gitID":"-"},"content":"** I managed the release of v1.5rc on GitHub."},{"lineNumber":51,"author":{"gitID":"-"},"content":"* Documentation"},{"lineNumber":52,"author":{"gitID":"-"},"content":"** I was responsible for documentations as a whole for project submissions in CS2103T Software Engineering and CS2101 Effective Communication for Computing Professionals. This includes the formating, layout, language use and consistency for both documentation."},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Community"},{"lineNumber":54,"author":{"gitID":"-"},"content":"** I reported bugs for other teams working in different projects for CS2103T Software Engineering. The issues can be found in:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/119[Issue 1]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/118[Issue 2]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/117[Issue 3]"},{"lineNumber":58,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/115[Issue 4]"},{"lineNumber":59,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/113[Issue 5]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/112[Issue 6]"},{"lineNumber":61,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/111[Issue 7]"},{"lineNumber":62,"author":{"gitID":"-"},"content":"*** https://github.com/CS2103JAN2018-F11-B2/main/issues/110[Issue 8]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d User Guide Contribution"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":68,"author":{"gitID":"-"},"content":"|_The following are sections of the user guide that I had contributed, which showcase my ability to write documentation targeting end-users._"},{"lineNumber":69,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d  Editing an appointment `editAppointment` [Since v1.4]"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Pre-requisite: you can only edit an appointment when `CalendarPanel` is showing an appointment list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cListing appointments: `listAppointment` [Since v1.5]\u003e\u003e for more information. +"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Edits the specified appointment and replaces the appointment list with the calendar in"},{"lineNumber":77,"author":{"gitID":"-"},"content":"`CalendarPanel` upon successful execution. +"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Alias: `ea` +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Format: `editAppointment APPOINTMENT_INDEX [n/APPOINTMENT_NAME] [l/LOCATION] [sd/START_DATE] [st/START_TIME]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"[ed/END_DATE] [et/END_TIME] [c/CELEBRITY_INDEX]... [p/POINT_OF_person_INDEX]...`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"****"},{"lineNumber":83,"author":{"gitID":"-"},"content":"* Edits the appointment at the specified `INDEX`."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* `INDEX` refers to the index number shown in the current appointment list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":86,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* For more information on constraints of the different fields,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"refer to \u003c\u003cAdding an appointment: `addAppointment` [Since v1.2]\u003e\u003e."},{"lineNumber":90,"author":{"gitID":"-"},"content":"****"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"* `listAppointment` +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"`editAppointment 2 n/Dentist Appointment l/Orchard Road p/3`"},{"lineNumber":96,"author":{"gitID":"-"},"content":"Edits the 2nd appointment in the appointment list."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"* `listAppointment 01-04 01-05` +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"`editAppointment 1 st/16:00 et/20:00 sd/23-03-2018 c/1 c/2`"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Edits the 1st appointment in the result of `listAppointment 01-04 01-05`."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d Developer Guide Contribution"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":106,"author":{"gitID":"-"},"content":"|_The following are sections of the user guide that I had contributed, which showcase my ability to write technical documentation targeting developers and show technical depth in my contributions._"},{"lineNumber":107,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage Component"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"The following diagram shows the class diagram of the `Storage` component."},{"lineNumber":112,"author":{"gitID":"-"},"content":"It describes how the overall structure of the `Storage` component and its different sub-components."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":".Class diagram of the `Storage` component"},{"lineNumber":115,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"*API*: link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"The `Storage` component:"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* saves `UserPref` objects in json format and read it back."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* saves contacts data in xml format and read it back."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* saves appointments data in xml format and read it back."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Appointment Storage Feature"},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":127,"author":{"gitID":"-"},"content":"The storing of appointment is facilitated by the `XmlStorageCalendarStorage` class, which resides in the `Storage` component."},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"It supports the retrieval and storage for appointments made by the user."},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"During start-up of application, the storage component will be initialized by the `MainApp`, which retrieves information from the specified file path in `UserPrefs`."},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"The following code snippet shows how the storage component will be initialized by the `MainApp`."},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":"public void init() throws Exception {"},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"        // initializes application."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        StorageCalendarStorage storageCalendarStorage \u003d"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                new XmlStorageCalendarStorage(userPrefs.getStorageCalendarFilePath());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, storageCalendarStorage);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // initializes other component in the application."},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"----"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"The following figure shows the sequence diagram for reading `StorageCalendar`."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":".Sequence Diagram for reading `StorageCalendar`"},{"lineNumber":152,"author":{"gitID":"-"},"content":"image::ReadStorageCalendarSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"In the `XmlStorageCalendarStorage` class, it allows developers to use methods:"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"* `readStorageCalendar`, to retrieve a `StorageCalendar`"},{"lineNumber":157,"author":{"gitID":"-"},"content":"** This is done by checking if the file exist, and load the list from `XmlSerializableStorageCalendar`."},{"lineNumber":158,"author":{"gitID":"-"},"content":"* `saveStorageCalendar`, to write information into `filePath` specified in `userPrefs`"},{"lineNumber":159,"author":{"gitID":"-"},"content":"** This is done by creating a new file and rewriting to the list in `XmlSerializableStorageCalendar`."},{"lineNumber":160,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"While the `XmlStorageCalendarStorage` class allows access to data stored on the hard disk, the `XmlSerializableStorageCalendar` class represents the data of the appointment list for the calendar."},{"lineNumber":162,"author":{"gitID":"-"},"content":"In `XmlSerializableStorageCalendar`, it contains a `List` of XML formats of appointments `XmlAdaptedAppointment`."},{"lineNumber":163,"author":{"gitID":"-"},"content":"`XmlAdaptedAppointment` will then contain essential information of different `Appointment` in `StorageCalendar` of the `Model` component, which includes:"},{"lineNumber":164,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":"* `title` of appointment"},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `startTime` of appointment indicating its starting time"},{"lineNumber":167,"author":{"gitID":"-"},"content":"* `startDate` of appointment indicating its starting date"},{"lineNumber":168,"author":{"gitID":"-"},"content":"* `endTime` of appointment indicating its ending time"},{"lineNumber":169,"author":{"gitID":"-"},"content":"* `endDate` of appointment indicating its ending date"},{"lineNumber":170,"author":{"gitID":"WJY-norainu"},"content":"* `location` of appointment that is going to happen"},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `celebrityIds` of celebrities that are attending the appointment"},{"lineNumber":172,"author":{"gitID":"-"},"content":"* `pointOfContactIds` of non-celebrities that are attending the appointment"}],"authorContributionMap":{"WJY-norainu":14,"-":158}},{"path":"docs/team/Damienskt.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Sim Kwan Tiong Damien - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CelebManager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CelebManager is a software application that aims to allow celebrity managers to maintain schedule of celebrities under them. CelebManager is optimized for users who prefer to work with a Command Line Interface (CLI) while still having a Graphical User Interface (GUI) for visual feedback."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"In this software, the users will be able to:"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":".   Manage contacts"},{"lineNumber":16,"author":{"gitID":"-"},"content":".\tManage appointments"},{"lineNumber":17,"author":{"gitID":"-"},"content":".\tManage calendars"},{"lineNumber":18,"author":{"gitID":"-"},"content":".\tPlan efficient routes"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"The aim of the project portfolio is to show my contribution towards the development of CelebManager. This includes features implemented and contributions made to the user and developer guide."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to show location in map*"},{"lineNumber":25,"author":{"gitID":"-"},"content":"** What it does: Allow the celebrity manager to have a view of the exact location in a map. Notify celebrity manager if a location cannot be found on the map."},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly by allowing the celebrity manager to be familiar with the location."},{"lineNumber":27,"author":{"gitID":"-"},"content":" This is important as they are responsible of ensuring that their celebrities reaches the correct location for their appointment."},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Highlights: This enhancement required an in-depth analysis of design alternatives. The implementation too was challenging as it required integration of the new map interface with existing CelebManager interface. The implementation was challenging as it require a clear understanding of the external libraries used and its integration with the existing structure."},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Credits: Third party library used, which are `GMAPSFX API` and  `Google Maps Web Services API` library which can be found http://rterp.github.io/GMapsFX/apidocs/[here] and https://googlemaps.github.io/google-maps-services-java/v0.2.6/javadoc/[here] respectively."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to estimate route, distance and travel time between two location by driving in map*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** What it does: Allow the celebrity manager to have a view of the best route by driving between two location in a map. Provides information of estimated distance and time of travel by driving between two location. Notifies the celebrity manager if two location cannot be reached by driving."},{"lineNumber":33,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly by allowing the celebrity manager to find the best travel route between two location."},{"lineNumber":34,"author":{"gitID":"-"},"content":" This is important as they are responsible of chauffeuring their celebrities for their appointment."},{"lineNumber":35,"author":{"gitID":"-"},"content":"** Highlights: This enhancement requires an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to other command implementation. The implementation also required the integration of third party libraries with existing code structure."},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Credits: Third party library used, which are `GMAPSFX API` and  `Google Maps Web Services API` library which can be found http://rterp.github.io/GMapsFX/apidocs/[here] and https://googlemaps.github.io/google-maps-services-java/v0.2.6/javadoc/[here] respectively."},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a View Appointment command which allow the celebrity manager to view a specific appointment details."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/functional/Damienskt.md[Functional code]] [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/test/Damienskt.md[Test code]]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":46,"author":{"gitID":"-"},"content":"*** Managed releases `v1.4` on GitHub"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":49,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com/CS2103JAN2018-W14-B4/main/pull/117[#117])"},{"lineNumber":50,"author":{"gitID":"-"},"content":"*** Added Map panel UI into GUI (Pull requests https://github.com/CS2103JAN2018-W14-B4/main/pull/41[#41])"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*** Added different colour tags (Pull requests https://github.com/CS2103JAN2018-W14-B4/main/pull/6[#6])"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"*** Updated features content in User Guide: https://github.com/CS2103JAN2018-W14-B4/main/pull/108[#108] https://github.com/CS2103JAN2018-W14-B4/main/pull/93[#93] https://github.com/CS2103JAN2018-W14-B4/main/pull/138[#138] https://github.com/CS2103JAN2018-W14-B4/main/pull/20[#20]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/21[#21] https://github.com/CS2103JAN2018-W14-B4/main/pull/58[#58]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*** Updated features implementation content in developer guide: https://github.com/CS2103JAN2018-W14-B4/main/pull/108[#108] https://github.com/CS2103JAN2018-W14-B4/main/pull/93[#93] https://github.com/CS2103JAN2018-W14-B4/main/pull/138[#138] https://github.com/CS2103JAN2018-W14-B4/main/pull/124[#124]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/58[#58] https://github.com/CS2103JAN2018-W14-B4/main/pull/1[#1]"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-F11-B3/main/issues/138[1], https://github.com/CS2103JAN2018-F11-B3/main/issues/113[2], https://github.com/CS2103JAN2018-F11-B3/main/issues/114[3] https://github.com/CS2103JAN2018-F11-B3/main/issues/115[4])"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"*** Integrated three third party library (CalendarFX, GMAPSFX and Google Map Web Services) to the project (https://github.com/CS2103JAN2018-W14-B4/main/pull/24[#24] https://github.com/CS2103JAN2018-W14-B4/main/pull/8[#8] https://github.com/CS2103JAN2018-W14-B4/main/pull/23[#23])"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"|_Given below are some key sections I have contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":70,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Map Features"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Map features allow you to interact with Google Map in `MapPanel` located at the bottom left of CelebManager."},{"lineNumber":75,"author":{"gitID":"-"},"content":"The figure below shows the default state of `MapPanel`."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":".Default state of `MapPanel`"},{"lineNumber":78,"author":{"gitID":"-"},"content":"image::BeforeInputMap.png[width\u003d\"400\"]"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Whenever a new valid or invalid command belonging to map features is executed, any existing route or location marker will be removed."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Click inside the map [Since v1.3]"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Google Map in `MapPanel` supports mouse clicking. You can: +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"****"},{"lineNumber":86,"author":{"gitID":"-"},"content":"* Click the Map or Satellite button to toggle between road map or satellite view."},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Click the `+` to zoom in and `-` button to zoom out."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* Click, hold and move the mouse cursor to shift the current view of the map."},{"lineNumber":89,"author":{"gitID":"-"},"content":"****"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Do not click the `Google` logo or `Terms of Use` button."},{"lineNumber":93,"author":{"gitID":"-"},"content":"Clicking these two things triggers a bug which we plan to fix in `v2.0`."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Show location on map : `showLocation` [Since v1.2]"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"Shows the specified location by marking the latitude and longitude with a location marker on Google Map. +"},{"lineNumber":98,"author":{"gitID":"-"},"content":"Alias: `sl` +"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"Format: `showLocation ma/ADDRESS`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"****"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"* `ADDRESS` should be a postal code, road name, location name or building name."},{"lineNumber":103,"author":{"gitID":"-"},"content":"****"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"* `showLocation ma/Punggol` +"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"Updates the map by re-centering to the new location `Punggol` and adds a location marker to it as shown below."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":".State of `MapPanel` after executing `showLocation ma/Punggol`"},{"lineNumber":111,"author":{"gitID":"-"},"content":"image::AfterShowLocationInput.png[width\u003d\"400\"]"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitID":"-"},"content":"|_Given below are some key sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":117,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d ShowLocation Feature"},{"lineNumber":120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"The ShowLocation mechanism is facilitated by the `ShowLocationCommand`, which resides inside `Logic`. It supports the viewing of location"},{"lineNumber":123,"author":{"gitID":"-"},"content":"in the `MapPanel` by updating the state of the `MapPanel`. This is done by re-centering the `MapPanel` to the latitude and longitude of the"},{"lineNumber":124,"author":{"gitID":"-"},"content":"location and identifying it with a location marker. This command inherits from `Command` so it *does not support the undo/redo feature*."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"The following figure shows the marker that is used to identify the location in the `MapPanel`:"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":".Location marker"},{"lineNumber":129,"author":{"gitID":"-"},"content":"image::LocationMarker.png[width\u003d\"50\"]"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"The following diagram shows the inheritance diagram for `ShowLocationCommand`:"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":".Inheritance diagram for `Command`"},{"lineNumber":134,"author":{"gitID":"-"},"content":"image::ShowLocationLogicCommandClassDiagram.png[width\u003d\"\"]"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"As you can see from the diagram, `ShowLocationCommand` inherits from the Command class and is not part of the Undoable Command."},{"lineNumber":137,"author":{"gitID":"-"},"content":"Similar to the other commands like `FindCommand` *it will not be identified by the undo/redo feature*."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"This command does not use the `Person` `Address` model to search for a specific location, it uses the `MapAddress` model. This is due to"},{"lineNumber":140,"author":{"gitID":"-"},"content":" the difference in address specification details as the `Address` model is too specific for the command to work."},{"lineNumber":141,"author":{"gitID":"-"},"content":"An example would be the details of unit number (e.g #11-111) which will result in an invalid command or inaccurate result."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"The main difference between both model is shown below in the two code snippets."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The snippet code below shows the `Address` model:"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"----"},{"lineNumber":149,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"},{"lineNumber":165,"author":{"gitID":"-"},"content":"----"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The snippet code below shows the `MapAddress` model:"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"----"},{"lineNumber":171,"author":{"gitID":"-"},"content":"public class MapAddress {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_MAP_CONSTRAINTS \u003d"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            \"Address should be in location name, road name, block and road name or postal code format.\\n\""},{"lineNumber":174,"author":{"gitID":"-"},"content":"                    + \"Note:(Person address may not be valid as it consist of too many details like unit number)\""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid map address."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        boolean isValid;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Geocoding testAddress \u003d new Geocoding();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        isValid \u003d testAddress.checkIfAddressCanBeFound(test);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_MAP_VALIDATION_REGEX) \u0026\u0026 isValid;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"},{"lineNumber":192,"author":{"gitID":"-"},"content":"----"},{"lineNumber":193,"author":{"gitID":"-"},"content":"The difference to note is the `isValidAddress` method, where `Address` only checks for *blank space* whereas `MapAddress`"},{"lineNumber":194,"author":{"gitID":"-"},"content":"checks for *blank space and the validity of location in google server*. Thus, making the command more restrictive to location,"},{"lineNumber":195,"author":{"gitID":"-"},"content":" road, block name and postal code. Any details more than that, would result in a higher possibility of it being invalid or inaccurate."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"This command uses the `GMAPSFX API` and  `Google Maps Web Services API` library which can be found http://rterp.github.io/GMapsFX/apidocs/[here] and https://googlemaps.github.io/google-maps-services-java/v0.2.6/javadoc/[here] respectively."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"* `GMAPSFX API` is used to create the `MapPanel` class which allows the"},{"lineNumber":200,"author":{"gitID":"-"},"content":"command to re-center and mark the new location which is then shown to the user."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"* `Google Maps Web Services API` is used to create the"},{"lineNumber":203,"author":{"gitID":"-"},"content":"`Geocoding` class, which is used to convert `MapAddress` into latitude and longitude form (`LatLng`). The `LatLng` form"},{"lineNumber":204,"author":{"gitID":"-"},"content":"is then used by the command to find the exact location in the `MapPanel`."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Every new input of this command will remove the previous route or location marker and add the new marker into the map."},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"The snippet below shows the state of `MapPanel` before input of `ShowLocation` command:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":".Default State of `MapPanel`"},{"lineNumber":211,"author":{"gitID":"-"},"content":"image::BeforeInputMap.png[width\u003d\"400\"]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"After the input of \"showLocation ma/Punggol\" the `MapPanel` will be updated to the diagram below:"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".State of `MapPanel` after `CommandInput`"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::AfterShowLocationInput.png[width\u003d\"400\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":219,"author":{"gitID":"Damienskt"},"content":"Whenever an invalid `showLocation` command is done, any existing location marker or route will be removed from the map."},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the command works:"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":".Sequence Diagram of `showLocation` Command"},{"lineNumber":224,"author":{"gitID":"-"},"content":"image::ShowLocationSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `showLocationCommand`"},{"lineNumber":229,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Extend `Command`"},{"lineNumber":230,"author":{"gitID":"-"},"content":"** Pros: Allows new developers to understand easily as the command is at the same abstraction level as other commands."},{"lineNumber":231,"author":{"gitID":"-"},"content":"** Cons: Does not have the undo/redo feature as it is not part of `UndoableCommand`."},{"lineNumber":232,"author":{"gitID":"-"},"content":"* **Alternative 2:** Extend `UndoableCommand`"},{"lineNumber":233,"author":{"gitID":"-"},"content":"** Pros: Allows for command to have the undo/redo function."},{"lineNumber":234,"author":{"gitID":"-"},"content":"** Cons: Requires more work that may not fit in with our timeline"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Use of address model"},{"lineNumber":237,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `MapAddress`"},{"lineNumber":238,"author":{"gitID":"-"},"content":"** Pros: Allows the clear distinction of requirements between `MapAddress` and `Address` to avoid confusion"},{"lineNumber":239,"author":{"gitID":"-"},"content":"** Cons: Confusing as both `MapAddress` and `Address` model are quite similar."},{"lineNumber":240,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `Address`"},{"lineNumber":241,"author":{"gitID":"-"},"content":"** Pros: Reduces the amount of code/class in the project"},{"lineNumber":242,"author":{"gitID":"-"},"content":"** Cons: Confusing as different requirements for a single model. Lacks proper organisation."}],"authorContributionMap":{"WJY-norainu":7,"-":233,"Damienskt":2}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CelebManager - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `CS2103JAN2018-W14-B4`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"CelebManager is a computer software designed to help celebrity managers *to manage their celebrities\u0027 schedules*."},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"It is *optimized for managers who prefer to work with a Command Line Interface* (CLI) while"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"still having the benefits of a Graphical User Interface (GUI). If you require a versatile application that has the"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"feature of *managing persons, organising schedules, emailing (Coming in v2.0) and trip planning*. You are at the right"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"place as CelebManager would be the best platform for you, with its integration of address book, calendar and visual maps."},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"Follow this series of steps to have CelebManager quickly up and running on your computer."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer. The link to the latest version of Java"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"can be found"},{"lineNumber":33,"author":{"gitID":"-"},"content":"https://java.com/en/download/[here]."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":".  Download the latest `CelebManager.jar` link:{repoURL}/releases[here]."},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your CelebManager."},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The interface should appear in a few seconds."},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"The image below (Figure 1) shows the interface of CelebManager after the first launch."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":".Interface of CelebManager upon the first launch"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"image::Ui_UserGuide.jpg[width\u003d\"790\"]"},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"CelebManager\u0027s interface comprises of 5 panels: `CommandBox` (top), `ResultDisplay` (right below `CommandBox`),"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"`PersonListPanel` (left), `MapPanel` (bottom left), and `CalendarPanel` (bottom right), as labelled in the figure below."},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"Note that the labelling is for illustration purpose and will not appear in the actual interface."},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":".Interface of CelebManager with labels"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"image::Ui_labelled_UserGuide.jpg[width\u003d\"790\"]"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"`CommandBox` is for you to enter the commands. +"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"`ResultsDisplay` shows the execution result of the command entered in `CommandBox`. +"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"`PersonListPanel` displays the details of each person stored in CelebManager. There are some persons created to"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"provide you a quick view of how each person looks like in `PersonListPanel`. You can follow this guide to clear these"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"persons in the later part. +"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"`MapPanel` provides you a map view. +"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"`CalendarPanel` provides you a calendar view of the appointments stored in CelebManager. +"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"These panel names will be used to help explain the functionality of different commands."},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":".  Type `help` in `CommandBox` and press kbd:[Enter] to execute it. A help window should be opened."},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"[TIP]"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e for details of all commands available in CelebManager and their example usage."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"For each of the command in CelebManager, their formats follow some general patterns as mentioned in the text box below."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"* All commands have an alias, which you can also use to execute the command, e.g. to add a contact to CelebManager,"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"you can type either `add n/John Doe p/123456 e/john@gmail.com a/Clementi` or `a n/John Doe p/123456 e/john@gmail.com a/Clementi`."},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by you, e.g. in `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS`,"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"`NAME`, `PHONE_NUMBER`, `EMAIL`, `ADDRESS`, and `TAG` are parameters which can be used as"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"`add n/John Doe p/123456 e/john@gmail.com a/Clementi`."},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"* Items in square brackets are optional, e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"* Items with `…`​ after them can be used multiple times including zero times, e.g. `[t/TAG]...` can be used as `{nbsp}`"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"(i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"* Parameters can be in any order, e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"acceptable."},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"*Precaution*"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"* Refrain from clicking inside the calendar at all times, except for scrolling up and down using the scroll bar."},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"This bug will be fixed in v2.0."},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"* Commands that modify the persons and appointments stored in CelebManager (`add`, `delete`, `edit`, `undo`, `redo`,"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"`addAppointment`, `deleteAppointment`, `editAppointment` etc) must be performed in combined calendar view unless"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"specified otherwise. +"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"Information about combined calendar view can be found in +"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"\u003c\u003cChanging to view the combined calendar: `viewCombinedCalendar` [Since v1.3]\u003e\u003e."},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"In this section, screenshots of CelebManager are provided for your reference. The screenshots assume that CelebManager"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"is launched for the first time and commands are executed in the same format as the example usage, and in the same order"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"as they are listed here. +"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"The following are all the commands available to you:"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d General Features"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"General features include commands that affect and are affected by the overall status of CelebManager."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help` [Since v1.0]"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"Shows a help window that contains this User Guide. +"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"Format: `help`"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear` [Since v1.0]"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"Clears all entries from CelebManager. +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"Alias: `c` +"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"Format: `clear` +"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"The picture below shows how CelebManager looks like after executing `clear`. +"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":".Status of CelebManager after executing `clear`"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"image::Ui_clean_state.jpg[width\u003d\"790\"]"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"`PersonListPanel` and `CalendarPanel` should become empty. It is possible that your calendar in `CalendarPanel` shows"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"a different date as it should show the current date."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history` [Since v1.0]"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"Lists all the commands that you have entered in reverse chronological order in `ResultDisplay`. +"},{"lineNumber":132,"author":{"gitID":"-"},"content":"Alias: `h` +"},{"lineNumber":133,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"box."},{"lineNumber":139,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit` [Since v1.0]"},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Alias: `x` +"},{"lineNumber":145,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving the data [Since v1.0]"},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"CelebManager data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Address Book Features"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"WJY-norainu"},"content":"Address book features allow you to modify and interact with the person list displayed in `PersonListPanel` located at"},{"lineNumber":157,"author":{"gitID":"WJY-norainu"},"content":"the middle left of CelebManager."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Person vs Celebrity: What\u0027s the difference?"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"In our application, Celebrities are meant to be the celebrities that you, the manager, are currently managing. The other people are each referred to as a Person. The way you create or edit a Person is almost exactly the same as a Celebrity. Both have the same necessary and optional fields to them such as a name, phone number, address, email and some descriptive tags. The only difference is that if you want to create a Celebrity instead of a regular Person in our app, you need to have a compulsory `celebrity` tag, in small letters. This will signal to the program that you want to create a Celebrity instead of a normal Person. In other words, the usage of `celebrity` as a tag is reserved for creation of Celebrities. In some of the commands which deal with the adding and editing of a person this will be further explained. In addition, if we use the term \"Point of Contact\" from here on out, it refers to a regular person without a `celebrity` tag (i.e. not a Celebrity)."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"Each celebrity has their own calendar, which will displays the appointments he/she will be attending."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a person: `add` [Since v1.0]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Adds a person to CelebManager. +"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Alias: `a` +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":172,"author":{"gitID":"WJY-norainu"},"content":"A person can have any number of tags, including 0."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":"* You can add two types of persons to CelebManager: contacts and celebrities."},{"lineNumber":176,"author":{"gitID":"WJY-norainu"},"content":"* Celebrities refer to the celebrities that you, the manager, are currently managing, while contacts refer to other persons."},{"lineNumber":177,"author":{"gitID":"WJY-norainu"},"content":"* Contacts refer to contacts other than celebrities."},{"lineNumber":178,"author":{"gitID":"WJY-norainu"},"content":"* If you want to add a celebrity to CelebManager, you need to tag him/her with `celebrity` tag."},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"Refer to examples below for more information."},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"* For each celebrity added, CelebManager creates a calendar in `CalendarPanel` for him/her. This calendar displays the appointments"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":"he/she will be attending."},{"lineNumber":182,"author":{"gitID":"WJY-norainu"},"content":"* CelebManager assumes that any celebrity added is a celebrity that you are managing. If you want to add an actual celebrity"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":"who is not managed by you, you need to avoid using `celebrity` tag and find another tag name to indicate this information."},{"lineNumber":184,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":185,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"WJY-norainu"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` +"},{"lineNumber":189,"author":{"gitID":"WJY-norainu"},"content":"Adds a contact named `John Doe` to CelebManager."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"WJY-norainu"},"content":"* `add n/Betsy Crower t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` +"},{"lineNumber":192,"author":{"gitID":"WJY-norainu"},"content":"Adds a contact named `Betsy Crower` to CelebManager."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"WJY-norainu"},"content":"* `add n/John Lennon p/91827364 e/johnlennon@example.com a/John Lennon Rd, Block 321, #03-04 t/celebrity t/singer` +"},{"lineNumber":195,"author":{"gitID":"WJY-norainu"},"content":"Adds a celebrity named `John Lennon` to CelebManager and creates an empty calendar named `John Lennon`."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"WJY-norainu"},"content":"* `add n/Paul McCartney p/91827364 e/paulmccartney@example.com a/Paul McCartney Rd, Block 789, #05-06 t/celebrity` +"},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":"Adds a celebrity named `Paul McCartney` to CelebManager and creates an empty calendar named `Paul McCartney`."},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating persons by name: `find` [Since v1.0]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"WJY-norainu"},"content":"Shows a list of all persons whose names contain any of the given keywords. +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"Alias: `f` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":207,"author":{"gitID":"WJY-norainu"},"content":"* This search is case insensitive, e.g `hans` will match `Hans`."},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"* The order of keywords does not matter, e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":209,"author":{"gitID":"WJY-norainu"},"content":"* Only full words are matched, e.g. `Han` will not match `Hans`."},{"lineNumber":210,"author":{"gitID":"WJY-norainu"},"content":"* persons matching at least one keyword will be returned (i.e. `OR` search), e.g. `Hans Bo` will list out `Hans Gruber`"},{"lineNumber":211,"author":{"gitID":"WJY-norainu"},"content":"and `Bo Yang`."},{"lineNumber":212,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"WJY-norainu"},"content":"* `find John` +"},{"lineNumber":217,"author":{"gitID":"WJY-norainu"},"content":"Lists out any person having the name `John`."},{"lineNumber":218,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":219,"author":{"gitID":"WJY-norainu"},"content":"* `find Betsy John` +"},{"lineNumber":220,"author":{"gitID":"WJY-norainu"},"content":"Lists out any person having any of the names: `Betsy` or `John`."},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all persons : `list` [Since v1.0]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"Shows a list of all persons in CelebManager. +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"Alias: `l` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a person : `delete` [Since v1.0]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"Deletes the specified person from CelebManager. +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"Alias: `d` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"****"},{"lineNumber":235,"author":{"gitID":"WJY-norainu"},"content":"* Deletes the person at the specified `INDEX` from `PersonListPanel`. This deletion is undoable."},{"lineNumber":236,"author":{"gitID":"WJY-norainu"},"content":"* If the person is a contact, he/she will be deleted from points of contacts of appointments he/she is associated with."},{"lineNumber":237,"author":{"gitID":"WJY-norainu"},"content":"Deletion of the contact from appointments *is not undoable*."},{"lineNumber":238,"author":{"gitID":"WJY-norainu"},"content":"* If the person is a celebrity, his/her calendar will be deleted. He/She will be deleted from appointments that he/she"},{"lineNumber":239,"author":{"gitID":"WJY-norainu"},"content":"will be attending. Deletion of the calendar and the celebrity from appointments *is not undoable*."},{"lineNumber":240,"author":{"gitID":"WJY-norainu"},"content":"* When you undo deletion of a celebrity, a new empty calendar will be created for the restored celebrity."},{"lineNumber":241,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the most recent listing."},{"lineNumber":242,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":243,"author":{"gitID":"-"},"content":"****"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":249,"author":{"gitID":"WJY-norainu"},"content":"Deletes the 2nd person displayed in `PersonListPanel`. If `PersonListPanel` is empty, an error message will be shown."},{"lineNumber":250,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":251,"author":{"gitID":"WJY-norainu"},"content":"* `find Paul` +"},{"lineNumber":252,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":253,"author":{"gitID":"WJY-norainu"},"content":"Deletes the 1st person in the results of the `find` command. If the list is empty, an error message will be shown."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Selecting a person : `select` [Since v1.0]"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"Alias: `s` +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"****"},{"lineNumber":262,"author":{"gitID":"WJY-norainu"},"content":"* Selects the person at the specified `INDEX` in the last shown person list."},{"lineNumber":263,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the most recent listing."},{"lineNumber":264,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":265,"author":{"gitID":"-"},"content":"****"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":271,"author":{"gitID":"WJY-norainu"},"content":"Selects the 2nd person in `PersonListPanel`."},{"lineNumber":272,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a person : `edit` [Since v1.0]"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"Edits an existing person in CelebManager. +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"Alias: `e` +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"****"},{"lineNumber":284,"author":{"gitID":"WJY-norainu"},"content":"* Edits the person at the specified `INDEX`."},{"lineNumber":285,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the last person listing."},{"lineNumber":286,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":287,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":288,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":289,"author":{"gitID":"WJY-norainu"},"content":"* When editing tags, the existing tags of the contact will be removed i.e adding of tags is not cumulative."},{"lineNumber":290,"author":{"gitID":"WJY-norainu"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tag after it."},{"lineNumber":291,"author":{"gitID":"WJY-norainu"},"content":"* If `celebrity` tag gets removed, the person\u0027s calendar will be removed and person will be removed from appointments"},{"lineNumber":292,"author":{"gitID":"WJY-norainu"},"content":"he/she will be attending. Removal of the calendar and person from appointments *is not undoable*."},{"lineNumber":293,"author":{"gitID":"WJY-norainu"},"content":"* If the person now has `celebrity` tag, a calendar will be created for him/her."},{"lineNumber":294,"author":{"gitID":"-"},"content":"****"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"WJY-norainu"},"content":"* `list` +"},{"lineNumber":299,"author":{"gitID":"WJY-norainu"},"content":"`edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":300,"author":{"gitID":"WJY-norainu"},"content":"Changes the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"WJY-norainu"},"content":"* `edit 2 n/Betsy Crowen t/` +"},{"lineNumber":303,"author":{"gitID":"WJY-norainu"},"content":"Changes the name of the 2nd person to be `Betsy Crowen` and clears all existing tags."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"WJY-norainu"},"content":"* `edit 1 t/celebrity`"},{"lineNumber":306,"author":{"gitID":"WJY-norainu"},"content":"Converts the 1st person to a celebrity."},{"lineNumber":307,"author":{"gitID":"WJY-norainu"},"content":"If you follow all the examples so far, a new calendar should be created for this person as shown below."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"WJY-norainu"},"content":"* `edit 3 n/Michael Jackson t/Singer`"},{"lineNumber":310,"author":{"gitID":"WJY-norainu"},"content":"Converts the 3rd person to a contact."},{"lineNumber":311,"author":{"gitID":"WJY-norainu"},"content":"If you follow all the examples so far, this person\u0027s calendar should be deleted as shown below."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"WJY-norainu"},"content":"// tag::removeTag[]"},{"lineNumber":314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removing a tag : `removeTag` [Since v1.2]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"WJY-norainu"},"content":"Removes the specified tag from every person in CelebManager (including persons who may not be currently shown in `PersonListPanel`)"},{"lineNumber":317,"author":{"gitID":"WJY-norainu"},"content":"and shows the number of person(s) affected by this"},{"lineNumber":318,"author":{"gitID":"WJY-norainu"},"content":"operation. +"},{"lineNumber":319,"author":{"gitID":"WJY-norainu"},"content":"Alias: `rt` +"},{"lineNumber":320,"author":{"gitID":"WJY-norainu"},"content":"Format: `removeTag TAG`"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"****"},{"lineNumber":323,"author":{"gitID":"WJY-norainu"},"content":"* Removes the tag from every person in the full contact list (not necessarily the last shown list) in CelebManager."},{"lineNumber":324,"author":{"gitID":"-"},"content":"* `TAG` removed *must not be* `celebrity`."},{"lineNumber":325,"author":{"gitID":"-"},"content":"****"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":328,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":329,"author":{"gitID":"WJY-norainu"},"content":"* `removeTag friends` +"},{"lineNumber":330,"author":{"gitID":"WJY-norainu"},"content":"Removes the tag, `friends` from every person and shows the number of person(s) affected. +"},{"lineNumber":331,"author":{"gitID":"WJY-norainu"},"content":"Suppose `PersonListPanel` looks like the one on the left below before execution. +"},{"lineNumber":332,"author":{"gitID":"WJY-norainu"},"content":"After execution, `PersonListPanel` should get updated to the one on the right below."},{"lineNumber":333,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":334,"author":{"gitID":"WJY-norainu"},"content":"[.text-center]"},{"lineNumber":335,"author":{"gitID":"WJY-norainu"},"content":".State of `PersonListPanel` before (left) and after (right) executing `removeTag friends`"},{"lineNumber":336,"author":{"gitID":"WJY-norainu"},"content":"image::removeTag.png[width\u003d\"800\"]"},{"lineNumber":337,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":338,"author":{"gitID":"WJY-norainu"},"content":"* `removeTag owesMoney` +"},{"lineNumber":339,"author":{"gitID":"WJY-norainu"},"content":"Removes the tag, `owesMoney` from every person and shows the number of person(s) affected."},{"lineNumber":340,"author":{"gitID":"WJY-norainu"},"content":"// end::removeTag[]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":343,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo` [Since v1.0]"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"Restores CelebManager to the state before the previous _undoable_ command was executed. +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"Alias: `u` +"},{"lineNumber":347,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":350,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":351,"author":{"gitID":"WJY-norainu"},"content":"Undoable commands: those commands that modify CelebManager\u0027s persons (`add`, `delete`, `edit`, `clear`,"},{"lineNumber":352,"author":{"gitID":"WJY-norainu"},"content":"`removeTag` etc)."},{"lineNumber":353,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"WJY-norainu"},"content":"[IMPORTANT]"},{"lineNumber":356,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":357,"author":{"gitID":"WJY-norainu"},"content":"Undoing deletion of a person will not restore this person to the appointment he/she is associated with before deletion."},{"lineNumber":358,"author":{"gitID":"WJY-norainu"},"content":"When a person gets deleted, he/she will be removed from all appointments that have him/her as attendess or"},{"lineNumber":359,"author":{"gitID":"WJY-norainu"},"content":"point-of-persons. Undoing the deletion can only restore the person\u0027s information but not the appointments. If the"},{"lineNumber":360,"author":{"gitID":"WJY-norainu"},"content":"person is a celebrity, appointments previously stored in his/her calendar will not be undone as well."},{"lineNumber":361,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":366,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"WJY-norainu"},"content":"* `select 1` +"},{"lineNumber":370,"author":{"gitID":"WJY-norainu"},"content":"`list` +"},{"lineNumber":371,"author":{"gitID":"WJY-norainu"},"content":"`undo` +"},{"lineNumber":372,"author":{"gitID":"WJY-norainu"},"content":"The operation fails as there are no undoable commands executed previously."},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":375,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":376,"author":{"gitID":"WJY-norainu"},"content":"`undo` (reverses the `clear` command and creates new calendars for all `celebrity` s restored by `undo`) +"},{"lineNumber":377,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo` [Since v1.0]"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"Alias: `r` +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"WJY-norainu"},"content":"* `delete 1` +"},{"lineNumber":388,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":393,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":394,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":396,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":397,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":398,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":399,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":401,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":402,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":403,"author":{"gitID":"WJY-norainu"},"content":"{sp} +"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Appointment Features"},{"lineNumber":406,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":407,"author":{"gitID":"WJY-norainu"},"content":"Appointment features allow you to modify appointments stored in CelebManager. The commands introduced in this section"},{"lineNumber":408,"author":{"gitID":"WJY-norainu"},"content":"are all *not undoable*."},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an appointment: `addAppointment` [Since v1.2]"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"WJY-norainu"},"content":"Adds an appointment and shows the calendar of the start date of the added appointment. +"},{"lineNumber":413,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":414,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":415,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":416,"author":{"gitID":"WJY-norainu"},"content":"To change the date displayed by the calendar in `CalendarPanel`,"},{"lineNumber":417,"author":{"gitID":"WJY-norainu"},"content":"refer to \u003c\u003cChanging the base date of calendar: `viewDate` [Since v1.5]\u003e\u003e."},{"lineNumber":418,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":419,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":420,"author":{"gitID":"WJY-norainu"},"content":"Alias: `aa` +"},{"lineNumber":421,"author":{"gitID":"WJY-norainu"},"content":"Format: `addAppointment n/APPOINTMENT_NAME [l/LOCATION] [sd/START_DATE] [st/START_TIME] [ed/END_DATE] [et/END_TIME]"},{"lineNumber":422,"author":{"gitID":"WJY-norainu"},"content":"[c/CELEBRITY_INDEX]... [p/POINT_OF_person_INDEX]...`"},{"lineNumber":423,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":424,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":425,"author":{"gitID":"WJY-norainu"},"content":"* `START_DATE` and `END_DATE` must be of the format `DD-MM-YYYY`, e.g. `03-07-2018`."},{"lineNumber":426,"author":{"gitID":"WJY-norainu"},"content":"* `START_DATE` *must not be* after `END_DATE`."},{"lineNumber":427,"author":{"gitID":"WJY-norainu"},"content":"* If `START_DATE` or `END_DATE` is omitted, it will take on the value of the current date."},{"lineNumber":428,"author":{"gitID":"WJY-norainu"},"content":"* `START_TIME` and `END_TIME` must be of the format `HH:MM` and 24-hour format is used, e.g. `14:05`."},{"lineNumber":429,"author":{"gitID":"WJY-norainu"},"content":"* `START_TIME` *must be* at least 15 minutes before `END_TIME` if `START_DATE` is equal to `END_DATE`."},{"lineNumber":430,"author":{"gitID":"WJY-norainu"},"content":"* If `START_TIME` and `END_TIME` are both omitted, `START_TIME` will take on the current time and `END_TIME` will be"},{"lineNumber":431,"author":{"gitID":"WJY-norainu"},"content":"15 minutes after `START_TIME`."},{"lineNumber":432,"author":{"gitID":"WJY-norainu"},"content":"* If `START_TIME` is omitted while `END_TIME` is not, `START_TIME` will be 15 minutes before `END_TIME`."},{"lineNumber":433,"author":{"gitID":"WJY-norainu"},"content":"* If `END_TIME` is omitted while `START_TIME` is not, `END_TIME` will be 15 minutes after `START_TIME`."},{"lineNumber":434,"author":{"gitID":"WJY-norainu"},"content":"* `CELEBRITY_INDEX` and `POINT_OF_person_INDEX` refer to the index shwon in the last shown person list in `PersonListPanel`."},{"lineNumber":435,"author":{"gitID":"WJY-norainu"},"content":"* The person at `CELEBRITY_INDEX` *must be* a celebrity."},{"lineNumber":436,"author":{"gitID":"-"},"content":"* The person at `POINT_OF_CONTACT_INDEX` *must not be* a celebrity."},{"lineNumber":437,"author":{"gitID":"WJY-norainu"},"content":"* `CELEBRITY_INDEX` and `POINT_OF_person_INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":438,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":439,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":440,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":441,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"* `addAppointment n/Oscars 2018 l/Hollywood sd/23-03-2018 st/14:00 ed/23-03-2018 et/20:00 p/1 p/5`"},{"lineNumber":443,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"* `addAppointment n/Dentist Appointment l/Dental Clinic st/15:45 c/1 c/3`"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Listing appointments: `listAppointment` [Since v1.5]"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"WJY-norainu"},"content":"Lists all appointments from the specified start date to end date (inclusive). +"},{"lineNumber":449,"author":{"gitID":"-"},"content":"Alias: `la` +"},{"lineNumber":450,"author":{"gitID":"WJY-norainu"},"content":"Format: `listAppointment [START_DATE END_DATE]`"},{"lineNumber":451,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":452,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":453,"author":{"gitID":"WJY-norainu"},"content":"* Lists appointments according to the specified date range."},{"lineNumber":454,"author":{"gitID":"WJY-norainu"},"content":"* `CalendarPanel` will replace the calendar by an appointment list."},{"lineNumber":455,"author":{"gitID":"WJY-norainu"},"content":"* When no date range is given, all appointments in CelebManager will be listed."},{"lineNumber":456,"author":{"gitID":"WJY-norainu"},"content":"* The date *must be in the format of* `DD-MM-YYYY` or `DD-MM`. For the latter, year will be set to current year."},{"lineNumber":457,"author":{"gitID":"WJY-norainu"},"content":"* The date *must be* a valid date, eg, `01-13-2018` and `30-02` are not valid dates."},{"lineNumber":458,"author":{"gitID":"WJY-norainu"},"content":"* `START_DATE` *must not be* after `END_DATE`."},{"lineNumber":459,"author":{"gitID":"WJY-norainu"},"content":"* `START_DATE` and `END_DATE` must be separated by a space."},{"lineNumber":460,"author":{"gitID":"WJY-norainu"},"content":"* If there is no appointment within the specified date range, an error message will be shown instead of an empty list."},{"lineNumber":461,"author":{"gitID":"WJY-norainu"},"content":"* If an appointment starts within the date range specified but ends after `END_DATE`, it will be listed."},{"lineNumber":462,"author":{"gitID":"WJY-norainu"},"content":"* If an appointment ends within the date range specified but starts before `START_DATE`, it will be listed."},{"lineNumber":463,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":464,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":465,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":466,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":467,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 01-04-2018 10-04-2018` +"},{"lineNumber":468,"author":{"gitID":"WJY-norainu"},"content":"Lists all appointments, if any, scheduled between 1st April and 10th April in 2018."},{"lineNumber":469,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":470,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 10-04 20-04` +"},{"lineNumber":471,"author":{"gitID":"WJY-norainu"},"content":"Lists all appointments, if any, scheduled between 10th April and 20th April h in the current year."},{"lineNumber":472,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":473,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 20-04-2018 01-05`"},{"lineNumber":474,"author":{"gitID":"WJY-norainu"},"content":"Lists all appointments, if any, scheduled between 20th April of 2018 and 1st May of the current year."},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d  Editing an appointment `editAppointment` [Since v1.4]"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"WJY-norainu"},"content":"Pre-requisite: you can only edit an appointment when `CalendarPanel` is showing an appointment list."},{"lineNumber":479,"author":{"gitID":"WJY-norainu"},"content":"Refer to \u003c\u003cListing appointments: `listAppointment` [Since v1.5]\u003e\u003e for more information. +"},{"lineNumber":480,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":481,"author":{"gitID":"WJY-norainu"},"content":"Edits the specified appointment and replaces the appointment list with the calendar in"},{"lineNumber":482,"author":{"gitID":"WJY-norainu"},"content":"`CalendarPanel` upon successful execution. +"},{"lineNumber":483,"author":{"gitID":"WJY-norainu"},"content":"Alias: `ea` +"},{"lineNumber":484,"author":{"gitID":"WJY-norainu"},"content":"Format: `editAppointment APPOINTMENT_INDEX [n/APPOINTMENT_NAME] [l/LOCATION] [sd/START_DATE] [st/START_TIME]"},{"lineNumber":485,"author":{"gitID":"WJY-norainu"},"content":"[ed/END_DATE] [et/END_TIME] [c/CELEBRITY_INDEX]... [p/POINT_OF_person_INDEX]...`"},{"lineNumber":486,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":487,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":488,"author":{"gitID":"WJY-norainu"},"content":"* Edits the appointment at the specified `INDEX`."},{"lineNumber":489,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the current appointment list."},{"lineNumber":490,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":491,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":492,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":493,"author":{"gitID":"WJY-norainu"},"content":"* For more information on constraints of the different fields,"},{"lineNumber":494,"author":{"gitID":"WJY-norainu"},"content":"refer to \u003c\u003cAdding an appointment: `addAppointment` [Since v1.2]\u003e\u003e."},{"lineNumber":495,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":496,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":497,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":498,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":499,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment` +"},{"lineNumber":500,"author":{"gitID":"WJY-norainu"},"content":"`editAppointment 2 n/Dentist Appointment l/Orchard Road p/3`"},{"lineNumber":501,"author":{"gitID":"WJY-norainu"},"content":"Edits the 2nd appointment in the appointment list."},{"lineNumber":502,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":503,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 01-04 01-05` +"},{"lineNumber":504,"author":{"gitID":"WJY-norainu"},"content":"`editAppointment 1 st/16:00 et/20:00 sd/23-03-2018 c/1 c/2`"},{"lineNumber":505,"author":{"gitID":"WJY-norainu"},"content":"Edits the 1st appointment in the result of `listAppointment 01-04 01-05`."},{"lineNumber":506,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":507,"author":{"gitID":"WJY-norainu"},"content":"// tag::deleteAppointment[]"},{"lineNumber":508,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d  Deleting an appointment `deleteAppointment` [Since v1.4]"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"WJY-norainu"},"content":"Pre-requisite: you can only edit an appointment when `CalendarPanel` is showing an appointment list."},{"lineNumber":511,"author":{"gitID":"WJY-norainu"},"content":"Refer to \u003c\u003cListing appointments: `listAppointment` [Since v1.5]\u003e\u003e for more information. +"},{"lineNumber":512,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":513,"author":{"gitID":"WJY-norainu"},"content":"Deletes the specified appointment. +"},{"lineNumber":514,"author":{"gitID":"WJY-norainu"},"content":"Alias: `da` +"},{"lineNumber":515,"author":{"gitID":"WJY-norainu"},"content":"Format: `deleteAppointment INDEX`"},{"lineNumber":516,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":517,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":518,"author":{"gitID":"WJY-norainu"},"content":"* Deletes the appointment at the specified `INDEX`."},{"lineNumber":519,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the current appointment list."},{"lineNumber":520,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` index *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":521,"author":{"gitID":"WJY-norainu"},"content":"* If there is no more appointment in the list after deletion, `CalendarPanel` will switch back from the appointment list"},{"lineNumber":522,"author":{"gitID":"WJY-norainu"},"content":"to the calendar."},{"lineNumber":523,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment` +"},{"lineNumber":528,"author":{"gitID":"WJY-norainu"},"content":"`deleteAppointment 2` +"},{"lineNumber":529,"author":{"gitID":"WJY-norainu"},"content":"Deletes the 2nd appointment in the appointment list."},{"lineNumber":530,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":531,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 01-04 01-05` +"},{"lineNumber":532,"author":{"gitID":"WJY-norainu"},"content":"`deleteAppointment 1` +"},{"lineNumber":533,"author":{"gitID":"WJY-norainu"},"content":"Deletes the 1st appointment in the result of `listAppointment 01-04 01-05`."},{"lineNumber":534,"author":{"gitID":"WJY-norainu"},"content":"// end::deleteAppointment[]"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Viewing an appointment: `viewAppointment` [Since v1.4]"},{"lineNumber":537,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":538,"author":{"gitID":"WJY-norainu"},"content":"Pre-requisite: you can only edit an appointment when `CalendarPanel` is showing an appointment list."},{"lineNumber":539,"author":{"gitID":"WJY-norainu"},"content":"Refer to \u003c\u003cListing appointments: `listAppointment` [Since v1.5]\u003e\u003e for more information. +"},{"lineNumber":540,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":541,"author":{"gitID":"WJY-norainu"},"content":"Views the specified appointment."},{"lineNumber":542,"author":{"gitID":"WJY-norainu"},"content":"`ResultDisplay` will show details of the appointment and `MapPanel` will show the location, if any, of the appointment"},{"lineNumber":543,"author":{"gitID":"WJY-norainu"},"content":"on Google Map. +"},{"lineNumber":544,"author":{"gitID":"-"},"content":"Alias: `va` +"},{"lineNumber":545,"author":{"gitID":"-"},"content":"Format: `viewAppointment INDEX`"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"****"},{"lineNumber":548,"author":{"gitID":"WJY-norainu"},"content":"* Views the appointment at the specified `INDEX`."},{"lineNumber":549,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the current appointment list."},{"lineNumber":550,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` index *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":551,"author":{"gitID":"WJY-norainu"},"content":"* If the specified appointment has an invalid location, Google Map will remove any existing marker or route displayed."},{"lineNumber":552,"author":{"gitID":"-"},"content":"****"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment` +"},{"lineNumber":557,"author":{"gitID":"WJY-norainu"},"content":"`viewAppointment 3` +"},{"lineNumber":558,"author":{"gitID":"WJY-norainu"},"content":"Shows the details of the 3rd appointment in the appointment list."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 22-04-2018 01-05-2018` +"},{"lineNumber":561,"author":{"gitID":"WJY-norainu"},"content":"`viewAppointment 1` +"},{"lineNumber":562,"author":{"gitID":"WJY-norainu"},"content":"Shows the details of the 1st appointment in the result of `listAppointment 01-04-2018 01-05-2018`. +"},{"lineNumber":563,"author":{"gitID":"WJY-norainu"},"content":"The figure below shows a possible state of CelebManager after executing the commands in the second example above. +"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"WJY-norainu"},"content":".State of CelebManager after executing `viewAppointment 1`"},{"lineNumber":566,"author":{"gitID":"-"},"content":"image::viewAppointmentInput.png[width\u003d\"\"]"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"WJY-norainu"},"content":"The red boxes are used to highlight the two panels that display the specified appointment\u0027s information. These red boxes"},{"lineNumber":569,"author":{"gitID":"WJY-norainu"},"content":"will not appear in your CelebManager. Note that the marker in `MapPanel` now moves to HollyWood - the location of the"},{"lineNumber":570,"author":{"gitID":"WJY-norainu"},"content":"appointment, and `ResultDisplay` shows texts that contain the appointment\u0027s details."},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Features"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"WJY-norainu"},"content":"Calendar features allow you to interact with the calendar displayed in `CalendarPanel` located at the bottom right of"},{"lineNumber":577,"author":{"gitID":"WJY-norainu"},"content":"CelebManager. The figure below shows the default state of `CalendarPanel`."},{"lineNumber":578,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":579,"author":{"gitID":"WJY-norainu"},"content":".Default state of `CalendarPanel`"},{"lineNumber":580,"author":{"gitID":"WJY-norainu"},"content":"image::ViewCalendarByDay.jpg[width\u003d\"\"]"},{"lineNumber":581,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":582,"author":{"gitID":"WJY-norainu"},"content":"The date on the top right corner can be different as it should be the current date."},{"lineNumber":583,"author":{"gitID":"WJY-norainu"},"content":"There can be a red line that runs across the calendar. That line indicates the current time."},{"lineNumber":584,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":585,"author":{"gitID":"WJY-norainu"},"content":"In \u003c\u003cListing appointments: `listAppointment` [Since v1.5]\u003e\u003e, `listAppointment` command is introduced to replace the calendar in `CalendarPanel` with an"},{"lineNumber":586,"author":{"gitID":"WJY-norainu"},"content":"appointment list. To bring back the calendar, you can use any of the commands under this section."},{"lineNumber":587,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":588,"author":{"gitID":"WJY-norainu"},"content":"// tag::view-calendar[]"},{"lineNumber":589,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Displaying a celebrity\u0027s calendar: `viewCalendar` [Since v1.3]"},{"lineNumber":590,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":591,"author":{"gitID":"WJY-norainu"},"content":"Changes to view the calendar of the specified celebrity. +"},{"lineNumber":592,"author":{"gitID":"WJY-norainu"},"content":"Alias: `vc` +"},{"lineNumber":593,"author":{"gitID":"WJY-norainu"},"content":"Format: `viewCalendar INDEX`"},{"lineNumber":594,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":595,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":596,"author":{"gitID":"WJY-norainu"},"content":"* Changes to view the calendar of the celebrity at the specified `INDEX`."},{"lineNumber":597,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the last shown list of persons."},{"lineNumber":598,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":599,"author":{"gitID":"WJY-norainu"},"content":"* The person at `INDEX` *must be* a celebrity."},{"lineNumber":600,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":601,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":602,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":603,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":604,"author":{"gitID":"WJY-norainu"},"content":"* `viewCalendar 1` +"},{"lineNumber":605,"author":{"gitID":"WJY-norainu"},"content":"Changes to view the calendar of the 1st person in the last shown person list, if he/she is a celebrity."},{"lineNumber":606,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":607,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Displaying the combined calendar: `viewCombinedCalendar` [Since v1.3]"},{"lineNumber":608,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":609,"author":{"gitID":"WJY-norainu"},"content":"Changes to shows all celebrities\u0027 appointments in one calendar. +"},{"lineNumber":610,"author":{"gitID":"WJY-norainu"},"content":"Alias: `vcc` +"},{"lineNumber":611,"author":{"gitID":"WJY-norainu"},"content":"Format: `viewCombinedCalendar`"},{"lineNumber":612,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":613,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Changing the calendar view type: `viewCalendarBy` [Since v1.3]"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"WJY-norainu"},"content":"Changes the calendar view to a different one specified by the user. +"},{"lineNumber":616,"author":{"gitID":"WJY-norainu"},"content":"Alias: `vcb` +"},{"lineNumber":617,"author":{"gitID":"WJY-norainu"},"content":"Format: `viewCalendarBy VIEW`"},{"lineNumber":618,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":619,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":620,"author":{"gitID":"WJY-norainu"},"content":"* Changes the calendar view to the specified `VIEW`."},{"lineNumber":621,"author":{"gitID":"WJY-norainu"},"content":"* `VIEW` *must be* `day`, `week`, or `month`."},{"lineNumber":622,"author":{"gitID":"WJY-norainu"},"content":"* `VIEW` is case insensitive, e.g. you can type `viewCalendarBy WeEK` to change to view calendar by week."},{"lineNumber":623,"author":{"gitID":"-"},"content":"****"},{"lineNumber":624,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":625,"author":{"gitID":"WJY-norainu"},"content":"[IMPORTANT]"},{"lineNumber":626,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":627,"author":{"gitID":"WJY-norainu"},"content":"You may notice that in `month` view, the dates on the calendar are clickable. However, this feature will only be integrated"},{"lineNumber":628,"author":{"gitID":"WJY-norainu"},"content":"into our `v2.0` product and hence you should not click on those dates. If you want to view a certain date\u0027s appointments,"},{"lineNumber":629,"author":{"gitID":"WJY-norainu"},"content":"use `viewDate` command. Refer to \u003c\u003cChanging the base date of calendar: `viewDate` [Since v1.5]\u003e\u003e for more information."},{"lineNumber":630,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":631,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":632,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":633,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":634,"author":{"gitID":"WJY-norainu"},"content":"* `viewCalendarBy day` +"},{"lineNumber":635,"author":{"gitID":"WJY-norainu"},"content":"Changes the calendar view to `day` view that is similar to the figure below."},{"lineNumber":636,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":637,"author":{"gitID":"WJY-norainu"},"content":".State of `CalendarPanel` after executing `viewCalendarBy day`"},{"lineNumber":638,"author":{"gitID":"WJY-norainu"},"content":"image::ViewCalendarByDay.jpg[width\u003d\"\"]"},{"lineNumber":639,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":640,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":641,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":642,"author":{"gitID":"WJY-norainu"},"content":"CelebManger by default shows calendar in `day` view whenever it gets launched. Hence you need to first change to other"},{"lineNumber":643,"author":{"gitID":"WJY-norainu"},"content":"calendar view before using `viewCalendarBy day`."},{"lineNumber":644,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":645,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":646,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"* `viewCalendarBy week` +"},{"lineNumber":648,"author":{"gitID":"WJY-norainu"},"content":"Changes the calendar view to `week` view that is similar to the figure below."},{"lineNumber":649,"author":{"gitID":"WJY-norainu"},"content":"The column highlighted in red indicates the current day."},{"lineNumber":650,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":651,"author":{"gitID":"WJY-norainu"},"content":".State of `CalendarPanel` after executing `viewCalendarBy week`"},{"lineNumber":652,"author":{"gitID":"WJY-norainu"},"content":"image::ViewCalendarByWeek.jpg[width\u003d\"\"]"},{"lineNumber":653,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":654,"author":{"gitID":"WJY-norainu"},"content":"* `viewCalendarBy month` +"},{"lineNumber":655,"author":{"gitID":"WJY-norainu"},"content":"Changes the calendar view to `month` view that is similar to the figure below."},{"lineNumber":656,"author":{"gitID":"WJY-norainu"},"content":"The box highlighted in red indicates the current day."},{"lineNumber":657,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":658,"author":{"gitID":"WJY-norainu"},"content":".State of `CalendarPanel` after executing `viewCalendarBy month`"},{"lineNumber":659,"author":{"gitID":"WJY-norainu"},"content":"image::ViewCalendarByMonth.jpg[width\u003d\"\"]"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Displaying a specific date\u0027s calendar: `viewDate` [Since v1.5]"},{"lineNumber":662,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":663,"author":{"gitID":"WJY-norainu"},"content":"Changes the base date of calendar and displays the calendar by day for the specified `date`."},{"lineNumber":664,"author":{"gitID":"WJY-norainu"},"content":"The base date is different from the current date. It is a date which `viewCalendarBy` is based on. Refer to the tip"},{"lineNumber":665,"author":{"gitID":"WJY-norainu"},"content":"below examples for more information. +"},{"lineNumber":666,"author":{"gitID":"WJY-norainu"},"content":"Alias: `vd` +"},{"lineNumber":667,"author":{"gitID":"WJY-norainu"},"content":"Format: `viewDate [DATE]`"},{"lineNumber":668,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":669,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":670,"author":{"gitID":"WJY-norainu"},"content":"* Changes base date to the specified `date`."},{"lineNumber":671,"author":{"gitID":"WJY-norainu"},"content":"* When no date is given, it takes on the value of current date."},{"lineNumber":672,"author":{"gitID":"WJY-norainu"},"content":"* `DATE` *must be in the format of* `DD-MM-YYYY` or `DD-MM`. For the latter, year will be set to current year."},{"lineNumber":673,"author":{"gitID":"WJY-norainu"},"content":"* `DATE` *must be* a valid date, eg, `01-13-2018` and `30-02` are not valid dates."},{"lineNumber":674,"author":{"gitID":"WJY-norainu"},"content":"* This command can take slightly longer to load than other view-related commands."},{"lineNumber":675,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":676,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":677,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":678,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":679,"author":{"gitID":"WJY-norainu"},"content":"* `viewDate 03-05-2018` +"},{"lineNumber":680,"author":{"gitID":"WJY-norainu"},"content":"Changes the base date of calendar to `03-05-2018` and displays the calendar by day for `03-05-2018` as shown below."},{"lineNumber":681,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":682,"author":{"gitID":"WJY-norainu"},"content":".State of `CalendarPanel` after executing `viewDate 03-05-2018`"},{"lineNumber":683,"author":{"gitID":"WJY-norainu"},"content":"image::ViewDate03-05-2018.jpg[width\u003d\"\"]"},{"lineNumber":684,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":685,"author":{"gitID":"WJY-norainu"},"content":"* `viewDate` +"},{"lineNumber":686,"author":{"gitID":"WJY-norainu"},"content":"Changes the base date of calendar to current date and displays the calendar by day for current date. +"},{"lineNumber":687,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":688,"author":{"gitID":"WJY-norainu"},"content":"[TIP]"},{"lineNumber":689,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":690,"author":{"gitID":"WJY-norainu"},"content":"Change in base date allows you to view calendar for different weeks and months."},{"lineNumber":691,"author":{"gitID":"WJY-norainu"},"content":"For example, after `viewDate 03-05-2018`, you can type `viewCalendarBy week` - which will show you the"},{"lineNumber":692,"author":{"gitID":"WJY-norainu"},"content":"calendar for the first week of May of 2018, or `viewCalendarBy month` - which will show you the calendar"},{"lineNumber":693,"author":{"gitID":"WJY-norainu"},"content":"for May of 2018."},{"lineNumber":694,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":695,"author":{"gitID":"WJY-norainu"},"content":"// end::view-calendar[]"},{"lineNumber":696,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Map Features"},{"lineNumber":700,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":701,"author":{"gitID":"WJY-norainu"},"content":"Map features allow you to interact with Google Map in `MapPanel` located at the bottom left of CelebManager."},{"lineNumber":702,"author":{"gitID":"WJY-norainu"},"content":"The figure below shows the default state of `MapPanel`."},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"WJY-norainu"},"content":".Default state of `MapPanel`"},{"lineNumber":705,"author":{"gitID":"-"},"content":"image::BeforeInputMap.png[width\u003d\"400\"]"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"WJY-norainu"},"content":"Whenever a new valid or invalid command belonging to map features is executed, any existing route or location marker will be removed."},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Click inside the map [Since v1.3]"},{"lineNumber":710,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":711,"author":{"gitID":"WJY-norainu"},"content":"Google Map in `MapPanel` supports mouse clicking. You can: +"},{"lineNumber":712,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":713,"author":{"gitID":"WJY-norainu"},"content":"* Click the Map or Satellite button to toggle between road map or satellite view."},{"lineNumber":714,"author":{"gitID":"WJY-norainu"},"content":"* Click the `+` to zoom in and `-` button to zoom out."},{"lineNumber":715,"author":{"gitID":"WJY-norainu"},"content":"* Click, hold and move the mouse cursor to shift the current view of the map."},{"lineNumber":716,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":719,"author":{"gitID":"WJY-norainu"},"content":"Do not click the `Google` logo or `Terms of Use` button."},{"lineNumber":720,"author":{"gitID":"WJY-norainu"},"content":"Clicking these two things triggers a bug which we plan to fix in `v2.0`."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Estimate route on map : `estimateRoute` [Since v1.3]"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"WJY-norainu"},"content":"Shows the estimated route on Google map in `MapPanel` and displays the estimated distance and time of travel in `ResultDisplay`. +"},{"lineNumber":725,"author":{"gitID":"-"},"content":"Alias: `er` +"},{"lineNumber":726,"author":{"gitID":"WJY-norainu"},"content":"Format: `estimateRoute sma/START_ADDRESS ema/END_ADDRESS`"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"****"},{"lineNumber":729,"author":{"gitID":"WJY-norainu"},"content":"* `START_ADDRESS` and `END_ADDRESS` should be postal code, road name, location name or building name."},{"lineNumber":730,"author":{"gitID":"WJY-norainu"},"content":"* `END_ADDRESS` must be reachable from `START_ADDRESS` by driving."},{"lineNumber":731,"author":{"gitID":"-"},"content":"****"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"* `estimateRoute sma/Punggol ema/NUS` +"},{"lineNumber":736,"author":{"gitID":"WJY-norainu"},"content":"Updates the map by re-centering to the new route of `Punggol` and `NUS` as shown in the figure below."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"WJY-norainu"},"content":".State of `MapPanel` after executing `estimateRoute sma/Punggol ema/NUS`"},{"lineNumber":739,"author":{"gitID":"-"},"content":"image::AfterEstimateRouteInput.png[width\u003d\"400\"]"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Show location on map : `showLocation` [Since v1.2]"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"WJY-norainu"},"content":"Shows the specified location by marking the latitude and longitude with a location marker on Google Map. +"},{"lineNumber":744,"author":{"gitID":"-"},"content":"Alias: `sl` +"},{"lineNumber":745,"author":{"gitID":"WJY-norainu"},"content":"Format: `showLocation ma/ADDRESS`"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"****"},{"lineNumber":748,"author":{"gitID":"WJY-norainu"},"content":"* `ADDRESS` should be a postal code, road name, location name or building name."},{"lineNumber":749,"author":{"gitID":"-"},"content":"****"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"* `showLocation ma/Punggol` +"},{"lineNumber":754,"author":{"gitID":"WJY-norainu"},"content":"Updates the map by re-centering to the new location `Punggol` and adds a location marker to it as shown below."},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"WJY-norainu"},"content":".State of `MapPanel` after executing `showLocation ma/Punggol`"},{"lineNumber":757,"author":{"gitID":"-"},"content":"image::AfterShowLocationInput.png[width\u003d\"400\"]"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ - Frequently Asked Questions"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":762,"author":{"gitID":"WJY-norainu"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the"},{"lineNumber":763,"author":{"gitID":"WJY-norainu"},"content":"data of your previous CelebManager folder."},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"The following are summarized versions of all the commands introduced above displayed in alphabetical order. The commands"},{"lineNumber":768,"author":{"gitID":"WJY-norainu"},"content":"are displayed with their respective command formats and examples highlighting their usage. An optional field is enclosed"},{"lineNumber":769,"author":{"gitID":"-"},"content":"within a pair of `[]`. A field that can be repeatedly entered with different input values is followed by `...`."},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"WJY-norainu"},"content":"[width\u003d\"90%\",cols\u003d\"10%,\u003c35%,\u003c55%\",options\u003d\"header\",]"},{"lineNumber":772,"author":{"gitID":"WJY-norainu"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":773,"author":{"gitID":"WJY-norainu"},"content":"|Function |Command Format |Example"},{"lineNumber":774,"author":{"gitID":"WJY-norainu"},"content":"|*Add Person* |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` |`add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":775,"author":{"gitID":"WJY-norainu"},"content":"|*Add Appointment* |`addAppointment n/APPOINTMENT_NAME [l/LOCATION] [sd/START_DATE] [st/START_TIME] [ed/END_DATE] [et/END_TIME] [c/CELEBRITY_INDEX]... [p/POINT_OF_person_INDEX]...` |`addAppointment n/Oscars 2018 l/Hollywood sd/23-03-2018 st/14:00 ed/23-03-2018 et/20:00 c/1 c/2 p/3 p/4`"},{"lineNumber":776,"author":{"gitID":"WJY-norainu"},"content":"|*Clear* |`clear` |"},{"lineNumber":777,"author":{"gitID":"WJY-norainu"},"content":"|*Delete* |`delete INDEX` |`delete 3`"},{"lineNumber":778,"author":{"gitID":"WJY-norainu"},"content":"|*Delete Appointment* |`deleteAppointment INDEX` |`deleteAppointment 1`"},{"lineNumber":779,"author":{"gitID":"WJY-norainu"},"content":"|*Edit* |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` |`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":780,"author":{"gitID":"WJY-norainu"},"content":"|*Edit Appointment* |`editAppointment APPOINTMENT_INDEX [n/APPOINTMENT_NAME] [l/LOCATION] [sd/START_DATE] [st/START_TIME] [ed/END_DATE] [et/END_TIME] [c/CELEBRITY_INDEX]... [p/POINT_OF_person_INDEX]...` |`editAppointment n/Dentist Appointment l/Clementi Road st/15:00 et/16:00 c/3`"},{"lineNumber":781,"author":{"gitID":"WJY-norainu"},"content":"|*Estimate Route* |`estimateRoute sma/LOCATION ema/LOCATION` |`estimateRoute sma/Punggol ema/NUS`"},{"lineNumber":782,"author":{"gitID":"WJY-norainu"},"content":"|*Find* |`find KEYWORD [MORE_KEYWORDS]` |`find James Jake`"},{"lineNumber":783,"author":{"gitID":"WJY-norainu"},"content":"|*Help* |`help` |"},{"lineNumber":784,"author":{"gitID":"WJY-norainu"},"content":"|*History* |`history` |"},{"lineNumber":785,"author":{"gitID":"WJY-norainu"},"content":"|*List* |`list` |"},{"lineNumber":786,"author":{"gitID":"WJY-norainu"},"content":"|*List Appointments* |`listAppointment [START_DATE END_DATE]` |`listAppointment 01-04-2018 01-05-2018`"},{"lineNumber":787,"author":{"gitID":"WJY-norainu"},"content":"|*Redo* |`redo` |"},{"lineNumber":788,"author":{"gitID":"WJY-norainu"},"content":"|*Remove Tag* |`removeTag TAG` |`removeTag friends`"},{"lineNumber":789,"author":{"gitID":"WJY-norainu"},"content":"|*Select* |`select INDEX` |`select 2`"},{"lineNumber":790,"author":{"gitID":"WJY-norainu"},"content":"|*Show Location* |`showLocation ma/LOCATION` |`showLocation ma/Punggol`"},{"lineNumber":791,"author":{"gitID":"WJY-norainu"},"content":"|*Undo* |`undo` |"},{"lineNumber":792,"author":{"gitID":"WJY-norainu"},"content":"|*View Appointment* |`viewAppointment INDEX` |`viewAppointment 1`"},{"lineNumber":793,"author":{"gitID":"WJY-norainu"},"content":"|*View Calendar* |`viewCalendar INDEX` |`viewCalendar 1`"},{"lineNumber":794,"author":{"gitID":"WJY-norainu"},"content":"|*View Calendar By* |`viewCalendarBy VIEW` |`viewCalendarBy week`"},{"lineNumber":795,"author":{"gitID":"WJY-norainu"},"content":"|*View Combined Calendar* |`viewCombinedCalendar` |"},{"lineNumber":796,"author":{"gitID":"WJY-norainu"},"content":"|*View Date* |`viewDate [DATE]` |`viewDate 03-05-2018`"}],"authorContributionMap":{"WJY-norainu":502,"-":294}},{"path":"docs/team/WJY-norainu.adoc","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"\u003d Wang Jinyi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d PROJECT: CelebManager"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"---"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"CelebManager is a software application that allows celebrity managers to maintain schedules of celebrities under them."},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"It is optimized for users who prefer to work with a Command Line Interface (CLI) while still having a"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"Graphical User Interface (GUI) for visual feedback."},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"In this software, the users will be able to:"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":".   Manage contacts"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":".\tManage appointments"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":".\tManage calendars"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":".\tPlan efficient routes"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"This project portfolio summarises my contribution towards the development of CelebManager."},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"* *Major enhancement*: added *support for interacting with the calendar using CLI*"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"** What it does: This enhancement includes commands: `viewCalendar`, `viewCombinedCalendar`, `viewCalendarBy`, and"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"`viewDate`. With these commands, users can view different celebrities\u0027 calendars, a joint calendar of all celebrities,"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"a day\u0027s or week\u0027s or month\u0027s appointments, and change base date of the calendar."},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"** Justification: This feature improves the product significantly because it allows users to interact with the"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"calendar inside CeleManager and makes the calendar a powerful visualisation tool to view timings of appointments."},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"** Highlights: The implementation requires comprehension of CalendarFX\u0027s API and experimenting with the API to"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"understand which methods to be used to update the calendar UI. Also, additional variables were created"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"to keep track of the current calendar\u0027s status to preserve the original ways of interaction between different"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"components."},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"** Credits: http://dlsc.com/wp-content/html/calendarfx/apidocs/index.html[CalendarFX]"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"* *Major enhancement*: added *the ability to delete an appointment*"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"** What it does: This enhancement refers to the command, `deleteAppointment`. It allows users to delete an existing"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"appointment."},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"** Justification: This feature improves the product significantly because users can delete a specified appointment to"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"get rid of appointments that are cancelled or no longer needed."},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"** Highlights: This enhancement requires an understanding of how appointments are stored and can be removed from the"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"calendar visually."},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"** Credits: http://dlsc.com/wp-content/html/calendarfx/apidocs/index.html[CalendarFX]"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"* *Minor enhancement*: added *the ability to list appointments within a given date range*"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"* *Minor enhancement*: added *the ability to remove a tag from all contacts*"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/functional/WJY-norainu.md[Functional code]] [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/test/WJY-norainu.md[Test code]]"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"* *Other contributions*:"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"** Enhancements to existing features:"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"*** Added support for deleting celebrity using the existing command `delete`. This enhancement ensures the removal"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"of the deleted celebrity from the appointments he/she is attending, as well as the deletion of his/her calendar."},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"(Pull request: https://github.com/CS2103JAN2018-W14-B4/main/pull/119[#119])"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"*** Created TypicalCelebrities, modified getTypicalPersons to facilitate testing of new features"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"(Pull request: https://github.com/CS2103JAN2018-W14-B4/main/pull/121[#121])"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"** Documentation:"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"*** Contributed to the content of User Guide and Developer Guide: +"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/95[#95],"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/99[#99],"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/140[#140],"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/175[#175],"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/179[#179],"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/188[#188]"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"*** Collated codes for `v1.4` and `v1.5` release"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"** Community:"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"*** Reported bugs and suggestions for other teams in the class"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"(examples:  https://github.com/CS2103JAN2018-T09-B3/main/issues/195[#195])"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"|\u003d\u003d\u003d"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"|_Given below are sections I contributed to the User Guide."},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"They showcase my ability to write documentation targeting end-users._"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"|\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Displaying a celebrity\u0027s calendar: `viewCalendar` [Since v1.3]"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"Changes to view the calendar of the specified celebrity. +"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"Alias: `vc` +"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"Format: `viewCalendar INDEX`"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"* Changes to view the calendar of the celebrity at the specified `INDEX`."},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the last shown list of persons."},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"* The person at `INDEX` *must be* a celebrity."},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"* `viewCalendar 1` +"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"Changes to view the calendar of the 1st person in the last shown person list, if he/she is a celebrity."},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Displaying a specific date\u0027s calendar: `viewDate` [Since v1.5]"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"Changes the base date of calendar and displays the calendar by day for the specified `date`."},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"The base date is different from the current date. It is a date which `viewCalendarBy` is based on. Refer to the tip"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"below examples for more information. +"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"Alias: `vd` +"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"Format: `viewDate [DATE]`"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"* Changes base date to the specified `date`."},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"* When no date is given, it takes on the value of current date."},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"* `DATE` *must be in the format of* `DD-MM-YYYY` or `DD-MM`. For the latter, year will be set to current year."},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"* `DATE` *must be* a valid date, eg, `01-13-2018` and `30-02` are not valid dates."},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"* This command can take slightly longer to load than other view-related commands."},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"* `viewDate 03-05-2018` +"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"Changes the base date of calendar to `03-05-2018` and displays the calendar by day for `03-05-2018` as shown below."},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":".State of `CalendarPanel` after executing `viewDate 03-05-2018`"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"image::ViewDate03-05-2018.jpg[width\u003d\"500\"]"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"* `viewDate` +"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"Changes the base date of calendar to current date and displays the calendar by day for current date. +"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"[TIP]"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"Change in base date allows you to view calendar for different weeks and months."},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"For example, after `viewDate 03-05-2018`, you can type `viewCalendarBy week` - which will show you the"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"calendar for the first week of May of 2018, or `viewCalendarBy month` - which will show you the calendar"},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"for May of 2018."},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d  Deleting an appointment `deleteAppointment` [Since v1.4]"},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"Pre-requisite: you can only edit an appointment when `CalendarPanel` is showing an appointment list."},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"Refer to User Guide - Listing appointments: `listAppointment` [Since v1.5] for more information. +"},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"Deletes the specified appointment. +"},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":"Alias: `da` +"},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":"Format: `deleteAppointment INDEX`"},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":"* Deletes the appointment at the specified `INDEX`."},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` refers to the index number shown in the current appointment list."},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":"* `INDEX` index *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":"* If there is no more appointment in the list after deletion, `CalendarPanel` will switch back from the appointment list"},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":"to the calendar."},{"lineNumber":150,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment` +"},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"`deleteAppointment 2` +"},{"lineNumber":156,"author":{"gitID":"WJY-norainu"},"content":"Deletes the 2nd appointment in the appointment list."},{"lineNumber":157,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":158,"author":{"gitID":"WJY-norainu"},"content":"* `listAppointment 01-04 01-05` +"},{"lineNumber":159,"author":{"gitID":"WJY-norainu"},"content":"`deleteAppointment 1` +"},{"lineNumber":160,"author":{"gitID":"WJY-norainu"},"content":"Deletes the 1st appointment in the result of `listAppointment 01-04 01-05`."},{"lineNumber":161,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":162,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Removing a tag : `removeTag` [Since v1.2]"},{"lineNumber":163,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":164,"author":{"gitID":"WJY-norainu"},"content":"Removes the specified tag from every person in CelebManager and shows the number of person(s) affected by this"},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":"operation. +"},{"lineNumber":166,"author":{"gitID":"WJY-norainu"},"content":"Alias: `rt` +"},{"lineNumber":167,"author":{"gitID":"WJY-norainu"},"content":"Format: `removeTag TAG`"},{"lineNumber":168,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":169,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":170,"author":{"gitID":"WJY-norainu"},"content":"* Removes the tag from every person in the full contact list (not necessarily the last shown list) in CelebManager."},{"lineNumber":171,"author":{"gitID":"WJY-norainu"},"content":"* `TAG` removed *must not be* `celebrity`."},{"lineNumber":172,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":173,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":176,"author":{"gitID":"WJY-norainu"},"content":"* `removeTag friends` +"},{"lineNumber":177,"author":{"gitID":"WJY-norainu"},"content":"Removes the tag, `friends` from every person and shows the number of person(s) affected. +"},{"lineNumber":178,"author":{"gitID":"WJY-norainu"},"content":"Suppose `PersonListPanel` looks like the one on the left below before execution. +"},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"After execution, `PersonListPanel` should get updated to the one on the right below."},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":"[.text-center]"},{"lineNumber":182,"author":{"gitID":"WJY-norainu"},"content":".State of `PersonListPanel` before (left) and after (right) executing `removeTag friends`"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":"image::removeTag.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":185,"author":{"gitID":"WJY-norainu"},"content":"* `removeTag owesMoney` +"},{"lineNumber":186,"author":{"gitID":"WJY-norainu"},"content":"Removes the tag, `owesMoney` from every person and shows the number of person(s) affected."},{"lineNumber":187,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":188,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":189,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":190,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":191,"author":{"gitID":"WJY-norainu"},"content":"|\u003d\u003d\u003d"},{"lineNumber":192,"author":{"gitID":"WJY-norainu"},"content":"|_Given below are sections I contributed to the Developer Guide."},{"lineNumber":193,"author":{"gitID":"WJY-norainu"},"content":"They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":194,"author":{"gitID":"WJY-norainu"},"content":"|\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":196,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d DeleteAppointment Feature"},{"lineNumber":197,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":"This feature allows the user to delete appointments."},{"lineNumber":199,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":200,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":201,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":202,"author":{"gitID":"WJY-norainu"},"content":"The mechanism to delete an appointment is facilitated by the `DeleteAppointmentCommand` class, which resides inside `Logic`,"},{"lineNumber":203,"author":{"gitID":"WJY-norainu"},"content":"and `deleteAppointment` method in `Model`. The command requires the user to put in an index to refer to the appointment"},{"lineNumber":204,"author":{"gitID":"WJY-norainu"},"content":"to be deleted. This index is taken from the currently displayed appointment list. As such, deletion of an appointment"},{"lineNumber":205,"author":{"gitID":"WJY-norainu"},"content":"can only be done when CelebManager is showing an appointment list."},{"lineNumber":206,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":207,"author":{"gitID":"WJY-norainu"},"content":"`DeleteAppointmentCommand` class is responsible for checking whether an appointment list is currently being shown."},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"If so, `DeleteAppointmentCommand` class will call `deleteAppointment` method. Refer to the code snippet below to see"},{"lineNumber":209,"author":{"gitID":"WJY-norainu"},"content":"how this method deletes the specified appointment:"},{"lineNumber":210,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":211,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":212,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":213,"author":{"gitID":"WJY-norainu"},"content":"public class DeleteAppointmentCommand extends Command {"},{"lineNumber":214,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":215,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":216,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY \u003d \"\\nAppointment list becomes empty, \""},{"lineNumber":217,"author":{"gitID":"WJY-norainu"},"content":"            + \"Switching back to calendar view by day\\n\""},{"lineNumber":218,"author":{"gitID":"WJY-norainu"},"content":"            + \"Currently showing %1$s calendar\";"},{"lineNumber":219,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":220,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":221,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":223,"author":{"gitID":"WJY-norainu"},"content":"        // throw exception if the user is not currently viewing an appointment list"},{"lineNumber":224,"author":{"gitID":"WJY-norainu"},"content":"        if (!model.getIsListingAppointments()) {"},{"lineNumber":225,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(Messages.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":226,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"WJY-norainu"},"content":"        apptToDelete \u003d model.deleteAppointment(targetIndex.getZeroBased());"},{"lineNumber":228,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cAppointment\u003e currentAppointmentList \u003d model.getAppointmentList();"},{"lineNumber":229,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":230,"author":{"gitID":"WJY-norainu"},"content":"        // if the list becomes empty, switch back to combined calendar day view"},{"lineNumber":231,"author":{"gitID":"WJY-norainu"},"content":"        if (currentAppointmentList.size() \u003c 1) {"},{"lineNumber":232,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(DAY_VIEW_PAGE));"},{"lineNumber":233,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":234,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":235,"author":{"gitID":"WJY-norainu"},"content":"            Celebrity currentCalendarOwner \u003d model.getCurrentCelebCalendarOwner();"},{"lineNumber":236,"author":{"gitID":"WJY-norainu"},"content":"            if (currentCalendarOwner \u003d\u003d null) {"},{"lineNumber":237,"author":{"gitID":"WJY-norainu"},"content":"                return new CommandResult("},{"lineNumber":238,"author":{"gitID":"WJY-norainu"},"content":"                        String.format(MESSAGE_SUCCESS, apptToDelete.getTitle())"},{"lineNumber":239,"author":{"gitID":"WJY-norainu"},"content":"                                + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY,"},{"lineNumber":240,"author":{"gitID":"WJY-norainu"},"content":"                                \"combined\"));"},{"lineNumber":241,"author":{"gitID":"WJY-norainu"},"content":"            } else {"},{"lineNumber":242,"author":{"gitID":"WJY-norainu"},"content":"                return new CommandResult("},{"lineNumber":243,"author":{"gitID":"WJY-norainu"},"content":"                        String.format(MESSAGE_SUCCESS, apptToDelete.getTitle())"},{"lineNumber":244,"author":{"gitID":"WJY-norainu"},"content":"                                + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY,"},{"lineNumber":245,"author":{"gitID":"WJY-norainu"},"content":"                                currentCalendarOwner.getName().toString() + \"\u0027s\"));"},{"lineNumber":246,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":249,"author":{"gitID":"WJY-norainu"},"content":"        // if the list is not empty yet, update appointment list view"},{"lineNumber":250,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ShowAppointmentListEvent(currentAppointmentList));"},{"lineNumber":251,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":252,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, apptToDelete.getTitle()));"},{"lineNumber":253,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":255,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":256,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":257,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":258,"author":{"gitID":"WJY-norainu"},"content":"From the snippet above, it can be seen that `DeleteAppointmentCommand` changes `CalendarPanel` back to combined"},{"lineNumber":259,"author":{"gitID":"WJY-norainu"},"content":"calendar view if there is no more appointment in the appointment list after deletion. Otherwise, the appointment list"},{"lineNumber":260,"author":{"gitID":"WJY-norainu"},"content":"with the specified appointment deleted will be shown."},{"lineNumber":261,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":262,"author":{"gitID":"WJY-norainu"},"content":"The snippet code below shows the implementation of `deleteAppointment` in `Model`:"},{"lineNumber":263,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":264,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":265,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":266,"author":{"gitID":"WJY-norainu"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":267,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":268,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"WJY-norainu"},"content":"    public Appointment deleteAppointment(int index) throws IndexOutOfBoundsException {"},{"lineNumber":270,"author":{"gitID":"WJY-norainu"},"content":"        Appointment apptToDelete \u003d getChosenAppointment(index);"},{"lineNumber":271,"author":{"gitID":"WJY-norainu"},"content":"        apptToDelete.removeAppointment();"},{"lineNumber":272,"author":{"gitID":"WJY-norainu"},"content":"        removeAppointmentFromInternalList(index);"},{"lineNumber":273,"author":{"gitID":"WJY-norainu"},"content":"        currentlyDisplayedAppointments.remove(apptToDelete);"},{"lineNumber":274,"author":{"gitID":"WJY-norainu"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":275,"author":{"gitID":"WJY-norainu"},"content":"        return apptToDelete;"},{"lineNumber":276,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":278,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":279,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":280,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":281,"author":{"gitID":"WJY-norainu"},"content":"The method `removeAppointment` is in `Appointment` class, and removes all child entries of an appointment. For example,"},{"lineNumber":282,"author":{"gitID":"WJY-norainu"},"content":"an appointment may have two celebrities attending. Then this appointment will have two child entries, one each in each"},{"lineNumber":283,"author":{"gitID":"WJY-norainu"},"content":"attending celebrity\u0027s calendar. So when this appointment gets deleted, both entries should get removed as well."},{"lineNumber":284,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":285,"author":{"gitID":"WJY-norainu"},"content":".Sequence diagram of deleteAppointment command"},{"lineNumber":286,"author":{"gitID":"WJY-norainu"},"content":"image::DeleteAppointmentCommand-logic-seq-diagram.jpg[width\u003d\"\"]"},{"lineNumber":287,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":288,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":289,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Status of `CalendarPanel` after deletion of the only appointment"},{"lineNumber":290,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Switch back to combined calendar view"},{"lineNumber":291,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Keeps consistent with `listAppointment` as CelebManager does not show an empty list when there is no"},{"lineNumber":292,"author":{"gitID":"WJY-norainu"},"content":"appointment to list, but instead outputs an error message."},{"lineNumber":293,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Makes it difficult for users to see if the appointment gets deleted correctly."},{"lineNumber":294,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Stay at the appointment list view and shows an empty list"},{"lineNumber":295,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Shows the effect of deletion immediately."},{"lineNumber":296,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Becomes inconsistent with `listAppointment` command\u0027s inability to show an empty list when there is no"},{"lineNumber":297,"author":{"gitID":"WJY-norainu"},"content":"appointment to list."},{"lineNumber":298,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 3:** Switch back to combined calendar view and goes to the day when the deleted appointment should"},{"lineNumber":299,"author":{"gitID":"WJY-norainu"},"content":"happen"},{"lineNumber":300,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Keeps consistent with `listAppointment` while making it easy for users to check if the appointment gets"},{"lineNumber":301,"author":{"gitID":"WJY-norainu"},"content":"deleted visually on calendar."},{"lineNumber":302,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Takes long time to run."},{"lineNumber":303,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":304,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Ability to undo `deleteAppointment` command"},{"lineNumber":305,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Cannot be undone"},{"lineNumber":306,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Needs not remember previous appointments\u0027 and calendar\u0027s status."},{"lineNumber":307,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Cannot restore deletions made by mistake."},{"lineNumber":308,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Can be undone"},{"lineNumber":309,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Can restore deletions made by mistake."},{"lineNumber":310,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Requires drastic change in the way calendars are currently saved and loaded, as calendars currently only stay"},{"lineNumber":311,"author":{"gitID":"WJY-norainu"},"content":"in UI component while appointments in Model component."}],"authorContributionMap":{"WJY-norainu":311}},{"path":"src/test/java/systemtests/RemoveTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.CELEBRITY_TAG;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag() throws Exception {"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"        Model model \u003d getModel();"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"        /* ----------------------------------- Perform valid removeTag operations ----------------------------------- */"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: remove tag friends from a non-empty address book that has this tag in tag list, command with leading"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"         * spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"         * -\u003e tag removed and shows 8 persons affected"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        String command \u003d \"   \" + RemoveTagCommand.COMMAND_WORD + \"  \" + FRIENDS_TAG.tagName + \" \";"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(command, FRIENDS_TAG);"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: undo removing tag friends from the list -\u003e tag friends restored */"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: redo removing tag friends from the list -\u003e tag friends removed again */"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"        model.removeTag(FRIENDS_TAG);"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: remove tag [owesMoney] from a non-empty address book that has this tag in tag list"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"         * -\u003e tag removed and shows 1 person affected"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        Tag owesMoney \u003d new Tag(\"owesMoney\");"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(owesMoney);"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        /* ----------------------------------- Perform invalid removeTag operations --------------------------------- */"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: missing tag -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + \"\";"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d \"removesTag \" + VALID_TAG_FRIEND;"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: invalid tag name -\u003e rejected */"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + INVALID_TAG_DESC;"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: valid tag name but tag does not exist in the address book -\u003e rejected */"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + \" \" + VALID_TAG_FRIEND;"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, String.format(RemoveTagCommand.MESSAGE_TAG_NOT_FOUND, FRIENDS_TAG.toString()));"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: celebrity tag -\u003e rejected */"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + \" \" + CELEBRITY_TAG.tagName;"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, String.format(RemoveTagCommand.MESSAGE_CANNOT_REMOVE_CELEBRITY_TAG));"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"     * Executes the {@code RemoveTagCommand} that removes {@code toRemove} from the model and asserts that the,\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"     * 3. Result display box displays the success message of executing {@code RemoveTagCommand} with the details of"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"     * {@code toRemove}.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"     * the original empty model.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"     * 5. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"    private void assertCommandSuccess(Tag toRemove) throws Exception {"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(RemoveTagCommand.COMMAND_WORD + \" \" + toRemove.tagName, toRemove);"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Tag)}. Executes {@code command}"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"     * instead."},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"     * @see RemoveTagCommandSystemTest#assertCommandSuccess(Tag)"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    private void assertCommandSuccess(String command, Tag toRemove) throws Exception {"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"        int numOfPersonsAffected \u003d expectedModel.countPersonsWithTag(toRemove);"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.removeTag(toRemove);"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"        String expectedResultMessage \u003d String.format(RemoveTagCommand.MESSAGE_DELETE_TAG_SUCCESS,"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"                                                    toRemove.toString(),"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"                                                    numOfPersonsAffected);"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Tag)} except asserts that"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"     * @see RemoveTagCommandSystemTest#assertCommandSuccess(String, Tag)"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"        executeCommand(command);"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"        executeCommand(command);"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":133,"-":10}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalStorageCalendar;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e styleOfResultDisplayDefault;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e styleOfResultDisplayError;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, this::getInitialStorageCalendar,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                getDataFileLocation(), getStorageCalendarFileLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        styleOfResultDisplayDefault \u003d mainWindowHandle.getResultDisplay().getClassStyle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        styleOfResultDisplayError \u003d mainWindowHandle.getResultDisplay().getClassStyle();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        styleOfResultDisplayError.add(ResultDisplay.STYLE_ERROR_CLASS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected StorageCalendar getInitialStorageCalendar() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TypicalStorageCalendar.generateEmptyStorageCalendar();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Returns the directory of the storage calendar file."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    protected String getStorageCalendarFileLocation() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return TestApp.STORAGE_CALENDAR_LOCATION_FOR_TESTING;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":143,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"WJY-norainu"},"content":"     * Calls {@code CalendarPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberPersonsStatusTotal();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected."},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"     * @see CalendarPanelHandle#isUrlChanged()"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"WJY-norainu"},"content":"     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":216,"author":{"gitID":"WJY-norainu"},"content":"     * @see CalendarPanelHandle#isUrlChanged()"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Asserts that the selected card in the person list panel remain unchanged."},{"lineNumber":226,"author":{"gitID":"WJY-norainu"},"content":"     * @see CalendarPanelHandle#isUrlChanged()"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Asserts that the results displayed and command box shows the error style."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertResultDisplayAndCommandBoxShowsErrorStyle() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertEquals(styleOfResultDisplayError, getResultDisplay().getClassStyle());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the results displayed and command box shows the default style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    protected void assertResultDisplayAndCommandBoxShowsDefaultStyle() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(styleOfResultDisplayDefault, getResultDisplay().getClassStyle());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Asserts that the sync status in the status bar was changed to the timing of"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * number of persons in the address book, while the save location remains the same."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(String.format(TOTAL_PERSONS_STATUS, totalPersons), handle.getTotalPersonsStatus());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and the total person"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * list remains the same."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertFalse(handle.isTotalPersonsStatusChanged());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertFalse(handle.isTotalPersonsStatusChanged());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":301,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            assertEquals(String.format(TOTAL_PERSONS_STATUS, getModel().getAddressBook().getPersonList().size()),"},{"lineNumber":303,"author":{"gitID":"-"},"content":"                    getStatusBarFooter().getTotalPersonsStatus());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":6,"-":312}},{"path":"docs/team/muruges95.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Muruges - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CelebManager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CelebManager is a software application that aims to allow celebrity managers to maintain schedule of celebrities under them. CelebManager is optimized for users who prefer to work with a Command Line Interface (CLI) while still having a Graphical User Interface (GUI) for visual feedback."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"In this software, the users should be able to:"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":".   Manage contacts"},{"lineNumber":16,"author":{"gitID":"-"},"content":".\tManage appointments"},{"lineNumber":17,"author":{"gitID":"-"},"content":".\tManage calendars"},{"lineNumber":18,"author":{"gitID":"-"},"content":".\tPlan efficient routes"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"The aim of this project portfolio is to highlight some of my major and minor contributions to the project, be it in the form"},{"lineNumber":21,"author":{"gitID":"-"},"content":"of documentation or writing code."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to add appointments*"},{"lineNumber":26,"author":{"gitID":"-"},"content":"** What it does: Allows users to add new appointments into CelebManager. For each appointment, CelebManager takes in an appointment name field and other optional fields"},{"lineNumber":27,"author":{"gitID":"-"},"content":"such as the list of celebrities attending the appointment."},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Justification: This feature is in fact the main feature of the application, as we want to be able to manage the schedules of celebrities."},{"lineNumber":29,"author":{"gitID":"-"},"content":" The only way to do this would be to store and make corrections to these appointments that the celebrities are attending, which is what this feature allows for."},{"lineNumber":30,"author":{"gitID":"-"},"content":"** Highlights: Creating this feature was done over the entirety of the project, due to changing how we wanted to implement the storage of the appointments."},{"lineNumber":31,"author":{"gitID":"-"},"content":" There were difficulties in the implementation due to the fact that each appointment could only be associated with a single celebrity\u0027s calendar at a time. Hence, it was eventually decided that appointments will be stored"},{"lineNumber":32,"author":{"gitID":"-"},"content":" centrally in a `StorageCalendar` and then cloned for each celebrity attending the appointment."},{"lineNumber":33,"author":{"gitID":"-"},"content":"** Credits: A third party library called `CalendarFX` which can be found https://github.com/dlemmermann/CalendarFX[here] was used to implement this feature."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to add, edit and delete celebrities*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** What it does: Allow the celebrity manager to create, edit and delete celebrities. The existence of a celebrity will add a calendar to the UI."},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Justification: This feature works hand in hand with the previous enhancement mentioned. By creating a celebrity, a calendar is created. Now, when we create an appointment and"},{"lineNumber":38,"author":{"gitID":"-"},"content":"add a celebrity to the appointment, the appointment will display on the UI. This means that we are now able to view the appointments and effectively the schedule of the celebrity we are managing."},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Highlights: This enhancement was carried out through modifications to the add, edit and delete commands. By recognizing a `celebrity` tag to indicate that the person is a celebrity,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"the add and edit commands now create a calendar for the added or modified celebrity. There were a lot of difficulties as we had to make sure the celebrities"},{"lineNumber":41,"author":{"gitID":"-"},"content":"were synchronized with the calendars even when the commands were undoed or redoed, as add, edit and delete are meant to be undoable."},{"lineNumber":42,"author":{"gitID":"-"},"content":"** Credits: A third party library called `CalendarFX` which can be found https://github.com/dlemmermann/CalendarFX[here] was used to implement this feature."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added an appointment list panel and individual appointment card for viewing the list of appointments stored using the `listAppointment` command."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/functional/muruges95.md[Functional code]] [https://github.com/CS2103JAN2018-W14-B4/main/blob/master/collated/test/muruges95.md[Test code]]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"** Project management: +"},{"lineNumber":51,"author":{"gitID":"-"},"content":"Managed releases `v1.1`, `v1.2` and `v1.3` on GitHub"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"*** Added alias for all commands (Pull request https://github.com/CS2103JAN2018-W14-B4/main/pull/3[#3])"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*** Added Calendar panel UI into GUI (Pull request https://github.com/CS2103JAN2018-W14-B4/main/pull/16[#16])"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"*** Updated features content in User Guide: https://github.com/CS2103JAN2018-W14-B4/main/pull/3[#3] https://github.com/CS2103JAN2018-W14-B4/main/pull/168[#168] https://github.com/CS2103JAN2018-W14-B4/main/pull/122[#122] https://github.com/CS2103JAN2018-W14-B4/main/pull/105[#105]"},{"lineNumber":59,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/101[#101]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"*** Updated features implementation content in developer guide: https://github.com/CS2103JAN2018-W14-B4/main/pull/168[#168] https://github.com/CS2103JAN2018-W14-B4/main/pull/126[#126] https://github.com/CS2103JAN2018-W14-B4/main/pull/101[#101] https://github.com/CS2103JAN2018-W14-B4/main/pull/59[#59]"},{"lineNumber":61,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W14-B4/main/pull/51[#51] https://github.com/CS2103JAN2018-W14-B4/main/pull/32[#32] https://github.com/CS2103JAN2018-W14-B4/main/pull/12[#12]"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103JAN2018-W14-B4/main/pull/1[#1], https://github.com/CS2103JAN2018-W14-B4/main/pull/2[#2], https://github.com/CS2103JAN2018-W14-B4/main/pull/5[#5]"},{"lineNumber":65,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T15-B4/main/issues/123[1], https://github.com/CS2103JAN2018-T15-B4/main/issues/122[2])"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Address Book Features"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a person: `add` [Since v1.0]"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Adds a person to CelebManager. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Alias: `a` +"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"A person can have any number of tags, including 0."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"* You can add two types of persons to CelebManager: contacts and celebrities."},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"* Celebrities refer to the celebrities that you, the manager, are currently managing, while contacts refer to other persons."},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"* Contacts refer to contacts other than celebrities."},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"* If you want to add a celebrity to CelebManager, you need to tag him/her with `celebrity` tag."},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"Refer to examples below for more information."},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"* For each celebrity added, CelebManager creates a calendar in `CalendarPanel` for him/her. This calendar displays the appointments"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"he/she will be attending."},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"* CelebManager assumes that any celebrity added is a celebrity that you are managing. If you want to add an actual celebrity"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"who is not managed by you, you need to avoid using `celebrity` tag and find another tag name to indicate this information."},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"****"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` +"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"Adds a contact named `John Doe` to CelebManager."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"* `add n/Betsy Crower t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` +"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"Adds a contact named `Betsy Crower` to CelebManager."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"* `add n/John Lennon p/91827364 e/johnlennon@example.com a/John Lennon Rd, Block 321, #03-04 t/celebrity t/singer` +"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"Adds a celebrity named `John Lennon` to CelebManager and creates an empty calendar named `John Lennon`."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"* `add n/Paul McCartney p/91827364 e/paulmccartney@example.com a/Paul McCartney Rd, Block 789, #05-06 t/celebrity` +"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"Adds a celebrity named `Paul McCartney` to CelebManager and creates an empty calendar named `Paul McCartney`."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Appointment Features"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an appointment: `addAppointment` [Since v1.2]"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"Adds an appointment and shows the calendar of the start date of the added appointment. +"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"To change the date displayed by the calendar in `CalendarPanel`,"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"refer to \u003c\u003cChanging the base date of calendar: `viewDate` [Since v1.5]\u003e\u003e."},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"Alias: `aa` +"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"Format: `addAppointment n/APPOINTMENT_NAME [l/LOCATION] [sd/START_DATE] [st/START_TIME] [ed/END_DATE] [et/END_TIME]"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"[c/CELEBRITY_INDEX]... [p/POINT_OF_person_INDEX]...`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"****"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"* `START_DATE` and `END_DATE` must be of the format `DD-MM-YYYY`, e.g. `03-07-2018`."},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"* `START_DATE` *must not be* after `END_DATE`."},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"* If `START_DATE` or `END_DATE` is omitted, it will take on the value of the current date."},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"* `START_TIME` and `END_TIME` must be of the format `HH:MM` and 24-hour format is used, e.g. `14:05`."},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"* `START_TIME` *must be* at least 15 minutes before `END_TIME` if `START_DATE` is equal to `END_DATE`."},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"* If `START_TIME` and `END_TIME` are both omitted, `START_TIME` will take on the current time and `END_TIME` will be"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":"15 minutes after `START_TIME`."},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"* If `START_TIME` is omitted while `END_TIME` is not, `START_TIME` will be 15 minutes before `END_TIME`."},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"* If `END_TIME` is omitted while `START_TIME` is not, `END_TIME` will be 15 minutes after `START_TIME`."},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"* `CELEBRITY_INDEX` and `POINT_OF_person_INDEX` refer to the index shwon in the last shown person list in `PersonListPanel`."},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":"* The person at `CELEBRITY_INDEX` *must be* a celebrity."},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"* The person at `POINT_OF_person_INDEX` *must not be* a celebrity."},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":"* `CELEBRITY_INDEX` and `POINT_OF_person_INDEX` *must be a positive integer* `1`, `2`, `3`, ..."},{"lineNumber":142,"author":{"gitID":"-"},"content":"****"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"* `addAppointment n/Oscars 2018 l/Hollywood sd/23-03-2018 st/14:00 ed/23-03-2018 et/20:00 p/1 p/5`"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `addAppointment n/Dentist Appointment l/Dental Clinic st/15:45 c/1 c/3`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":154,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":155,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d AddAppointment Feature"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"WJY-norainu"},"content":"The AddAppointment mechanism is facilitated by the `AddAppointmentCommand`, which resides inside `Logic`. It supports the adding of an appointment to an existing calendar."},{"lineNumber":161,"author":{"gitID":"WJY-norainu"},"content":"The appointment, if added successfully, can be viewed in our `CalendarPanel` UI. This is done by retrieving the list of calendars stored in our `CalendarPanel`"},{"lineNumber":162,"author":{"gitID":"WJY-norainu"},"content":"and then adding the appointment to one or more of these calendars. This command extends `Command` so it *does not support the undo/redo feature*."},{"lineNumber":163,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":164,"author":{"gitID":"WJY-norainu"},"content":"To be able to create appointments, add them to calendars and view the calendar with the added appointments, the external CalendarFX package is used. The API for all the CalendarFX classes and methods used can be found http://dlsc.com/wp-content/html/calendarfx/apidocs/index.html[here]."},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":166,"author":{"gitID":"WJY-norainu"},"content":"* For the calendar, the `CelebCalendar` class is used, which extends the default `Calendar` class from CalendarFX used to describe a calendar."},{"lineNumber":167,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":168,"author":{"gitID":"WJY-norainu"},"content":"* For the appointment, the `Appointment` class is used, which is extended from `Entry`, the default class used to represent an entry in a `Calendar` in CalendarFX."},{"lineNumber":169,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":170,"author":{"gitID":"WJY-norainu"},"content":"* All `CelebCalendar` instances reside in an instance of `CalendarSource`, the class used to store a group of calendars in CalendarFX."},{"lineNumber":171,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":172,"author":{"gitID":"WJY-norainu"},"content":"* This instance of `CalendarSource` is atttached to our `CalendarView` which is the GUI for our calendar."},{"lineNumber":173,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":"Inheritance from the base classes of the external package is done so that we can add in additional methods as necessary."},{"lineNumber":176,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Right now, the addAppointment command takes in up to 8 parameters. They are:"},{"lineNumber":178,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"* Appointment name [Compulsory field]"},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"* Location"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":"* Start Date"},{"lineNumber":182,"author":{"gitID":"WJY-norainu"},"content":"* Start Time"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":"* End Date"},{"lineNumber":184,"author":{"gitID":"WJY-norainu"},"content":"* End Time"},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Celebrity Indices"},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Point of Contact Indices"},{"lineNumber":187,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":188,"author":{"gitID":"WJY-norainu"},"content":"The `AddAppointmentCommandParser` is able to create sensible appointments even if 1 or more of the non-compulsory fields are not included. The snippet code below shows how the parsing is handled:"},{"lineNumber":189,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":190,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":191,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":192,"author":{"gitID":"WJY-norainu"},"content":"public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":193,"author":{"gitID":"WJY-norainu"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME,"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                PREFIX_START_DATE,  PREFIX_LOCATION, PREFIX_END_TIME, PREFIX_END_DATE, PREFIX_CELEBRITY,"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                PREFIX_POINT_OF_CONTACT);"},{"lineNumber":196,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":197,"author":{"gitID":"WJY-norainu"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_NAME)"},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":199,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":200,"author":{"gitID":"WJY-norainu"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":201,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":203,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"WJY-norainu"},"content":"            String appointmentName \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_NAME)).get();"},{"lineNumber":205,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalTime\u003e startTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_START_TIME));"},{"lineNumber":206,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalDate\u003e startDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_START_DATE));"},{"lineNumber":207,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalTime\u003e endTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_END_TIME));"},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalDate\u003e endDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_END_DATE));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            Optional\u003cMapAddress\u003e locationInput \u003d ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_LOCATION));"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            Set\u003cIndex\u003e celebrityIndices \u003d ParserUtil.parseIndices(argMultiMap.getAllValues(PREFIX_CELEBRITY));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Set\u003cIndex\u003e pointOfContactIndices \u003d ParserUtil.parseIndices(argMultiMap.getAllValues(PREFIX_POINT_OF_CONTACT));"},{"lineNumber":212,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"            MapAddress location \u003d null;"},{"lineNumber":214,"author":{"gitID":"WJY-norainu"},"content":"            LocalTime startTime \u003d LocalTime.now();"},{"lineNumber":215,"author":{"gitID":"WJY-norainu"},"content":"            LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":216,"author":{"gitID":"WJY-norainu"},"content":"            LocalTime endTime \u003d LocalTime.now();"},{"lineNumber":217,"author":{"gitID":"WJY-norainu"},"content":"            LocalDate endDate \u003d LocalDate.now();"},{"lineNumber":218,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":219,"author":{"gitID":"WJY-norainu"},"content":"            if (startTimeInput.isPresent()) {"},{"lineNumber":220,"author":{"gitID":"WJY-norainu"},"content":"                startTime \u003d startTimeInput.get();"},{"lineNumber":221,"author":{"gitID":"WJY-norainu"},"content":"                endTime \u003d startTimeInput.get();"},{"lineNumber":222,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":223,"author":{"gitID":"WJY-norainu"},"content":"            if (endTimeInput.isPresent()) {"},{"lineNumber":224,"author":{"gitID":"WJY-norainu"},"content":"                endTime \u003d endTimeInput.get();"},{"lineNumber":225,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"WJY-norainu"},"content":"            if (startDateInput.isPresent()) {"},{"lineNumber":227,"author":{"gitID":"WJY-norainu"},"content":"                startDate \u003d startDateInput.get();"},{"lineNumber":228,"author":{"gitID":"WJY-norainu"},"content":"                endDate \u003d startDateInput.get();"},{"lineNumber":229,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":230,"author":{"gitID":"WJY-norainu"},"content":"            if (endDateInput.isPresent()) {"},{"lineNumber":231,"author":{"gitID":"WJY-norainu"},"content":"                endDate \u003d endDateInput.get();"},{"lineNumber":232,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"WJY-norainu"},"content":"            if (locationInput.isPresent()) {"},{"lineNumber":234,"author":{"gitID":"WJY-norainu"},"content":"                location \u003d locationInput.get();"},{"lineNumber":235,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":236,"author":{"gitID":"WJY-norainu"},"content":"        ..."},{"lineNumber":237,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":239,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":240,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":241,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":242,"author":{"gitID":"WJY-norainu"},"content":"The format for all the fields are located inside of `Appointment` and are as follows:"},{"lineNumber":243,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":244,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":245,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":246,"author":{"gitID":"WJY-norainu"},"content":"public class Appointment extends Entry {"},{"lineNumber":247,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":248,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":249,"author":{"gitID":"WJY-norainu"},"content":"            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\"; // used for name and location"},{"lineNumber":250,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":251,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":252,"author":{"gitID":"WJY-norainu"},"content":"            \"Time should be a 2 digit number between 00 to 23 followed by a :\""},{"lineNumber":253,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 2 digit number beetween 00 to 59. Some examples include \""},{"lineNumber":254,"author":{"gitID":"WJY-norainu"},"content":"            + \"08:45, 13:45, 00:30\";"},{"lineNumber":255,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":256,"author":{"gitID":"WJY-norainu"},"content":"            \"Date should be a 2 digit number between 01 to 31 followed by a -\""},{"lineNumber":257,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 2 digit number between 01 to 12 followed by a -\""},{"lineNumber":258,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 4 digit number describing a year. Some months might have less than 31 days.\""},{"lineNumber":259,"author":{"gitID":"WJY-norainu"},"content":"            + \" Some examples include: 13-12-2018, 02-05-2019, 28-02-2018\";"},{"lineNumber":260,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":261,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":262,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":263,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"},{"lineNumber":264,"author":{"gitID":"WJY-norainu"},"content":"            .withResolverStyle(ResolverStyle.STRICT); // prevent incorrect dates"},{"lineNumber":265,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":266,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":267,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":268,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"The following sequence diagram (Figure 1) gives an overview of how the command works and interacts with the other components:"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":".Sequence diagram of addAppointment command"},{"lineNumber":272,"author":{"gitID":"-"},"content":"image::AddAppointmentSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"The figure below (Figure 2) shows the state of the application before input of the `AddAppointmentCommand`:"},{"lineNumber":275,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":".State of application without any appointments"},{"lineNumber":277,"author":{"gitID":"WJY-norainu"},"content":"image::BeforeAddAppointment.jpg[width\u003d\"800\"]"},{"lineNumber":278,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":279,"author":{"gitID":"WJY-norainu"},"content":"After input of `addAppointment n/Oscars 2018 st/18:00 sd/06-04-2018 l/Hollywood et/20:00 ed/06-04-2018 c/1`,"},{"lineNumber":280,"author":{"gitID":"-"},"content":"the added appointment will be reflected in the calendar as shown in the figure below (Figure 3):"},{"lineNumber":281,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":".State of application with newly added appointment"},{"lineNumber":283,"author":{"gitID":"WJY-norainu"},"content":"image::AfterAddAppointment.jpg[width\u003d\"800\"]"},{"lineNumber":284,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":286,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Ability to undo `addAppointment` command"},{"lineNumber":287,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Cannot be undone"},{"lineNumber":288,"author":{"gitID":"-"},"content":"** Pros: Needs not remember previous state of the storage calendar."},{"lineNumber":289,"author":{"gitID":"-"},"content":"** Pros: If user made small mistake in one or more of the fields, can use `editAppointment` command instead of undo and re-add"},{"lineNumber":290,"author":{"gitID":"-"},"content":"the new appointment with the correct fields."},{"lineNumber":291,"author":{"gitID":"-"},"content":"** If user instead just want to cancel the appointment, can use `deleteAppointment` command"},{"lineNumber":292,"author":{"gitID":"-"},"content":"** Cons: Cannot remove or edit additions made by mistake without looking at the list of appointments."},{"lineNumber":293,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Can be undone"},{"lineNumber":294,"author":{"gitID":"-"},"content":"** Pros: Can remove additions made by mistake."},{"lineNumber":295,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Requires drastic change in the way calendars are currently saved and loaded, as calendars currently only stay"},{"lineNumber":296,"author":{"gitID":"WJY-norainu"},"content":"in UI component while appointments in Model component."}],"authorContributionMap":{"WJY-norainu":153,"-":143}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CelebManager - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B4/main/"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `CS2103JAN2018-W14-B4`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"CelebManager is a software application that aims to allow celebrity managers to maintain schedule of celebrities under them. CelebManager is optimized for users who prefer to work with a Command Line Interface (CLI) while still having a Graphical User Interface (GUI) for visual feedback."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"In this software, the users should be able to:"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* Manage contacts"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* Manage appointments"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* Manage calendars"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* Plan efficient routes"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"This developer guide aims to allow you to develop and maintain the software with information on how the software is designed and implemented. Information on how the software should be developed and maintained is also in this documentation."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Setup"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"This section will discuss the setting up of project for development."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"There are two prerequisites before you can work on this software. They are (in the order you should obtain them):"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":". *Java Development Kit* (JDK) +"},{"lineNumber":40,"author":{"gitID":"-"},"content":"The Java programming language is used in this project. To be able to work with this project, you will need to have JDK version `1.8.0_60` installed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"You can get the JDK from: +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"http://www.oracle.com/technetwork/java/javase/downloads/index.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Some components of this software will not work with earlier versions of Java 8."},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":". *IntelliJ Integrated Development Environment* (IDE) +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"This software is developed as a Gradle project, which requires you to work on the software using a IDE. While it is possible to work with any IDE that supports Gradle Projects, this guide will use IntelliJ as a basis."},{"lineNumber":50,"author":{"gitID":"-"},"content":"You can get IntelliJ from: +"},{"lineNumber":51,"author":{"gitID":"-"},"content":"https://www.jetbrains.com/idea/"},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":54,"author":{"gitID":"-"},"content":"IntelliJ make use of Gradle and JavaFx plugins, and the project will need these plugins. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Local Project Setup"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"To contribute to this project, you will need to work with a local copy of this project. To do so:"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":63,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":64,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle:"},{"lineNumber":65,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":66,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":67,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":68,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file, select it and click `OK`."},{"lineNumber":69,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":71,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources`. (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":72,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setup Verification"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"To ensure that you have setup the project correctly: +"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":79,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setup Configurations"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Coding Style Configurations"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."},{"lineNumber":86,"author":{"gitID":"-"},"content":"IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours."},{"lineNumber":87,"author":{"gitID":"-"},"content":"To rectify:"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":90,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":91,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order. Take note of the following:"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Alternatively, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Documentation Configurations"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W14-B4/main` repository."},{"lineNumber":101,"author":{"gitID":"-"},"content":"If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W14-B4/main` repository), you should replace the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Continuous Integration (CI) Configurations"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"There are two CI configurations that you can set up."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"To set up Travis for performing CI for your fork, please refer to \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e."},{"lineNumber":108,"author":{"gitID":"-"},"content":"Optionally, to set up AppVeyor for performing CI, please refer to \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Travis is an Unix-based software, while AppVeyor is a Windows-based software."},{"lineNumber":112,"author":{"gitID":"-"},"content":"Having both Travis CI and AppVeyor CI ensures your App works on both Unix-based platforms and Windows-based platforms."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"You should also set up coverage reporting for your team fork. Please refer to \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"Before starting to work on the project after successful configurations, you are encouraged to:"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"1. Understand the overall design (\u003c\u003cDesign-Architecture\u003e\u003e)."},{"lineNumber":125,"author":{"gitID":"-"},"content":"2. Understand the product scope (\u003c\u003cGetStartedProgramming\u003e\u003e)."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Software Architecture"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given below explains the high-level design of the project."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":".Architecture diagram"},{"lineNumber":133,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"////"},{"lineNumber":136,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":137,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":138,"author":{"gitID":"-"},"content":"////"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"`Main` has only one class called link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Initializing the components in the correct sequence and connects them up with each other at application launch."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Shutting down the components and invokes cleanup method where necessary."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple components."},{"lineNumber":146,"author":{"gitID":"-"},"content":"Two of these classes are vital at the architecture level. These are:"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `EventsCenter` is used by components to communicate with other components using events."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* `LogsCenter` is used by many classes to write log messages to the application\u0027s log file."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":152,"author":{"gitID":"-"},"content":"`EventsCenter` is written using the https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]."},{"lineNumber":153,"author":{"gitID":"-"},"content":"It is a form of event-driven design."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"The rest of the App consists of four components, each defining its _API_ in an interface, and exposing its functionality using a `{Component Name}Manager` class."},{"lineNumber":156,"author":{"gitID":"-"},"content":"The components are:"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The user interface of the application."},{"lineNumber":159,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor of the application."},{"lineNumber":160,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: The container for in-memory data of the application."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: The driver for reading and writing data of the application."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"////"},{"lineNumber":164,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see Figure 2) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":".Class diagram of the Logic Component"},{"lineNumber":167,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Event-driven Design"},{"lineNumber":171,"author":{"gitID":"-"},"content":"////"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common Classes"},{"lineNumber":175,"author":{"gitID":"-"},"content":"Common class files, such as `EventsCenter`, are used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"The _sequence diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":178,"author":{"gitID":"-"},"content":"Note that the `Model` simply raises a `AddressBookChangedEvent` when the CelebManager data is changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Sequence diagram for `delete 1` command (1)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which results in the updates being saved to the hard disk."},{"lineNumber":185,"author":{"gitID":"-"},"content":"The status bar of the UI is also updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":186,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".Sequence diagram for `delete 1` command (2)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture Components"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d UI Component"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"The following diagram shows the class diagram of the `UI` component."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":".Class diagram of the `UI` component"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"WJY-norainu"},"content":"*API*: link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `CalendarPanel` etc."},{"lineNumber":204,"author":{"gitID":"-"},"content":"All these classes inherit from the abstract `UiPart` class."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework."},{"lineNumber":207,"author":{"gitID":"-"},"content":"The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"For example, the layout of the link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is"},{"lineNumber":209,"author":{"gitID":"WJY-norainu"},"content":"specified in link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"* executes user commands using the `Logic` component."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":215,"author":{"gitID":"-"},"content":"* responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Logic Component"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"The following diagrams shows the structure of the `Logic` component, and details on `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e."},{"lineNumber":221,"author":{"gitID":"-"},"content":"It describe the overall structure of the `Logic` component and how a single command such as `XYZCommand` and other commands are structured respectively."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":224,"author":{"gitID":"-"},"content":".Class diagram of the `Logic` component"},{"lineNumber":225,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":".Structure of commands in the `Logic` component"},{"lineNumber":228,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"WJY-norainu"},"content":"*API*: link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"When the user types in a new command to be parsed:"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":".  The `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":235,"author":{"gitID":"-"},"content":".  A `Command` object is then executed by the `LogicManager`."},{"lineNumber":236,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":237,"author":{"gitID":"-"},"content":".  The result of the command execution is then encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The following diagram shows the sequence diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":".Sequence diagram for the `delete 1` command"},{"lineNumber":242,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Model Component"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"The following diagram shows the class diagram of the `Model` component."},{"lineNumber":248,"author":{"gitID":"-"},"content":"It describes the overall structure of the `Model` component, along with all its sub-components."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":".Class diagram of the `Model` component"},{"lineNumber":251,"author":{"gitID":"WJY-norainu"},"content":"image::ModelClassDiagram.jpg[width\u003d\"800\"]"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"WJY-norainu"},"content":"*API*: link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"The `Model` component:"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":258,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":259,"author":{"gitID":"WJY-norainu"},"content":"* stores a `StorageCalendar` object that contains all appointments."},{"lineNumber":260,"author":{"gitID":"WJY-norainu"},"content":"* stores a `CalendarSource` object that is used to display the calendar."},{"lineNumber":261,"author":{"gitID":"WJY-norainu"},"content":"* stores a list of appointments which will be displayed for `listAppointment` command."},{"lineNumber":262,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":263,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Storage Component"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"The following diagram shows the class diagram of the `Storage` component."},{"lineNumber":269,"author":{"gitID":"-"},"content":"It describes how the overall structure of the `Storage` component and its different sub-components."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":".Class diagram of the `Storage` component"},{"lineNumber":272,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"WJY-norainu"},"content":"*API*: link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"The `Storage` component:"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"* saves `UserPref` objects in json format and read it back."},{"lineNumber":279,"author":{"gitID":"-"},"content":"* saves contacts data in xml format and read it back."},{"lineNumber":280,"author":{"gitID":"-"},"content":"* saves appointments data in xml format and read it back."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"This section describes some noteworthy features that are implemented in CelebManager."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"WJY-norainu"},"content":"// tag::removeTag[]"},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d RemoveTag Feature"},{"lineNumber":289,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":290,"author":{"gitID":"WJY-norainu"},"content":"This feature allows the user to remove a specified tag from all the contacts."},{"lineNumber":291,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"WJY-norainu"},"content":"The tag removal mechanism is facilitated by both `RemoveTagCommand` class, which resides inside `Logic`, and"},{"lineNumber":295,"author":{"gitID":"WJY-norainu"},"content":"`removeTag` method, which resides in `AddressBook`. This feature removes a specified tag from each person who has it in the"},{"lineNumber":296,"author":{"gitID":"WJY-norainu"},"content":"address book. `RemoveTagCommand` class inherits from the `UndoableCommand` class and hence supports the `undo` and `redo` features."},{"lineNumber":297,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":298,"author":{"gitID":"WJY-norainu"},"content":"When a user enters `removeTag` command, an object of `RemoveTagCommand` class will be created. To understand this class’"},{"lineNumber":299,"author":{"gitID":"WJY-norainu"},"content":"contribution to remove tag feature, please refer to the following code snippet which shows the implementation of"},{"lineNumber":300,"author":{"gitID":"WJY-norainu"},"content":"`executeUndoableCommand` in `RemoveTagCommand`:"},{"lineNumber":301,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":302,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":303,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":304,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":305,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":306,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Removed tag %1$s and %2$s person(s) affected.\";"},{"lineNumber":307,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":308,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":309,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"WJY-norainu"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":311,"author":{"gitID":"WJY-norainu"},"content":"            requireNonNull(tagToRemove);"},{"lineNumber":312,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":313,"author":{"gitID":"WJY-norainu"},"content":"            if (tagToRemove.equals(CELEBRITY_TAG)) {"},{"lineNumber":314,"author":{"gitID":"WJY-norainu"},"content":"                throw new CommandException(MESSAGE_CANNOT_REMOVE_CELEBRITY_TAG);"},{"lineNumber":315,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":316,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":317,"author":{"gitID":"WJY-norainu"},"content":"            int numberOfAffectedPersons \u003d 0;"},{"lineNumber":318,"author":{"gitID":"WJY-norainu"},"content":"            try {"},{"lineNumber":319,"author":{"gitID":"WJY-norainu"},"content":"                numberOfAffectedPersons \u003d model.removeTag(tagToRemove);"},{"lineNumber":320,"author":{"gitID":"WJY-norainu"},"content":"            } catch (TagNotFoundException tnfe) {"},{"lineNumber":321,"author":{"gitID":"WJY-norainu"},"content":"                throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagToRemove.toString()));"},{"lineNumber":322,"author":{"gitID":"WJY-norainu"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":323,"author":{"gitID":"WJY-norainu"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":324,"author":{"gitID":"WJY-norainu"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":325,"author":{"gitID":"WJY-norainu"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":326,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":327,"author":{"gitID":"WJY-norainu"},"content":"            return new CommandResult(String.format("},{"lineNumber":328,"author":{"gitID":"WJY-norainu"},"content":"                    MESSAGE_DELETE_TAG_SUCCESS,"},{"lineNumber":329,"author":{"gitID":"WJY-norainu"},"content":"                    tagToRemove.toString(),"},{"lineNumber":330,"author":{"gitID":"WJY-norainu"},"content":"                    numberOfAffectedPersons));"},{"lineNumber":331,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":332,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":333,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":334,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":335,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":336,"author":{"gitID":"WJY-norainu"},"content":"From the snippet above, `RemoveTagCommand` class filters out `celebrity` tag or a non-existent tag to disallow the removal"},{"lineNumber":337,"author":{"gitID":"WJY-norainu"},"content":"of both. It is also in-charge of printing the successful message upon a successful execution."},{"lineNumber":338,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":339,"author":{"gitID":"WJY-norainu"},"content":"Within RemoveTagCommand class,  `removeTag` method is called to actually remove the tag, which calls `removeTag` method of"},{"lineNumber":340,"author":{"gitID":"WJY-norainu"},"content":"`AddressBook`. The snippet code below shows the implementation of `removeTag` in `AddressBook`:"},{"lineNumber":341,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":342,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":343,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":344,"author":{"gitID":"WJY-norainu"},"content":"public class AddressBook {"},{"lineNumber":345,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":346,"author":{"gitID":"WJY-norainu"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":347,"author":{"gitID":"-"},"content":"     * @return the number of {@code person}s with this {@code tag} removed."},{"lineNumber":348,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":349,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException, TagNotFoundException {"},{"lineNumber":350,"author":{"gitID":"WJY-norainu"},"content":"        boolean tagExists \u003d false;"},{"lineNumber":351,"author":{"gitID":"WJY-norainu"},"content":"        for (Tag existingTag: tags) {"},{"lineNumber":352,"author":{"gitID":"WJY-norainu"},"content":"            if (existingTag.equals(tag)) {"},{"lineNumber":353,"author":{"gitID":"WJY-norainu"},"content":"                tagExists \u003d true;"},{"lineNumber":354,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":355,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":356,"author":{"gitID":"WJY-norainu"},"content":"        if (!tagExists) {"},{"lineNumber":357,"author":{"gitID":"WJY-norainu"},"content":"            throw new TagNotFoundException();"},{"lineNumber":358,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":360,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d 0;"},{"lineNumber":361,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":362,"author":{"gitID":"WJY-norainu"},"content":"            if (person.hasTag(tag)) {"},{"lineNumber":363,"author":{"gitID":"WJY-norainu"},"content":"                //get the new tag set with the specified tag removed"},{"lineNumber":364,"author":{"gitID":"WJY-norainu"},"content":"                Set\u003cTag\u003e oldTags \u003d person.getTags();"},{"lineNumber":365,"author":{"gitID":"WJY-norainu"},"content":"                Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":366,"author":{"gitID":"WJY-norainu"},"content":"                for (Tag tagToKeep: oldTags) {"},{"lineNumber":367,"author":{"gitID":"WJY-norainu"},"content":"                    if (tagToKeep.equals(tag)) {"},{"lineNumber":368,"author":{"gitID":"WJY-norainu"},"content":"                        continue;"},{"lineNumber":369,"author":{"gitID":"WJY-norainu"},"content":"                    }"},{"lineNumber":370,"author":{"gitID":"WJY-norainu"},"content":"                    newTags.add(tagToKeep);"},{"lineNumber":371,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":372,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":373,"author":{"gitID":"WJY-norainu"},"content":"                //create a new person with the specified tag removed to replace the person"},{"lineNumber":374,"author":{"gitID":"WJY-norainu"},"content":"                EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":375,"author":{"gitID":"WJY-norainu"},"content":"                editPersonDescriptor.setTags(newTags);"},{"lineNumber":376,"author":{"gitID":"WJY-norainu"},"content":"                Person editedPerson \u003d createEditedPerson(person, editPersonDescriptor);"},{"lineNumber":377,"author":{"gitID":"-"},"content":"                Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":378,"author":{"gitID":"WJY-norainu"},"content":"                persons.setPerson(person, syncedEditedPerson);"},{"lineNumber":379,"author":{"gitID":"WJY-norainu"},"content":"                removeUnusedTags();"},{"lineNumber":380,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":381,"author":{"gitID":"WJY-norainu"},"content":"                count++;"},{"lineNumber":382,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":383,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":384,"author":{"gitID":"WJY-norainu"},"content":"        return count;"},{"lineNumber":385,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":386,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":387,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":388,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":389,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":390,"author":{"gitID":"WJY-norainu"},"content":"Note that `removeTag` makes use of `EditPersonDescriptor` class to create a new `person` without the tag, to replace"},{"lineNumber":391,"author":{"gitID":"WJY-norainu"},"content":"the original `person` with the tag."},{"lineNumber":392,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":393,"author":{"gitID":"WJY-norainu"},"content":"Additionally, `removeUnusedTags` is called inside `removeTag` when there is at least one person affected by the removal."},{"lineNumber":394,"author":{"gitID":"WJY-norainu"},"content":"This is because `removeTag` removes the tag from each person with it and after the operation, no person in the"},{"lineNumber":395,"author":{"gitID":"WJY-norainu"},"content":"address book should have the tag. Hence the unused tag should be removed from `tags` inside the address book."},{"lineNumber":396,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":397,"author":{"gitID":"WJY-norainu"},"content":"As an example, the following sequence diagram shows the interaction within classes in `Logic` package when"},{"lineNumber":398,"author":{"gitID":"WJY-norainu"},"content":"the user executes `removeTag friends` successfully:"},{"lineNumber":399,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":400,"author":{"gitID":"WJY-norainu"},"content":".Sequence diagram of `removeTag` command"},{"lineNumber":401,"author":{"gitID":"WJY-norainu"},"content":"image::RemoveTagCommand-logic-seq-diagram.jpg[width\u003d\"\"]"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":404,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Command result for removal of `celebrity` tag"},{"lineNumber":405,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Output an error message saying that the `celebrity` tag cannot be removed"},{"lineNumber":406,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Prevents `removeTag` from affecting the calendar as celebrities will not get affected by this operation."},{"lineNumber":407,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Results in no available method to mass remove `celebrity` tag."},{"lineNumber":408,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Remove `celebrity` tag and clear all calendars"},{"lineNumber":409,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Provides an easy way to mass remove `celebrity` tag and clears all celebrities from the address book."},{"lineNumber":410,"author":{"gitID":"WJY-norainu"},"content":"** Cons: As changes made to calendars and appointments are not undoable,"},{"lineNumber":411,"author":{"gitID":"WJY-norainu"},"content":"removing `celebrity` tag by mistake can result in loss of all celebrities\u0027 calendar and appointment information."},{"lineNumber":412,"author":{"gitID":"WJY-norainu"},"content":"// end::removeTag[]"},{"lineNumber":413,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":416,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo Command Feature"},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"The undo command allows users to reverse the effect of the previous command, and the redo command allows the users to reverse the effects of undoing commands."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack` in `LogicManager` class. It supports undoing and redoing of commands that modifies the state of the address book, such as `add` and `edit`."},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"In the implementation, these commands will inherit from `UndoableCommand` class, while the commands that cannot be undone will inherit from the `Command` class instead."},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"The following figure shows the inheritance diagram with regards to the feature:"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":".Inheritance diagram for undoable commands"},{"lineNumber":429,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"From the figure, the `UndoableCommand` class provides an interface between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"`UndoableCommand` contains high-level algorithms for additional tasks, such as saving the application state before command execution."},{"lineNumber":434,"author":{"gitID":"-"},"content":"Its child classes implements the details of how to execute the specific command."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":437,"author":{"gitID":"-"},"content":"Undoable commands require additional tasks to be completed, such as saving the application state, before command execution."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":440,"author":{"gitID":"-"},"content":"The technique of containing the high-level algorithms in the parent class, while implementing lower-level algorithms in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"With the additional interface, the commands that are undoable are implemented in this way:"},{"lineNumber":443,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":444,"author":{"gitID":"-"},"content":"----"},{"lineNumber":445,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":447,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":448,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":451,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":452,"author":{"gitID":"-"},"content":"}"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":455,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":456,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":457,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":458,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":459,"author":{"gitID":"-"},"content":"}"},{"lineNumber":460,"author":{"gitID":"-"},"content":"----"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":463,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":464,"author":{"gitID":"-"},"content":"----"},{"lineNumber":465,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":466,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":467,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":468,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":469,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":470,"author":{"gitID":"-"},"content":"}"},{"lineNumber":471,"author":{"gitID":"-"},"content":"----"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"The `UndoRedoStack` will be empty at the beginning when the user first launches the application."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"For example, when the user executes a `delete 5` command, an `UndoableCommand`, to delete the 5th person in the address book, the current state of the address book is saved."},{"lineNumber":477,"author":{"gitID":"-"},"content":"The `delete 5` command will then be pushed onto the `undoStack`."},{"lineNumber":478,"author":{"gitID":"-"},"content":"The current state of the application is then saved together with the command."},{"lineNumber":479,"author":{"gitID":"-"},"content":"The following figure shows the illustration after executing the command."},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":".Execution of `delete 5` command"},{"lineNumber":482,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"As the user continues to execute commands that are undoable in the application, more commands are added into the `undoStack`."},{"lineNumber":485,"author":{"gitID":"-"},"content":"For example, the user may execute an `add n/David ...` command to add a new person."},{"lineNumber":486,"author":{"gitID":"-"},"content":"The following figure shows the illustration after executing the second command."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":".Execution of `add n/David ...` command"},{"lineNumber":489,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":492,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `undoStack` at all."},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"If the user decides to undo that action using `undo` command, the `undoStack` will pop the most recent command, and push the command into the `redoStack`."},{"lineNumber":495,"author":{"gitID":"-"},"content":"The application will restore to the state before the `add n/David ...` command executed."},{"lineNumber":496,"author":{"gitID":"-"},"content":"The following figure shows the illustration after executing the `undo` command."},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":".Execution of `undo` command"},{"lineNumber":499,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":502,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone."},{"lineNumber":503,"author":{"gitID":"-"},"content":"An `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"The following figure shows the sequence diagram on how the `undo` command works."},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":".Sequence diagram of `undo` command"},{"lineNumber":508,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"The `redo` command pops the most recent undone command from `redoStack`, and push the command to the `undoStack`."},{"lineNumber":511,"author":{"gitID":"-"},"content":"This will also restore the address book to the state after the command is executed."},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":514,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone."},{"lineNumber":515,"author":{"gitID":"-"},"content":"An `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"////"},{"lineNumber":518,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":529,"author":{"gitID":"-"},"content":"////"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":537,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":538,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":539,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":540,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":541,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Execution of `undo` and `redo` commands"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Save the entire address book."},{"lineNumber":546,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":547,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":548,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":549,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":550,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":556,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":557,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":558,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":559,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":560,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":561,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of data structure to support the undo/redo commands"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":567,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":568,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":569,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":570,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":571,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":572,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d AddAppointment Feature"},{"lineNumber":575,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"WJY-norainu"},"content":"The AddAppointment mechanism is facilitated by the `AddAppointmentCommand`, which resides inside `Logic`. It supports the adding of an appointment to an existing calendar."},{"lineNumber":578,"author":{"gitID":"WJY-norainu"},"content":"The appointment, if added successfully, can be viewed in our `CalendarPanel` UI. This is done by retrieving the list of calendars stored in our `CalendarPanel`"},{"lineNumber":579,"author":{"gitID":"WJY-norainu"},"content":"and then adding the appointment to one or more of these calendars. This command extends `Command` so it *does not support the undo/redo feature*."},{"lineNumber":580,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":581,"author":{"gitID":"WJY-norainu"},"content":"To be able to create appointments, add them to calendars and view the calendar with the added appointments, the external CalendarFX package is used. The API for all the CalendarFX classes and methods used can be found http://dlsc.com/wp-content/html/calendarfx/apidocs/index.html[here]."},{"lineNumber":582,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":583,"author":{"gitID":"WJY-norainu"},"content":"* For the calendar, the `CelebCalendar` class is used, which extends the default `Calendar` class from CalendarFX used to describe a calendar."},{"lineNumber":584,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":585,"author":{"gitID":"WJY-norainu"},"content":"* For the appointment, the `Appointment` class is used, which is extended from `Entry`, the default class used to represent an entry in a `Calendar` in CalendarFX."},{"lineNumber":586,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":587,"author":{"gitID":"WJY-norainu"},"content":"* All `CelebCalendar` instances reside in an instance of `CalendarSource`, the class used to store a group of calendars in CalendarFX."},{"lineNumber":588,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":589,"author":{"gitID":"WJY-norainu"},"content":"* This instance of `CalendarSource` is atttached to our `CalendarView` which is the GUI for our calendar."},{"lineNumber":590,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":591,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":592,"author":{"gitID":"WJY-norainu"},"content":"Inheritance from the base classes of the external package is done so that we can add in additional methods as necessary."},{"lineNumber":593,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"Right now, the addAppointment command takes in up to 8 parameters. They are:"},{"lineNumber":595,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":596,"author":{"gitID":"WJY-norainu"},"content":"* Appointment name [Compulsory field]"},{"lineNumber":597,"author":{"gitID":"WJY-norainu"},"content":"* Location"},{"lineNumber":598,"author":{"gitID":"WJY-norainu"},"content":"* Start Date"},{"lineNumber":599,"author":{"gitID":"WJY-norainu"},"content":"* Start Time"},{"lineNumber":600,"author":{"gitID":"WJY-norainu"},"content":"* End Date"},{"lineNumber":601,"author":{"gitID":"WJY-norainu"},"content":"* End Time"},{"lineNumber":602,"author":{"gitID":"-"},"content":"* Celebrity Indices"},{"lineNumber":603,"author":{"gitID":"-"},"content":"* Point of Contact Indices"},{"lineNumber":604,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":605,"author":{"gitID":"WJY-norainu"},"content":"The `AddAppointmentCommandParser` is able to create sensible appointments even if 1 or more of the non-compulsory fields are not included. The snippet code below shows how the parsing is handled:"},{"lineNumber":606,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":607,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":608,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":609,"author":{"gitID":"WJY-norainu"},"content":"public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":610,"author":{"gitID":"WJY-norainu"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME,"},{"lineNumber":611,"author":{"gitID":"-"},"content":"                PREFIX_START_DATE,  PREFIX_LOCATION, PREFIX_END_TIME, PREFIX_END_DATE, PREFIX_CELEBRITY,"},{"lineNumber":612,"author":{"gitID":"-"},"content":"                PREFIX_POINT_OF_CONTACT);"},{"lineNumber":613,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":614,"author":{"gitID":"WJY-norainu"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_NAME)"},{"lineNumber":615,"author":{"gitID":"WJY-norainu"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":616,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":617,"author":{"gitID":"WJY-norainu"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":618,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":619,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":620,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":621,"author":{"gitID":"WJY-norainu"},"content":"            String appointmentName \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_NAME)).get();"},{"lineNumber":622,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalTime\u003e startTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_START_TIME));"},{"lineNumber":623,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalDate\u003e startDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_START_DATE));"},{"lineNumber":624,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalTime\u003e endTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_END_TIME));"},{"lineNumber":625,"author":{"gitID":"WJY-norainu"},"content":"            Optional\u003cLocalDate\u003e endDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_END_DATE));"},{"lineNumber":626,"author":{"gitID":"-"},"content":"            Optional\u003cMapAddress\u003e locationInput \u003d ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_LOCATION));"},{"lineNumber":627,"author":{"gitID":"-"},"content":"            Set\u003cIndex\u003e celebrityIndices \u003d ParserUtil.parseIndices(argMultiMap.getAllValues(PREFIX_CELEBRITY));"},{"lineNumber":628,"author":{"gitID":"-"},"content":"            Set\u003cIndex\u003e pointOfContactIndices \u003d ParserUtil.parseIndices(argMultiMap.getAllValues(PREFIX_POINT_OF_CONTACT));"},{"lineNumber":629,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"            MapAddress location \u003d null;"},{"lineNumber":631,"author":{"gitID":"WJY-norainu"},"content":"            LocalTime startTime \u003d LocalTime.now();"},{"lineNumber":632,"author":{"gitID":"WJY-norainu"},"content":"            LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":633,"author":{"gitID":"WJY-norainu"},"content":"            LocalTime endTime \u003d LocalTime.now();"},{"lineNumber":634,"author":{"gitID":"WJY-norainu"},"content":"            LocalDate endDate \u003d LocalDate.now();"},{"lineNumber":635,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":636,"author":{"gitID":"WJY-norainu"},"content":"            if (startTimeInput.isPresent()) {"},{"lineNumber":637,"author":{"gitID":"WJY-norainu"},"content":"                startTime \u003d startTimeInput.get();"},{"lineNumber":638,"author":{"gitID":"WJY-norainu"},"content":"                endTime \u003d startTimeInput.get();"},{"lineNumber":639,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":640,"author":{"gitID":"WJY-norainu"},"content":"            if (endTimeInput.isPresent()) {"},{"lineNumber":641,"author":{"gitID":"WJY-norainu"},"content":"                endTime \u003d endTimeInput.get();"},{"lineNumber":642,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":643,"author":{"gitID":"WJY-norainu"},"content":"            if (startDateInput.isPresent()) {"},{"lineNumber":644,"author":{"gitID":"WJY-norainu"},"content":"                startDate \u003d startDateInput.get();"},{"lineNumber":645,"author":{"gitID":"WJY-norainu"},"content":"                endDate \u003d startDateInput.get();"},{"lineNumber":646,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":647,"author":{"gitID":"WJY-norainu"},"content":"            if (endDateInput.isPresent()) {"},{"lineNumber":648,"author":{"gitID":"WJY-norainu"},"content":"                endDate \u003d endDateInput.get();"},{"lineNumber":649,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":650,"author":{"gitID":"WJY-norainu"},"content":"            if (locationInput.isPresent()) {"},{"lineNumber":651,"author":{"gitID":"WJY-norainu"},"content":"                location \u003d locationInput.get();"},{"lineNumber":652,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":653,"author":{"gitID":"WJY-norainu"},"content":"        ..."},{"lineNumber":654,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":655,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":656,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":657,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":658,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":659,"author":{"gitID":"WJY-norainu"},"content":"The format for all the fields are located inside of `Appointment` and are as follows:"},{"lineNumber":660,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":661,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":662,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":663,"author":{"gitID":"WJY-norainu"},"content":"public class Appointment extends Entry {"},{"lineNumber":664,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":665,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":666,"author":{"gitID":"WJY-norainu"},"content":"            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\"; // used for name and location"},{"lineNumber":667,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":668,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":669,"author":{"gitID":"WJY-norainu"},"content":"            \"Time should be a 2 digit number between 00 to 23 followed by a :\""},{"lineNumber":670,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 2 digit number beetween 00 to 59. Some examples include \""},{"lineNumber":671,"author":{"gitID":"WJY-norainu"},"content":"            + \"08:45, 13:45, 00:30\";"},{"lineNumber":672,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":673,"author":{"gitID":"WJY-norainu"},"content":"            \"Date should be a 2 digit number between 01 to 31 followed by a -\""},{"lineNumber":674,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 2 digit number between 01 to 12 followed by a -\""},{"lineNumber":675,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 4 digit number describing a year. Some months might have less than 31 days.\""},{"lineNumber":676,"author":{"gitID":"WJY-norainu"},"content":"            + \" Some examples include: 13-12-2018, 02-05-2019, 28-02-2018\";"},{"lineNumber":677,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":678,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":679,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":680,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"},{"lineNumber":681,"author":{"gitID":"WJY-norainu"},"content":"            .withResolverStyle(ResolverStyle.STRICT); // prevent incorrect dates"},{"lineNumber":682,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":683,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":684,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":685,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"The following sequence diagram (Figure 19) gives an overview of how the command works and interacts with the other components:"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":".Sequence diagram of addAppointment command"},{"lineNumber":689,"author":{"gitID":"-"},"content":"image::AddAppointmentSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"The figure below (Figure 20) shows the state of the application before input of the `AddAppointmentCommand`:"},{"lineNumber":692,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":".State of application without any appointments"},{"lineNumber":694,"author":{"gitID":"WJY-norainu"},"content":"image::BeforeAddAppointment.jpg[width\u003d\"800\"]"},{"lineNumber":695,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":696,"author":{"gitID":"WJY-norainu"},"content":"After input of `addAppointment n/Oscars 2018 st/18:00 sd/06-04-2018 l/Hollywood et/20:00 ed/06-04-2018 c/1`,"},{"lineNumber":697,"author":{"gitID":"WJY-norainu"},"content":"the added appointment will be reflected in the calendar as shown in the figure below (Figure 21):"},{"lineNumber":698,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":".State of application with newly added appointment"},{"lineNumber":700,"author":{"gitID":"WJY-norainu"},"content":"image::AfterAddAppointment.jpg[width\u003d\"800\"]"},{"lineNumber":701,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Ability to undo `addAppointment` command"},{"lineNumber":704,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Cannot be undone"},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Pros: Needs not remember previous state of the storage calendar."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** Pros: If user made small mistake in one or more of the fields, can use `editAppointment` command instead of undo and re-add"},{"lineNumber":707,"author":{"gitID":"-"},"content":"the new appointment with the correct fields."},{"lineNumber":708,"author":{"gitID":"-"},"content":"** If user instead just want to cancel the appointment, can use `deleteAppointment` command"},{"lineNumber":709,"author":{"gitID":"-"},"content":"** Cons: Cannot remove or edit additions made by mistake without looking at the list of appointments."},{"lineNumber":710,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Can be undone"},{"lineNumber":711,"author":{"gitID":"-"},"content":"** Pros: Can remove additions made by mistake."},{"lineNumber":712,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Requires drastic change in the way calendars are currently saved and loaded, as calendars currently only stay"},{"lineNumber":713,"author":{"gitID":"WJY-norainu"},"content":"in UI component while appointments in Model component."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"WJY-norainu"},"content":"// tag::deleteAppointment[]"},{"lineNumber":716,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d DeleteAppointment Feature"},{"lineNumber":717,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":718,"author":{"gitID":"WJY-norainu"},"content":"This feature allows the user to delete appointments."},{"lineNumber":719,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":721,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":722,"author":{"gitID":"WJY-norainu"},"content":"The mechanism to delete an appointment is facilitated by the `DeleteAppointmentCommand` class, which resides inside `Logic`,"},{"lineNumber":723,"author":{"gitID":"WJY-norainu"},"content":"and `deleteAppointment` method in `Model`. The command requires the user to put in an index to refer to the appointment"},{"lineNumber":724,"author":{"gitID":"WJY-norainu"},"content":"to be deleted. This index is taken from the currently displayed appointment list. As such, deletion of an appointment"},{"lineNumber":725,"author":{"gitID":"WJY-norainu"},"content":"can only be done when CelebManager is showing an appointment list."},{"lineNumber":726,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":727,"author":{"gitID":"WJY-norainu"},"content":"`DeleteAppointmentCommand` class is responsible for checking whether an appointment list is currently being shown."},{"lineNumber":728,"author":{"gitID":"WJY-norainu"},"content":"If so, `DeleteAppointmentCommand` class will call `deleteAppointment` method. Refer to the code snippet below to see"},{"lineNumber":729,"author":{"gitID":"WJY-norainu"},"content":"how this method deletes the specified appointment:"},{"lineNumber":730,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":731,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":732,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":733,"author":{"gitID":"WJY-norainu"},"content":"public class DeleteAppointmentCommand extends Command {"},{"lineNumber":734,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":735,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":736,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY \u003d \"\\nAppointment list becomes empty, \""},{"lineNumber":737,"author":{"gitID":"WJY-norainu"},"content":"            + \"Switching back to calendar view by day\\n\""},{"lineNumber":738,"author":{"gitID":"WJY-norainu"},"content":"            + \"Currently showing %1$s calendar\";"},{"lineNumber":739,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":740,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":741,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":742,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":743,"author":{"gitID":"WJY-norainu"},"content":"        // throw exception if the user is not currently viewing an appointment list"},{"lineNumber":744,"author":{"gitID":"WJY-norainu"},"content":"        if (!model.getIsListingAppointments()) {"},{"lineNumber":745,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":746,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":747,"author":{"gitID":"WJY-norainu"},"content":"        apptToDelete \u003d model.deleteAppointment(targetIndex.getZeroBased());"},{"lineNumber":748,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cAppointment\u003e currentAppointmentList \u003d model.getAppointmentList();"},{"lineNumber":749,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":750,"author":{"gitID":"WJY-norainu"},"content":"        // if the list becomes empty, switch back to combined calendar day view"},{"lineNumber":751,"author":{"gitID":"WJY-norainu"},"content":"        if (currentAppointmentList.size() \u003c 1) {"},{"lineNumber":752,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(DAY_VIEW_PAGE));"},{"lineNumber":753,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":754,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":755,"author":{"gitID":"WJY-norainu"},"content":"            Celebrity currentCalendarOwner \u003d model.getCurrentCelebCalendarOwner();"},{"lineNumber":756,"author":{"gitID":"WJY-norainu"},"content":"            if (currentCalendarOwner \u003d\u003d null) {"},{"lineNumber":757,"author":{"gitID":"WJY-norainu"},"content":"                return new CommandResult("},{"lineNumber":758,"author":{"gitID":"WJY-norainu"},"content":"                        String.format(MESSAGE_SUCCESS, apptToDelete.getTitle())"},{"lineNumber":759,"author":{"gitID":"WJY-norainu"},"content":"                                + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY,"},{"lineNumber":760,"author":{"gitID":"WJY-norainu"},"content":"                                \"combined\"));"},{"lineNumber":761,"author":{"gitID":"WJY-norainu"},"content":"            } else {"},{"lineNumber":762,"author":{"gitID":"WJY-norainu"},"content":"                return new CommandResult("},{"lineNumber":763,"author":{"gitID":"WJY-norainu"},"content":"                        String.format(MESSAGE_SUCCESS, apptToDelete.getTitle())"},{"lineNumber":764,"author":{"gitID":"WJY-norainu"},"content":"                                + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY,"},{"lineNumber":765,"author":{"gitID":"WJY-norainu"},"content":"                                currentCalendarOwner.getName().toString() + \"\u0027s\"));"},{"lineNumber":766,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":767,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":768,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":769,"author":{"gitID":"WJY-norainu"},"content":"        // if the list is not empty yet, update appointment list view"},{"lineNumber":770,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ShowAppointmentListEvent(currentAppointmentList));"},{"lineNumber":771,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":772,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, apptToDelete.getTitle()));"},{"lineNumber":773,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":774,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":775,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":776,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":777,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":778,"author":{"gitID":"WJY-norainu"},"content":"From the snippet above, it can be seen that `DeleteAppointmentCommand` changes `CalendarPanel` back to combined"},{"lineNumber":779,"author":{"gitID":"WJY-norainu"},"content":"calendar view if there is no more appointment in the appointment list after deletion. Otherwise, the appointment list"},{"lineNumber":780,"author":{"gitID":"WJY-norainu"},"content":"with the specified appointment deleted will be shown."},{"lineNumber":781,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":782,"author":{"gitID":"WJY-norainu"},"content":"The snippet code below shows the implementation of `deleteAppointment` in `Model`:"},{"lineNumber":783,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":784,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":785,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":786,"author":{"gitID":"WJY-norainu"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":787,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":788,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":789,"author":{"gitID":"WJY-norainu"},"content":"    public Appointment deleteAppointment(int index) throws IndexOutOfBoundsException {"},{"lineNumber":790,"author":{"gitID":"WJY-norainu"},"content":"        Appointment apptToDelete \u003d getChosenAppointment(index);"},{"lineNumber":791,"author":{"gitID":"WJY-norainu"},"content":"        apptToDelete.removeAppointment();"},{"lineNumber":792,"author":{"gitID":"WJY-norainu"},"content":"        removeAppointmentFromInternalList(index);"},{"lineNumber":793,"author":{"gitID":"WJY-norainu"},"content":"        currentlyDisplayedAppointments.remove(apptToDelete);"},{"lineNumber":794,"author":{"gitID":"WJY-norainu"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":795,"author":{"gitID":"WJY-norainu"},"content":"        return apptToDelete;"},{"lineNumber":796,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":797,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":798,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":799,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":800,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":801,"author":{"gitID":"WJY-norainu"},"content":"The method `removeAppointment` is in `Appointment` class, and removes all child entries of an appointment. For example,"},{"lineNumber":802,"author":{"gitID":"WJY-norainu"},"content":"an appointment may have two celebrities attending. Then this appointment will have two child entries, one each in each"},{"lineNumber":803,"author":{"gitID":"WJY-norainu"},"content":"attending celebrity\u0027s calendar. So when this appointment gets deleted, both entries should get removed as well."},{"lineNumber":804,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":805,"author":{"gitID":"WJY-norainu"},"content":".Sequence diagram of deleteAppointment command"},{"lineNumber":806,"author":{"gitID":"WJY-norainu"},"content":"image::DeleteAppointmentCommand-logic-seq-diagram.jpg[width\u003d\"\"]"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":809,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Status of `CalendarPanel` after deletion of the only appointment"},{"lineNumber":810,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Switch back to combined calendar view"},{"lineNumber":811,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Keeps consistent with `listAppointment` as CelebManager does not show an empty list when there is no"},{"lineNumber":812,"author":{"gitID":"WJY-norainu"},"content":"appointment to list, but instead outputs an error message."},{"lineNumber":813,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Makes it difficult for users to see if the appointment gets deleted correctly."},{"lineNumber":814,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Stay at the appointment list view and shows an empty list"},{"lineNumber":815,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Shows the effect of deletion immediately."},{"lineNumber":816,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Becomes inconsistent with `listAppointment` command\u0027s inability to show an empty list when there is no"},{"lineNumber":817,"author":{"gitID":"WJY-norainu"},"content":"appointment to list."},{"lineNumber":818,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 3:** Switch back to combined calendar view and goes to the day when the deleted appointment should"},{"lineNumber":819,"author":{"gitID":"WJY-norainu"},"content":"happen"},{"lineNumber":820,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Keeps consistent with `listAppointment` while making it easy for users to check if the appointment gets"},{"lineNumber":821,"author":{"gitID":"WJY-norainu"},"content":"deleted visually on calendar."},{"lineNumber":822,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Takes long time to run."},{"lineNumber":823,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Ability to undo `deleteAppointment` command"},{"lineNumber":825,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Cannot be undone"},{"lineNumber":826,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Needs not remember previous appointments\u0027 and calendar\u0027s status."},{"lineNumber":827,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Cannot restore deletions made by mistake."},{"lineNumber":828,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Can be undone"},{"lineNumber":829,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Can restore deletions made by mistake."},{"lineNumber":830,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Requires drastic change in the way calendars are currently saved and loaded, as calendars currently only stay"},{"lineNumber":831,"author":{"gitID":"WJY-norainu"},"content":"in UI component while appointments in Model component."},{"lineNumber":832,"author":{"gitID":"WJY-norainu"},"content":"// end::deleteAppointment[]"},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"// tag::viewAppointment[]"},{"lineNumber":835,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d ViewAppointment Feature"},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":837,"author":{"gitID":"-"},"content":"The ViewAppointment mechanism is facilitated by the `ViewAppointmentCommand`, which resides inside `Logic`. It supports the viewing of a specific appointment"},{"lineNumber":838,"author":{"gitID":"-"},"content":"in the `ResultDisplayPanel`  by displaying the `Appointment` details. The specific `Appointment` is selected using an index based on the list generated by `ListAppointmentCommand`."},{"lineNumber":839,"author":{"gitID":"-"},"content":" This command inherits from `Command` so it *does not support the undo/redo feature*."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"The input index is *one-based* which means that the smallest possible index is \u00271\u0027 and the largest possible index is the size of list"},{"lineNumber":842,"author":{"gitID":"-"},"content":"generated by `ListAppointmentCommand` (total number of `Appointment`)."},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"As this command relies on the list generated by `ListAppointmentCommand`, the command retrieves the start (earliest) and end (latest) date"},{"lineNumber":845,"author":{"gitID":"-"},"content":"from `ListAppointmentCommand`, which is used to generate the appointment list internally from the `StorageCalendar` in `Model`."},{"lineNumber":846,"author":{"gitID":"-"},"content":"This is done by `getChosenAppointment()` method."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"The snippet code below shows the code that retrieves the selected appointment."},{"lineNumber":849,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":850,"author":{"gitID":"-"},"content":"----"},{"lineNumber":851,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":852,"author":{"gitID":"WJY-norainu"},"content":"        if (!model.getIsListingAppointments()) {"},{"lineNumber":853,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":854,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":855,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":856,"author":{"gitID":"-"},"content":"            selectedAppointment \u003d model.getChosenAppointment(chosenIndex);"},{"lineNumber":857,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException iobe) {"},{"lineNumber":858,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":859,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":862,"author":{"gitID":"-"},"content":"            ShowLocationCommand showLocation \u003d new ShowLocationCommand("},{"lineNumber":863,"author":{"gitID":"-"},"content":"                    new MapAddress(selectedAppointment.getLocation()));"},{"lineNumber":864,"author":{"gitID":"-"},"content":"            showLocation.execute();"},{"lineNumber":865,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS + getAppointmentDetailsResult());"},{"lineNumber":866,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":867,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS + getAppointmentDetailsResult());"},{"lineNumber":868,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":869,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":870,"author":{"gitID":"-"},"content":"----"},{"lineNumber":871,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"To show the location in the `MapPanel`, `ShowLocationCommand` is used to update the location marker in `MapPanel` to"},{"lineNumber":873,"author":{"gitID":"-"},"content":"point to the `Appointment` location."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"In the case where the `Appointment` do not have any location data, the result will still be displayed without the"},{"lineNumber":876,"author":{"gitID":"-"},"content":"location being shown in the map."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":879,"author":{"gitID":"-"},"content":"Whenever an `Appointment` has no location data, any existing location marker or route will be removed from the map."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"The diagram below in figure 32 shows the sequence diagram of `ViewAppointmentCommand`."},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":".Sequence Diagram of `viewAppointment` Command"},{"lineNumber":884,"author":{"gitID":"-"},"content":"image::ViewAppointmentSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `viewAppointment`"},{"lineNumber":889,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Extend `Command`"},{"lineNumber":890,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new developers who will be developing this project as the command is at the same abstraction level as other commands."},{"lineNumber":891,"author":{"gitID":"-"},"content":"** Cons: Does not have the undo/redo feature as it is not part of `UndoableCommand`."},{"lineNumber":892,"author":{"gitID":"-"},"content":"* **Alternative 2:** Extend `UndoableCommand`"},{"lineNumber":893,"author":{"gitID":"-"},"content":"** Pros: Allows for command to have the undo/redo function."},{"lineNumber":894,"author":{"gitID":"-"},"content":"** Cons: Requires more work that may not fit in with our timeline."},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Inclusion of showing location on map"},{"lineNumber":897,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Show location of appointment on map"},{"lineNumber":898,"author":{"gitID":"-"},"content":"** Pros: Reduces the hassle of keying an extra command to show `Appointment` location on map."},{"lineNumber":899,"author":{"gitID":"-"},"content":"** Cons: Reduces independent usage of `ShowLocationCommand`."},{"lineNumber":900,"author":{"gitID":"-"},"content":"* **Alternative 2:** Does not show location on map"},{"lineNumber":901,"author":{"gitID":"-"},"content":"** Pros: Reduces unnecessary showing of location."},{"lineNumber":902,"author":{"gitID":"-"},"content":"** Cons: Requires an extra command input to show location when required."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"////"},{"lineNumber":905,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":910,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":911,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":916,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":917,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":918,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":921,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":924,"author":{"gitID":"-"},"content":"////"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Appointment Storage Feature"},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":928,"author":{"gitID":"-"},"content":"The storing of appointment is facilitated by the `XmlStorageCalendarStorage` class, which resides in the `Storage` component."},{"lineNumber":929,"author":{"gitID":"WJY-norainu"},"content":"It supports the retrieval and storage for appointments made by the user."},{"lineNumber":930,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":931,"author":{"gitID":"WJY-norainu"},"content":"During start-up of application, the storage component will be initialized by the `MainApp`, which retrieves information from the specified file path in `UserPrefs`."},{"lineNumber":932,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":933,"author":{"gitID":"WJY-norainu"},"content":"The following code snippet shows how the storage component will be initialized by the `MainApp`."},{"lineNumber":934,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":935,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":936,"author":{"gitID":"WJY-norainu"},"content":"public void init() throws Exception {"},{"lineNumber":937,"author":{"gitID":"WJY-norainu"},"content":"        // initializes application."},{"lineNumber":938,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":939,"author":{"gitID":"WJY-norainu"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":940,"author":{"gitID":"WJY-norainu"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":941,"author":{"gitID":"WJY-norainu"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":942,"author":{"gitID":"-"},"content":"        StorageCalendarStorage storageCalendarStorage \u003d"},{"lineNumber":943,"author":{"gitID":"-"},"content":"                new XmlStorageCalendarStorage(userPrefs.getStorageCalendarFilePath());"},{"lineNumber":944,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, storageCalendarStorage);"},{"lineNumber":945,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":946,"author":{"gitID":"WJY-norainu"},"content":"        // initializes other component in the application."},{"lineNumber":947,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":948,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":949,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"The following figure shows the sequence diagram for reading `StorageCalendar`."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":".Sequence Diagram for reading `StorageCalendar`"},{"lineNumber":953,"author":{"gitID":"-"},"content":"image::ReadStorageCalendarSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"In the `XmlStorageCalendarStorage` class, it allows developers to use methods:"},{"lineNumber":956,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"* `readStorageCalendar`, to retrieve a `StorageCalendar`"},{"lineNumber":958,"author":{"gitID":"-"},"content":"** This is done by checking if the file exist, and load the list from `XmlSerializableStorageCalendar`."},{"lineNumber":959,"author":{"gitID":"-"},"content":"* `saveStorageCalendar`, to write information into `filePath` specified in `userPrefs`"},{"lineNumber":960,"author":{"gitID":"-"},"content":"** This is done by creating a new file and rewriting to the list in `XmlSerializableStorageCalendar`."},{"lineNumber":961,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"While the `XmlStorageCalendarStorage` class allows access to data stored on the hard disk, the `XmlSerializableStorageCalendar` class represents the data of the appointment list for the calendar."},{"lineNumber":963,"author":{"gitID":"-"},"content":"In `XmlSerializableStorageCalendar`, it contains a `List` of XML formats of appointments `XmlAdaptedAppointment`."},{"lineNumber":964,"author":{"gitID":"-"},"content":"`XmlAdaptedAppointment` will then contain essential information of different `Appointment` in `StorageCalendar` of the `Model` component, which includes:"},{"lineNumber":965,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":966,"author":{"gitID":"WJY-norainu"},"content":"* `title` of appointment"},{"lineNumber":967,"author":{"gitID":"-"},"content":"* `startTime` of appointment indicating its starting time"},{"lineNumber":968,"author":{"gitID":"-"},"content":"* `startDate` of appointment indicating its starting date"},{"lineNumber":969,"author":{"gitID":"-"},"content":"* `endTime` of appointment indicating its ending time"},{"lineNumber":970,"author":{"gitID":"-"},"content":"* `endDate` of appointment indicating its ending date"},{"lineNumber":971,"author":{"gitID":"WJY-norainu"},"content":"* `location` of appointment that is going to happen"},{"lineNumber":972,"author":{"gitID":"-"},"content":"* `celebrityIds` of celebrities that are attending the appointment"},{"lineNumber":973,"author":{"gitID":"-"},"content":"* `pointOfContactIds` of non-celebrities that are attending the appointment"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":977,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementing of `StorageCalendarStorage`"},{"lineNumber":978,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Adapting existing `AddressBookStorage`"},{"lineNumber":979,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Allows similar structure that can be maintained easily in `Storage` component"},{"lineNumber":980,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Prevents major overhaul in future if necessary"},{"lineNumber":981,"author":{"gitID":"-"},"content":"* **Alternative 2:** Redefining `StorageCalendarStorage`"},{"lineNumber":982,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Allows flexibility in implementation"},{"lineNumber":983,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Confuses developer with different requirements for a single component"},{"lineNumber":984,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":985,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Usage of data structures for `Appointment`"},{"lineNumber":986,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Using a single `List`"},{"lineNumber":987,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Allows simplicity"},{"lineNumber":988,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Slows the application if there are too many appointments"},{"lineNumber":989,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Using a single `Set` such as `TreeSet`"},{"lineNumber":990,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Lowers impact in speed when there are many appointments"},{"lineNumber":991,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Complicates implementation when speed is not an issue"},{"lineNumber":992,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"// tag::showlocation[]"},{"lineNumber":994,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d ShowLocation Feature"},{"lineNumber":995,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"The ShowLocation mechanism is facilitated by the `ShowLocationCommand`, which resides inside `Logic`. It supports the viewing of location"},{"lineNumber":998,"author":{"gitID":"-"},"content":"in the `MapPanel` by updating the state of the `MapPanel`. This is done by re-centering the `MapPanel` to the latitude and longitude of the"},{"lineNumber":999,"author":{"gitID":"-"},"content":"location and identifying it with a location marker. This command inherits from `Command` so it *does not support the undo/redo feature*."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"The following figure shows the marker that is used to identify the location in the `MapPanel`:"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":".Location marker"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"image::LocationMarker.png[width\u003d\"50\"]"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"The following diagram shows the inheritance diagram for `ShowLocationCommand`:"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":".Inheritance diagram for `Command`"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"image::ShowLocationLogicCommandClassDiagram.png[width\u003d\"\"]"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":"As you can see from the diagram, `ShowLocationCommand` inherits from the Command class and is not part of the Undoable Command."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"Similar to the other commands like `FindCommand` *it will not be identified by the undo/redo feature*."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"This command does not use the `Person` `Address` model to search for a specific location, it uses the `MapAddress` model. This is due to"},{"lineNumber":1015,"author":{"gitID":"-"},"content":" the difference in address specification details as the `Address` model is too specific for the command to work."},{"lineNumber":1016,"author":{"gitID":"-"},"content":"An example would be the details of unit number (e.g #11-111) which will result in an invalid command or inaccurate result."},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"The main difference between both model is shown below in the two code snippets."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"The snippet code below shows the `Address` model:"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"                \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":1030,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":1034,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":1037,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":1039,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"The snippet code below shows the `MapAddress` model:"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"public class MapAddress {"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_MAP_CONSTRAINTS \u003d"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"            \"Address should be in location name, road name, block and road name or postal code format.\\n\""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"                    + \"Note:(Person address may not be valid as it consist of too many details like unit number)\""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":1053,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":1056,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid map address."},{"lineNumber":1058,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"        boolean isValid;"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"        Geocoding testAddress \u003d new Geocoding();"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"        isValid \u003d testAddress.checkIfAddressCanBeFound(test);"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_MAP_VALIDATION_REGEX) \u0026\u0026 isValid;"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":1066,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"The difference to note is the `isValidAddress` method, where `Address` only checks for *blank space* whereas `MapAddress`"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"checks for *blank space and the validity of location in google server*. Thus, making the command more restrictive to location,"},{"lineNumber":1070,"author":{"gitID":"-"},"content":" road, block name and postal code. Any details more than that, would result in a higher possibility of it being invalid or inaccurate."},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"This command uses the `GMAPSFX API` and  `Google Maps Web Services API` library which can be found http://rterp.github.io/GMapsFX/apidocs/[here] and https://googlemaps.github.io/google-maps-services-java/v0.2.6/javadoc/[here] respectively."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"* `GMAPSFX API` is used to create the `MapPanel` class which allows the"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"command to re-center and mark the new location which is then shown to the user."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"* `Google Maps Web Services API` is used to create the"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"`Geocoding` class, which is used to convert `MapAddress` into latitude and longitude form (`LatLng`). The `LatLng` form"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"is then used by the command to find the exact location in the `MapPanel`."},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"Every new input of this command will remove the previous route or location marker and add the new marker into the map."},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"The snippet below shows the state of `MapPanel` before input of `ShowLocation` command:"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":".Default State of `MapPanel`"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"image::BeforeInputMap.png[width\u003d\"400\"]"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"After the input of \"showLocation ma/Punggol\" the `MapPanel` will be updated to the diagram below:"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":".State of `MapPanel` after `CommandInput`"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"image::AfterShowLocationInput.png[width\u003d\"400\"]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1094,"author":{"gitID":"Damienskt"},"content":"Whenever an invalid `showLocation` command is done, any existing location marker or route will be removed from the map."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the command works:"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":".Sequence Diagram of `showLocation` Command"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"image::ShowLocationSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `showLocationCommand`"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Extend `Command`"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"** Pros: Allows new developers to understand easily as the command is at the same abstraction level as other commands."},{"lineNumber":1106,"author":{"gitID":"-"},"content":"** Cons: Does not have the undo/redo feature as it is not part of `UndoableCommand`."},{"lineNumber":1107,"author":{"gitID":"-"},"content":"* **Alternative 2:** Extend `UndoableCommand`"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"** Pros: Allows for command to have the undo/redo function."},{"lineNumber":1109,"author":{"gitID":"-"},"content":"** Cons: Requires more work that may not fit in with our timeline"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Use of address model"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `MapAddress`"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"** Pros: Allows the clear distinction of requirements between `MapAddress` and `Address` to avoid confusion"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"** Cons: Confusing as both `MapAddress` and `Address` model are quite similar."},{"lineNumber":1115,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `Address`"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"** Pros: Reduces the amount of code/class in the project"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"** Cons: Confusing as different requirements for a single model. Lacks proper organisation."},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"// tag::estimateRoute[]"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d EstimateRoute Feature"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"The EstimateRoute mechanism is facilitated by the `EstimateRouteCommand`, which resides inside `Logic`. It supports the viewing of estimated route"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"in the `MapPanel` by updating the state of the `MapPanel`. This is done by re-centering the `MapPanel` to the new route."},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"The following figure shows the marker that is used to identify the start and end location in the `MapPanel`:"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":".Start Location marker"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"image::Start_Location_Marker.png[width\u003d\"100\"]"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":".End Location marker"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"image::End_Location_Marker.png[width\u003d\"100\"]"},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"`EstimateRouteCommand` inherits from the Command class and is not part of the Undoable Command."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"Similar to the other commands like `FindCommand` *it will not be identified by the undo/redo feature*."},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"This command is similar to the `ShowLocation` feature which does not use the `Person` `Address` model to search for a specific location, it uses the `MapAddress` model. This is due to the difference in address specification details as the `Address` model is too specific for the command to work."},{"lineNumber":1140,"author":{"gitID":"-"},"content":"Even if it works the results may not be accurate."},{"lineNumber":1141,"author":{"gitID":"-"},"content":"An example would be the details of unit number (e.g #11-111) which will result in an invalid command or inaccurate results."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"This command uses the `GMAPSFX API` and  `Google Maps Web Services API` library which can be found http://rterp.github.io/GMapsFX/apidocs/[here] and https://googlemaps.github.io/google-maps-services-java/v0.2.6/javadoc/[here] respectively."},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"* `GMAPSFX` is used to create the `MapPanel` which allows the"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"command to re-center the map view, create the route, mark the start, end location and route which is then shown to the user."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"* `Google Maps Web Services API` is used to create the"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"`Geocoding` class, which is used to convert `MapAddress` into latitude and longitude form (`LatLng`). The `LatLng` form"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"is then used by the command to find the exact location in the `MapPanel`."},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"* `Google Maps Web Services API` is also used to create the `DistanceEstimate` class, which allows"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"the calculation of estimated time and distance of travel between two location by driving. `DistanceEstimate` class is also used to check if two locations"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"can be reached by driving."},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"The snippet below shows the state of `MapPanel` before input of `estimateRoute` command:"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":".Default State of `MapPanel`"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"image::BeforeInputMap.png[width\u003d\"400\"]"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"After the input of \"estimateRoute sma/Punggol ema/NUS\" the `MapPanel` will be updated to the diagram below:"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":".State of `MapPanel` after `CommandInput`"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"image::AfterEstimateRouteInput.png[width\u003d\"400\"]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"Any subsequent `estimateRoute` command will remove any existing marker or route before updating the `MapPanel` with the new route."},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Whenever an invalid `estimateRoute` command is done, any existing location marker or route will be removed from the map."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the command works:"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":".Sequence Diagram of `estimateRoute` Command"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"image::EstimateRouteSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `estimateCommand`"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Extend `Command`"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"** Pros: Allows new developers to understand easily as the command is at the same abstraction level as other commands."},{"lineNumber":1181,"author":{"gitID":"-"},"content":"** Cons: Does not have the undo/redo feature as it is not part of `UndoableCommand`."},{"lineNumber":1182,"author":{"gitID":"-"},"content":"* **Alternative 2:** Extend `UndoableCommand`"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"** Pros: Allows for command to have the undo/redo function."},{"lineNumber":1184,"author":{"gitID":"-"},"content":"** Cons: Requires more work that may not fit in with our timeline."},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Use of address model"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `MapAddress`"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"** Pros: Allows the clear distinction of requirements between `MapAddress` and `Address` to avoid confusion."},{"lineNumber":1189,"author":{"gitID":"-"},"content":"** Cons: Confusing as the two models are similar."},{"lineNumber":1190,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `Address`"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"** Pros: Reduces the amount of code/class in the project."},{"lineNumber":1192,"author":{"gitID":"-"},"content":"** Cons: Confusing as different requirements for a single model. Lacks proper organisation."},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Input using appointment index"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `Location` name"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"** Pros: Allows the function to be used independently"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"** Cons: Requires keying in of location instead of just an index."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `Appointment` index"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"** Pros: Reduces the amount of typing."},{"lineNumber":1200,"author":{"gitID":"-"},"content":"** Cons: Restricts the use of function as without an appointment index you will not be able to use it."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"This section shows you how to document your project effectively."},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"You can use AsciiDoc, a lightweight markup language, for writing documentation."},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"AsciiDoc(markup language) is chosen over markdown language format because it provides more flexibility with regards to formatting."},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing of Documentation"},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"-"},"content":"Please refer to \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e for instructions on how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing of Documentation"},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"Please refer to \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e for instructions on how to deploy GitHub pages using Travis."},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting of Documentation to PDF format"},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"You can use https://www.google.com/chrome/browser/desktop/[Google Chrome] to convert documents to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"To convert the project documentation files to PDF format:"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in `docs/` directory to HTML format."},{"lineNumber":1227,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1228,"author":{"gitID":"-"},"content":".  Click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1229,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, proceed to click `Save` to save a copy of the file in PDF format. For the best result, use the settings indicated in the screenshot below."},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"*Menu below will appear after step 3*"},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"-"},"content":"Testing is very important as it allows us to find application defects that were made during development, and it should be done constantly. It can be expensive if software testing is done only in the later stages of development, as a bug may affect different components of the project."},{"lineNumber":1240,"author":{"gitID":"-"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of Tests"},{"lineNumber":1242,"author":{"gitID":"-"},"content":""},{"lineNumber":1243,"author":{"gitID":"-"},"content":"There are two types of tests that we can run during the development of the project:"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":1246,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1247,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components of the software. These are in `seedu.address.ui` package."},{"lineNumber":1248,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"..  _Unit tests_ that target the lowest level methods/classes. +"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"..  _Integration tests_ that check the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"..  _Hybrids of unit and integration tests_ that check multiple code units as well as how they are connected together. +"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"*Method 1: Using Gradle (headless)*"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"GUI tests can be run in _headless_ mode due to the https://github.com/TestFX/TestFX[TestFX] library. GUI tests do not show up on the screen in headless mode, which allows you to work on other matters while tests are running."},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Using Gradle (headless) is the most reliable way to run tests. Other testing methods may fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"*Method 3: Using IntelliJ JUnit test runner*"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."},{"lineNumber":1281,"author":{"gitID":"-"},"content":"* To run a subset of tests, right-click on a test package or a test class, and choose `Run \u0027Tests in \u0027\u003ctest package or test class\u003e\u0027\u0027`."},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Test Troubleshooting"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1288,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"////"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"WJY-norainu"},"content":"Dev Ops is a software engineering culture and practice that aims at unifying software development (Dev) and software operations (Ops)."},{"lineNumber":1294,"author":{"gitID":"-"},"content":"Dev Ops advocates automation and monitoring at all steps of software construction. This section illustrates how we adopt this practice in developing CelebManager."},{"lineNumber":1295,"author":{"gitID":"-"},"content":"////"},{"lineNumber":1296,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"Please use Gradle for build automation. +"},{"lineNumber":1300,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more details."},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"-"},"content":"Please use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. +"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"Please use https://coveralls.io/[Coveralls] to track the code coverage of our projects. +"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1313,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"Please use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of changed asciidoc files will look"},{"lineNumber":1315,"author":{"gitID":"WJY-norainu"},"content":"like when a pull request is merged. +"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"Please refer to \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Application Release"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"To do the following steps to create a new release, you can:"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"WJY-norainu"},"content":".  Update the version number in link: https://github.com/CS2103JAN2018-W14-B4/main/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1323,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1324,"author":{"gitID":"WJY-norainu"},"content":".  Tag the repo with the version number, e.g. `v0.1`."},{"lineNumber":1325,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Dependencies Management"},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"Management of dependencies on third-party libraries is done using Gradle."},{"lineNumber":1330,"author":{"gitID":"WJY-norainu"},"content":"There is no need to include those libraries in the repo or download them manually."},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1335,"author":{"gitID":"-"},"content":""},{"lineNumber":1336,"author":{"gitID":"-"},"content":"The *target user profile*:"},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":1339,"author":{"gitID":"-"},"content":"* prefers desktop apps over other types"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1342,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI Apps"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"* needs to manage several people\u0027s (celebrities\u0027) schedule"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"* has a need to link contacts to appointments"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"**MAJOR**"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"*Adding, deleting, editing appointments*: Able to create, delete and edit appointments within the application. (By Muruges)"},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":"*Listing appointments* : Able to list appointments within a date range. (By Muruges)"},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"*Showing location on map*: Able to show the location of an appointment using address in maps. (By Damien)"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"*Showing route on map*: Able to show the rough route used to calculate the distance and time of travel. With the estimated distance and time of travel being shown in result display panel. (By Damien)"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"*Storing appointments*: Able to parse appointments information from storage, and save new and edited appointment"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"information into storage. (By Tzer Bin)"},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"*Reminding of appointments*: Able to draft an email template to remind persons associated with the appointment and fill in the addressees\u0027 emails automatically. (By Jinyi)"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"**MINOR**"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"*Adding attendees and POCs*: Able to add a list of celebrities and a list of Points of Contact to each appointment. (By Muruges)"},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"*Switching between different calendar views*: Able to switch to view appointments on the calendar by day, week, month and year with CLI. (Jinyi)"},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"-"},"content":"*Customizing visual themes*: Able to customize visual themes of the application. (By Tzer Bin)"},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"*Removing a tag*: Able to remove a tag from each person with it in the application. (By Jinyi)"},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"*View appointment*: Able to view a specific appointment in result display from list of appointments based on index. Location will"},{"lineNumber":1377,"author":{"gitID":"-"},"content":" also be shown in map. (By Damien)"},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"WJY-norainu"},"content":"[width\u003d\"90%\",cols\u003d\"15%,\u003c20%,\u003c30%,\u003c40%\",options\u003d\"header\",]"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1386,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |so that I can..."},{"lineNumber":1387,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |add a new person |access contacting information of the person from the App"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |delete a person |remove contacts that I no longer need"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"|`* * *` |user |undo a previous command |remove the change made by mistake"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"|`* * *` |user |redo a previous command |restore the change removed by mistake"},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |have a calendar inside the address book |know the date and day"},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |display appointments on calendar by day, week, and month |check appointments in different time frames"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |add an appointment to a calendar |schedule different appointments without time clashes"},{"lineNumber":1404,"author":{"gitID":"-"},"content":""},{"lineNumber":1405,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |delete an appointment from a calendar |remove appointments that are cancelled"},{"lineNumber":1406,"author":{"gitID":"-"},"content":""},{"lineNumber":1407,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |edit an appointment in a calendar |change the information about the appointment when there is a change in plan or arrangement"},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |save appointments |get appointments loaded in the calendar automatically when I re-launch the App"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |get alerted for upcoming appointments |set my priorities straight"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |see the location of an appointment in a map |plan for travel"},{"lineNumber":1414,"author":{"gitID":"-"},"content":""},{"lineNumber":1415,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |see various landmarks around a specific location in a road map |understand better the roads around the location"},{"lineNumber":1416,"author":{"gitID":"-"},"content":""},{"lineNumber":1417,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |see various landmarks around a specific location in a satellite map |see in real time the actual layout of the surrounding"},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |user |zoom in and out of the map of a location in a map |view the location in different levels of details"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager who chauffeurs celebrities |see the best route of travel by driving between two locations in a map |plan for the shortest travel"},{"lineNumber":1422,"author":{"gitID":"-"},"content":""},{"lineNumber":1423,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager who chauffeurs celebrities |know if two locations can be reached by driving |foresee any problems and plan ahead"},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager who chauffeurs celebrities |know the estimated distance between two locations by driving |cater enough time for travelling to avoid being late"},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager who chauffeurs celebrities |know the estimated time of travel between two locations by driving |reduce the time of travel to reach an appointment location"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"WJY-norainu"},"content":"|`* * *` |celebrity manager |have multiple calendars to display appointments for different celebrities |manage multiple celebrities\u0027 appointments"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1432,"author":{"gitID":"-"},"content":""},{"lineNumber":1433,"author":{"gitID":"WJY-norainu"},"content":"|`* *` |user |change the size of different windows of the App |customise the window sizes"},{"lineNumber":1434,"author":{"gitID":"-"},"content":""},{"lineNumber":1435,"author":{"gitID":"WJY-norainu"},"content":"|`* *` |user who contacts different parties involved in an appointment |draft the message about appointment details automatically |save time to draft the email"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"|`* *` |user who frequently contacts certain people |sort the contacts by contacting frequency |find those people I frequently contact easily"},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"WJY-norainu"},"content":"|`* *` |user |change the colour scheme of the App |choose my preferred colour scheme"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"WJY-norainu"},"content":"|`* *` |celebrity manager |group celebrities by different talents |find celebrities by talent easily"},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"WJY-norainu"},"content":"|`* *` |celebrity manager managing celebrities of the same group|add an appointment to the calendars of these celebrities at the same time |save time"},{"lineNumber":1444,"author":{"gitID":"-"},"content":""},{"lineNumber":1445,"author":{"gitID":"WJY-norainu"},"content":"|`*` |user with many international contacts |group contacts by country code |see my contacts from different countries"},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"WJY-norainu"},"content":"|`*` |user of previous versions of the App |transfer my contacts to the new version |save the trouble of adding the contacts again"},{"lineNumber":1448,"author":{"gitID":"-"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":"|`*` |user with poor eyesight |the address book to read out the contacts to me |use it more efficiently"},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":"|`*` |user |output the contacts to a separate list |have a backup copy of the contacts"},{"lineNumber":1452,"author":{"gitID":"-"},"content":""},{"lineNumber":1453,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1456,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1457,"author":{"gitID":"-"},"content":""},{"lineNumber":1458,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `CelebManager` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1459,"author":{"gitID":"-"},"content":""},{"lineNumber":1460,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1461,"author":{"gitID":"-"},"content":""},{"lineNumber":1462,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to list persons."},{"lineNumber":1465,"author":{"gitID":"-"},"content":"2.  CelebManager shows a list of persons."},{"lineNumber":1466,"author":{"gitID":"WJY-norainu"},"content":"3.  User requests to delete a specific person in the list."},{"lineNumber":1467,"author":{"gitID":"-"},"content":"4.  CelebManager deletes the person."},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1471,"author":{"gitID":"-"},"content":""},{"lineNumber":1472,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1476,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1480,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1481,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"** 3a1. CelebManager shows an error message."},{"lineNumber":1483,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"WJY-norainu"},"content":"* 3b. The person at the given index is a celebrity."},{"lineNumber":1487,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1488,"author":{"gitID":"WJY-norainu"},"content":"[none]"},{"lineNumber":1489,"author":{"gitID":"WJY-norainu"},"content":"** 3b1. CelebManager deletes the celebrity\u0027s calendar."},{"lineNumber":1490,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1491,"author":{"gitID":"WJY-norainu"},"content":"Use case continues to step 4."},{"lineNumber":1492,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Undo"},{"lineNumber":1494,"author":{"gitID":"-"},"content":""},{"lineNumber":1495,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to undo."},{"lineNumber":1498,"author":{"gitID":"-"},"content":"2.  CelebManager undoes the latest executed command that mutates the data."},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1501,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1502,"author":{"gitID":"-"},"content":""},{"lineNumber":1503,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1504,"author":{"gitID":"-"},"content":""},{"lineNumber":1505,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1506,"author":{"gitID":"WJY-norainu"},"content":"* 2a. There is no executed command that mutates the data."},{"lineNumber":1507,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1508,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1509,"author":{"gitID":"-"},"content":"** 2a1. CelebManager shows an error message."},{"lineNumber":1510,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1511,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1512,"author":{"gitID":"-"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Redo"},{"lineNumber":1514,"author":{"gitID":"-"},"content":""},{"lineNumber":1515,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to redo."},{"lineNumber":1518,"author":{"gitID":"-"},"content":"2.  CelebManager redoes the latest executed undo command."},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1521,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1522,"author":{"gitID":"-"},"content":""},{"lineNumber":1523,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1524,"author":{"gitID":"-"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1526,"author":{"gitID":"-"},"content":"* 2a. There is no executed undo command."},{"lineNumber":1527,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1528,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1529,"author":{"gitID":"-"},"content":"** 2a1. CelebManager shows an error message."},{"lineNumber":1530,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1531,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Use case: Remove tag"},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"WJY-norainu"},"content":"1. User requests to remove a tag."},{"lineNumber":1538,"author":{"gitID":"-"},"content":"2. CelebManager removes the tag from any person having it."},{"lineNumber":1539,"author":{"gitID":"-"},"content":""},{"lineNumber":1540,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1541,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1542,"author":{"gitID":"-"},"content":""},{"lineNumber":1543,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1546,"author":{"gitID":"WJY-norainu"},"content":"* 1a. The tag does not exist."},{"lineNumber":1547,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1548,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1549,"author":{"gitID":"-"},"content":"** 1a1. CelebManager shows an error message."},{"lineNumber":1550,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1551,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"WJY-norainu"},"content":"* 1b. The tag is celebrity."},{"lineNumber":1554,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1555,"author":{"gitID":"WJY-norainu"},"content":"[none]"},{"lineNumber":1556,"author":{"gitID":"WJY-norainu"},"content":"** 1b1. CelebManager shows an error message."},{"lineNumber":1557,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1558,"author":{"gitID":"WJY-norainu"},"content":"Use case ends."},{"lineNumber":1559,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1560,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":1561,"author":{"gitID":"-"},"content":""},{"lineNumber":1562,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1563,"author":{"gitID":"-"},"content":""},{"lineNumber":1564,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to add an appointment."},{"lineNumber":1565,"author":{"gitID":"-"},"content":"2.  CelebManager adds the appointment to the currently displayed calendar."},{"lineNumber":1566,"author":{"gitID":"-"},"content":""},{"lineNumber":1567,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1568,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1569,"author":{"gitID":"-"},"content":""},{"lineNumber":1570,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1573,"author":{"gitID":"WJY-norainu"},"content":"* 1a. Appointment to add has incorrect details or format."},{"lineNumber":1574,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1575,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1576,"author":{"gitID":"-"},"content":"** 1a1. CelebManager shows an error message."},{"lineNumber":1577,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1578,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1579,"author":{"gitID":"-"},"content":""},{"lineNumber":1580,"author":{"gitID":"WJY-norainu"},"content":"* 2a. Appointment to add clashes with existing appointment."},{"lineNumber":1581,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1582,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1583,"author":{"gitID":"-"},"content":"** 2a1. CelebManager shows an error message."},{"lineNumber":1584,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1585,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View appointment"},{"lineNumber":1588,"author":{"gitID":"-"},"content":""},{"lineNumber":1589,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to view appointment."},{"lineNumber":1592,"author":{"gitID":"-"},"content":"2.  CelebManager shows the appointment\u0027s details."},{"lineNumber":1593,"author":{"gitID":"-"},"content":""},{"lineNumber":1594,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1595,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1596,"author":{"gitID":"-"},"content":""},{"lineNumber":1597,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1600,"author":{"gitID":"WJY-norainu"},"content":"* 1a. Appointment to view does not exist."},{"lineNumber":1601,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1602,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1603,"author":{"gitID":"-"},"content":"** 1a1. CelebManager shows an error message."},{"lineNumber":1604,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1605,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1606,"author":{"gitID":"-"},"content":""},{"lineNumber":1607,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Use case: List appointments"},{"lineNumber":1608,"author":{"gitID":"-"},"content":""},{"lineNumber":1609,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to list appointments from a start date to an end date."},{"lineNumber":1612,"author":{"gitID":"-"},"content":"2.  CelebManager shows a list of appointments within the date range (inclusive)."},{"lineNumber":1613,"author":{"gitID":"-"},"content":""},{"lineNumber":1614,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1615,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1616,"author":{"gitID":"-"},"content":""},{"lineNumber":1617,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1618,"author":{"gitID":"-"},"content":""},{"lineNumber":1619,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1620,"author":{"gitID":"WJY-norainu"},"content":"* 1a. The dates are invalid or in wrong format."},{"lineNumber":1621,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1622,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1623,"author":{"gitID":"-"},"content":"** 1a1. CelebManager outputs an error message."},{"lineNumber":1624,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1625,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1626,"author":{"gitID":"-"},"content":""},{"lineNumber":1627,"author":{"gitID":"WJY-norainu"},"content":"[none]"},{"lineNumber":1628,"author":{"gitID":"WJY-norainu"},"content":"* 1b. The entered start date is after end date."},{"lineNumber":1629,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1630,"author":{"gitID":"WJY-norainu"},"content":"[none]"},{"lineNumber":1631,"author":{"gitID":"WJY-norainu"},"content":"** 1b1. CelebManager outputs an error message."},{"lineNumber":1632,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1633,"author":{"gitID":"WJY-norainu"},"content":"Use case ends."},{"lineNumber":1634,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1635,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1636,"author":{"gitID":"WJY-norainu"},"content":"* 2a. There is no appointment to show in the date range."},{"lineNumber":1637,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1638,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1639,"author":{"gitID":"-"},"content":"** 2a1. CelebManager outputs a message that says no appointment in the specified date range."},{"lineNumber":1640,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1641,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1642,"author":{"gitID":"-"},"content":""},{"lineNumber":1643,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Use case: Delete appointment"},{"lineNumber":1644,"author":{"gitID":"-"},"content":""},{"lineNumber":1645,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to list appointments from a start date to an end date."},{"lineNumber":1648,"author":{"gitID":"-"},"content":"2.  CelebManager shows a list of appointments within the date range (inclusive)."},{"lineNumber":1649,"author":{"gitID":"WJY-norainu"},"content":"3.  User requests to delete a specific appointment in the list."},{"lineNumber":1650,"author":{"gitID":"-"},"content":"4.  CelebManager deletes the appointment."},{"lineNumber":1651,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1652,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1653,"author":{"gitID":"-"},"content":""},{"lineNumber":1654,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1655,"author":{"gitID":"-"},"content":""},{"lineNumber":1656,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1657,"author":{"gitID":"WJY-norainu"},"content":"* 1a. The dates are invalid or in wrong format."},{"lineNumber":1658,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1659,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1660,"author":{"gitID":"-"},"content":"** 1a1. CelebManager outputs an error message."},{"lineNumber":1661,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1662,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1663,"author":{"gitID":"-"},"content":""},{"lineNumber":1664,"author":{"gitID":"WJY-norainu"},"content":"[none]"},{"lineNumber":1665,"author":{"gitID":"WJY-norainu"},"content":"* 1b. The entered start date is after end date."},{"lineNumber":1666,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1667,"author":{"gitID":"WJY-norainu"},"content":"[none]"},{"lineNumber":1668,"author":{"gitID":"WJY-norainu"},"content":"** 1b1. CelebManager outputs an error message."},{"lineNumber":1669,"author":{"gitID":"WJY-norainu"},"content":"+"},{"lineNumber":1670,"author":{"gitID":"WJY-norainu"},"content":"Use case ends."},{"lineNumber":1671,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1672,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1673,"author":{"gitID":"WJY-norainu"},"content":"* 2a. There is no appointment to show in the date range."},{"lineNumber":1674,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1675,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"** 2a1. CelebManager outputs a message that says no appointment in the specified date range."},{"lineNumber":1677,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1678,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1679,"author":{"gitID":"-"},"content":""},{"lineNumber":1680,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1681,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1682,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1683,"author":{"gitID":"-"},"content":"** 3a1. CelebManager shows an error message."},{"lineNumber":1684,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1685,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1686,"author":{"gitID":"-"},"content":""},{"lineNumber":1687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit appointment"},{"lineNumber":1688,"author":{"gitID":"-"},"content":""},{"lineNumber":1689,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1690,"author":{"gitID":"-"},"content":""},{"lineNumber":1691,"author":{"gitID":"WJY-norainu"},"content":"1.  User requests to list appointments from a start date to an end date."},{"lineNumber":1692,"author":{"gitID":"-"},"content":"2.  CelebManager shows a list of appointments within the date range (inclusive)."},{"lineNumber":1693,"author":{"gitID":"WJY-norainu"},"content":"3.  User requests to edit a specified appointment."},{"lineNumber":1694,"author":{"gitID":"-"},"content":"4.  CelebManager changes appointment details and displays new appointment details to user."},{"lineNumber":1695,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1696,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1697,"author":{"gitID":"-"},"content":""},{"lineNumber":1698,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1699,"author":{"gitID":"-"},"content":""},{"lineNumber":1700,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1701,"author":{"gitID":"WJY-norainu"},"content":"* 1a. The dates are invalid or in wrong format."},{"lineNumber":1702,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1703,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1704,"author":{"gitID":"-"},"content":"** 1a1. CelebManager outputs an error message."},{"lineNumber":1705,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1706,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1707,"author":{"gitID":"-"},"content":""},{"lineNumber":1708,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1709,"author":{"gitID":"WJY-norainu"},"content":"* 2a. There is no appointment to show in the date range."},{"lineNumber":1710,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1711,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1712,"author":{"gitID":"-"},"content":"** 2a1. CelebManager outputs a message that says no appointment in the specified date range."},{"lineNumber":1713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1714,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1715,"author":{"gitID":"-"},"content":""},{"lineNumber":1716,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1717,"author":{"gitID":"-"},"content":"* 3a.  The given index is invalid."},{"lineNumber":1718,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1719,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1720,"author":{"gitID":"-"},"content":"** 3a1. CelebManager shows an error message."},{"lineNumber":1721,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1722,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1723,"author":{"gitID":"-"},"content":""},{"lineNumber":1724,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1725,"author":{"gitID":"WJY-norainu"},"content":"* 3b.  Information entered for edit is invalid."},{"lineNumber":1726,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1727,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1728,"author":{"gitID":"-"},"content":"** 3b1. CelebManager shows an error message."},{"lineNumber":1729,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1730,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1731,"author":{"gitID":"-"},"content":""},{"lineNumber":1732,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Show location in map"},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1735,"author":{"gitID":"-"},"content":""},{"lineNumber":1736,"author":{"gitID":"-"},"content":"1.  User inputs location name or address."},{"lineNumber":1737,"author":{"gitID":"-"},"content":"2.  CelebManager converts information into LatLong form."},{"lineNumber":1738,"author":{"gitID":"-"},"content":"3.  Celeb Manager uses the LatLong info to update create a new location marker."},{"lineNumber":1739,"author":{"gitID":"-"},"content":"4.  CelebManager updates the map with the location marker and re-centre its panel view."},{"lineNumber":1740,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1741,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1742,"author":{"gitID":"-"},"content":""},{"lineNumber":1743,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1744,"author":{"gitID":"-"},"content":""},{"lineNumber":1745,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1746,"author":{"gitID":"-"},"content":"* 1a. User provides invalid input."},{"lineNumber":1747,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1748,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1749,"author":{"gitID":"-"},"content":"** 1a1. CelebManager requests User to provide valid input."},{"lineNumber":1750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1751,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1752,"author":{"gitID":"-"},"content":"** 1a2. User enters new input."},{"lineNumber":1753,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1754,"author":{"gitID":"-"},"content":"Steps 1a1-1a2 are repeated until input is valid."},{"lineNumber":1755,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1756,"author":{"gitID":"-"},"content":"Use case resumes from step 2."},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1759,"author":{"gitID":"-"},"content":"* 4a. When there is an existing marker in the map."},{"lineNumber":1760,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1761,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1762,"author":{"gitID":"-"},"content":"** 4a1. CelebManager removes it."},{"lineNumber":1763,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1764,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1765,"author":{"gitID":"-"},"content":""},{"lineNumber":1766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Show estimated route by driving in map"},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1769,"author":{"gitID":"-"},"content":""},{"lineNumber":1770,"author":{"gitID":"-"},"content":"1.  User inputs start and end location name or address."},{"lineNumber":1771,"author":{"gitID":"-"},"content":"2.  CelebManager converts information into LatLong form."},{"lineNumber":1772,"author":{"gitID":"-"},"content":"3.  Celeb Manager uses the LatLong info to generate the route."},{"lineNumber":1773,"author":{"gitID":"-"},"content":"4.  CelebManager updates the map with the route."},{"lineNumber":1774,"author":{"gitID":"-"},"content":""},{"lineNumber":1775,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1776,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1777,"author":{"gitID":"-"},"content":""},{"lineNumber":1778,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1779,"author":{"gitID":"-"},"content":""},{"lineNumber":1780,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1781,"author":{"gitID":"-"},"content":"* 1a. User provides invalid input."},{"lineNumber":1782,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1783,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1784,"author":{"gitID":"-"},"content":"** 1a1. CelebManager requests User to provide valid input."},{"lineNumber":1785,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1786,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1787,"author":{"gitID":"-"},"content":"** 1a2. User enters new input."},{"lineNumber":1788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1789,"author":{"gitID":"-"},"content":"Steps 1a1-1a2 are repeated until input is valid."},{"lineNumber":1790,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1791,"author":{"gitID":"-"},"content":"Use case resumes from step 2."},{"lineNumber":1792,"author":{"gitID":"-"},"content":""},{"lineNumber":1793,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1794,"author":{"gitID":"-"},"content":"* 3a. When both location cannot be reached by driving"},{"lineNumber":1795,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1796,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1797,"author":{"gitID":"-"},"content":"** 3a1. CelebManager shows error message."},{"lineNumber":1798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1799,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1800,"author":{"gitID":"-"},"content":""},{"lineNumber":1801,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1802,"author":{"gitID":"-"},"content":"* 4a. When there is an existing route in the map"},{"lineNumber":1803,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1804,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1805,"author":{"gitID":"-"},"content":"** 4a1. CelebManager removes it."},{"lineNumber":1806,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1807,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1808,"author":{"gitID":"-"},"content":""},{"lineNumber":1809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Show estimated distance and time of travel by driving"},{"lineNumber":1810,"author":{"gitID":"-"},"content":""},{"lineNumber":1811,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1812,"author":{"gitID":"-"},"content":""},{"lineNumber":1813,"author":{"gitID":"-"},"content":"1.  User inputs start and end location name or address."},{"lineNumber":1814,"author":{"gitID":"-"},"content":"2.  CelebManager converts information into LatLong form."},{"lineNumber":1815,"author":{"gitID":"-"},"content":"3.  Celeb Manager uses the LatLong info to generate the distance and time required to travel."},{"lineNumber":1816,"author":{"gitID":"-"},"content":"4.  CelebManager shows the information."},{"lineNumber":1817,"author":{"gitID":"-"},"content":""},{"lineNumber":1818,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1819,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1820,"author":{"gitID":"-"},"content":""},{"lineNumber":1821,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1822,"author":{"gitID":"-"},"content":""},{"lineNumber":1823,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1824,"author":{"gitID":"-"},"content":"* 1a. User provides invalid input."},{"lineNumber":1825,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1826,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1827,"author":{"gitID":"-"},"content":"** 1a1. CelebManager requests User to provide valid input."},{"lineNumber":1828,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1829,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1830,"author":{"gitID":"-"},"content":"** 1a2. User enters new input."},{"lineNumber":1831,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1832,"author":{"gitID":"-"},"content":"Steps 1a1-1a2 are repeated until input is valid."},{"lineNumber":1833,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1834,"author":{"gitID":"-"},"content":"Use case resumes from step 2."},{"lineNumber":1835,"author":{"gitID":"-"},"content":""},{"lineNumber":1836,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1837,"author":{"gitID":"-"},"content":"* 3a. When both location cannot be reached by driving"},{"lineNumber":1838,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1839,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1840,"author":{"gitID":"-"},"content":"** 3a1. CelebManager shows error message."},{"lineNumber":1841,"author":{"gitID":"-"},"content":""},{"lineNumber":1842,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1843,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1844,"author":{"gitID":"-"},"content":""},{"lineNumber":1845,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1846,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1847,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1848,"author":{"gitID":"WJY-norainu"},"content":".  Should be usable by people with no knowledge about command line input."},{"lineNumber":1849,"author":{"gitID":"WJY-norainu"},"content":".  Should respond to any user command within 10 seconds."},{"lineNumber":1850,"author":{"gitID":"-"},"content":".  Should be backward compatible with data produced by earlier versions of the CelebManager."},{"lineNumber":1851,"author":{"gitID":"WJY-norainu"},"content":".  Should come with automated unit tests and open source code."},{"lineNumber":1852,"author":{"gitID":"WJY-norainu"},"content":".  Should favor DOS style commands over Unix-style commands."},{"lineNumber":1853,"author":{"gitID":"-"},"content":""},{"lineNumber":1854,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1855,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1856,"author":{"gitID":"-"},"content":""},{"lineNumber":1857,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1858,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1859,"author":{"gitID":"-"},"content":""},{"lineNumber":1860,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1861,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1862,"author":{"gitID":"-"},"content":""},{"lineNumber":1863,"author":{"gitID":"WJY-norainu"},"content":"[[celebcalendar]] StorageCalendar::"},{"lineNumber":1864,"author":{"gitID":"WJY-norainu"},"content":"A calendar that contains all appointments a celebrity managed by the user has"},{"lineNumber":1865,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1866,"author":{"gitID":"WJY-norainu"},"content":"[[calendar-view]] Calendar view::"},{"lineNumber":1867,"author":{"gitID":"WJY-norainu"},"content":"The way in which appointments are displayed in calendar +"},{"lineNumber":1868,"author":{"gitID":"WJY-norainu"},"content":"[TIP]"},{"lineNumber":1869,"author":{"gitID":"WJY-norainu"},"content":"CelebManager currently supports displaying by day, week and month."},{"lineNumber":1870,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1871,"author":{"gitID":"-"},"content":"[[appointment]] Appointment::"},{"lineNumber":1872,"author":{"gitID":"WJY-norainu"},"content":"A meeting between contacts at a specific time, date and location +"},{"lineNumber":1873,"author":{"gitID":"WJY-norainu"},"content":"An appointment has a specific name"},{"lineNumber":1874,"author":{"gitID":"-"},"content":""},{"lineNumber":1875,"author":{"gitID":"-"},"content":"[[attendees]] Attendees::"},{"lineNumber":1876,"author":{"gitID":"WJY-norainu"},"content":"A list of contacts who are attending an appointment"},{"lineNumber":1877,"author":{"gitID":"-"},"content":""},{"lineNumber":1878,"author":{"gitID":"-"},"content":"[[points-of-contacts]] Points of Contacts::"},{"lineNumber":1879,"author":{"gitID":"WJY-norainu"},"content":"A list of contacts involved in an appointment but not attending it"},{"lineNumber":1880,"author":{"gitID":"-"},"content":""},{"lineNumber":1881,"author":{"gitID":"-"},"content":"[[blacklist]] Blacklist::"},{"lineNumber":1882,"author":{"gitID":"WJY-norainu"},"content":"A list of contacts which should be marked for being untrustworthy or unacceptable"},{"lineNumber":1883,"author":{"gitID":"-"},"content":""},{"lineNumber":1884,"author":{"gitID":"-"},"content":"[[UI]] User Interface::"},{"lineNumber":1885,"author":{"gitID":"-"},"content":"The Design and looks of the software"},{"lineNumber":1886,"author":{"gitID":"-"},"content":""},{"lineNumber":1887,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1888,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1889,"author":{"gitID":"-"},"content":""},{"lineNumber":1890,"author":{"gitID":"WJY-norainu"},"content":"Given below are instructions to test the App manually."},{"lineNumber":1891,"author":{"gitID":"-"},"content":""},{"lineNumber":1892,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1893,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1894,"author":{"gitID":"-"},"content":""},{"lineNumber":1895,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Launch"},{"lineNumber":1896,"author":{"gitID":"WJY-norainu"},"content":"This section includes instructions to test the launch and re-launch of the App. +"},{"lineNumber":1897,"author":{"gitID":"WJY-norainu"},"content":"For each subsequent launch, window size and location should be the same as the settings before closing the App for previous launch."},{"lineNumber":1898,"author":{"gitID":"-"},"content":""},{"lineNumber":1899,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1900,"author":{"gitID":"-"},"content":""},{"lineNumber":1901,"author":{"gitID":"WJY-norainu"},"content":".. Download the jar file"},{"lineNumber":1902,"author":{"gitID":"WJY-norainu"},"content":".. Copy into an empty folder"},{"lineNumber":1903,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1904,"author":{"gitID":"-"},"content":"   _Expected: CelebManager shows the GUI with a set of sample contacts._"},{"lineNumber":1905,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":1906,"author":{"gitID":"WJY-norainu"},"content":"    The window size may not be optimum."},{"lineNumber":1907,"author":{"gitID":"WJY-norainu"},"content":".. Resize the window to an optimum size"},{"lineNumber":1908,"author":{"gitID":"WJY-norainu"},"content":".. Move the window to a different location"},{"lineNumber":1909,"author":{"gitID":"WJY-norainu"},"content":".. Close the window"},{"lineNumber":1910,"author":{"gitID":"-"},"content":""},{"lineNumber":1911,"author":{"gitID":"WJY-norainu"},"content":". Subsequent launch"},{"lineNumber":1912,"author":{"gitID":"WJY-norainu"},"content":".. Re-launch the App by double-clicking the jar file +"},{"lineNumber":1913,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: The most recent window size and location are retained._"},{"lineNumber":1914,"author":{"gitID":"-"},"content":""},{"lineNumber":1915,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person/celebrity"},{"lineNumber":1916,"author":{"gitID":"-"},"content":"This section includes instructions to test the `add` command of the application."},{"lineNumber":1917,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":1918,"author":{"gitID":"-"},"content":"Prerequisites: No other person in the addressbook with the details of the two persons below."},{"lineNumber":1919,"author":{"gitID":"-"},"content":""},{"lineNumber":1920,"author":{"gitID":"-"},"content":".. Type `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney` in command box and press enter. +"},{"lineNumber":1921,"author":{"gitID":"-"},"content":"    _Expected: A contact by the name John Doe and with the above personal particulars will be added. +"},{"lineNumber":1922,"author":{"gitID":"-"},"content":"    Details of the added contact shown in the status message. Timestamp in the status bar is updated._"},{"lineNumber":1923,"author":{"gitID":"-"},"content":".. Type `add n/Jane Doe p/98765431 e/janed@example.com a/311, Clementi Ave 1, #02-25 t/celebrity` in command box and press enter. +"},{"lineNumber":1924,"author":{"gitID":"-"},"content":"    _Expected: A celebrity by the name Jane Doe is added with the above personal particulars. A new calendar with the initial `J` +"},{"lineNumber":1925,"author":{"gitID":"-"},"content":"    will be created in the calendar panel. Details of the added celebrity shown in the status message. Timestamp in the status bar is updated._"},{"lineNumber":1926,"author":{"gitID":"-"},"content":".. Type in `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney` in command box and press enter. +"},{"lineNumber":1927,"author":{"gitID":"-"},"content":"    _Expected: No person is added. Error details is shown in the status message. Status bar remains the same._"},{"lineNumber":1928,"author":{"gitID":"-"},"content":""},{"lineNumber":1929,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person/celebrity"},{"lineNumber":1930,"author":{"gitID":"-"},"content":"This section includes instructions to test the `delete` command of the CelebManager."},{"lineNumber":1931,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1932,"author":{"gitID":"-"},"content":"Prerequisites: List all persons using the `list` command. Multiple persons in the list. At least one celebrity in the list."},{"lineNumber":1933,"author":{"gitID":"-"},"content":""},{"lineNumber":1934,"author":{"gitID":"-"},"content":".. Type `delete n` in command box (n refers to the one-based index of the celebrity in the person list panel) and press enter. +"},{"lineNumber":1935,"author":{"gitID":"-"},"content":"    _Expected: Chosen celebrity is deleted from the list. Calendar corresponding to the deleted celebrity is removed from the calendar panel."},{"lineNumber":1936,"author":{"gitID":"-"},"content":"    Details of the deleted celebrity is shown in the status message. Timestamp in the status bar is updated._"},{"lineNumber":1937,"author":{"gitID":"-"},"content":".. Type `delete 1` in command box and press enter. +"},{"lineNumber":1938,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated._"},{"lineNumber":1939,"author":{"gitID":"-"},"content":".. Type `delete 0` in command box and press enter. +"},{"lineNumber":1940,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: No person is deleted. Error details shown in the status message. Status bar remains the same._"},{"lineNumber":1941,"author":{"gitID":"-"},"content":".. Type other incorrect delete command such as `delete`, `delete x` (where `x` is larger than the list size) in command box and press enter. +"},{"lineNumber":1942,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: Similar to previous._"},{"lineNumber":1943,"author":{"gitID":"-"},"content":""},{"lineNumber":1944,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Removing a tag"},{"lineNumber":1945,"author":{"gitID":"-"},"content":"This section includes instructions to test the `removeTag` command of the CelebManager."},{"lineNumber":1946,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1947,"author":{"gitID":"-"},"content":"Prerequisites: At least one person in the full contact list (not necessarily the last shown list) has `friends` tag."},{"lineNumber":1948,"author":{"gitID":"-"},"content":""},{"lineNumber":1949,"author":{"gitID":"-"},"content":".. Type `removeTag friends` in command box and press enter. +"},{"lineNumber":1950,"author":{"gitID":"-"},"content":"   _Expected: `friends` tag is removed from any person who has it. Number of persons affected shown in the status message._"},{"lineNumber":1951,"author":{"gitID":"-"},"content":".. Type `removeTag !@#` in command box and press enter. +"},{"lineNumber":1952,"author":{"gitID":"-"},"content":"   _Expected: No tag is removed. Error details shown in the status message._"},{"lineNumber":1953,"author":{"gitID":"-"},"content":".. Type `removeTag celebrity` in command box and press enter. +"},{"lineNumber":1954,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: `celebrity` tag is not removed. Error details shown in the status message._"},{"lineNumber":1955,"author":{"gitID":"WJY-norainu"},"content":".. Type other incorrect `removeTag` commands such as `removeTag`, `removeTag x`"},{"lineNumber":1956,"author":{"gitID":"-"},"content":"(where `x` is a tag that nobody has in the full contact list or an invalid tag name) in command box and press enter. +"},{"lineNumber":1957,"author":{"gitID":"-"},"content":"   _Expected: No tag is removed. Error details shown in the status message._"},{"lineNumber":1958,"author":{"gitID":"-"},"content":""},{"lineNumber":1959,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an appointment"},{"lineNumber":1960,"author":{"gitID":"-"},"content":"This section includes instructions to test the `addAppointment` command of the CelebManager."},{"lineNumber":1961,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1962,"author":{"gitID":"-"},"content":"Prerequisites: List all persons using the `list` command. At least one celebrity and one normal person in the person list panel. No appointments currently present."},{"lineNumber":1963,"author":{"gitID":"-"},"content":""},{"lineNumber":1964,"author":{"gitID":"-"},"content":".. Type `addAppointment n/Oscar` and press enter. Then type `la` and press enter. +"},{"lineNumber":1965,"author":{"gitID":"-"},"content":"    _Expected: An appointment with the name Oscar is added. The start date/time corresponds to the current time. The end date/time is 15 minutes from now._"},{"lineNumber":1966,"author":{"gitID":"-"},"content":".. Type `addAppointment n/Grammy sd/10-04-2018 st/15:00` and press enter. Then type `la` and press enter. +"},{"lineNumber":1967,"author":{"gitID":"-"},"content":"    _Expected: An appointment with the name Grammy is added. The start date/time correspond to the input values. End date/time is 15 minutes from that._"},{"lineNumber":1968,"author":{"gitID":"-"},"content":".. Type `addAppointment n/Dentist appointment sd/11-04-2018 st/16:00 ed/12-04-2018 et/09:00 c/n p/k` (where n corresponds to the index of a celebrity"},{"lineNumber":1969,"author":{"gitID":"-"},"content":"    and k corresponds to the index of a normal person) and press enter. Then type `la` and press enter. +"},{"lineNumber":1970,"author":{"gitID":"-"},"content":"    _Expected: An appointment with the above details and the selected celebrity and point of contact will appear in the appointment list._"},{"lineNumber":1971,"author":{"gitID":"-"},"content":".. Type the above command again and press enter. +"},{"lineNumber":1972,"author":{"gitID":"-"},"content":"    _Expected: No appointment is added. Error details shown in the status message._"},{"lineNumber":1973,"author":{"gitID":"-"},"content":".. Type `addAppointment n/Lunch meeting c/x` (where x refers to an invalid celebrity index) and press enter. +"},{"lineNumber":1974,"author":{"gitID":"-"},"content":"    _Expected: No appointment is added. Error details shown in the status message._"},{"lineNumber":1975,"author":{"gitID":"-"},"content":".. Type `addAppointment n/Dinner l/???` and press enter. +"},{"lineNumber":1976,"author":{"gitID":"-"},"content":"    _Expected: No appointment is added. Error details shown in the status message._"},{"lineNumber":1977,"author":{"gitID":"-"},"content":""},{"lineNumber":1978,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Listing appointments"},{"lineNumber":1979,"author":{"gitID":"WJY-norainu"},"content":"This section includes instructions to test the `listAppointment` command of the application."},{"lineNumber":1980,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":1981,"author":{"gitID":"WJY-norainu"},"content":"Prerequisites: At least one appointment stored in CelebManager."},{"lineNumber":1982,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1983,"author":{"gitID":"-"},"content":".. Type `listAppointment` in command box and press enter. +"},{"lineNumber":1984,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: All appointments are listed._"},{"lineNumber":1985,"author":{"gitID":"-"},"content":".. Type `listAppointment 01-04 01-05` in command box and press enter. +"},{"lineNumber":1986,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: Appointments with scheduled timings which overlap with the period of 1st April to 1st May of the current year are listed."},{"lineNumber":1987,"author":{"gitID":"WJY-norainu"},"content":"   If there is no such appointment, error details shown in the status message._"},{"lineNumber":1988,"author":{"gitID":"-"},"content":".. Type `listAppointment 0` in command box and press enter. +"},{"lineNumber":1989,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: No appointments listed. Error details shown in the status message._"},{"lineNumber":1990,"author":{"gitID":"-"},"content":".. Type `listAppointment a` in command box and press enter. +"},{"lineNumber":1991,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: No appointments listed. Error details shown in the status message._"},{"lineNumber":1992,"author":{"gitID":"-"},"content":".. Type `listAppointment 03-05 02-01` in command box and press enter. +"},{"lineNumber":1993,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: No appointments listed. Error details shown in the status message._"},{"lineNumber":1994,"author":{"gitID":"WJY-norainu"},"content":".. Type other incorrect `listAppointment` commands such as `listAppointment`, `listAppointment x`"},{"lineNumber":1995,"author":{"gitID":"WJY-norainu"},"content":"(where `x` is not a date range of format `DD-MM-YYYY DD-MM-YYYY`, `DD-MM-YYYY DD-MM`, `DD-MM DD-MM-YYYY`, or `DD-MM DD-MM`)"},{"lineNumber":1996,"author":{"gitID":"-"},"content":"in command box and press enter. +"},{"lineNumber":1997,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: No appointments listed. Error details shown in the status message._"},{"lineNumber":1998,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":1999,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Edititng an appointment"},{"lineNumber":2000,"author":{"gitID":"-"},"content":"This section includes instructions to test the `editAppointment` command of the CelebManager."},{"lineNumber":2001,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2002,"author":{"gitID":"-"},"content":"Prerequisites: List all appointments using the `listAppointment` command. At least one appointment stored in the list."},{"lineNumber":2003,"author":{"gitID":"-"},"content":""},{"lineNumber":2004,"author":{"gitID":"-"},"content":". while listing appointments:"},{"lineNumber":2005,"author":{"gitID":"-"},"content":".. Type `editAppointment 0` in command box and press enter. +"},{"lineNumber":2006,"author":{"gitID":"-"},"content":"   _Expected: No appointment is edited. Error details shown in the status message. Appointment list remains the same._"},{"lineNumber":2007,"author":{"gitID":"-"},"content":".. Type `editAppointment 1 n/New Appointment` in command box and press enter. +"},{"lineNumber":2008,"author":{"gitID":"-"},"content":"   _Expected: First appointment is renamed as `New Appointment` as long as it did not already have that name previously, and will go back to the calendar page."},{"lineNumber":2009,"author":{"gitID":"-"},"content":"   If there is an error because the name is the same, no appointment is edited, error details shown in the status message and appointment list remains the same._"},{"lineNumber":2010,"author":{"gitID":"-"},"content":".. Type other incorrect `editAppointment` commands such as `editAppointment`, `editAppointment x` (where `x` is larger than the appointment list size) in command box and press enter. +"},{"lineNumber":2011,"author":{"gitID":"-"},"content":"   _Expected: No appointment is edited. Error details shown in the status message. Appointment list remains the same._"},{"lineNumber":2012,"author":{"gitID":"-"},"content":""},{"lineNumber":2013,"author":{"gitID":"-"},"content":". While not listing appointments"},{"lineNumber":2014,"author":{"gitID":"-"},"content":".. Type correct deleteAppointment commands such as `editAppointment 1` in command box and press enter. +"},{"lineNumber":2015,"author":{"gitID":"-"},"content":"   _Expected: No appointment is edited. Error details shown in the status message._"},{"lineNumber":2016,"author":{"gitID":"-"},"content":""},{"lineNumber":2017,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an appointment"},{"lineNumber":2018,"author":{"gitID":"-"},"content":"This section includes instructions to test the `deleteAppointment` command of the application."},{"lineNumber":2019,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2020,"author":{"gitID":"-"},"content":"Prerequisites: List appointments using the `listAppointment` command. At least one appointment in the list."},{"lineNumber":2021,"author":{"gitID":"-"},"content":""},{"lineNumber":2022,"author":{"gitID":"WJY-norainu"},"content":". While listing appointments:"},{"lineNumber":2023,"author":{"gitID":"-"},"content":".. Type `deleteAppointment 0` in command box and press enter. +"},{"lineNumber":2024,"author":{"gitID":"-"},"content":"   _Expected: No appointment is deleted. Error details shown in the status message. Appointment list remains the same._"},{"lineNumber":2025,"author":{"gitID":"-"},"content":".. Type `deleteAppointment 1` in command box and press enter. +"},{"lineNumber":2026,"author":{"gitID":"-"},"content":"   _Expected: First appointment is deleted from the list. If the deleted appointment is the only appointment in the list, CelebManager will switch back to the calendar of the current day._"},{"lineNumber":2027,"author":{"gitID":"-"},"content":".. Type other incorrect `deleteAppointment` commands such as `deleteAppointment`, `deleteAppointment x` (where `x` is larger than the appointment list size) in command box and press enter. +"},{"lineNumber":2028,"author":{"gitID":"-"},"content":"   _Expected: No appointment is deleted. Error details shown in the status message. Appointment list remains the same._"},{"lineNumber":2029,"author":{"gitID":"-"},"content":""},{"lineNumber":2030,"author":{"gitID":"-"},"content":". While not listing appointments"},{"lineNumber":2031,"author":{"gitID":"-"},"content":".. Type correct deleteAppointment commands such as `deleteAppointment 1` in command box and press enter. +"},{"lineNumber":2032,"author":{"gitID":"-"},"content":"   _Expected: No appointment is deleted. Error details shown in the status message._"},{"lineNumber":2033,"author":{"gitID":"-"},"content":""},{"lineNumber":2034,"author":{"gitID":"Damienskt"},"content":"\u003d\u003d\u003d Viewing an appointment"},{"lineNumber":2035,"author":{"gitID":"-"},"content":"This section includes instructions to test the `viewAppointment` command of the application."},{"lineNumber":2036,"author":{"gitID":"Damienskt"},"content":"[NOTE]"},{"lineNumber":2037,"author":{"gitID":"Damienskt"},"content":"Prerequisites: List all appointments using the `listAppointment` command. Multiple appointments in the list."},{"lineNumber":2038,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":2039,"author":{"gitID":"-"},"content":".. Type `viewAppointment 1` in command box and press enter. +"},{"lineNumber":2040,"author":{"gitID":"Damienskt"},"content":"   _Expected: First appointment is selected from the list. Details of the selected appointment shown in the result display. Location shown in map. Success message shown in result display._"},{"lineNumber":2041,"author":{"gitID":"-"},"content":".. Type `viewAppointment 0` in command box and press enter. +"},{"lineNumber":2042,"author":{"gitID":"Damienskt"},"content":"   _Expected: No appointment is selected. Error details shown in the result display. Status bar remains the same. Map removes any existing location marker or route._"},{"lineNumber":2043,"author":{"gitID":"-"},"content":".. Type other incorrect  command such as `viewAppointment`, `viewAppointment x` (where x is larger than the list size or appointment chosen does not have location data) in command box and press enter. +"},{"lineNumber":2044,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: Similar to previous._"},{"lineNumber":2045,"author":{"gitID":"-"},"content":""},{"lineNumber":2046,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Showing location on map"},{"lineNumber":2047,"author":{"gitID":"-"},"content":"This section includes instructions to test the `showLocation` command of the application."},{"lineNumber":2048,"author":{"gitID":"-"},"content":""},{"lineNumber":2049,"author":{"gitID":"-"},"content":".. Type `showLocation ma/NUS` in command box and press enter. +"},{"lineNumber":2050,"author":{"gitID":"Damienskt"},"content":"   _Expected: Location shown in map. Map view will be centered to location._"},{"lineNumber":2051,"author":{"gitID":"-"},"content":".. Type `showLocation ma/!!!!!!` in command box and press enter. +"},{"lineNumber":2052,"author":{"gitID":"Damienskt"},"content":"   _Expected: Error details shown in the result display. Status bar remains the same. Map removes any existing location marker or route._"},{"lineNumber":2053,"author":{"gitID":"-"},"content":".. Type other incorrect  command such as `showLocation`, `showLocation Punggol` in command box and press enter. +"},{"lineNumber":2054,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: Similar to previous._"},{"lineNumber":2055,"author":{"gitID":"-"},"content":""},{"lineNumber":2056,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Estimating route between two location on map"},{"lineNumber":2057,"author":{"gitID":"-"},"content":"This section includes instructions to test the `estimateRoute` command of the application."},{"lineNumber":2058,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":2059,"author":{"gitID":"-"},"content":".. Type `estimateRoute sma/NUS ema/Punggol` in command box and press enter. +"},{"lineNumber":2060,"author":{"gitID":"Damienskt"},"content":"   _Expected: Best route by driving will be added to map. Map view will be centered to location. Details of distance and time of travel shown in result display."},{"lineNumber":2061,"author":{"gitID":"Damienskt"},"content":"    Success message shown in result display._"},{"lineNumber":2062,"author":{"gitID":"-"},"content":".. Type `estimateRoute sma/!!!!!! ema/Punggol` in command box and press enter. +"},{"lineNumber":2063,"author":{"gitID":"Damienskt"},"content":"   _Expected: Location not found in google server. Error details shown in the result display. Status bar remains the same._"},{"lineNumber":2064,"author":{"gitID":"-"},"content":".. Type `estimateRoute sma/NUS ema/!!!!!!` in command box and press enter. +"},{"lineNumber":2065,"author":{"gitID":"Damienskt"},"content":"   _Expected: Error details shown in the result display. Status bar remains the same. Map removes any existing marker or route._"},{"lineNumber":2066,"author":{"gitID":"-"},"content":".. Type other incorrect  command such as `estimateRoute`, `estimateRoute Punggol NUS`, `estimateRoute sma/Punggol NUS`, `estimateRoute NUS ema/Punggol` in command box and press enter. +"},{"lineNumber":2067,"author":{"gitID":"WJY-norainu"},"content":"   _Expected: Similar to previous._"},{"lineNumber":2068,"author":{"gitID":"-"},"content":""},{"lineNumber":2069,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing a celebrity\u0027s calendar"},{"lineNumber":2070,"author":{"gitID":"-"},"content":"This section includes instructions to test the `viewCalendar` command of the application."},{"lineNumber":2071,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2072,"author":{"gitID":"-"},"content":"Prerequisites: At least one celebrity in the last shown list and the celebrity\u0027s calendar is not currently displayed."},{"lineNumber":2073,"author":{"gitID":"-"},"content":""},{"lineNumber":2074,"author":{"gitID":"-"},"content":".. Type `viewCalendar c` (where `c` is the index of the celebrity) in command box and press enter. +"},{"lineNumber":2075,"author":{"gitID":"-"},"content":"   _Expected: `CalendarPanel` now displays the celebrity\u0027s calendar. If the celebrity is the only celebrity in the full contact list, there won\u0027t be any change in terms of the outlook of calendar._"},{"lineNumber":2076,"author":{"gitID":"-"},"content":".. Type `viewCalendar c` (where `c` is the index of the same celebrity in the previous command) again after previous execution in command box and press enter. +"},{"lineNumber":2077,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2078,"author":{"gitID":"-"},"content":".. Type `viewCalendar p` (where `p` is the index of a non-celebrity person) in command box and press enter. +"},{"lineNumber":2079,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2080,"author":{"gitID":"-"},"content":".. Type `viewCalendar 0` in command box and press enter. +"},{"lineNumber":2081,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2082,"author":{"gitID":"-"},"content":".. Type other incorrect `viewCalendar` commands such as `viewCalendar`, `viewCalendar x` (where `x` is larger than the last shown contact list size or not a valid index number or the index of the celebrity whose calendar is currently displayed) in command box and press enter. +"},{"lineNumber":2083,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2084,"author":{"gitID":"-"},"content":""},{"lineNumber":2085,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing the combined calendar"},{"lineNumber":2086,"author":{"gitID":"-"},"content":"This section includes instructions to test the `viewCombinedCalendar` command of the application."},{"lineNumber":2087,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2088,"author":{"gitID":"-"},"content":"Prerequisites: Combined calendar is not currently displayed."},{"lineNumber":2089,"author":{"gitID":"-"},"content":""},{"lineNumber":2090,"author":{"gitID":"-"},"content":".. Type `viewCombinedCalendar` in command box and press enter. +"},{"lineNumber":2091,"author":{"gitID":"-"},"content":"   _Expected: `CalendarPanel` now displays the combined calendar. If there is only one celebrity in the full contact list, there won\u0027t be any change in terms of the outlook of calendar._"},{"lineNumber":2092,"author":{"gitID":"-"},"content":".. Type `viewCombinedCalendar` again after previous execution in command box and press enter. +"},{"lineNumber":2093,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2094,"author":{"gitID":"-"},"content":""},{"lineNumber":2095,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing to a different calendar view"},{"lineNumber":2096,"author":{"gitID":"-"},"content":"This section includes instructions to test the `viewCalendarBy` command of the application."},{"lineNumber":2097,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2098,"author":{"gitID":"-"},"content":"Prerequisites: Calendar is currently in `day` view."},{"lineNumber":2099,"author":{"gitID":"-"},"content":""},{"lineNumber":2100,"author":{"gitID":"-"},"content":".. Type `viewCalendarBy week` in command box and press enter. +"},{"lineNumber":2101,"author":{"gitID":"-"},"content":"   _Expected: Calendar shows the week which the original day is in._"},{"lineNumber":2102,"author":{"gitID":"-"},"content":".. Type `viewCalendarBy month` in command box and press enter. +"},{"lineNumber":2103,"author":{"gitID":"-"},"content":"   _Expected: Calendar shows the month which the original day is in._"},{"lineNumber":2104,"author":{"gitID":"-"},"content":".. Type `viewCalendarBy day` in command box and press enter. +"},{"lineNumber":2105,"author":{"gitID":"-"},"content":"   _Expected: Calendar shows the day which is the original day._"},{"lineNumber":2106,"author":{"gitID":"-"},"content":".. Type `viewCalendarBy day` again after executing the previous command in command box and press enter. +"},{"lineNumber":2107,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2108,"author":{"gitID":"-"},"content":".. Type `viewCalendarBy MOnTh` in command box and press enter. +"},{"lineNumber":2109,"author":{"gitID":"-"},"content":"   _Expected: Calendar shows the week which the original day is in._"},{"lineNumber":2110,"author":{"gitID":"-"},"content":".. Type `viewCalendarBy 1` in command box and press enter. +"},{"lineNumber":2111,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2112,"author":{"gitID":"-"},"content":".. Type other incorrect `viewCalendarBy` commands such as `viewCalendarBy`, `viewCalendarBy x` (where x is not `day`, `week`, `month` or mixed uppercase and lowercase of one of them) in command box and press enter. +"},{"lineNumber":2113,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2114,"author":{"gitID":"-"},"content":""},{"lineNumber":2115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing a particular day\u0027s calendar"},{"lineNumber":2116,"author":{"gitID":"-"},"content":"This section includes instructions to test the `viewDate` command of the application."},{"lineNumber":2117,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2118,"author":{"gitID":"-"},"content":"Prerequisites: Calendar is currently in `day` view and displays the current day\u0027s calendar. Current day is not 1st April of 2018."},{"lineNumber":2119,"author":{"gitID":"-"},"content":""},{"lineNumber":2120,"author":{"gitID":"-"},"content":".. Type `viewDate 01-04-2018` in command box and press enter. +"},{"lineNumber":2121,"author":{"gitID":"-"},"content":"   _Expected: `CalendarPanel` displays the calendar for 1st April of 2018._"},{"lineNumber":2122,"author":{"gitID":"-"},"content":".. Type `viewDate d` (where `d` is a date that is different from the current day\u0027s date, in DD-MM format) in command box and press enter. +"},{"lineNumber":2123,"author":{"gitID":"-"},"content":"   _Expected: `CalendarPanel` displays the calendar for date `d` of current year._"},{"lineNumber":2124,"author":{"gitID":"-"},"content":".. Type `viewDate` in command box and press enter. +"},{"lineNumber":2125,"author":{"gitID":"-"},"content":"   _Expected: `CalendarPanel` displays the calendar for the current day._"},{"lineNumber":2126,"author":{"gitID":"-"},"content":".. Type `viewDate` again after executing the previous command in command box and press enter. +"},{"lineNumber":2127,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2128,"author":{"gitID":"-"},"content":".. Type `viewDate 01-04` again after executing the previous command in command box and press enter. +"},{"lineNumber":2129,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2130,"author":{"gitID":"-"},"content":".. Type `viewDate 0` in command box and press enter. +"},{"lineNumber":2131,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2132,"author":{"gitID":"-"},"content":".. Type `viewDate !` in command box and press enter. +"},{"lineNumber":2133,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2134,"author":{"gitID":"-"},"content":".. Type other incorrect `viewDate` commands such as `viewDate`, `viewDate x` (where `x` is not a date in `DD-MM-YYYY` or `DD-MM` format) in command box and press enter +"},{"lineNumber":2135,"author":{"gitID":"-"},"content":"   _Expected: No change in calendar. Error details shown in the status message._"},{"lineNumber":2136,"author":{"gitID":"-"},"content":""},{"lineNumber":2137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Transferring of storage calendar .xml file"},{"lineNumber":2138,"author":{"gitID":"-"},"content":"This section includes instructions to test the transferring of file of the application"},{"lineNumber":2139,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2140,"author":{"gitID":"-"},"content":"Preprequisites: The file is a valid .xml file for storage calendar, and is named `storagecalendar.xml`."},{"lineNumber":2141,"author":{"gitID":"-"},"content":""},{"lineNumber":2142,"author":{"gitID":"-"},"content":".. Close the application."},{"lineNumber":2143,"author":{"gitID":"-"},"content":".. Open the `data/` directory in the folder containing the .jar file."},{"lineNumber":2144,"author":{"gitID":"-"},"content":"   _Expected: `storagecalendar.xml` consisting the to-be-replaced data is in the folder._"},{"lineNumber":2145,"author":{"gitID":"-"},"content":".. Replace the old `storagecalendar.xml` with the the new `storagecalendar.xml` file."},{"lineNumber":2146,"author":{"gitID":"-"},"content":".. Restart the application."},{"lineNumber":2147,"author":{"gitID":"-"},"content":"   _Expected: The new appointments data from `storagecalendar.xml` is reflected in the calendar panel._"}],"authorContributionMap":{"WJY-norainu":542,"-":1591,"Damienskt":14}},{"path":"src/test/java/systemtests/map/ShowLocationCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_MAP_DESC1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_MAP_DESC2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import systemtests.AddressBookSystemTest;"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"public class ShowLocationCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    public void showLocation() {"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"        /* ------------------------------ Perform valid showLocation operations --------------------------------- */"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"        /* Case: show location using address (block and street name) of a place"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"         * -\u003e location marker shown in map"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"        MapAddress newAddress \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(newAddress);"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        /* Case: show location using postal code of a place"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"         * -\u003e location marker shown in map"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        newAddress \u003d new MapAddress(\"820296\");"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(newAddress);"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"        /* Case: show location using name of a place (e.g National University of Singapore)"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"         * -\u003e location marker shown in map"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"        newAddress \u003d new MapAddress(\"National University of Singapore\");"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(newAddress);"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        /* ------------------------------- Perform invalid showLocation operations --------------------------------- */"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        /* Case: missing MapAddress and prefix-\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        String command \u003d ShowLocationCommand.COMMAND_WORD + \"\";"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        command \u003d \"showslocation \" + VALID_ADDRESS_MAP_BOB;"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"        /* Case: correct prefix but missing MapAddress -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        command \u003d ShowLocationCommand.COMMAND_WORD + INVALID_ADDRESS_MAP_DESC2;"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"        /* Case: correct prefix but invalid MapAddress -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"        command \u003d ShowLocationCommand.COMMAND_WORD + INVALID_ADDRESS_MAP_DESC1;"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        /* Case: missing MapAddress prefix -\u003e rejected */"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"        command \u003d ShowLocationCommand.COMMAND_WORD + \" \" + VALID_ADDRESS_MAP_BOB;"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"     * Executes the {@code ShowLocationCommand} that asserts that the,\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"     * 3. Result display box displays the success message of executing {@code ShowLocationCommand}.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"     * 4. Shows the location marker of {@code address} in Maps GUI.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"     * 5. Calendar panel and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(MapAddress address) {"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(ShowLocationCommand.COMMAND_WORD + \" \" + PREFIX_MAP_ADDRESS + address.toString());"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"     * Performs the same verification as {@code assertCommandSuccess(MapAddress)}. Executes {@code command}"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"     * instead."},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"     * @see ShowLocationCommandSystemTest#assertCommandSuccess(MapAddress)"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"        String expectedResultMessage \u003d ShowLocationCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except asserts that"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"Damienskt"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":97,"author":{"gitID":"Damienskt"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"Damienskt"},"content":"     * @see ShowLocationCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":99,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":101,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":102,"author":{"gitID":"Damienskt"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":103,"author":{"gitID":"Damienskt"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"Damienskt"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":105,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":107,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Damienskt"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"Damienskt"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"Damienskt"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"Damienskt"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"Damienskt"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"Damienskt"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"Damienskt"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":115,"author":{"gitID":"Damienskt"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"Damienskt"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":117,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":119,"author":{"gitID":"Damienskt"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":120,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":121,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":122,"author":{"gitID":"Damienskt"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"Damienskt"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"Damienskt"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":125,"author":{"gitID":"Damienskt"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":126,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":15,"Damienskt":112}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String LABEL_STYLE_DEFAULT \u003d \"label\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            actualCard.getTagStyleClasses(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                assertEquals(Arrays.asList(LABEL_STYLE_DEFAULT, getColorTagStyle(tag)),"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code nameOfTags}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @see PersonCard#getColorTagStyle(String)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private static String getColorTagStyle(String nameOfTags) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        switch (nameOfTags) {"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case \"classmates\":"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case \"owesMoney\":"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case \"colleagues\":"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case \"neighbours\":"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return \"purple\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case \"family\":"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case \"friend\":"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return \"orange\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case \"friends\":"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return \"brown\";"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"        case \"celebrity\":"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case \"husband\":"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return \"grey\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(nameOfTags + \" does not have a color assigned.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return \"\";"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":2,"-":125}},{"path":"src/test/java/systemtests/map/EstimateRouteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MAP_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MAP_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.EstimateRouteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import systemtests.AddressBookSystemTest;"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"public class EstimateRouteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    public void estimateRoute() {"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"        Model model \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"        /* ------------------------------ Perform valid estimateRoute operations --------------------------------- */"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"        /* Case: shows best estimated time and distance of travel between two locations"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"         *  -\u003e Information shown in result display"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        MapAddress startAddress \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"        MapAddress endAddress \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(startAddress, endAddress);"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"        /* Case: shows best estimated time and distance of travel between two locations using postal code"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"         * -\u003e Information shown in result display"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"        startAddress \u003d new MapAddress(\"820296\");"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"        endAddress \u003d new MapAddress(\"119077\");"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(startAddress, endAddress);"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"        /* Case: shows best estimated time and distance of travel between two locations using location name"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"         * -\u003e Information shown in result display"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        startAddress \u003d new MapAddress(\"National University of Singapore\");"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"        endAddress \u003d new MapAddress(\"Punggol\");"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(startAddress, endAddress);"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"        /* ------------------------------ Perform invalid estimateRoute operations --------------------------------- */"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        /* Case: missing MapAddress and prefix-\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        String command \u003d EstimateRouteCommand.COMMAND_WORD + \"\";"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"                EstimateRouteCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"        command \u003d \"estimateroute \" + PREFIX_START_MAP_ADDRESS + VALID_ADDRESS_MAP_BOB"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"                + PREFIX_START_MAP_ADDRESS + VALID_ADDRESS_MAP_AMY;"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        /* Case: correct prefix but missing MapAddress -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        command \u003d EstimateRouteCommand.COMMAND_WORD + \" \" + PREFIX_START_MAP_ADDRESS + \" \" + PREFIX_END_MAP_ADDRESS;"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        /* Case: correct prefix but invalid MapAddress -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"        command \u003d EstimateRouteCommand.COMMAND_WORD + \" \" + PREFIX_START_MAP_ADDRESS + \"))))))\" + \" \""},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"                + PREFIX_END_MAP_ADDRESS + \"^^^^^^^\";"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"        /* Case: missing MapAddress prefix -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        command \u003d EstimateRouteCommand.COMMAND_WORD + \" \" + VALID_ADDRESS_MAP_BOB + \" \" + VALID_ADDRESS_MAP_AMY;"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"                EstimateRouteCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"     * Executes the {@code EstimateRouteCommand} that asserts that the,\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"     * 3. Result display box displays the success message of executing {@code EstimateRouteCommand}.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"     * 4. Shows the distance and time of travel in result display.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"     * 5. Calendar panel and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(MapAddress startAddress, MapAddress endAddress) {"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(EstimateRouteCommand.COMMAND_WORD + \" \" + PREFIX_START_MAP_ADDRESS"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"                + startAddress.toString() + \" \" + PREFIX_END_MAP_ADDRESS + endAddress.toString());"},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":"     * Performs the same verification as {@code assertCommandSuccess(MapAddress, MapAddress)}. Executes {@code command}"},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":"     * instead."},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"     * @see EstimateRouteCommandSystemTest#assertCommandSuccess(MapAddress, MapAddress)"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":96,"author":{"gitID":"Damienskt"},"content":"        String expectedResultMessage \u003d EstimateRouteCommand.MESSAGE_SUCCESS;"},{"lineNumber":97,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":98,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":99,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":101,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Damienskt"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except asserts that"},{"lineNumber":103,"author":{"gitID":"Damienskt"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"Damienskt"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"Damienskt"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":106,"author":{"gitID":"Damienskt"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"Damienskt"},"content":"     * @see EstimateRouteCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":108,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":110,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":111,"author":{"gitID":"Damienskt"},"content":"        expectedResultMessage \u003d expectedResultMessage + EstimateRouteCommand.getStringOfDistanceAndTime();"},{"lineNumber":112,"author":{"gitID":"Damienskt"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":113,"author":{"gitID":"Damienskt"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"Damienskt"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":115,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":117,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"Damienskt"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"Damienskt"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"Damienskt"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"Damienskt"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"Damienskt"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"Damienskt"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"Damienskt"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":125,"author":{"gitID":"Damienskt"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"Damienskt"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":127,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":129,"author":{"gitID":"Damienskt"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":130,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":131,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":132,"author":{"gitID":"Damienskt"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":133,"author":{"gitID":"Damienskt"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"Damienskt"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":135,"author":{"gitID":"Damienskt"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":136,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":15,"Damienskt":122}},{"path":"src/test/java/seedu/address/logic/parser/calendar/DeleteAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.DeleteAppointmentCommand;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"public class DeleteAppointmentCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    private DeleteAppointmentCommandParser parser \u003d new DeleteAppointmentCommandParser();"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_validArgs_returnsDeleteAppointmentCommand() {"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"1\", new DeleteAppointmentCommand(INDEX_FIRST_APPOINTMENT));"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"b\","},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":22,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/calendar/ViewCalendarCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCalendarCommand;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"//@@author: WJY-norainu"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    private ViewCalendarCommandParser parser \u003d new ViewCalendarCommandParser();"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"    private String failureMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCalendarCommand.MESSAGE_USAGE);"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_noInput_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"\", failureMessage);"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_letter_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"a\", failureMessage);"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_negativeInteger_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"-1\", failureMessage);"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_zero_throwsParseException() {"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"0\", failureMessage);"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_validIndex_returnsViewCalendarCommand() {"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"1\", new ViewCalendarCommand(INDEX_FIRST_PERSON));"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":33,"-":8}},{"path":"src/test/java/systemtests/calendar/ViewAppointmentCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_GRAMMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_OSCAR;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_GRAMMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_OSCAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_GRAMMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_OSCAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_OSCAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_GRAMMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_OSCAR;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CELEBRITY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POINT_OF_CONTACT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getCelebrityIndices;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPersonIndices;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalCelebrities.JAY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.GRAMMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.OSCAR;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ViewAppointmentCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import systemtests.AddressBookSystemTest;"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"public class ViewAppointmentCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"    private List\u003cCelebrity\u003e celebrityList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"    private List\u003cIndex\u003e celebrityIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"    private List\u003cPerson\u003e pointOfContactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"    private List\u003cIndex\u003e pointOfContactIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"    public void viewAppointment() {"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        /**"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"         * Pre-populate application with appointments"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"         * Appointment without location, celebrities and points of contact"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"        String command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_GRAMMY + APPT_END_DATE_DESC_GRAMMY"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"                + APPT_END_TIME_DESC_GRAMMY + APPT_START_DATE_DESC_GRAMMY"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"                + APPT_START_TIME_DESC_GRAMMY;"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"        /* Appointment with location, celebrities and points of contact */"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        pointOfContactList.add(BENSON);"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        celebrityList.add(JAY);"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        celebrityIndices.addAll(getCelebrityIndices(this.getModel(), celebrityList));"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"        pointOfContactIndices.addAll(getPersonIndices(this.getModel(), pointOfContactList));"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"                + APPT_END_DATE_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"                + APPT_START_TIME_DESC_OSCAR + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"                pointOfContactIndices);"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        /* ---------------------------- Perform invalid viewAppointment operations --------------------------------- */"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(ViewAppointmentCommand.COMMAND_WORD + \" \" + 0, ParserUtil.MESSAGE_INVALID_INDEX);"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(ViewAppointmentCommand.COMMAND_WORD + \" ads\" , ParserUtil.MESSAGE_INVALID_INDEX);"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(ViewAppointmentCommand.COMMAND_WORD + \" \", ParserUtil.MESSAGE_INVALID_INDEX);"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(ViewAppointmentCommand.COMMAND_WORD + \" \""},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"                + 2 , ViewAppointmentCommand.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"        executeCommand(\"listAppointment\"); // Executes listAppointment to fulfil pre-requisite"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(ViewAppointmentCommand.COMMAND_WORD + \" \""},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"                + 10, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"        /* ------------------------------ Perform valid viewAppointment operations --------------------------------- */"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(1); //viewing appointment without location, celebrities and points of contact"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(2); //viewing appointment with location, celebrities and points of contact"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"     * Executes the {@code ViewAppointmentCommand} that asserts that the,\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":"     * 3. Result display box displays the success message of executing {@code ViewAppointmentCommand}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":"     * 4. Shows the location marker of appointment location in Maps GUI.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":"     * 5. Calendar panel and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(int index) {"},{"lineNumber":96,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(ViewAppointmentCommand.COMMAND_WORD + \" \" + index, index);"},{"lineNumber":97,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":99,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"Damienskt"},"content":"     * Performs the same verification as {@code assertCommandSuccess(int)}. Executes {@code command}"},{"lineNumber":101,"author":{"gitID":"Damienskt"},"content":"     * instead."},{"lineNumber":102,"author":{"gitID":"Damienskt"},"content":"     * @see ViewAppointmentCommandSystemTest#assertCommandSuccess(int)"},{"lineNumber":103,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(String command, int index) {"},{"lineNumber":105,"author":{"gitID":"Damienskt"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":106,"author":{"gitID":"Damienskt"},"content":"        Appointment selected;"},{"lineNumber":107,"author":{"gitID":"Damienskt"},"content":"        String location;"},{"lineNumber":108,"author":{"gitID":"Damienskt"},"content":"        if (index \u003d\u003d 2) {"},{"lineNumber":109,"author":{"gitID":"Damienskt"},"content":"            selected \u003d GRAMMY;"},{"lineNumber":110,"author":{"gitID":"Damienskt"},"content":"            location \u003d ViewAppointmentCommand.MESSAGE_NO_LOCATION;"},{"lineNumber":111,"author":{"gitID":"Damienskt"},"content":"        } else {"},{"lineNumber":112,"author":{"gitID":"Damienskt"},"content":"            selected \u003d OSCAR;"},{"lineNumber":113,"author":{"gitID":"Damienskt"},"content":"            selected.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":114,"author":{"gitID":"Damienskt"},"content":"            location \u003d selected.getMapAddress().toString();"},{"lineNumber":115,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Damienskt"},"content":"        String expectedResultMessage \u003d \"Selected appointment details:\\n\""},{"lineNumber":117,"author":{"gitID":"Damienskt"},"content":"                + \"Appointment Name: \" + selected.getTitle() + \"\\n\""},{"lineNumber":118,"author":{"gitID":"Damienskt"},"content":"                + \"Start Date: \" + selected.getStartDate() + \"\\n\""},{"lineNumber":119,"author":{"gitID":"Damienskt"},"content":"                + \"Start Time: \" + selected.getStartTime() + \"\\n\""},{"lineNumber":120,"author":{"gitID":"Damienskt"},"content":"                + \"End Date: \" + selected.getEndDate() + \"\\n\""},{"lineNumber":121,"author":{"gitID":"Damienskt"},"content":"                + \"End Time: \" + selected.getEndTime() + \"\\n\""},{"lineNumber":122,"author":{"gitID":"Damienskt"},"content":"                + \"Location: \" + location + \"\\n\""},{"lineNumber":123,"author":{"gitID":"Damienskt"},"content":"                + \"Celebrities attending: \" + selected.getCelebritiesAttending() + \"\\n\""},{"lineNumber":124,"author":{"gitID":"Damienskt"},"content":"                + \"Points of Contact: \" + selected.getPointsOfContact();"},{"lineNumber":125,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":126,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":127,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":129,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"Damienskt"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String,int)} except asserts that"},{"lineNumber":131,"author":{"gitID":"Damienskt"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"Damienskt"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"Damienskt"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":134,"author":{"gitID":"Damienskt"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"Damienskt"},"content":"     * @see ViewAppointmentCommandSystemTest#assertCommandSuccess(String,int)"},{"lineNumber":136,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":138,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"Damienskt"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"Damienskt"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"Damienskt"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":142,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":144,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"Damienskt"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"Damienskt"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"Damienskt"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"Damienskt"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"Damienskt"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"Damienskt"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"Damienskt"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":152,"author":{"gitID":"Damienskt"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"Damienskt"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"Damienskt"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"Damienskt"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"Damienskt"},"content":"        executeCommand(command);"},{"lineNumber":158,"author":{"gitID":"Damienskt"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":159,"author":{"gitID":"Damienskt"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":160,"author":{"gitID":"Damienskt"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":161,"author":{"gitID":"Damienskt"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":162,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":164,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"Damienskt"},"content":"     * Generates command string for a list of celebrities and POCs for use with add Appointment command"},{"lineNumber":166,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"Damienskt"},"content":"    private String generatePointOfContactandCelebrityFields(List\u003cIndex\u003e celebrityIndices,"},{"lineNumber":168,"author":{"gitID":"Damienskt"},"content":"                                                            List\u003cIndex\u003e pointOfContactIndices) {"},{"lineNumber":169,"author":{"gitID":"Damienskt"},"content":"        return \" \" + generateCelebrityFields(celebrityIndices) + \" \""},{"lineNumber":170,"author":{"gitID":"Damienskt"},"content":"                + generatePointOfContactFields(pointOfContactIndices);"},{"lineNumber":171,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":173,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"Damienskt"},"content":"     * Generates a command string for a list of celebrity indices for add Appointment command"},{"lineNumber":175,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"Damienskt"},"content":"    private String generateCelebrityFields(List\u003cIndex\u003e celebrityIndices) {"},{"lineNumber":177,"author":{"gitID":"Damienskt"},"content":"        StringBuilder sb \u003d  new StringBuilder();"},{"lineNumber":178,"author":{"gitID":"Damienskt"},"content":"        for (Index i : celebrityIndices) {"},{"lineNumber":179,"author":{"gitID":"Damienskt"},"content":"            sb.append(PREFIX_CELEBRITY).append(i.getOneBased() + \" \");"},{"lineNumber":180,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"Damienskt"},"content":"        return sb.toString();"},{"lineNumber":182,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":184,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"Damienskt"},"content":"     * Generates a command string for a list of POC indices for add Appointment command"},{"lineNumber":186,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"Damienskt"},"content":"    private String generatePointOfContactFields(List\u003cIndex\u003e pointOfContactIndices) {"},{"lineNumber":188,"author":{"gitID":"Damienskt"},"content":"        StringBuilder sb \u003d  new StringBuilder();"},{"lineNumber":189,"author":{"gitID":"Damienskt"},"content":"        for (Index i : pointOfContactIndices) {"},{"lineNumber":190,"author":{"gitID":"Damienskt"},"content":"            sb.append(PREFIX_POINT_OF_CONTACT).append(i.getOneBased() + \" \");"},{"lineNumber":191,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"Damienskt"},"content":"        return sb.toString();"},{"lineNumber":193,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":36,"Damienskt":157}},{"path":"src/test/java/seedu/address/logic/parser/calendar/ViewCalendarByCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.MONTH_VIEW_PAGE;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.WEEK_VIEW_PAGE;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCalendarByCommand;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarByCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    private ViewCalendarByCommandParser parser \u003d new ViewCalendarByCommandParser();"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_day_returnsViewCalendarByCommand() {"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"day\", new ViewCalendarByCommand(DAY_VIEW_PAGE));"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dayWithUpperCaseLetter_returnsViewCalendarByCommand() {"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"Day\", new ViewCalendarByCommand(DAY_VIEW_PAGE));"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"DAy\", new ViewCalendarByCommand(DAY_VIEW_PAGE));"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"DAY\", new ViewCalendarByCommand(DAY_VIEW_PAGE));"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_week_returnsViewCalendarByCommand() {"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"week\", new ViewCalendarByCommand(WEEK_VIEW_PAGE));"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_month_returnsViewCalendarByCommand() {"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"month\", new ViewCalendarByCommand(MONTH_VIEW_PAGE));"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"b\","},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCalendarByCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":41,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/calendar/AddAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_GRAMMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_OSCAR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_GRAMMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_GRAMMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_OSCAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_GRAMMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_OSCAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_OSCAR;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_GRAMMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_OSCAR;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_LOCATION_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_LOCATION_OSCAR;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_OSCAR;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_OSCAR;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_OSCAR;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_OSCAR;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_OSCAR;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"public class AddAppointmentCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    private Set\u003cIndex\u003e emptyIndexSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"    public void parse_allFieldsPresent_success() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_OSCAR).withStartTime(VALID_START_TIME_OSCAR)"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"                .withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"        // whitespace only preamble"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"        // multiple names - last name accepted"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_GRAMMY + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"        // multiple locations - last location accepted"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_GRAMMY + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"        // multiple start times - last start times accepted"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_TIME_DESC_GRAMMY + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"        // multiple start dates - last start date accepted"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_DATE_DESC_GRAMMY + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"        // multiple end times - last end time accepted"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_GRAMMY + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"        // multiple end dates - last end date accepted"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_DATE_DESC_GRAMMY + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"    public void parse_locationFieldMissing_success() {"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withStartDate(VALID_START_DATE_OSCAR)"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"                .withEndTime(VALID_END_TIME_OSCAR).withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_DATE_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"    public void parse_startDateFieldMissing_success() {"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"                .withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"                        + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":"    public void parse_endDateFieldMissing_success() {"},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).build();"},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"                        + APPT_START_DATE_DESC_OSCAR,"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":"                new AddAppointmentCommand(expectedAppointment, emptyIndexSet, emptyIndexSet));"},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":"    public void parseEndTimeAndEndDateFieldMissing_success() {"},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withStartDate(VALID_START_DATE_OSCAR).build();"},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR, new AddAppointmentCommand(expectedAppointment, emptyIndexSet,"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":"                emptyIndexSet));"},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":"        // missing name prefix"},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, VALID_APPOINTMENT_NAME_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR, expectedMessage);"},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":"        // invalid name"},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, INVALID_APPT_NAME_DESC + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":"        // invalid location"},{"lineNumber":151,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, APPT_NAME_DESC_OSCAR + INVALID_APPT_LOCATION_DESC"},{"lineNumber":152,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":154,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":155,"author":{"gitID":"muruges95"},"content":"        // invalid start time"},{"lineNumber":156,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":157,"author":{"gitID":"muruges95"},"content":"                + INVALID_START_TIME + APPT_START_DATE_DESC_OSCAR, Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":159,"author":{"gitID":"muruges95"},"content":"        // invalid start date"},{"lineNumber":160,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":161,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + INVALID_START_DATE, Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":163,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":164,"author":{"gitID":"muruges95"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":165,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, INVALID_APPT_NAME_DESC + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":166,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + INVALID_START_DATE, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":168,"author":{"gitID":"muruges95"},"content":"        // non-empty preamble"},{"lineNumber":169,"author":{"gitID":"muruges95"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":170,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR,"},{"lineNumber":171,"author":{"gitID":"muruges95"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":132,"WJY-norainu":1,"-":40}},{"path":"src/test/java/seedu/address/logic/parser/calendar/ViewDateCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewDateCommand.MESSAGE_INVALID_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewDateCommand;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"//@@author: WJY-norainu"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"public class ViewDateCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    private ViewDateCommandParser parser \u003d new ViewDateCommandParser();"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate mayFirstCurrentYear \u003d LocalDate.of(LocalDate.now().getYear(), 5, 1);"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate mayFirst2018 \u003d LocalDate.of(2018, 5, 1);"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_noInput_returnsViewDateCommand() {"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"\", new ViewDateCommand(LocalDate.now()));"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthInCorrectFormat_returnsViewDateCommand() {"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"01-05\", new ViewDateCommand(mayFirstCurrentYear));"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthYearInCorrectFormat_returnsViewDateCommand() {"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"01-05-2018\", new ViewDateCommand(mayFirst2018));"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_missingDate_throwsParseException() {"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"05-2018\","},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDateCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_missingMonth_throwsParseException() {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"01-2018\","},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDateCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthYearInWrongFormat_throwsParseException() {"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"01 05 2018\","},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDateCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_invalidDate_throwsParseException() {"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"31-02\", MESSAGE_INVALID_DATE);"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":51,"-":6}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MAP_ADDRESS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MAP_ADDRESS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ViewAppointmentCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.EstimateRouteCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":102,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":131,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":139,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":190,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":197,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_showLocation() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        MapAddress address \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        ShowLocationCommand command \u003d (ShowLocationCommand) parser.parseCommand("},{"lineNumber":205,"author":{"gitID":"-"},"content":"                ShowLocationCommand.COMMAND_WORD + \" \" + PREFIX_MAP_ADDRESS + address.toString());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertEquals(new ShowLocationCommand(address), command);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseCommand_showLocationAlias() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        MapAddress address \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        ShowLocationCommand command \u003d (ShowLocationCommand) parser.parseCommand("},{"lineNumber":213,"author":{"gitID":"-"},"content":"                ShowLocationCommand.COMMAND_ALIAS + \" \" + PREFIX_MAP_ADDRESS + address.toString());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(new ShowLocationCommand(address), command);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void parseCommand_estimateRoute() throws Exception {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        MapAddress startAddress \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        MapAddress endAddress \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        EstimateRouteCommand command \u003d (EstimateRouteCommand) parser.parseCommand("},{"lineNumber":222,"author":{"gitID":"-"},"content":"                EstimateRouteCommand.COMMAND_WORD + \" \" + PREFIX_START_MAP_ADDRESS + startAddress.toString()"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                        + \" \" + PREFIX_END_MAP_ADDRESS + endAddress.toString());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(new EstimateRouteCommand(startAddress, endAddress), command);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseCommand_viewAppointment() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        ViewAppointmentCommand command \u003d (ViewAppointmentCommand) parser.parseCommand("},{"lineNumber":230,"author":{"gitID":"-"},"content":"                ViewAppointmentCommand.COMMAND_WORD + \" \" + 1);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(new ViewAppointmentCommand(0), command);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseCommand_viewAppointmentAlias() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        ViewAppointmentCommand command \u003d (ViewAppointmentCommand) parser.parseCommand("},{"lineNumber":237,"author":{"gitID":"-"},"content":"                ViewAppointmentCommand.COMMAND_ALIAS + \" \" + 1);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(new ViewAppointmentCommand(0), command);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void parseCommand_estimateRouteAlias() throws Exception {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        MapAddress startAddress \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        MapAddress endAddress \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        EstimateRouteCommand command \u003d (EstimateRouteCommand) parser.parseCommand("},{"lineNumber":246,"author":{"gitID":"-"},"content":"                EstimateRouteCommand.COMMAND_ALIAS + \" \" + PREFIX_START_MAP_ADDRESS + startAddress.toString()"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                        + \" \" + PREFIX_END_MAP_ADDRESS + endAddress.toString());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertEquals(new EstimateRouteCommand(startAddress, endAddress), command);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 1\") instanceof RedoCommand);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"WJY-norainu"},"content":"    public void parseCommand_removeTag() throws Exception {"},{"lineNumber":265,"author":{"gitID":"WJY-norainu"},"content":"        Tag tag \u003d FRIENDS_TAG;"},{"lineNumber":266,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":267,"author":{"gitID":"WJY-norainu"},"content":"                RemoveTagCommand.COMMAND_WORD + \" \" + FRIENDS_TAG.tagName);"},{"lineNumber":268,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(new RemoveTagCommand(tag), command);"},{"lineNumber":269,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":271,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"WJY-norainu"},"content":"    public void parseCommand_removeTagAlias() throws Exception {"},{"lineNumber":273,"author":{"gitID":"WJY-norainu"},"content":"        Tag tag \u003d FRIENDS_TAG;"},{"lineNumber":274,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":275,"author":{"gitID":"WJY-norainu"},"content":"                RemoveTagCommand.COMMAND_ALIAS + \" \" + FRIENDS_TAG.tagName);"},{"lineNumber":276,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(new RemoveTagCommand(tag), command);"},{"lineNumber":277,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":19,"-":285}},{"path":"src/test/java/seedu/address/logic/parser/calendar/ListAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ListAppointmentCommand.MESSAGE_INVALID_DATE_RANGE;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewDateCommand.MESSAGE_INVALID_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ListAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"//@@author: WJY-norainu"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"public class ListAppointmentCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    private ListAppointmentCommandParser parser \u003d new ListAppointmentCommandParser();"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate aprilSecondCurrentYear \u003d LocalDate.of(LocalDate.now().getYear(), 4, 2);"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate mayFirstCurrentYear \u003d LocalDate.of(LocalDate.now().getYear(), 5, 1);"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate aprilSecond2018 \u003d LocalDate.of(2018, 4, 2);"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate mayFirst2018 \u003d LocalDate.of(2018, 5, 1);"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_noInput_returnsListAppointmentCommand() {"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, \"\", new ListAppointmentCommand());"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthInCorrectFormat_returnsListAppointmentCommand() {"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser,"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"                \"02-04 01-05\","},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"                new ListAppointmentCommand(aprilSecondCurrentYear, mayFirstCurrentYear));"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthYearInCorrectFormat_returnsListAppointmentCommand() {"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser,"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"                \"02-04-2018 01-05-2018\","},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"                new ListAppointmentCommand(aprilSecond2018, mayFirst2018));"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"    //this method assumes test is done in the year of 2018 or after 2018"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthAndDateMonthYearInCorrectFormat_returnsListAppointmentCommand() {"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser,"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"                \"02-04-2018 01-05\","},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"                new ListAppointmentCommand(aprilSecond2018, mayFirstCurrentYear));"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_missingDate_throwsParseException() {"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser,"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"                \"04-2018 05-2018\","},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_missingMonth_throwsParseException() {"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser,"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"                \"31-2018 30-2018\","},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_dateMonthYearInWrongFormat_throwsParseException() {"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser,"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"                \"02/04/2018 01/05/2018\","},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_invalidDate_throwsParseException() {"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"31-02 01-03\", MESSAGE_INVALID_DATE);"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"01-02 32-03\", MESSAGE_INVALID_DATE);"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_startDateAfterEndDate_throwsParseException() {"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser,"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"                \"02-04-2019 01-05-2018\","},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"                MESSAGE_INVALID_DATE_RANGE);"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":77,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/map/ShowLocationCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"public class ShowLocationCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"    private ShowLocationCommandParser parser \u003d new ShowLocationCommandParser();"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    public void parse_validArgs_returnsShowLocationCommand() {"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"        MapAddress address \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_MAP_ADDRESS + VALID_ADDRESS_MAP_BOB,"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"                new ShowLocationCommand(address));"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":12,"Damienskt":18}},{"path":"src/test/java/seedu/address/logic/parser/map/EstimateRouteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MAP_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MAP_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.EstimateRouteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"public class EstimateRouteCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    private EstimateRouteCommandParser parser \u003d new EstimateRouteCommandParser();"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    public void parse_validArgs_returnsEstimateRouteCommand() {"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"        MapAddress startAddress \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"        MapAddress endAddress \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_START_MAP_ADDRESS + VALID_ADDRESS_MAP_BOB + \" \""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"                + PREFIX_END_MAP_ADDRESS + VALID_ADDRESS_MAP_AMY, new EstimateRouteCommand(startAddress, endAddress));"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EstimateRouteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":14,"Damienskt":19}},{"path":"src/test/java/seedu/address/logic/parser/RemoveTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_validArgs_returnsRemoveTagCommand() {"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND, new RemoveTagCommand(FRIENDS_TAG));"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_emptyArgs_throwsParseException() {"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser,"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"                \"\","},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_invalidArgsContainingSpecialCharacters_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser,"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"                \"%#friends\","},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":31,"-":6}},{"path":"src/test/java/seedu/address/logic/map/GeocodingTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":10,"author":{"gitID":"Damienskt"},"content":"public class GeocodingTest {"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"    private Geocoding test;"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"    public void isValidGeocode() {"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"        test \u003d new Geocoding();"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"        //Invalid address to geocode conversion"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e test.checkIfAddressCanBeFound(null));"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"        // invalid addresses"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"        assertFalse(test.checkIfAddressCanBeFound(\"\")); // empty string"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"        assertFalse(test.checkIfAddressCanBeFound(\" \")); // spaces only"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"        assertFalse(test.checkIfAddressCanBeFound(\"!!!!!!!\")); // location not found in google server"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"        // valid addresses"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"        assertTrue(test.checkIfAddressCanBeFound(\"Kent ridge road\"));"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        assertTrue(test.checkIfAddressCanBeFound(\"820297\")); // postal code"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"        assertTrue(test.checkIfAddressCanBeFound(\"National University Of Singapore\")); // long address"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        assertTrue(test.checkIfAddressCanBeFound(\"NUS\")); // alias of location"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":8,"Damienskt":24}},{"path":"src/test/java/seedu/address/logic/parser/calendar/ViewAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ViewAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"public class ViewAppointmentCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"    private ViewAppointmentCommandParser parser \u003d new ViewAppointmentCommandParser();"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    public void parse_validArgs_returnsDeleteAppointmentCommand() {"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"        assertParseSuccess(parser, \"1\", new ViewAppointmentCommand(INDEX_FIRST_APPOINTMENT.getZeroBased()));"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"        assertParseFailure(parser, \"b\","},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"                String.format(ParserUtil.MESSAGE_INVALID_INDEX));"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"WJY-norainu":4,"-":6,"Damienskt":16}},{"path":"src/test/java/seedu/address/logic/map/DistanceEstimateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.maps.model.TravelMode;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":"public class DistanceEstimateTest {"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"    private DistanceEstimate test;"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"    private LatLng start;"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    private LatLng end;"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    public void isValidStartAndEndAddress() {"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"        test \u003d new DistanceEstimate();"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"        Geocoding convertToLatLng \u003d new Geocoding();"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"        //Initialise start location"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"        convertToLatLng.initialiseLatLngFromAddress(\"Hollywood\");"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        start \u003d convertToLatLng.getLatLng();"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        //Initialise end location"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"        convertToLatLng.initialiseLatLngFromAddress(\"NUS\");"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"        end \u003d convertToLatLng.getLatLng();"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        // null start, end addresses and mode of travel"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e test.calculateDistanceMatrix"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"                (null, null, null));"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"        // Start and End cannot be reached by driving"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"        test.calculateDistanceMatrix(start, end, TravelMode.DRIVING);"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        assertEquals(test.getTravelTime(), \"null\");"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        // valid start and end addresses"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"        convertToLatLng.initialiseLatLngFromAddress(\"820297\");"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        start \u003d convertToLatLng.getLatLng();"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        test.calculateDistanceMatrix(start, end, TravelMode.DRIVING);"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"        assertNotEquals(test.getTravelTime(), \"null\"); // long address"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        // Invalid start LatLng and valid end LatLng"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        start \u003d new LatLng(-1, -1);"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        test.calculateDistanceMatrix(start, end, TravelMode.DRIVING);"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        assertEquals(test.getTravelTime(), \"null\"); // long address"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        // Valid start LatLng and Invalid end LatLng"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"        end \u003d new LatLng(-1, -1);"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"        test.calculateDistanceMatrix(start, end, TravelMode.DRIVING);"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"        assertEquals(test.getTravelTime(), \"null\"); // long address"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        // Invalid start LatLng and invalid end LatLng"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        start \u003d new LatLng(-10, -10);"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        end \u003d new LatLng(-1, -1);"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"        test.calculateDistanceMatrix(start, end, TravelMode.DRIVING);"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        assertEquals(test.getTravelTime(), \"null\"); // long address"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":11,"Damienskt":53}},{"path":"src/test/java/seedu/address/logic/map/GoogleWebServicesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":7,"author":{"gitID":"Damienskt"},"content":"public class GoogleWebServicesTest {"},{"lineNumber":8,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":9,"author":{"gitID":"Damienskt"},"content":"    private GoogleWebServices test;"},{"lineNumber":10,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"    public void isValidConnection() {"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"        test \u003d new GoogleWebServices();"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"        //Check valid connection"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"        assertTrue(test.checkInitialisedConnection());"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":5,"Damienskt":14}},{"path":"src/test/java/systemtests/calendar/AddAppointmentCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NOT_CELEBRITY_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NOT_POINT_OF_CONTACT_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_GRAMMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_OSCAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_GRAMMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_GRAMMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_OSCAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_GRAMMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_OSCAR;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_OSCAR;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_GRAMMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_OSCAR;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_LOCATION_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_LOCATION_GRAMMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_LOCATION_OSCAR;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_GRAMMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_OSCAR;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_GRAMMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_OSCAR;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_GRAMMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_OSCAR;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_GRAMMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_OSCAR;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_GRAMMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_OSCAR;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.calendar.AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CELEBRITY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POINT_OF_CONTACT;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.model.map.MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getCelebrityIndices;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPersonIndices;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalCelebrities.AYANE;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalCelebrities.JAY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.OSCAR;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import systemtests.AddressBookSystemTest;"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"public class AddAppointmentCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"    public void addAppointment() {"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        /* ------------------------ Perform add appointment operations on the shown unfiltered list ----------------- */"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment, command with leading spaces and trailing spaces"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"         * -\u003e added"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"        Appointment toAdd \u003d OSCAR;"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"        List\u003cCelebrity\u003e celebrityList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"        List\u003cPerson\u003e pointOfContactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"        List\u003cIndex\u003e celebrityIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"        List\u003cIndex\u003e pointOfContactIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"        String command \u003d \"   \" + AddAppointmentCommand.COMMAND_WORD + \"  \" + APPT_NAME_DESC_OSCAR + \"  \""},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"                + APPT_LOCATION_DESC_OSCAR + \"  \" + APPT_START_DATE_DESC_OSCAR + \"  \" + APPT_END_DATE_DESC_OSCAR + \"  \""},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + \"  \" + APPT_END_TIME_DESC_OSCAR + \" \";"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with all fields and a celebrity -\u003e added */"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"        celebrityList.add(JAY);"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.addAll(getCelebrityIndices(this.getModel(), celebrityList));"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        toAdd \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_GRAMMY)"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_OSCAR).withStartDate(VALID_START_DATE_OSCAR)"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndDate(VALID_END_DATE_OSCAR)"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"                .withEndTime(VALID_END_TIME_OSCAR).build();"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"        toAdd.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_GRAMMY + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"                + APPT_END_DATE_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"                pointOfContactIndices);"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with all fields and 2 celebrities -\u003e added */"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"        celebrityList.add(AYANE);"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.clear();"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.addAll(getCelebrityIndices(this.getModel(), celebrityList));"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"        toAdd \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_GRAMMY).withStartDate(VALID_START_DATE_OSCAR)"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndDate(VALID_END_DATE_OSCAR)"},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"                .withEndTime(VALID_END_TIME_OSCAR).build();"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"        toAdd.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_GRAMMY"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"                + APPT_END_DATE_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_OSCAR + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"                pointOfContactIndices);"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with all fields and 2 celebrities and 1 point of contact -\u003e added */"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"        pointOfContactList.add(BENSON);"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.clear();"},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.addAll(getCelebrityIndices(this.getModel(), celebrityList));"},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"        pointOfContactIndices.addAll(getPersonIndices(this.getModel(), pointOfContactList));"},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"        toAdd \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_GRAMMY).withStartDate(VALID_START_DATE_OSCAR)"},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_GRAMMY).withEndDate(VALID_END_DATE_OSCAR)"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":"                .withEndTime(VALID_END_TIME_GRAMMY).build();"},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":"        toAdd.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_GRAMMY"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":"                + APPT_END_DATE_DESC_OSCAR + APPT_END_TIME_DESC_GRAMMY + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_GRAMMY + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"                pointOfContactIndices);"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with all fields and 2 celebrities and 1 point of contact -\u003e added */"},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":"        pointOfContactList.add(CARL);"},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.clear();"},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.addAll(getCelebrityIndices(this.getModel(), celebrityList));"},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":"        pointOfContactIndices.clear();"},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"        pointOfContactIndices.addAll(getPersonIndices(this.getModel(), pointOfContactList));"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":"        toAdd \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_GRAMMY)"},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_GRAMMY).withStartDate(VALID_START_DATE_GRAMMY)"},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":"                .withStartTime(VALID_START_TIME_GRAMMY).withEndDate(VALID_END_DATE_GRAMMY)"},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":"                .withEndTime(VALID_END_TIME_GRAMMY).build();"},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"        toAdd.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_GRAMMY + APPT_LOCATION_DESC_GRAMMY"},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":"                + APPT_END_DATE_DESC_GRAMMY + APPT_END_TIME_DESC_GRAMMY + APPT_START_DATE_DESC_GRAMMY"},{"lineNumber":151,"author":{"gitID":"muruges95"},"content":"                + APPT_START_TIME_DESC_GRAMMY + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":152,"author":{"gitID":"muruges95"},"content":"                pointOfContactIndices);"},{"lineNumber":153,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":154,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":156,"author":{"gitID":"muruges95"},"content":"        /* ----------------------------------- Perform invalid add appointment operations --------------------------- */"},{"lineNumber":157,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":158,"author":{"gitID":"muruges95"},"content":"        /* Case: add a duplicate appointment -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":160,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":161,"author":{"gitID":"muruges95"},"content":"                + APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":162,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(command, MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":163,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":164,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with invalid map address -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + INVALID_APPT_LOCATION_DESC"},{"lineNumber":166,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":167,"author":{"gitID":"muruges95"},"content":"                + APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":168,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(command, MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":170,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with invalid celebrity indices -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.clear();"},{"lineNumber":172,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.addAll(pointOfContactIndices);"},{"lineNumber":173,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":174,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":175,"author":{"gitID":"muruges95"},"content":"                + APPT_END_TIME_DESC_OSCAR + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":176,"author":{"gitID":"muruges95"},"content":"                pointOfContactIndices);"},{"lineNumber":177,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(command, MESSAGE_NOT_CELEBRITY_INDEX);"},{"lineNumber":178,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":179,"author":{"gitID":"muruges95"},"content":"        /* Case: add an appointment with invalid point of contact indices -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.clear();"},{"lineNumber":181,"author":{"gitID":"muruges95"},"content":"        celebrityIndices.addAll(getCelebrityIndices(this.getModel(), celebrityList));"},{"lineNumber":182,"author":{"gitID":"muruges95"},"content":"        pointOfContactIndices.clear();"},{"lineNumber":183,"author":{"gitID":"muruges95"},"content":"        pointOfContactIndices.addAll(celebrityIndices);"},{"lineNumber":184,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":185,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":186,"author":{"gitID":"muruges95"},"content":"                + APPT_END_TIME_DESC_OSCAR + generatePointOfContactandCelebrityFields(celebrityIndices,"},{"lineNumber":187,"author":{"gitID":"muruges95"},"content":"                pointOfContactIndices);"},{"lineNumber":188,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(command, MESSAGE_NOT_POINT_OF_CONTACT_INDEX);"},{"lineNumber":189,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":190,"author":{"gitID":"muruges95"},"content":"        /* Case: add a appointment with start time not 15 minutes before end time -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"muruges95"},"content":"        command \u003d AddAppointmentCommand.COMMAND_WORD + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":192,"author":{"gitID":"muruges95"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_GRAMMY"},{"lineNumber":193,"author":{"gitID":"muruges95"},"content":"                + \" \" + PREFIX_END_TIME + VALID_START_TIME_OSCAR;"},{"lineNumber":194,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(command, MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME);"},{"lineNumber":195,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":196,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":198,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"muruges95"},"content":"     * Executes the {@code AddAppointmentCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"muruges95"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"muruges95"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"muruges95"},"content":"     * 3. Result display box displays the success message of executing {@code AddAppointmentCommand} with the name of"},{"lineNumber":203,"author":{"gitID":"muruges95"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"muruges95"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":205,"author":{"gitID":"muruges95"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"muruges95"},"content":"     * 5. Selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"muruges95"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"muruges95"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":209,"author":{"gitID":"muruges95"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"muruges95"},"content":"    private void assertCommandSuccess(String command, Appointment toAdd) {"},{"lineNumber":212,"author":{"gitID":"muruges95"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":213,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"muruges95"},"content":"            expectedModel.addAppointmentToStorageCalendar(toAdd);"},{"lineNumber":215,"author":{"gitID":"muruges95"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":216,"author":{"gitID":"muruges95"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in th model.\");"},{"lineNumber":217,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":219,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":220,"author":{"gitID":"muruges95"},"content":"        String expectedResultMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS, toAdd.getTitle());"},{"lineNumber":221,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":222,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":223,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":225,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"muruges95"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Appointment)} except asserts that"},{"lineNumber":227,"author":{"gitID":"muruges95"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"muruges95"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"muruges95"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":230,"author":{"gitID":"muruges95"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"muruges95"},"content":"     * @see AddAppointmentCommandSystemTest#assertCommandSuccess(String, Appointment)"},{"lineNumber":232,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"muruges95"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":234,"author":{"gitID":"muruges95"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"muruges95"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":236,"author":{"gitID":"muruges95"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":237,"author":{"gitID":"muruges95"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":238,"author":{"gitID":"muruges95"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":239,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":241,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"muruges95"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"muruges95"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"muruges95"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"muruges95"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"muruges95"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"muruges95"},"content":"     * 5. Selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"muruges95"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":249,"author":{"gitID":"muruges95"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"muruges95"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":251,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"muruges95"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"muruges95"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":255,"author":{"gitID":"muruges95"},"content":"        executeCommand(command);"},{"lineNumber":256,"author":{"gitID":"muruges95"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":257,"author":{"gitID":"muruges95"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"muruges95"},"content":"        assertResultDisplayAndCommandBoxShowsErrorStyle();"},{"lineNumber":259,"author":{"gitID":"muruges95"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":260,"author":{"gitID":"muruges95"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":261,"author":{"gitID":"muruges95"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":262,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":264,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"muruges95"},"content":"     * Generates command string for a list of celebrities and POCs for use with add Appointment command"},{"lineNumber":266,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"muruges95"},"content":"    private String generatePointOfContactandCelebrityFields(List\u003cIndex\u003e celebrityIndices,"},{"lineNumber":268,"author":{"gitID":"muruges95"},"content":"                                                            List\u003cIndex\u003e pointOfContactIndices) {"},{"lineNumber":269,"author":{"gitID":"muruges95"},"content":"        return \" \" + generateCelebrityFields(celebrityIndices) + \" \""},{"lineNumber":270,"author":{"gitID":"muruges95"},"content":"                + generatePointOfContactFields(pointOfContactIndices);"},{"lineNumber":271,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":273,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"muruges95"},"content":"     * Generates a command string for a list of celebrity indices for add Appointment command"},{"lineNumber":275,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"muruges95"},"content":"    private String generateCelebrityFields(List\u003cIndex\u003e celebrityIndices) {"},{"lineNumber":277,"author":{"gitID":"muruges95"},"content":"        StringBuilder sb \u003d  new StringBuilder();"},{"lineNumber":278,"author":{"gitID":"muruges95"},"content":"        for (Index i : celebrityIndices) {"},{"lineNumber":279,"author":{"gitID":"muruges95"},"content":"            sb.append(PREFIX_CELEBRITY).append(i.getOneBased() + \" \");"},{"lineNumber":280,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"muruges95"},"content":"        return sb.toString();"},{"lineNumber":282,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":284,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"muruges95"},"content":"     * Generates a command string for a list of POC indices for add Appointment command"},{"lineNumber":286,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"muruges95"},"content":"    private String generatePointOfContactFields(List\u003cIndex\u003e pointOfContactIndices) {"},{"lineNumber":288,"author":{"gitID":"muruges95"},"content":"        StringBuilder sb \u003d  new StringBuilder();"},{"lineNumber":289,"author":{"gitID":"muruges95"},"content":"        for (Index i : pointOfContactIndices) {"},{"lineNumber":290,"author":{"gitID":"muruges95"},"content":"            sb.append(PREFIX_POINT_OF_CONTACT).append(i.getOneBased() + \" \");"},{"lineNumber":291,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"muruges95"},"content":"        return sb.toString();"},{"lineNumber":293,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":237,"WJY-norainu":3,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/calendar/ViewCalendarByCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewCalendarByCommand.MESSAGE_NO_CHANGE_IN_CALENDARVIEW;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.MONTH_VIEW_PAGE;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.WEEK_VIEW_PAGE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarByCommandTest {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_calendarViewByDay_success() {"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d prepareCommand(\"day\");"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarByCommand.MESSAGE_SUCCESS, DAY_VIEW_PAGE);"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(DAY_VIEW_PAGE);"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarViewPage(WEEK_VIEW_PAGE);"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarByCommand, model, expectedMessage, expectedModel);"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_calendarViewByWeek_success() {"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d prepareCommand(\"week\");"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarByCommand.MESSAGE_SUCCESS, WEEK_VIEW_PAGE);"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(WEEK_VIEW_PAGE);"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarByCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_calendarViewByMonth_success() {"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d prepareCommand(\"month\");"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarByCommand.MESSAGE_SUCCESS, MONTH_VIEW_PAGE);"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(MONTH_VIEW_PAGE);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarByCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_changeFromAppointmentListWithNoChangeInView_success() {"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d prepareCommand(model.getCurrentCelebCalendarViewPage());"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarByCommand.MESSAGE_SUCCESS, DAY_VIEW_PAGE);"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(DAY_VIEW_PAGE);"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarByCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_changeFromAppointmentListWithChangeInView_success() {"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d prepareCommand(WEEK_VIEW_PAGE);"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarByCommand.MESSAGE_SUCCESS, WEEK_VIEW_PAGE);"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(WEEK_VIEW_PAGE);"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarByCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_noChangeInView_throwsCommandException() {"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d prepareCommand(\"day\");"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewCalendarByCommand, model, String.format(MESSAGE_NO_CHANGE_IN_CALENDARVIEW,"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"                DAY_VIEW_PAGE));"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"    public void equals() {"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByDayCommand \u003d prepareCommand(\"day\");"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByWeekCommand \u003d prepareCommand(\"week\");"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        // same object -\u003e returns true"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(viewCalendarByDayCommand.equals(viewCalendarByDayCommand));"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"        // same values -\u003e returns true"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByDayCommandCopy \u003d prepareCommand(\"day\");"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(viewCalendarByDayCommand.equals(viewCalendarByDayCommandCopy));"},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewCalendarByDayCommand.equals(1));"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"        // null -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewCalendarByDayCommand.equals(null));"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"        // different view page -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewCalendarByDayCommand.equals(viewCalendarByWeekCommand));"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"     * Returns a {@code ViewCalendarByCommand} with the parameter {@code calendarViewPage}."},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"    private ViewCalendarByCommand prepareCommand(String calendarViewPage) {"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarByCommand viewCalendarByCommand \u003d new ViewCalendarByCommand(calendarViewPage);"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"        viewCalendarByCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"        return viewCalendarByCommand;"},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":117,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/calendar/AddAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalCelebrities;"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"public class AddAppointmentCommandTest {"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"    private Set\u003cIndex\u003e emptyCelebrityIndices \u003d new HashSet\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    private Set\u003cIndex\u003e emptyPointOfContactIndices \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"        new AddAppointmentCommand(null, emptyCelebrityIndices, emptyPointOfContactIndices);"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"        CommandResult commandResult \u003d getAddAppointmentCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment.getTitle()),"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"    public void execute_addAppointmentWhileNotInCombinedCalendarView_throwsCommandException() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingNotInCombinedCalendarViewException();"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        thrown.expectMessage(String.format(AddAppointmentCommand.MESSAGE_NOT_IN_COMBINED_CALENDAR,"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"                modelStub.getCurrentCelebCalendarOwner().getName().toString()));"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        getAddAppointmentCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"        Appointment dentistAppointment \u003d new AppointmentBuilder().withName(\"Dentist Appointment\").build();"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"        Appointment doctorAppointment \u003d new AppointmentBuilder().withName(\"Doctor Appointment\").build();"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"        AddAppointmentCommand addDentistApptCommand \u003d new AddAppointmentCommand(dentistAppointment,"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"                emptyCelebrityIndices, emptyPointOfContactIndices);"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"        AddAppointmentCommand addDoctorApptCommand \u003d new AddAppointmentCommand(doctorAppointment,"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"                emptyCelebrityIndices, emptyPointOfContactIndices);"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        // same object -\u003e return true"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"        assertTrue(addDentistApptCommand.equals(addDentistApptCommand));"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"        // same values -\u003e return true"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"        AddAppointmentCommand addDentistApptCommandCopy \u003d new AddAppointmentCommand(dentistAppointment,"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"                emptyCelebrityIndices, emptyPointOfContactIndices);"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        assertTrue(addDentistApptCommand.equals(addDentistApptCommandCopy));"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"        assertFalse(addDentistApptCommand.equals(1));"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        assertFalse(addDentistApptCommand.equals(null));"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"        assertFalse(addDentistApptCommand.equals(addDoctorApptCommand));"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"     * Generates a new AddAppointmentCommand with the details of the given appointment."},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"    private AddAppointmentCommand getAddAppointmentCommandForAppointment(Appointment appointment, Model model) {"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"        AddAppointmentCommand command \u003d new AddAppointmentCommand(appointment, emptyCelebrityIndices,"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"                emptyPointOfContactIndices);"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"        return command;"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"    private class ModelStubThrowingNotInCombinedCalendarViewException extends ModelStub {"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"        public Celebrity getCurrentCelebCalendarOwner() {"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"            return TypicalCelebrities.AYANE;"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":"     * A Model stub that always accept the appointment being added."},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":"    private class ModelStubAcceptingAppointmentAdded extends ModelStub {"},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"        public void addAppointmentToStorageCalendar(Appointment appt) {"},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"            requireNonNull(appt);"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":"            appointmentsAdded.add(appt);"},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":"        public Celebrity getCurrentCelebCalendarOwner() {"},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"            return null;"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":"        public List\u003cCelebrity\u003e getCelebritiesChosen(Set\u003cIndex\u003e celebrityIndices) {"},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":"        public List\u003cPerson\u003e getPointsOfContactChosen(Set\u003cIndex\u003e pocIndices) {"},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":"        public void setBaseDate(LocalDate startDate) {"},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":"        public void setCelebCalendarViewPage(String page) {"},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":152,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"muruges95"},"content":"        public void setIsListingAppointments(boolean isListing) {"},{"lineNumber":154,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":155,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":157,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"muruges95"},"content":"        public boolean getIsListingAppointments() {"},{"lineNumber":159,"author":{"gitID":"muruges95"},"content":"            return false;"},{"lineNumber":160,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":132,"WJY-norainu":3,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/calendar/ViewCalendarCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewCalendarCommand.MESSAGE_NOT_CELEBRITY;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewCalendarCommand.MESSAGE_NO_CHANGE_IN_CALENDAR;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalCelebrities.JAY;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalCelebrities.ROBERT;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_AYANE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_JAY;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_ROBERT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarCommandTest {"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_validCelebrityIndex_success() {"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d prepareCommand(INDEX_ROBERT);"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarCommand.MESSAGE_SUCCESS, ROBERT.getName().toString());"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarOwner(ROBERT);"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarCommand, model, expectedMessage, expectedModel);"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_validPersonIndex_throwsCommandException() {"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewCalendarCommand, model, MESSAGE_NOT_CELEBRITY);"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_invalidIndex_throwsCommandException() {"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        Index invalidIndex \u003d Index.fromOneBased(model.getAddressBook().getPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d prepareCommand(invalidIndex);"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewCalendarCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_celebrityCalendarAlreadyShown_throwsCommandException() {"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(JAY);"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d prepareCommand(INDEX_JAY);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewCalendarCommand,"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"                model,"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_NO_CHANGE_IN_CALENDAR, JAY.getName().toString()));"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_fromAppointmentListViewToCalendar_success() {"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(JAY);"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d prepareCommand(INDEX_JAY);"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewCalendarCommand.MESSAGE_SUCCESS, JAY.getName().toString());"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarOwner(JAY);"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCalendarCommand, model, expectedMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"    public void equals() {"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewJayCalendarCommand \u003d prepareCommand(INDEX_JAY);"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewAyaneCalendarCommand \u003d prepareCommand(INDEX_AYANE);"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        // same object -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(viewJayCalendarCommand.equals(viewJayCalendarCommand));"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewJayCalendarCommandCopy \u003d prepareCommand(INDEX_JAY);"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(viewJayCalendarCommand.equals(viewJayCalendarCommandCopy));"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"        // different types -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewJayCalendarCommand.equals(1));"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        // null -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewJayCalendarCommand.equals(null));"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"        // different calendar -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewJayCalendarCommand.equals(viewAyaneCalendarCommand));"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"     * Returns a {@code ViewCalendarCommand} with the parameter {@code index}."},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"    private ViewCalendarCommand prepareCommand(Index index) {"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d new ViewCalendarCommand(index);"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"        viewCalendarCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        return viewCalendarCommand;"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":98,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/calendar/EditAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GRAMMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_OSCAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.CONCERT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand.EditAppointmentDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditAppointmentCommand."},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"public class EditAppointmentCommandTest {"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"    public void execute_allFieldsSpecifiedListingAppointments_success() throws DuplicateAppointmentException {"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"        prepareModel(CONCERT);"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder().withLocation(\"Clementi Road\").build();"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment).build();"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT, descriptor);"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_SUCCESS, editedAppointment.getTitle());"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"        expectedModel.addAppointmentToStorageCalendar(editedAppointment);"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        expectedModel.setIsListingAppointments(false);"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"    public void execute_someFieldsSpecifiedListingAppointments_success() throws DuplicateAppointmentException {"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"        prepareModel(CONCERT);"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(CONCERT)"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"                .withName(\"New Concert\").withStartTime(\"15:00\").withEndTime(\"16:00\").build();"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"                .withName(\"New Concert\").withStartTime(\"15:00\").withEndTime(\"16:00\").build();"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT, descriptor);"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_SUCCESS, editedAppointment.getTitle());"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"        expectedModel.addAppointmentToStorageCalendar(editedAppointment);"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        expectedModel.setIsListingAppointments(false);"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"    public void execute_noFieldsSpecifiedListingAppointments_throwsCommandException()"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"            throws DuplicateAppointmentException {"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"        prepareModel(CONCERT);"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT,"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"                new EditAppointmentDescriptor());"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(editAppointmentCommand, model, EditAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"    public void execute_validIndexNotListingAppointments_throwsCommandException() throws DuplicateAppointmentException {"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"        prepareModel(CONCERT);"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        model.setIsListingAppointments(false);"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment).build();"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT, descriptor);"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(editAppointmentCommand,"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"                model, Messages.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"    public void execute_invalidIndexListingAppointments_throwsCommandException() throws DuplicateAppointmentException {"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"        prepareModel(CONCERT);"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAppointmentList().size() + 1);"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(editedAppointment).build();"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"        assertCommandFailure(editAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"    public void equals() {"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"        final EditAppointmentCommand standardCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT, DESC_OSCAR);"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"        // same values -\u003e returns true"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"        EditAppointmentDescriptor copyDescriptor \u003d new EditAppointmentDescriptor(DESC_OSCAR);"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_APPOINTMENT, copyDescriptor);"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":"        // same object -\u003e returns true"},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"        // null -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"        // different types -\u003e returns false"},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"        // different index -\u003e returns false"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_SECOND_APPOINTMENT, DESC_OSCAR)));"},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"        assertFalse(standardCommand.equals(new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, DESC_GRAMMY)));"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":"     * Returns an {@code EditAppointmentCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":"    private EditAppointmentCommand prepareCommand(Index index, EditAppointmentDescriptor descriptor) {"},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(index, descriptor);"},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":"        editAppointmentCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":"        return editAppointmentCommand;"},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"     * Add appointment to storageCalendar Model and change isListingAppointment attribute of model"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":"    private void prepareModel(Appointment appt) throws DuplicateAppointmentException {"},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":"        model.addAppointmentToStorageCalendar(appt);"},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStoredAppointmentList());"},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":121,"WJY-norainu":4,"-":25}},{"path":"src/test/java/seedu/address/logic/commands/calendar/ViewAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.CONCERT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.DENTAL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"public class ViewAppointmentCommandTest {"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"    public void execute_validIndexListingAppointments_success() throws DuplicateAppointmentException {"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        model.addAppointmentToStorageCalendar(CONCERT);"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"        model.addAppointmentToStorageCalendar(DENTAL);"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStorageCalendar().getAllAppointments());"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        String displayedLocation \u003d (CONCERT.getLocation() \u003d\u003d null)"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"                ? ViewAppointmentCommand.MESSAGE_NO_LOCATION"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"                : CONCERT.getLocation();"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        String expectedMessage \u003d \"Selected appointment details:\\n\""},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"                + \"Appointment Name: \" + CONCERT.getTitle() + \"\\n\""},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"                + \"Start Date: \" + CONCERT.getStartDate() + \"\\n\""},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"                + \"Start Time: \" + CONCERT.getStartTime() + \"\\n\""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"                + \"End Date: \" + CONCERT.getEndDate() + \"\\n\""},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"                + \"End Time: \" + CONCERT.getEndTime() + \"\\n\""},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"                + \"Location: \" + displayedLocation + \"\\n\""},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"                + \"Celebrities attending: \" + CONCERT.getCelebritiesAttending() + \"\\n\""},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"                + \"Points of Contact: \" + CONCERT.getPointsOfContact();"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"                new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"        expectedModel.addAppointmentToStorageCalendar((new AppointmentBuilder(CONCERT)).build());"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"        expectedModel.addAppointmentToStorageCalendar((new AppointmentBuilder(DENTAL)).build());"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        //still have appointments in the list after deletion, should show appointment list"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        expectedModel.setIsListingAppointments(true);"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"        assertCommandSuccess(viewAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"    public void execute_validIndexNotListingAppointments_throwsCommandException() throws DuplicateAppointmentException {"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        model.addAppointmentToStorageCalendar(CONCERT);"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        model.addAppointmentToStorageCalendar(DENTAL);"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStorageCalendar().getAllAppointments());"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"        model.setIsListingAppointments(false);"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(viewAppointmentCommand,"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"                model,"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"                ViewAppointmentCommand.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    public void execute_invalidOutOfBoundsIndexListingAppointments_throwsCommandException() {"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStorageCalendar().getAllAppointments());"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAppointmentList().size() + 1);"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewAppointmentCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"        assertCommandFailure(viewAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewFirstAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewSecondAppointmentCommand \u003d prepareCommand(INDEX_SECOND_APPOINTMENT);"},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":96,"author":{"gitID":"Damienskt"},"content":"        // same object -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"Damienskt"},"content":"        assertTrue(viewFirstAppointmentCommand.equals(viewFirstAppointmentCommand));"},{"lineNumber":98,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":99,"author":{"gitID":"Damienskt"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewFirstAppointmentCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":101,"author":{"gitID":"Damienskt"},"content":"        assertTrue(viewFirstAppointmentCommand.equals(viewFirstAppointmentCommandCopy));"},{"lineNumber":102,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":103,"author":{"gitID":"Damienskt"},"content":"        // different types -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"Damienskt"},"content":"        assertFalse(viewFirstAppointmentCommand.equals(1));"},{"lineNumber":105,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":106,"author":{"gitID":"Damienskt"},"content":"        // null -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"Damienskt"},"content":"        assertFalse(viewFirstAppointmentCommand.equals(null));"},{"lineNumber":108,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":109,"author":{"gitID":"Damienskt"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"Damienskt"},"content":"        assertFalse(viewFirstAppointmentCommand.equals(viewSecondAppointmentCommand));"},{"lineNumber":111,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":113,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Damienskt"},"content":"     * Returns a {@code ViewCommand} with the parameter {@code index}."},{"lineNumber":115,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"Damienskt"},"content":"    private ViewAppointmentCommand prepareCommand(Index index) {"},{"lineNumber":117,"author":{"gitID":"Damienskt"},"content":"        ViewAppointmentCommand viewAppointmentCommand \u003d new ViewAppointmentCommand(index.getZeroBased());"},{"lineNumber":118,"author":{"gitID":"Damienskt"},"content":"        viewAppointmentCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":119,"author":{"gitID":"Damienskt"},"content":"        return viewAppointmentCommand;"},{"lineNumber":120,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"WJY-norainu":6,"-":19,"Damienskt":96}},{"path":"src/test/java/seedu/address/logic/commands/RemoveTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.RemoveTagCommand.MESSAGE_CANNOT_REMOVE_CELEBRITY_TAG;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.RemoveTagCommand.MESSAGE_TAG_NOT_FOUND;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.CELEBRITY_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.HUSBAND_TAG;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":" * {@code RemoveTagCommand}."},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandTest {"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    private Tag nonExistingTag \u003d new Tag(\"thisTagNameIsSuperLongAndThereShouldntBeAnyoneWithSuchATag\");"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    public void constructor_nullTag_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"        new RemoveTagCommand(null);"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_celebrityTag_throwsCommandException() {"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(CELEBRITY_TAG);"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(removeTagCommand, model, MESSAGE_CANNOT_REMOVE_CELEBRITY_TAG);"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_nonExistingTag_throwsCommandException() {"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(nonExistingTag);"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(removeTagCommand, model,"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"                String.format(MESSAGE_TAG_NOT_FOUND, nonExistingTag.toString()));"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_friendsTag_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(FRIENDS_TAG);"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d model.countPersonsWithTag(FRIENDS_TAG);"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"                RemoveTagCommand.MESSAGE_DELETE_TAG_SUCCESS,"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"                FRIENDS_TAG.toString(),"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"                count);"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.removeTag(FRIENDS_TAG);"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(removeTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"    public void executeUndoRedo_friendsTagWhichThreePersonsHave_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(FRIENDS_TAG);"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"        // removeTag -\u003e friends tag removed"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"        removeTagCommand.execute();"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        undoRedoStack.push(removeTagCommand);"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"        // undo -\u003e reverts address book back to previous state"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        // redo -\u003e friends tag deleted again"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.removeTag(FRIENDS_TAG);"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    public void equals() {"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagFirstCommand \u003d prepareCommand(FRIENDS_TAG);"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagSecondCommand \u003d prepareCommand(HUSBAND_TAG);"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"        // same object -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(removeTagFirstCommand.equals(removeTagFirstCommand));"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"        // same tag -\u003e returns true"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagFirstCommandCopy \u003d prepareCommand(FRIENDS_TAG);"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(removeTagFirstCommand.equals(removeTagFirstCommandCopy));"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(removeTagFirstCommand.equals(1));"},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"        // null -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(removeTagFirstCommand.equals(null));"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"        // different tags -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(removeTagFirstCommand.equals(removeTagSecondCommand));"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"    private RemoveTagCommand prepareCommand(Tag tag) {"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tag);"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"        removeTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"        return removeTagCommand;"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":120,"-":8}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 555, Ang Mo Kio, #11-222\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 297, Punggol Central, #01-222\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_MAP_AMY \u003d \"National University Of Singapore\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_MAP_BOB \u003d \"Block 297, Punggol Central\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friends\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_MAP_DESC1 \u003d \" \" + PREFIX_MAP_ADDRESS"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            + \"$$$$\"; // random text not allowed for map addresses"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_MAP_DESC2 \u003d \" \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"            + PREFIX_MAP_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_NAME_OSCAR \u003d \"Oscar Awards\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_NAME_GRAMMY \u003d \"Grammy Awards\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_LOCATION_OSCAR \u003d \"Clementi Rd\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_LOCATION_GRAMMY \u003d \"Commonwealth Ave\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String VALID_START_TIME_OSCAR \u003d \"12:30\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String VALID_START_TIME_GRAMMY \u003d \"18:00\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String VALID_START_DATE_OSCAR \u003d \"12-12-2018\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String VALID_START_DATE_GRAMMY \u003d \"10-10-2019\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String VALID_END_TIME_OSCAR \u003d \"13:30\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String VALID_END_TIME_GRAMMY \u003d \"19:00\";"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String VALID_END_DATE_OSCAR \u003d \"12-12-2018\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String VALID_END_DATE_GRAMMY \u003d \"10-10-2019\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String APPT_NAME_DESC_OSCAR \u003d \" \" + PREFIX_NAME + VALID_APPOINTMENT_NAME_OSCAR;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String APPT_NAME_DESC_GRAMMY \u003d \" \" + PREFIX_NAME + VALID_APPOINTMENT_NAME_GRAMMY;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String APPT_LOCATION_DESC_OSCAR \u003d \" \" + PREFIX_LOCATION + VALID_APPOINTMENT_LOCATION_OSCAR;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String APPT_LOCATION_DESC_GRAMMY \u003d \" \" + PREFIX_LOCATION + VALID_APPOINTMENT_LOCATION_GRAMMY;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String APPT_START_TIME_DESC_OSCAR \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_OSCAR;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String APPT_START_TIME_DESC_GRAMMY \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_GRAMMY;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String APPT_START_DATE_DESC_OSCAR \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_OSCAR;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String APPT_START_DATE_DESC_GRAMMY \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_GRAMMY;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String APPT_END_TIME_DESC_OSCAR \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_OSCAR;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String APPT_END_TIME_DESC_GRAMMY \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_GRAMMY;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String APPT_END_DATE_DESC_OSCAR \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_OSCAR;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String APPT_END_DATE_DESC_GRAMMY \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_GRAMMY;"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String INVALID_APPT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Dinner \u0026 Dance\"; // \u0027\u0026\u0027 not allowed in name"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String INVALID_APPT_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"???\"; // cant be just qn marks"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String INVALID_START_TIME \u003d \" \" + PREFIX_START_TIME + \"23:61\"; // Minute cannot be more than 60"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String INVALID_START_DATE \u003d \" \" + PREFIX_START_DATE + \"31-02-2018\"; // There is no Feb 31st"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String INVALID_END_TIME \u003d \" \" + PREFIX_END_TIME + \"23:61\"; // Minute cannot be more than 60"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String INVALID_END_DATE \u003d \" \" + PREFIX_END_DATE + \"31-02-2018\"; // There is no Feb 31st"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_OSCAR;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_GRAMMY;"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        DESC_OSCAR \u003d new EditAppointmentDescriptorBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_OSCAR).withEndDate(VALID_END_DATE_OSCAR)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        DESC_GRAMMY \u003d new EditAppointmentDescriptorBuilder().withName(VALID_APPOINTMENT_NAME_GRAMMY)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_GRAMMY).withEndTime(VALID_END_TIME_GRAMMY)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_GRAMMY).withEndDate(VALID_END_DATE_GRAMMY)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_GRAMMY).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":159,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":214}},{"path":"src/test/java/seedu/address/logic/commands/map/EstimateRouteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.maps.model.TravelMode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.DistanceEstimate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.Geocoding;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":" * Contains integration tests and unit tests for"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":" * {@code EstimateRouteCommand}."},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"public class EstimateRouteCommandTest {"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    public void constructor_nullAddress_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        new EstimateRouteCommand(null, null);"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    public void execute_initialisationOfCommand_success() {"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"        EstimateRouteCommand estimateRouteCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB),"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"                new MapAddress(VALID_ADDRESS_MAP_AMY));"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        DistanceEstimate estimate \u003d new DistanceEstimate();"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        Geocoding geocode \u003d new Geocoding();"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        geocode.initialiseLatLngFromAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"        LatLng startLatLng \u003d geocode.getLatLng();"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        geocode.initialiseLatLngFromAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        LatLng endLatLng \u003d geocode.getLatLng();"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"        estimate.calculateDistanceMatrix(startLatLng, endLatLng, TravelMode.DRIVING);"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        assertEquals(estimateRouteCommand.getStartLocation(), new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        assertEquals(estimateRouteCommand.getEndLocation(), new MapAddress(VALID_ADDRESS_MAP_AMY));"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        assertEquals(estimateRouteCommand.getDistOfTravel(), estimate.getDistBetweenOriginDest());"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        assertEquals(estimateRouteCommand.getTimeOfTravel(), estimate.getTravelTime());"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"        EstimateRouteCommand estimateRouteFirstCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB),"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"                new MapAddress(VALID_ADDRESS_MAP_AMY));"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        EstimateRouteCommand estimateRouteSecondCommand \u003d prepareCommand(new MapAddress(\"Bedok\"),"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"                new MapAddress(\"NUS\"));"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"        assertTrue(estimateRouteFirstCommand.equals(estimateRouteFirstCommand));"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"        // same start and end address -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"        EstimateRouteCommand estimateRouteFirstCommandCopy \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB),"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"                new MapAddress(VALID_ADDRESS_MAP_AMY));"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        assertTrue(estimateRouteFirstCommand.equals(estimateRouteFirstCommandCopy));"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"        assertFalse(estimateRouteFirstCommand.equals(1));"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"        assertFalse(estimateRouteFirstCommand.equals(null));"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"        // different start and end address -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"        assertFalse(estimateRouteFirstCommand.equals(estimateRouteSecondCommand));"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"     * Returns a {@code estimateRouteCommand} with the parameter {@code start} and {@code end}."},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"    private EstimateRouteCommand prepareCommand(MapAddress start, MapAddress end) {"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"        EstimateRouteCommand estimateRouteCommand \u003d new EstimateRouteCommand(start, end);"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"        return estimateRouteCommand;"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":19,"Damienskt":68}},{"path":"src/test/java/seedu/address/logic/commands/calendar/DeleteAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.DeleteAppointmentCommand.MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.DeleteAppointmentCommand.MESSAGE_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalCelebrities.JAY;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.CONCERT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.DENTAL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"public class DeleteAppointmentCommandTest {"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    private Model model;"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_validIndexListingAppointmentsWithRemainingAppointments_success()"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"            throws DuplicateAppointmentException {"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        model.addAppointmentToStorageCalendar(CONCERT);"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        model.addAppointmentToStorageCalendar(DENTAL);"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStoredAppointmentList());"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"                MESSAGE_SUCCESS,"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"                CONCERT.getTitle());"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.addAppointmentToStorageCalendar((new AppointmentBuilder(DENTAL)).build());"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        //still have appointments in the list after deletion, should show appointment list"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setIsListingAppointments(true);"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_deletesTheOnlyAppointmentWithCombinedCalendar_successAndChangeToCombinedCalendar()"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"            throws DuplicateAppointmentException {"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        model.addAppointmentToStorageCalendar(DENTAL);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStoredAppointmentList());"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, DENTAL.getTitle())"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"                + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY, \"combined\");"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        //have no appointments in the list after deletion, should show calendar"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setIsListingAppointments(false);"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(ModelManager.DAY_VIEW_PAGE);"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_deleteTheOnlyAppointmentWithCelebCalendar_successAndShowCelebCalendar()"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"            throws DuplicateAppointmentException {"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"        model.addAppointmentToStorageCalendar(DENTAL);"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(JAY);"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStoredAppointmentList());"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, DENTAL.getTitle())"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"                + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY, JAY.getName().toString() + \"\u0027s\");"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"        //have no appointments in the list after deletion, should show calendar"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setIsListingAppointments(false);"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setCelebCalendarViewPage(ModelManager.DAY_VIEW_PAGE);"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_validIndexNotListingAppointments_throwsCommandException()"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"            throws DuplicateAppointmentException {"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"        model.addAppointmentToStorageCalendar(CONCERT);"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        model.addAppointmentToStorageCalendar(DENTAL);"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStoredAppointmentList());"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(false);"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(deleteAppointmentCommand,"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"                model, Messages.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_invalidIndexListingAppointments_throwsCommandException() {"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"        model.setCurrentlyDisplayedAppointments(model.getStoredAppointmentList());"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getAppointmentList().size() + 1);"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(deleteAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"    public void equals() {"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteFirstAppointmentCommand \u003d prepareCommand(INDEX_FIRST_APPOINTMENT);"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteSecondAppointmentCommand \u003d prepareCommand(INDEX_SECOND_APPOINTMENT);"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"        // same object -\u003e returns true"},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(deleteFirstAppointmentCommand.equals(deleteFirstAppointmentCommand));"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"        // same values -\u003e returns true"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteFirstAppointmentCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(deleteFirstAppointmentCommand.equals(deleteFirstAppointmentCommandCopy));"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"        // different types -\u003e returns false"},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(deleteFirstAppointmentCommand.equals(1));"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":"        // null -\u003e returns false"},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(deleteFirstAppointmentCommand.equals(null));"},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(deleteFirstAppointmentCommand.equals(deleteSecondAppointmentCommand));"},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":"     * Returns a {@code DeleteAppointmentCommand} with the parameter {@code index}."},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":"    private DeleteAppointmentCommand prepareCommand(Index index) {"},{"lineNumber":150,"author":{"gitID":"WJY-norainu"},"content":"        DeleteAppointmentCommand deleteAppointmentCommand \u003d new DeleteAppointmentCommand(index);"},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":"        deleteAppointmentCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"        return deleteAppointmentCommand;"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":136,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/map/ShowLocationCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":" * Contains integration tests and unit tests for"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":" * {@code ShowLocationCommand}."},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"public class ShowLocationCommandTest {"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    public void constructor_nullAddress_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"        new ShowLocationCommand(null);"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    public void execute_initialisationOfCommand_success() {"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"        ShowLocationCommand showLocationCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        assertEquals(showLocationCommand.getLocation(), new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"        ShowLocationCommand showLocationFirstCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        assertTrue(showLocationFirstCommand.equals(showLocationFirstCommand));"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"        // same map address -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        ShowLocationCommand showLocationFirstCommandCopy \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        assertTrue(showLocationFirstCommand.equals(showLocationFirstCommandCopy));"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        assertFalse(showLocationFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        assertFalse(showLocationFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        // different map address -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"        ShowLocationCommand showLocationSecondCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_AMY));"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"        assertFalse(showLocationFirstCommand.equals(showLocationSecondCommand));"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"     * Returns a {@code showLocationCommand} with the parameter {@code address}."},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"    private ShowLocationCommand prepareCommand(MapAddress address) {"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        ShowLocationCommand showLocationCommand \u003d new ShowLocationCommand(address);"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"        return showLocationCommand;"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":13,"Damienskt":52}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":126}},{"path":"src/test/java/seedu/address/storage/XmlSerializableStorageCalendarTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":2,"author":{"gitID":"tzerbin"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":4,"author":{"gitID":"tzerbin"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":6,"author":{"gitID":"tzerbin"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"tzerbin"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":"import seedu.address.testutil.TypicalStorageCalendar;"},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":"public class XmlSerializableStorageCalendarTest {"},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":"            FileUtil.getPath(\"src/test/data/XmlSerializableStorageCalendarTest/\");"},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":"    private static final File TYPICAL_APPOINTMENTS_FILE \u003d"},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":"            new File(TEST_DATA_FOLDER + \"typicalAppointmentsStorageCalendar.xml\");"},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":"    private static final File INVALID_APPOINTMENTS_FILE \u003d"},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"            new File(TEST_DATA_FOLDER + \"invalidAppointmentsStorageCalendar.xml\");"},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    public void toModelType_typicalAppointmentsFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":"        XmlSerializableStorageCalendar dataFromFile \u003d"},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"                XmlUtil.getDataFromFile(TYPICAL_APPOINTMENTS_FILE, XmlSerializableStorageCalendar.class);"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":"        List storageCalendarFromFile \u003d dataFromFile.toModelType().getAllAppointments();"},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"        List typicalAppointmentList \u003d TypicalStorageCalendar.getTypicalAppointmentList();"},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"        assertEquals(storageCalendarFromFile, typicalAppointmentList);"},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":"    public void toModelType_invalidAppointmentFile_throwsDateTimeParseException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"        XmlSerializableStorageCalendar dataFromFile \u003d"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"                XmlUtil.getDataFromFile(INVALID_APPOINTMENTS_FILE, XmlSerializableStorageCalendar.class);"},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":"        dataFromFile.toModelType();"},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":47}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":2,"author":{"gitID":"tzerbin"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":4,"author":{"gitID":"tzerbin"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"tzerbin"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.DENTAL;"},{"lineNumber":6,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":7,"author":{"gitID":"tzerbin"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"tzerbin"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":"    private static final String INVALID_TITLE \u003d \"Event N@me\";"},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":"    private static final String VALID_STARTTIME \u003d DENTAL.getStartTime().toString();"},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":"    private static final String VALID_STARTDATE \u003d DENTAL.getStartDate().toString();"},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":"    private static final String VALID_ENDTIME \u003d DENTAL.getEndTime().toString();"},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":"    private static final String VALID_ENDDATE \u003d DENTAL.getEndDate().toString();"},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"    private static final String VALID_LOCATION \u003d DENTAL.getMapAddress().toString();"},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(DENTAL);"},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":"        assertEquals(DENTAL, appointment.toModelType());"},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {"},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(null,"},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"                LocalTime.parse(VALID_STARTTIME),"},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"                LocalDate.parse(VALID_STARTDATE),"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":"                new MapAddress(VALID_LOCATION),"},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":"                LocalTime.parse(VALID_ENDTIME),"},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":"                LocalDate.parse(VALID_ENDDATE));"},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"        String expectedMessage \u003d Appointment.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(INVALID_TITLE,"},{"lineNumber":48,"author":{"gitID":"tzerbin"},"content":"                LocalTime.parse(VALID_STARTTIME),"},{"lineNumber":49,"author":{"gitID":"tzerbin"},"content":"                LocalDate.parse(VALID_STARTDATE),"},{"lineNumber":50,"author":{"gitID":"tzerbin"},"content":"                new MapAddress(VALID_LOCATION),"},{"lineNumber":51,"author":{"gitID":"tzerbin"},"content":"                LocalTime.parse(VALID_ENDTIME),"},{"lineNumber":52,"author":{"gitID":"tzerbin"},"content":"                LocalDate.parse(VALID_ENDDATE));"},{"lineNumber":53,"author":{"gitID":"tzerbin"},"content":"        String expectedMessage \u003d Appointment.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitID":"tzerbin"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":55,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":56}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.HUSBAND_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"            .withPerson(AMY).build();"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithBobAndAlice \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"            .withPerson(ALICE).build();"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithAlice \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"    public void countPersonsWithTag_countsFriendsTag_returnNumberOfPersonsWithFriendsTag() {"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(addressBookWithAlice.countPersonsWithTag(FRIENDS_TAG), 1);"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"    public void countPersonsWithTag_countsHusbandTag_returnNumberOfPersonsWithHusbandTag() {"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(addressBookWithAlice.countPersonsWithTag(HUSBAND_TAG), 0);"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag_existentTag_tagRemoved() throws Exception {"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"    public void removePerson_theOnlyPersonWithHusbandTagRemoved_tagListUpdated() throws Exception {"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithBobAndAlice.removePerson(BOB);"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAlice);"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"    public void updatePerson_theOnlyPersonWithFriendTagUpdated_tagListUpdated() throws Exception {"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"        Person aliceWithoutFriendTag \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithAlice.updatePerson(ALICE, aliceWithoutFriendTag);"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(aliceWithoutFriendTag).build();"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithAlice);"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        private final ArrayList\u003cCelebrity\u003e celebrities \u003d new ArrayList\u003c\u003e();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ArrayList\u003cCelebrity\u003e getCelebritiesList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return celebrities;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":57,"-":101}},{"path":"src/test/java/seedu/address/logic/parser/calendar/EditAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_GRAMMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_OSCAR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_GRAMMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_GRAMMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_OSCAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_GRAMMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_OSCAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_OSCAR;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_GRAMMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_OSCAR;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_LOCATION_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_LOCATION_GRAMMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_LOCATION_OSCAR;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_GRAMMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_OSCAR;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_GRAMMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_OSCAR;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_GRAMMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_OSCAR;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_GRAMMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_OSCAR;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_GRAMMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_OSCAR;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand.EditAppointmentDescriptor;"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class EditAppointmentCommandParserTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            EditAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_APPOINTMENT_NAME_OSCAR, MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditAppointmentCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + APPT_NAME_DESC_OSCAR, MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + APPT_NAME_DESC_OSCAR, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPT_NAME_DESC, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // invalid start time"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_TIME, Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // invalid start date"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_DATE, Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // invalid end time"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_END_TIME, Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // invalid end date"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_END_DATE, Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // invalid location"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPT_LOCATION_DESC,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // invalid start date followed by valid end time"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_DATE + APPT_END_TIME_DESC_OSCAR,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // valid end date followed by invalid end date. The test case for invalid end date followed by valid end date"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + APPT_END_DATE_DESC_OSCAR + INVALID_END_DATE,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPT_NAME_DESC + INVALID_APPT_LOCATION_DESC"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + VALID_START_TIME_OSCAR, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_APPOINTMENT;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_LOCATION_DESC_GRAMMY + APPT_START_DATE_DESC_GRAMMY"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + APPT_NAME_DESC_OSCAR;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withName(VALID_APPOINTMENT_NAME_OSCAR).withLocation(VALID_APPOINTMENT_LOCATION_GRAMMY)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_GRAMMY).withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_LOCATION_DESC_OSCAR + APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_OSCAR).withStartDate(VALID_START_DATE_GRAMMY).build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_APPOINTMENT;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + APPT_NAME_DESC_OSCAR;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                .withName(VALID_APPOINTMENT_NAME_OSCAR).build();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // location"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_LOCATION_DESC_OSCAR;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withLocation(VALID_APPOINTMENT_LOCATION_OSCAR).build();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // start date"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withStartDate(VALID_START_DATE_GRAMMY).build();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // start time"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_START_TIME_DESC_OSCAR;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withStartTime(VALID_START_TIME_OSCAR).build();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // end date"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_END_DATE_DESC_GRAMMY;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withEndDate(VALID_END_DATE_GRAMMY).build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // start time"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withEndTime(VALID_END_TIME_OSCAR).build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + APPT_END_TIME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_NAME_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                + APPT_LOCATION_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR + APPT_NAME_DESC_OSCAR"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                + APPT_END_TIME_DESC_GRAMMY + APPT_LOCATION_DESC_GRAMMY + APPT_START_TIME_DESC_GRAMMY"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + APPT_NAME_DESC_GRAMMY;"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                .withName(VALID_APPOINTMENT_NAME_GRAMMY).withStartTime(VALID_START_TIME_GRAMMY)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                .withEndTime(VALID_END_TIME_GRAMMY).withLocation(VALID_APPOINTMENT_LOCATION_GRAMMY)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_START_DATE + APPT_START_DATE_DESC_OSCAR;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).build();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + APPT_LOCATION_DESC_OSCAR + INVALID_END_DATE + APPT_NAME_DESC_OSCAR"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                + APPT_END_DATE_DESC_OSCAR;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder().withLocation(VALID_APPOINTMENT_LOCATION_OSCAR)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                .withName(VALID_APPOINTMENT_NAME_OSCAR).withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditAppointmentCommand(targetIndex, descriptor);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":3,"-":221}},{"path":"src/test/java/seedu/address/model/map/MapAddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":10,"author":{"gitID":"Damienskt"},"content":"public class MapAddressTest {"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new MapAddress(null));"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MapAddress(invalidAddress));"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e MapAddress.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"        assertFalse(MapAddress.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        assertFalse(MapAddress.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"        assertFalse(MapAddress.isValidAddress(\"!!!!!!!\")); // location not found in google server"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        // valid addresses"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        assertTrue(MapAddress.isValidAddress(\"Kent ridge road\"));"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"        assertTrue(MapAddress.isValidAddress(\"820297\")); // postal code"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"        assertTrue(MapAddress.isValidAddress(\"National University Of Singapore\")); // long address"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":8,"Damienskt":30}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"     * Adds a new {@code Celebrity} to the {@code AddressBook} that we are building."},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    public AddressBookBuilder withCelebrity(Celebrity celebrity) {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"            addressBook.addCelebrity(celebrity);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"            throw new IllegalArgumentException(\"celebrity is expected to be unique.\");"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":12,"-":54}},{"path":"src/test/java/seedu/address/testutil/TypicalTags.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"public class TypicalTags {"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"    public static final Tag FRIENDS_TAG \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"    public static final Tag HUSBAND_TAG \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":8,"-":6}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":" * The typical celebrity indexes match with the listing in typical model."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    public static final Index INDEX_JAY \u003d Index.fromOneBased(8);"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"    public static final Index INDEX_AYANE \u003d Index.fromOneBased(9);"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    public static final Index INDEX_ROBERT \u003d Index.fromOneBased(10);"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":9,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalCelebrities.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":" * A utility class containing a list of {@code Celebrity} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"public class TypicalCelebrities {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    public static final Celebrity JAY \u003d new Celebrity("},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"            new PersonBuilder().withName(\"Jay Chou\")"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"                    .withAddress(\"145, Taiwan\")"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"                    .withEmail(\"jay@gmail.com\")"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"                    .withPhone(\"134520789201\")"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"                    .withTags(\"friends\", \"celebrity\").build());"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    public static final Celebrity AYANE \u003d new Celebrity("},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"            new PersonBuilder().withName(\"Sakura Ayane\")"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"                    .withAddress(\"Tokyo, Japan\")"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"                    .withEmail(\"ayane@gmail.com\")"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"                    .withPhone(\"5201314\")"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"                    .withTags(\"celebrity\", \"colleagues\").build());"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    public static final Celebrity ROBERT \u003d new Celebrity("},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            new PersonBuilder().withName(\"Robert Downey\")"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"                    .withAddress(\"USA\")"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"                    .withEmail(\"ironman@firefox.com\")"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"                    .withPhone(\"19650404\")"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"                    .withTags(\"celebrity\", \"owesMoney\").build());"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    public static List\u003cCelebrity\u003e getTypicalCelebrities() {"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(JAY, AYANE, ROBERT));"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":34,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/calendar/ViewCombinedCalenrCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewCombinedCalendarCommand.MESSAGE_ALREADY_IN_COMBINED_VIEW;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalCelebrities.JAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCombinedCalenrCommandTest {"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_notAlreadyInCombinedCalendar_success() {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(JAY);"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"        ViewCombinedCalendarCommand viewCombinedCalendarCommand \u003d prepareCommand();"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCombinedCalendarCommand, model,"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"                ViewCombinedCalendarCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_changeFromAppointmentListAlreadyInCombinedCalendar_success() {"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(null);"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        ViewCombinedCalendarCommand viewCombinedCalendarCommand \u003d prepareCommand();"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewCombinedCalendarCommand, model,"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"                ViewCombinedCalendarCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_alreadyInCombinedCalendar_throwsCommandException() {"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(null);"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        ViewCombinedCalendarCommand viewCombinedCalendarCommand \u003d prepareCommand();"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewCombinedCalendarCommand, model, MESSAGE_ALREADY_IN_COMBINED_VIEW);"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"     * Returns a {@code ViewCombinedCalendarCommand}."},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"    private ViewCombinedCalendarCommand prepareCommand() {"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        ViewCombinedCalendarCommand viewCombinedCalendarCommand \u003d new ViewCombinedCalendarCommand();"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"        viewCombinedCalendarCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        return viewCombinedCalendarCommand;"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":49,"-":14}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalCelebrities.getTypicalCelebrities;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"     * Returns an {@code AddressBook} with all the typical persons and celebrities."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"        for (Celebrity celebrity: getTypicalCelebrities()) {"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"            try {"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"                ab.addCelebrity(celebrity);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":7,"-":84}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":10,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":"public class AppointmentBuilder {"},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"    public static final String DEFAULT_NAME \u003d \"Oscars 2018\";"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":"    public static final MapAddress DEFAULT_LOCATION \u003d null;"},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":"    public static final LocalTime DEFAULT_START_TIME \u003d LocalTime.now();"},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"    public static final LocalDate DEFAULT_START_DATE \u003d LocalDate.now();"},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"    public static final LocalTime DEFAULT_END_TIME \u003d LocalTime.now().plusMinutes(15);"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":"    public static final LocalDate DEFAULT_END_DATE \u003d LocalDate.now();"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"    private String name;"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":"    private MapAddress location;"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"    private LocalTime startTime;"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":"    private LocalDate startDate;"},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"    private LocalTime endTime;"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"    private LocalDate endDate;"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder() {"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"        name \u003d DEFAULT_NAME;"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"        location \u003d DEFAULT_LOCATION;"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"        startTime \u003d DEFAULT_START_TIME;"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"        startDate \u003d DEFAULT_START_DATE;"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"        endDate \u003d DEFAULT_END_DATE;"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"        endTime \u003d DEFAULT_END_TIME;"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"     * Initializes the AppointmentBuilder with the data of {@code apptToCopy}"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder(Appointment apptToCopy) {"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"        name \u003d apptToCopy.getTitle();"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"        location \u003d apptToCopy.getMapAddress();"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"        startTime \u003d apptToCopy.getStartTime();"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"        startDate \u003d apptToCopy.getStartDate();"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"        endTime \u003d apptToCopy.getEndTime();"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        endDate \u003d apptToCopy.getEndDate();"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code name} of the {@code Appointment} that we are building."},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"        this.name \u003d name;"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code location} of the {@code Appointment} that we are building."},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder withLocation(String location) {"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"            this.location \u003d ParserUtil.parseMapAddress(location);"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"            throw new IllegalArgumentException(\"map address not valid.\");"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code startTime} of the {@code Appointment} that we are building."},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder withStartTime(String startTime) {"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"        this.startTime \u003d LocalTime.parse(startTime, Appointment.TIME_FORMAT);"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"        this.endTime \u003d this.startTime.plusMinutes(15);"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code startDate} of the {@code Appointment} that we are building."},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder withStartDate(String startDate) {"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        this.startDate \u003d LocalDate.parse(startDate, Appointment.DATE_FORMAT);"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"        this.endDate \u003d this.startDate;"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code endTime} of the {@code Appointment} that we are building."},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder withEndTime(String endTime) {"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"        this.endTime \u003d LocalTime.parse(endTime, Appointment.TIME_FORMAT);"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code endDate} of the {@code Appointment} that we are building."},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"    public AppointmentBuilder withEndDate(String endDate) {"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"        this.endDate \u003d LocalDate.parse(endDate, Appointment.DATE_FORMAT);"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":"    public Appointment build() {"},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"        return new Appointment(name, startTime, startDate, location, endTime, endDate);"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":100,"WJY-norainu":1,"-":8}},{"path":"src/test/java/seedu/address/testutil/TypicalStorageCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":" * A utility class containing a list of {@code Appointments} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":"public class TypicalStorageCalendar {"},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":"    public static final Appointment CONCERT \u003d new Appointment("},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":"            new AppointmentBuilder().withName(\"Concert\")"},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":"                    .withStartTime(\"19:00\")"},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":"                    .withStartDate(\"24-08-2018\")"},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":"                    .withLocation(\"Singapore Indoors Stadium\")"},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":"                    .withEndTime(\"23:00\")"},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":"                    .withEndDate(\"24-08-2018\").build());"},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":"    public static final Appointment DENTAL \u003d new Appointment("},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":"            new AppointmentBuilder().withName(\"Dental\")"},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"                    .withStartTime(\"15:30\")"},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":"                    .withStartDate(\"25-08-2018\")"},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":"                    .withLocation(\"Singapore General Hospital\")"},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"                    .withEndTime(\"15:50\")"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":"                    .withEndDate(\"25-08-2018\").build());"},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    public static final Appointment MEETING \u003d new Appointment("},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":"            new AppointmentBuilder().withName(\"Meeting\")"},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"                    .withStartTime(\"10:30\")"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":"                    .withStartDate(\"26-08-2018\")"},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"                    .withLocation(\"Mediacorp Campus\")"},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"                    .withEndTime(\"18:00\")"},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"                    .withEndDate(\"26-08-2018\").build());"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":"    public static final Appointment OSCAR \u003d new Appointment("},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":"            new AppointmentBuilder().withName(\"Oscar Awards\")"},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"                    .withStartTime(\"12:30\")"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"                    .withStartDate(\"12-12-2018\")"},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"                    .withLocation(\"Clementi Rd\")"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":"                    .withEndTime(\"13:30\")"},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"                    .withEndDate(\"12-12-2018\").build());"},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":"    public static final Appointment GRAMMY \u003d new Appointment("},{"lineNumber":48,"author":{"gitID":"tzerbin"},"content":"            new AppointmentBuilder().withName(\"Grammy Awards\")"},{"lineNumber":49,"author":{"gitID":"tzerbin"},"content":"                    .withStartTime(\"18:00\")"},{"lineNumber":50,"author":{"gitID":"tzerbin"},"content":"                    .withStartDate(\"10-10-2019\")"},{"lineNumber":51,"author":{"gitID":"tzerbin"},"content":"                    .withLocation(\"Commonwealth Ave\")"},{"lineNumber":52,"author":{"gitID":"tzerbin"},"content":"                    .withEndTime(\"19:00\")"},{"lineNumber":53,"author":{"gitID":"tzerbin"},"content":"                    .withEndDate(\"10-10-2019\").build());"},{"lineNumber":54,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":55,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":56,"author":{"gitID":"tzerbin"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointmentList() {"},{"lineNumber":57,"author":{"gitID":"tzerbin"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CONCERT, DENTAL, MEETING));"},{"lineNumber":58,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":60,"author":{"gitID":"tzerbin"},"content":"    public static StorageCalendar generateEmptyStorageCalendar() {"},{"lineNumber":61,"author":{"gitID":"tzerbin"},"content":"        return new StorageCalendar();"},{"lineNumber":62,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":55,"WJY-norainu":3,"-":5}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    public CalendarPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":2,"-":62}},{"path":"src/test/java/guitests/guihandles/WebViewUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper methods for dealing with {@code WebView}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class WebViewUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page in the {@code webView}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static URL getLoadedUrl(WebView webView) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            return new URL(webView.getEngine().getLocation());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"     * If the {@code calendarPanelHandle}\u0027s {@code WebView} is loading,"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"     * sleeps the thread till it is successfully loaded."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"    public static void waitUntilBrowserLoaded(CalendarPanelHandle calendarPanelHandle) {"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        new GuiRobot().waitForEvent(calendarPanelHandle::isLoaded);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":4,"-":28}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":" * A util class for Appointments"},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"public class AppointmentUtil {"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"     * Returns an add command string for adding the {@code appointment}."},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":"    public static String getAddAppointmentCommand(Appointment appointment) {"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details."},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"    public static String getAppointmentDetails(Appointment appointment) {"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"        sb.append(PREFIX_NAME + appointment.getTitle() + \" \");"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"        sb.append(PREFIX_LOCATION + appointment.getMapAddress().value + \" \");"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"        sb.append(PREFIX_START_TIME + appointment.getStartTime().format(Appointment.TIME_FORMAT) + \" \");"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"        sb.append(PREFIX_START_DATE + appointment.getStartDate().format(Appointment.DATE_FORMAT) + \" \");"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"        sb.append(PREFIX_END_TIME + appointment.getEndTime().format(Appointment.TIME_FORMAT) + \" \");"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"        sb.append(PREFIX_END_DATE + appointment.getEndDate().format(Appointment.DATE_FORMAT) + \" \");"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"        return sb.toString();"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":28,"WJY-norainu":1,"-":10}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_CALENDAR_VIEW;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.MONTH_VIEW_PAGE;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.WEEK_VIEW_PAGE;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.calendarfx.view.DateControl;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.calendarfx.view.page.DayPage;"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"import javafx.event.Event;"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ChangeCalendarRequestEvent;"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewPageRequestEvent;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarBasedOnDateEvent;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCombinedCalendarViewRequestEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":" * The panel for the Calendar. Constructs a calendar view and attaches to it a CalendarSource."},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":" * The view is then returned by calling getCalendarView in MainWindow to attach it to the"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":" * calendarPlaceholder."},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"    private CalendarView celebCalendarView;"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    private final CalendarSource celebCalendarSource;"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"    public CalendarPanel(CalendarSource celebCalendarSource) {"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"        this.celebCalendarView \u003d new CalendarView();"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        this.celebCalendarSource \u003d celebCalendarSource;"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"        // To set up the calendar view."},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"        setUpCelebCalendarView();"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"    private void setUpCelebCalendarView() {"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        celebCalendarView.getCalendarSources().clear(); // there is an existing default source when creating the view"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"        celebCalendarView.getCalendarSources().add(celebCalendarSource);"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"        celebCalendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        celebCalendarView.getDayPage().setDayPageLayout(DayPage.DayPageLayout.DAY_ONLY);"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"        celebCalendarView.showDayPage();"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        Thread updateTimeThread \u003d new Thread(\"Calendar: Update Time Thread\") {"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"            @Override"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"            public void run() {"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"                while (true) {"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"                    Platform.runLater(() -\u003e {"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"                        celebCalendarView.setToday(LocalDate.now());"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"                        celebCalendarView.setTime(LocalTime.now());"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"                    });"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"                    try {"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"                        sleep(10000);"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"                        e.printStackTrace();"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"                    }"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"                }"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"            };"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"        };"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"        updateTimeThread.setPriority(Thread.MIN_PRIORITY);"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"        updateTimeThread.setDaemon(true);"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        updateTimeThread.start();"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"        celebCalendarView.setLayout(DateControl.Layout.SWIMLANE);"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        hideButtons();"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"    /** Hide all buttons in the calendar */"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    private void hideButtons() {"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowSearchField(false);"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowSourceTrayButton(false);"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowAddCalendarButton(false);"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowPrintButton(false);"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowPageToolBarControls(false);"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowPageSwitcher(false);"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setShowToolBar(false);"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.setLayout(DateControl.Layout.SWIMLANE);"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"    public CalendarView getCalendarView() {"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        return celebCalendarView;"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"     * Method to handle the event for changing calendar view. Changes to either day,"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"     * week, month or year view."},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"     * @param event"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"    @Subscribe"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"    private void handleChangeCalendarViewPageRequestEvent(ChangeCalendarViewPageRequestEvent event) {"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.getCalendarSources().clear();"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":"        celebCalendarView.getCalendarSources().add(celebCalendarSource);"},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"        String calendarViewPage \u003d event.calendarViewPage;"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"            switch (calendarViewPage) {"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"            case DAY_VIEW_PAGE:"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"                celebCalendarView.getDayPage().setDayPageLayout(DayPage.DayPageLayout.DAY_ONLY);"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"                celebCalendarView.showDayPage();"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"                break;"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"            case WEEK_VIEW_PAGE:"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":"                celebCalendarView.showWeekPage();"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"                break;"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"            case MONTH_VIEW_PAGE:"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"                celebCalendarView.showMonthPage();"},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"                break;"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"            default:"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"                try {"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"                    throw new ParseException(MESSAGE_UNKNOWN_CALENDAR_VIEW);"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":"                } catch (ParseException e) {"},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"                    e.printStackTrace();"},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":"        });"},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":"    /** Shows the calendar of the specified {@code celebrity} */"},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":"    private void showCalendarOf(CelebCalendar celebCalendarToShow) {"},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":"            for (Calendar calendar: celebCalendarSource.getCalendars()) {"},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"                if (calendar !\u003d celebCalendarToShow) {"},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":"                    celebCalendarView.getSourceView().setCalendarVisibility(calendar, false);"},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":"                } else {"},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":"                    celebCalendarView.getSourceView().setCalendarVisibility(calendar, true);"},{"lineNumber":150,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"        });"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"    @Subscribe"},{"lineNumber":156,"author":{"gitID":"WJY-norainu"},"content":"    private void handleChangeCalendarRequestEvent(ChangeCalendarRequestEvent event) {"},{"lineNumber":157,"author":{"gitID":"WJY-norainu"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":158,"author":{"gitID":"WJY-norainu"},"content":"        showCalendarOf(event.celebCalendar);"},{"lineNumber":159,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":161,"author":{"gitID":"WJY-norainu"},"content":"    /** Shows a combined calendar that contains {@code appointment}s for all {@code celebrity}s */"},{"lineNumber":162,"author":{"gitID":"WJY-norainu"},"content":"    private void showAllCalendars() {"},{"lineNumber":163,"author":{"gitID":"WJY-norainu"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":164,"author":{"gitID":"WJY-norainu"},"content":"            for (Calendar calendar: celebCalendarSource.getCalendars()) {"},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":"                celebCalendarView.getSourceView().setCalendarVisibility(calendar, true);"},{"lineNumber":166,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"WJY-norainu"},"content":"        });"},{"lineNumber":168,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":170,"author":{"gitID":"WJY-norainu"},"content":"    @Subscribe"},{"lineNumber":171,"author":{"gitID":"WJY-norainu"},"content":"    private void handleShowCombinedCalendarViewRequestEvent(ShowCombinedCalendarViewRequestEvent event) {"},{"lineNumber":172,"author":{"gitID":"WJY-norainu"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":173,"author":{"gitID":"WJY-norainu"},"content":"        showAllCalendars();"},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":176,"author":{"gitID":"WJY-norainu"},"content":"    private void showDate(LocalDate date) {"},{"lineNumber":177,"author":{"gitID":"WJY-norainu"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":178,"author":{"gitID":"WJY-norainu"},"content":"            celebCalendarView.setDate(date);"},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"        });"},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":182,"author":{"gitID":"WJY-norainu"},"content":"    /** Shows calendar with the specified date as its base */"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":"    @Subscribe"},{"lineNumber":184,"author":{"gitID":"WJY-norainu"},"content":"    private void handleShowCalendarBasedOnDateEvent(ShowCalendarBasedOnDateEvent event) {"},{"lineNumber":185,"author":{"gitID":"WJY-norainu"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":186,"author":{"gitID":"WJY-norainu"},"content":"        showDate(event.getDate());"},{"lineNumber":187,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"muruges95":60,"WJY-norainu":115,"-":13}},{"path":"src/test/java/seedu/address/testutil/EditAppointmentDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand.EditAppointmentDescriptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":" * A utility class to help with building EditAppointmentDescriptor objects."},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":"public class EditAppointmentDescriptorBuilder {"},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"    private EditAppointmentCommand.EditAppointmentDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"        descriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"        this.descriptor \u003d descriptor;"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"        descriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"        descriptor.setAppointmentName(appointment.getTitle());"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"        descriptor.setStartDate(appointment.getStartDate());"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"        descriptor.setEndDate(appointment.getEndDate());"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"        descriptor.setStartTime(appointment.getStartTime());"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"        descriptor.setEndTime(appointment.getEndTime());"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"        descriptor.setLocation(appointment.getMapAddress());"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"        descriptor.setCelebIds(appointment.getCelebIds());"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"        descriptor.setPointOfContactIds(appointment.getPointOfContactIds());"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code Name} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"        descriptor.setAppointmentName(name);"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code MapAddress} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder withLocation(String location) {"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"            descriptor.setLocation(ParserUtil.parseMapAddress(location));"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"            throw new IllegalArgumentException(\"map address not valid.\");"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code startTime} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder withStartTime(String startTime) {"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"        descriptor.setStartTime(LocalTime.parse(startTime, Appointment.TIME_FORMAT));"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code endTime} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder withEndTime(String endTime) {"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"        descriptor.setEndTime(LocalTime.parse(endTime, Appointment.TIME_FORMAT));"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code startDate} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder withStartDate(String startDate) {"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"        descriptor.setStartDate(LocalDate.parse(startDate, Appointment.DATE_FORMAT));"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"     * Sets the {@code endDate} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptorBuilder withEndDate(String endDate) {"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"        descriptor.setEndDate(LocalDate.parse(endDate, Appointment.DATE_FORMAT));"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentDescriptor build() {"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"        return descriptor;"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":87,"WJY-norainu":1,"-":9}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowAppointmentListEvent;"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private MapPanel mapPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // Source of calendars for calendar UI container"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private CalendarSource celebCalendarSource;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane mapPanelPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.celebCalendarSource \u003d logic.getCelebCalendarSource();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":115,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        calendarPanel \u003d new CalendarPanel(celebCalendarSource);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getCalendarView());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        mapPanel \u003d new MapPanel();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        mapPanelPlaceholder.getChildren().add(mapPanel.getMapView());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                logic.getFilteredPersonList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"muruges95"},"content":"    //@@author muruges95"},{"lineNumber":193,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":194,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"muruges95"},"content":"     * Creates appointmentListWindow and replaces calendarPanel with it"},{"lineNumber":196,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"muruges95"},"content":"    private void handleAppointmentList(List\u003cAppointment\u003e appointments) {"},{"lineNumber":198,"author":{"gitID":"muruges95"},"content":"        AppointmentListWindow apptListWindow \u003d new AppointmentListWindow(appointments);"},{"lineNumber":199,"author":{"gitID":"muruges95"},"content":"        calendarPlaceholder.getChildren().clear();"},{"lineNumber":200,"author":{"gitID":"muruges95"},"content":"        calendarPlaceholder.getChildren().add(apptListWindow.getRoot());"},{"lineNumber":201,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":203,"author":{"gitID":"muruges95"},"content":"    void show() {"},{"lineNumber":204,"author":{"gitID":"muruges95"},"content":"        primaryStage.show();"},{"lineNumber":205,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":207,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"muruges95"},"content":"     * Closes the application."},{"lineNumber":209,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":211,"author":{"gitID":"muruges95"},"content":"    private void handleExit() {"},{"lineNumber":212,"author":{"gitID":"muruges95"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":213,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":215,"author":{"gitID":"muruges95"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":216,"author":{"gitID":"muruges95"},"content":"        return this.personListPanel;"},{"lineNumber":217,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":219,"author":{"gitID":"muruges95"},"content":"    @Subscribe"},{"lineNumber":220,"author":{"gitID":"muruges95"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":221,"author":{"gitID":"muruges95"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":222,"author":{"gitID":"muruges95"},"content":"        handleHelp();"},{"lineNumber":223,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":225,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"muruges95"},"content":"     * Replaces appointmentListWindow with calendarPanel if necessary,"},{"lineNumber":227,"author":{"gitID":"muruges95"},"content":"     * and then handles the changing of calendarview command."},{"lineNumber":228,"author":{"gitID":"muruges95"},"content":"     * @param event"},{"lineNumber":229,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"muruges95"},"content":"    @Subscribe"},{"lineNumber":231,"author":{"gitID":"muruges95"},"content":"    private void handleShowCalendarEvent(ShowCalendarEvent event) {"},{"lineNumber":232,"author":{"gitID":"muruges95"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":233,"author":{"gitID":"muruges95"},"content":"        calendarPlaceholder.getChildren().clear();"},{"lineNumber":234,"author":{"gitID":"muruges95"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getCalendarView());"},{"lineNumber":235,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":237,"author":{"gitID":"muruges95"},"content":"    @Subscribe"},{"lineNumber":238,"author":{"gitID":"muruges95"},"content":"    private void handleShowAppointmentListEvent(ShowAppointmentListEvent event) {"},{"lineNumber":239,"author":{"gitID":"muruges95"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":240,"author":{"gitID":"muruges95"},"content":"        handleAppointmentList(event.getAppointments());"},{"lineNumber":241,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":51,"WJY-norainu":5,"-":186}},{"path":"src/test/java/seedu/address/logic/commands/calendar/ViewDateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewDateCommand.MESSAGE_NO_CHANGE_IN_BASE_DATE;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.WEEK_VIEW_PAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStorageCalendar.generateEmptyStorageCalendar;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"public class ViewDateCommandTest {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), generateEmptyStorageCalendar(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate mayFirst2018 \u003d LocalDate.of(2018, 5, 1);"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate maySecond2018 \u003d LocalDate.of(2018, 5, 2);"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_viewADifferentDay_success() {"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        model.setBaseDate(mayFirst2018);"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateCommand \u003d prepareCommand(maySecond2018);"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewDateCommand.MESSAGE_SUCCESS,"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"                maySecond2018.format(ViewDateCommand.FORMATTER));"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setBaseDate(maySecond2018);"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewDateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_changeFromAppointmentListViewSameDay_success() {"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        model.setBaseDate(mayFirst2018);"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateCommand \u003d prepareCommand(mayFirst2018);"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewDateCommand.MESSAGE_SUCCESS,"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"                mayFirst2018.format(ViewDateCommand.FORMATTER));"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setBaseDate(mayFirst2018);"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewDateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_changeFromWeekViewPageViewADifferentDay_success() {"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarViewPage(WEEK_VIEW_PAGE);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        model.setBaseDate(mayFirst2018);"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateCommand \u003d prepareCommand(maySecond2018);"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        String expectedMessage \u003d String.format(ViewDateCommand.MESSAGE_SUCCESS,"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"                maySecond2018.format(ViewDateCommand.FORMATTER));"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), generateEmptyStorageCalendar(),"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"                new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        expectedModel.setBaseDate(maySecond2018);"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(viewDateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_changeFromWeekViewPageViewSameDay_throwsCommandException() {"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarViewPage(WEEK_VIEW_PAGE);"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"        model.setBaseDate(mayFirst2018);"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateCommand \u003d prepareCommand(mayFirst2018);"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewDateCommand, model, String.format(MESSAGE_NO_CHANGE_IN_BASE_DATE,"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"                mayFirst2018.format(ViewDateCommand.FORMATTER)));"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"    public void execute_viewSameDay_throwsCommandException() {"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        model.setBaseDate(mayFirst2018);"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateCommand \u003d prepareCommand(mayFirst2018);"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(viewDateCommand, model, String.format(MESSAGE_NO_CHANGE_IN_BASE_DATE,"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"                mayFirst2018.format(ViewDateCommand.FORMATTER)));"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"    public void equals() {"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateMayFirstCommand \u003d prepareCommand(mayFirst2018);"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateMaySecondCommand \u003d prepareCommand(maySecond2018);"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"        // same object -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(viewDateMayFirstCommand.equals(viewDateMayFirstCommand));"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateMayFirstCommandCopy \u003d prepareCommand(mayFirst2018);"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(viewDateMayFirstCommand.equals(viewDateMayFirstCommandCopy));"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        // different types -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewDateMayFirstCommand.equals(1));"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"        // null -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewDateMayFirstCommand.equals(null));"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"        // different calendar -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(viewDateMayFirstCommand.equals(viewDateMaySecondCommand));"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"     * Returns a {@code ViewDateCommand} with the parameter {@code index}."},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"    private ViewDateCommand prepareCommand(LocalDate date) {"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"        ViewDateCommand viewDateCommand \u003d new ViewDateCommand(date);"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"        viewDateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"        return viewDateCommand;"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":110,"-":14}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_CALENDAR_VIEW \u003d \"Unknown calendarview\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d \"The appointment index provided is\""},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"            + \" invalid\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_CELEBRITY_INDEX \u003d \"At least one of the celebrity indices provided does not \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"correspond to a celebrity.\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_POINT_OF_CONTACT_INDEX \u003d \"At least one of the point of contact indices \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"provided corresponds to a celebrity.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS \u003d \"List of appointments must be shown \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"before editing or deleting an appointment\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME \u003d \"Start date/time is not \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"chronologically before end date/time.\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":3,"-":20}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":" * Individual card for each appointment in our list view"},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"    public final Appointment appt;"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"    private HBox appointmentCardPane;"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":"    private Label name;"},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"    private Label startTime;"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"    private Label startDate;"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"    private Label endTime;"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"    private Label endDate;"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"    private Label appointmentLocation;"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    private Label celebrities;"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"    private Label pointsOfContact;"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"    private Label id;"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"    public AppointmentCard(Appointment appt, int displayedIndex) {"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"        this.appt \u003d appt;"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"        name.setText(appt.getTitle());"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"        startTime.setText(\"Start time: \" + appt.getStartTime().format(Appointment.TIME_FORMAT));"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"        startDate.setText(\"Start date: \" + appt.getStartDate().format(Appointment.DATE_FORMAT));"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"        endTime.setText(\"End time: \" + appt.getEndTime().format(Appointment.TIME_FORMAT));"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        endDate.setText(\"End date: \" + appt.getEndDate().format(Appointment.DATE_FORMAT));"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"        appointmentLocation.setText(getLocation(appt));"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"        celebrities.setText(getCelebrities(appt));"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        pointsOfContact.setText(getPointsOfContact(appt));"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"    private static String getLocation(Appointment appt) {"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"        if (appt.getLocation() \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"            return \"No Location Data\";"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"            return \"Location: \" + appt.getLocation();"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"    private static String getCelebrities(Appointment appt) {"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"        List\u003cEntry\u003e childEntries \u003d appt.getChildEntryList();"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"        if (childEntries.size() \u003d\u003d 0) {"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"            return \"No celebrities attending this appointment\";"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"            StringBuilder sb \u003d new StringBuilder(\"Celebrities attending: \");"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"            for (Entry e : appt.getChildEntryList()) {"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"                sb.append(e.getCalendar().getName());"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"                sb.append(\", \");"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"            return sb.substring(0, sb.length() - 2);"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"    private static String getPointsOfContact(Appointment appt) {"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        List\u003cPerson\u003e pointsOfContact \u003d appt.getPointOfContactList();"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"        if (pointsOfContact.size() \u003d\u003d 0) {"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"            return \"No points of contact for this appointment.\";"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"            StringBuilder sb \u003d new StringBuilder(\"Points of contact: \");"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"            for (Person p :pointsOfContact) {"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"                sb.append(p.getName().fullName);"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"                sb.append(\", \");"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"            return sb.substring(0, sb.length() - 2);"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"            return true;"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"        } else if (!(other instanceof AppointmentCard)) {"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"            AppointmentCard card \u003d (AppointmentCard) other;"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"            return id.getText().equals(card.id.getText())"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"                    \u0026\u0026 appt.equals(card.appt);"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":104,"WJY-norainu":1,"-":12}},{"path":"src/main/java/seedu/address/ui/AppointmentListWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":" * Window to display the list of appointments using appointment cards"},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"public class AppointmentListWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":"    private static final String FXML \u003d \"AppointmentListWindow.fxml\";"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"    private ListView\u003cAppointmentCard\u003e appointmentListView;"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"    public AppointmentListWindow(Stage root, List\u003cAppointment\u003e appointments) {"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"        ObservableList\u003cAppointment\u003e observableAppts \u003d FXCollections.observableArrayList(appointments);"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"        setConnections(observableAppts);"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"    public AppointmentListWindow(List\u003cAppointment\u003e appointments) {"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"        this(new Stage(), appointments);"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    private void setConnections(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"        ObservableList\u003cAppointmentCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"                appointmentList, (appointment) -\u003e new AppointmentCard(appointment,"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"                        appointmentList.indexOf(appointment) + 1));"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"        appointmentListView.setItems(mappedList);"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code AppointmentCard}."},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointmentCard\u003e {"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"        protected void updateItem(AppointmentCard appointment, boolean empty) {"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"            super.updateItem(appointment, empty);"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"            if (empty || appointment \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"                setGraphic(null);"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"                setText(null);"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"            } else {"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"                setGraphic(appointment.getRoot());"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":49,"WJY-norainu":1,"-":14}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowCalendarEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":" * Event to be raised when switched back from appointment list view to calendar."},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"public class ShowCalendarEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"    public ShowCalendarEvent() {}"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":12,"-":4}},{"path":"src/test/java/seedu/address/testutil/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Generates a new AddCommand with the details of the given person."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelStub implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void addCelebrity(Person celebrity) throws DuplicatePersonException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ArrayList\u003cCelebrity\u003e getCelebrities() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"    public List\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public List\u003cAppointment\u003e getStoredAppointmentList() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"    public List\u003cAppointment\u003e getCurrentlyDisplayedAppointments() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"    public void setCurrentlyDisplayedAppointments(List\u003cAppointment\u003e appointments) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCalendar\u003e getCelebCalendars() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public CalendarSource getCelebCalendarSource() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public StorageCalendar getStorageCalendar() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"    public String getCurrentCelebCalendarViewPage() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        fail(\"This  method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"    public Celebrity getCurrentCelebCalendarOwner() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"    public LocalDate getBaseDate() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"    public void setBaseDate(LocalDate date) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"    public boolean getIsListingAppointments() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"        return false;"},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public List\u003cCelebrity\u003e getCelebritiesChosen(Set\u003cIndex\u003e indices) throws CommandException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public Celebrity getCelebrityChosen(Index index) throws CommandException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public List\u003cPerson\u003e getPointsOfContactChosen(Set\u003cIndex\u003e indices) throws CommandException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public Person getPointOfContactChosen(Index index) throws CommandException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":"    public int countPersonsWithTag(Tag tag) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"WJY-norainu"},"content":"        return -1;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":"        return -1;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public Appointment getChosenAppointment(int chosenIndex) throws CommandException {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void addAppointmentToStorageCalendar(Appointment appt) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":"    public Appointment deleteAppointment(int index) throws IndexOutOfBoundsException {"},{"lineNumber":199,"author":{"gitID":"WJY-norainu"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":204,"author":{"gitID":"WJY-norainu"},"content":"    public void setCelebCalendarViewPage(String newCurrentCelebCalendarViewPage) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"WJY-norainu"},"content":"    public void setCelebCalendarOwner(Celebrity newCurrentCelebCalendarOwner) {"},{"lineNumber":210,"author":{"gitID":"WJY-norainu"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":211,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":213,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"WJY-norainu"},"content":"    public void setIsListingAppointments(boolean isListingAppointments) {"},{"lineNumber":215,"author":{"gitID":"WJY-norainu"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void associateAppointmentsWithCelebritiesAndPointsOfContact() {"},{"lineNumber":220,"author":{"gitID":"WJY-norainu"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":221,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":53,"-":169}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowCombinedCalendarViewRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":" * Indicates a request to change to another calendar view page"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"public class ShowCombinedCalendarViewRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"    public ShowCombinedCalendarViewRequestEvent() {}"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":13,"-":4}},{"path":"src/main/java/seedu/address/ui/MapPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.GoogleMapView;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.MapComponentInitializedListener;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.DirectionsPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.GoogleMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.LatLong;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.MapOptions;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.MapTypeIdEnum;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsRenderer;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsRequest;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsService;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEvent;"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":" * The panel for google maps. Construct the maps view which is return by calling"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":" * getMapView() to MainWindow which attaches it to mapPanelPlaceHolder. After which it initialises the Map contents"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":" * mapInitialised()"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"public class MapPanel extends UiPart\u003cRegion\u003e implements MapComponentInitializedListener {"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    public static final double LATITUDE_SG \u003d 1.3607962;"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"    public static final double LONGITUDE_SG \u003d 103.8109208;"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"    public static final int DEFAULT_ZOOM_LEVEL \u003d 10;"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    protected static DirectionsPane directions;"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"    protected static DirectionsRenderer renderer;"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    protected static DirectionsService directionService;"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"    protected static DirectionsRequest directionRequest;"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"    protected static GoogleMap actualMap;"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"    private static final String FXML \u003d \"MapsPanel.fxml\";"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    protected GoogleMapView mapView;"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"    public MapPanel() {"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        mapView \u003d new GoogleMapView();"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"        mapView.setDisableDoubleClick(true);"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        mapView.addMapInializedListener(this);"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        mapView.getWebview().getEngine().setOnAlert((WebEvent\u003cString\u003e event) -\u003e {"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"        });"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"    public void mapInitialized() {"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        Thread t \u003d new Thread(() -\u003e {"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"            try {"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"                Thread.sleep(3000);"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"                Platform.runLater(() -\u003e mapView.getMap().hideDirectionsPane());"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"            } catch (Exception ex) {"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"                ex.printStackTrace();"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        });"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        t.start();"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        directionService \u003d new DirectionsService();"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"        actualMap \u003d setMapOptions();"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        directions \u003d mapView.getDirec();"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"     * Set the Map options for initialisation of {@code actualMap}"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"    private GoogleMap setMapOptions() {"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        LatLong center \u003d new LatLong(LATITUDE_SG, LONGITUDE_SG);"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        MapOptions options \u003d new MapOptions();"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"        options.center(center)"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"                .zoom(DEFAULT_ZOOM_LEVEL)"},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"                .overviewMapControl(false)"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"                .panControl(false)"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"                .rotateControl(false)"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"                .scaleControl(false)"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"                .streetViewControl(false)"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"                .zoomControl(true)"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"                .mapType(MapTypeIdEnum.ROADMAP);"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"        return mapView.createMap(options);"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"    public GoogleMapView getMapView() {"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"        return mapView;"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":16,"Damienskt":70}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeCalendarViewPageRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":" * Indicates a request to change to another calendar view page"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"public class ChangeCalendarViewPageRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"    public final String calendarViewPage;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"    public ChangeCalendarViewPageRequestEvent(String calendarViewPage) {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"        this.calendarViewPage \u003d calendarViewPage;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":17,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeCalendarRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":" * Indicates a request to show another celebrity\u0027s calendar"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"public class ChangeCalendarRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"    public final CelebCalendar celebCalendar;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    public ChangeCalendarRequestEvent(CelebCalendar celebCalendar) {"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"        this.celebCalendar \u003d celebCalendar;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":19,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowAppointmentListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":9,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"muruges95"},"content":" * Event to be raised when listappointment command is invoked."},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":"public class ShowAppointmentListEvent extends BaseEvent {"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":"    private final List\u003cAppointment\u003e appointments;"},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":"    public ShowAppointmentListEvent(List\u003cAppointment\u003e appointments) {"},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"        this.appointments \u003d appointments;"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"    public List\u003cAppointment\u003e getAppointments() {"},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"        return appointments;"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":21,"WJY-norainu":1,"-":6}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns the list of CelebCalendars stored */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ObservableList\u003cCalendar\u003e getCelebCalendars();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns the CalendarSource of the CelebCalendars */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    CalendarSource getCelebCalendarSource();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":35}},{"path":"src/main/java/seedu/address/commons/events/model/StorageCalendarChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":7,"author":{"gitID":"muruges95"},"content":"/** Indicates the StorageCalendar in the model has changed*/"},{"lineNumber":8,"author":{"gitID":"muruges95"},"content":"public class StorageCalendarChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"muruges95"},"content":"    public final StorageCalendar data;"},{"lineNumber":10,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":"    public StorageCalendarChangedEvent(StorageCalendar data) {"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":14,"-":5}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowCalendarBasedOnDateEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":" * Event to be raised when switched back from appointment list view to calendar."},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"public class ShowCalendarBasedOnDateEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate date;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"    public ShowCalendarBasedOnDateEvent(LocalDate date) {"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    public LocalDate getDate() {"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"        return date;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":24,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/calendar/AddAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CELEBRITY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POINT_OF_CONTACT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.model.appointment.Appointment.isDateTimeNotValid;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"     * and returns an AddAppointmentCommand object for execution"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"     * @throws ParseException if the user input does not comform to the expected format"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME,"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"                PREFIX_START_DATE,  PREFIX_LOCATION, PREFIX_END_TIME, PREFIX_END_DATE, PREFIX_CELEBRITY,"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"                PREFIX_POINT_OF_CONTACT);"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_NAME)"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"            String appointmentName \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_NAME)).get();"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"            Optional\u003cLocalTime\u003e startTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_START_TIME));"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"            Optional\u003cLocalDate\u003e startDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_START_DATE));"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"            Optional\u003cLocalTime\u003e endTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_END_TIME));"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"            Optional\u003cLocalDate\u003e endDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_END_DATE));"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"            Optional\u003cMapAddress\u003e locationInput \u003d ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_LOCATION));"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"            Set\u003cIndex\u003e celebrityIndices \u003d ParserUtil.parseIndices(argMultiMap.getAllValues(PREFIX_CELEBRITY));"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"            Set\u003cIndex\u003e pointOfContactIndices \u003d ParserUtil"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"                    .parseIndices(argMultiMap.getAllValues(PREFIX_POINT_OF_CONTACT));"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"            MapAddress location \u003d null;"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"            LocalTime startTime \u003d LocalTime.now();"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"            LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"            LocalTime endTime \u003d LocalTime.now().plusMinutes(15);"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"            LocalDate endDate \u003d LocalDate.now();"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"            if (startTimeInput.isPresent()) {"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"                startTime \u003d startTimeInput.get();"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"                endTime \u003d startTimeInput.get().plusMinutes(15);"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"            if (endTimeInput.isPresent()) {"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"                endTime \u003d endTimeInput.get();"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"            if (startDateInput.isPresent()) {"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"                startDate \u003d startDateInput.get();"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"                endDate \u003d startDateInput.get();"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"            if (endDateInput.isPresent()) {"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"                endDate \u003d endDateInput.get();"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"            if (locationInput.isPresent()) {"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"                location \u003d locationInput.get();"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"            // Checking if date and time take in correct values"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"            if (isDateTimeNotValid(startDate, endDate, startTime, endTime)) {"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"                throw new ParseException(MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME);"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"            Appointment appt \u003d new Appointment(appointmentName, startTime, startDate, location, endTime, endDate);"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"            return new AddAppointmentCommand(appt, celebrityIndices, pointOfContactIndices);"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":70,"WJY-norainu":1,"-":30}},{"path":"src/main/java/seedu/address/logic/parser/calendar/ViewAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ViewAppointmentCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.map.Map;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":" * Reads {@code args} and checks if the input has all the necessary values"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"public class ViewAppointmentCommandParser implements Parser\u003cViewAppointmentCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewAppointmentCommand"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"     * and returns an ViewAppointmentCommand object for execution"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    public ViewAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"            return new ViewAppointmentCommand(index.getZeroBased());"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"            Map.removeExistingMarker();"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"            Map.clearRoute();"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":9,"Damienskt":24}},{"path":"src/main/java/seedu/address/logic/parser/calendar/ViewCalendarByCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewCalendarByCommand.VALID_ARGUMENT;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCalendarByCommand;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new ViewCalendarByCommand object"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarByCommandParser implements Parser\u003cViewCalendarByCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCalendarByCommand"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"     * and returns a ViewCalendarByCommand object for execution."},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    public ViewCalendarByCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"        String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        if (!isValidArgument(arguments)) {"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCalendarByCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"        return new ViewCalendarByCommand(arguments[0].toLowerCase());"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"     * Takes in {@code String[]} of arguments"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"     * @returns true if the argument is valid, ie: only 1 argument, and argument is one of {day, week, month, year}"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    private boolean isValidArgument(String[] arguments) {"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        if (arguments.length !\u003d 1) {"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        String argument \u003d arguments[0];"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"        for (String validArgument: VALID_ARGUMENT) {"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"            if (validArgument.equalsIgnoreCase(argument)) {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"                return true;"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        return false;"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":45,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/calendar/ViewDateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewDateCommand.FORMATTER;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewDateCommand.MESSAGE_INVALID_DATE;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewDateCommand;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new ViewDateCommand object"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"public class ViewDateCommandParser implements Parser\u003cViewDateCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewDateCommand"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"     * and returns a ViewDateCommand object for execution."},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    public ViewDateCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"        if (args.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"            return new ViewDateCommand(LocalDate.now());"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"            FORMATTER.parse(trimmedArgs);"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        } catch (Exception e) {"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDateCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        int[] time \u003d Arrays.stream(args.trim().split(\"-\")).mapToInt(Integer::parseInt).toArray();"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        LocalDate date;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"            if (time.length \u003d\u003d 2) {"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"                date \u003d LocalDate.of(LocalDate.now().getYear(), time[1], time[0]);"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"            } else if (time.length \u003d\u003d 3) {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"                date \u003d LocalDate.of(time[2], time[1], time[0]);"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"            } else {"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDateCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        } catch (Exception e) {"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE);"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        return new ViewDateCommand(date);"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":50,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/calendar/ViewCalendarCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCalendarCommand;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new ViewCalendarCommand object"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarCommandParser implements Parser\u003cViewCalendarCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCalendarCommand"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"     * and returns a ViewCalendarCommand object for execution."},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public ViewCalendarCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"            return new ViewCalendarCommand(index);"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCalendarCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":28,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.DeleteAppointmentCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ListAppointmentCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ViewAppointmentCommand;"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCalendarByCommand;"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCalendarCommand;"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewCombinedCalendarCommand;"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.ViewDateCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.EstimateRouteCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.calendar.AddAppointmentCommandParser;"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.calendar.DeleteAppointmentCommandParser;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.calendar.EditAppointmentCommandParser;"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.calendar.ListAppointmentCommandParser;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.calendar.ViewAppointmentCommandParser;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.calendar.ViewCalendarByCommandParser;"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.calendar.ViewCalendarCommandParser;"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.calendar.ViewDateCommandParser;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.map.EstimateRouteCommandParser;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.map.ShowLocationCommandParser;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case AddAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case EditAppointmentCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case EditAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new EditAppointmentCommandParser().parse(arguments);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"        case DeleteAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"        case RemoveTagCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"        case RemoveTagCommand.COMMAND_ALIAS:"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"            return new RemoveTagCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"        case ViewCalendarByCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"        case ViewCalendarByCommand.COMMAND_ALIAS:"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"            return new ViewCalendarByCommandParser().parse(arguments);"},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"        case ViewCalendarCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":"        case ViewCalendarCommand.COMMAND_ALIAS:"},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":"            return new ViewCalendarCommandParser().parse(arguments);"},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"        case ViewCombinedCalendarCommand.COMMAND_WORD:"},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":"        case ViewCombinedCalendarCommand.COMMAND_ALIAS:"},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"            return new ViewCombinedCalendarCommand();"},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        case ShowLocationCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        case ShowLocationCommand.COMMAND_ALIAS:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return new ShowLocationCommandParser().parse(arguments);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        case EstimateRouteCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case EstimateRouteCommand.COMMAND_ALIAS:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return new EstimateRouteCommandParser().parse(arguments);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        case ListAppointmentCommand.COMMAND_WORD:"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        case ListAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":158,"author":{"gitID":"WJY-norainu"},"content":"            return new ListAppointmentCommandParser().parse(arguments);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        case ViewAppointmentCommand.COMMAND_WORD:"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case ViewAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return new ViewAppointmentCommandParser().parse(arguments);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"WJY-norainu"},"content":"        case ViewDateCommand.COMMAND_WORD:"},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":"        case ViewDateCommand.COMMAND_ALIAS:"},{"lineNumber":166,"author":{"gitID":"WJY-norainu"},"content":"            return new ViewDateCommandParser().parse(arguments);"},{"lineNumber":167,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":36,"-":137}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Damienskt"},"content":"    //@@author Damienskt"},{"lineNumber":125,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"Damienskt"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":127,"author":{"gitID":"Damienskt"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":128,"author":{"gitID":"Damienskt"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"Damienskt"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":130,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"Damienskt"},"content":"    public static MapAddress parseMapAddress(String address) throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"Damienskt"},"content":"        requireNonNull(address);"},{"lineNumber":133,"author":{"gitID":"Damienskt"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":134,"author":{"gitID":"Damienskt"},"content":"        if (!MapAddress.isValidAddress(trimmedAddress)) {"},{"lineNumber":135,"author":{"gitID":"Damienskt"},"content":"            throw new IllegalValueException(MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Damienskt"},"content":"        return new MapAddress(trimmedAddress);"},{"lineNumber":138,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"Damienskt"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":141,"author":{"gitID":"Damienskt"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":142,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"Damienskt"},"content":"    public static Optional\u003cMapAddress\u003e parseMapAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"Damienskt"},"content":"        requireNonNull(address);"},{"lineNumber":145,"author":{"gitID":"Damienskt"},"content":"        return address.isPresent() ? Optional.of(parseMapAddress(address.get())) : Optional.empty();"},{"lineNumber":146,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Damienskt"},"content":"    //@@author"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Parses a {@code String time} into a {@code LocalTime}."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public static LocalTime parseTime(String time) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            LocalTime lt \u003d LocalTime.parse(time, Appointment.TIME_FORMAT);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return lt;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"muruges95"},"content":"    //@@author muruges95"},{"lineNumber":217,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":218,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"muruges95"},"content":"     * Parses a {@code Optional\u003cLocalTime\u003e time} into an {@code Optional\u003cLocalTime\u003e} if {@code time} is present."},{"lineNumber":220,"author":{"gitID":"muruges95"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":221,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"muruges95"},"content":"    public static Optional\u003cLocalTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":223,"author":{"gitID":"muruges95"},"content":"        requireNonNull(time);"},{"lineNumber":224,"author":{"gitID":"muruges95"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":225,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":227,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"muruges95"},"content":"     * Parses a {@code String date} into a {@code LocalDate}."},{"lineNumber":229,"author":{"gitID":"muruges95"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":230,"author":{"gitID":"muruges95"},"content":"     *"},{"lineNumber":231,"author":{"gitID":"muruges95"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":232,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"muruges95"},"content":"    public static LocalDate parseDate(String date) throws IllegalValueException {"},{"lineNumber":234,"author":{"gitID":"muruges95"},"content":"        requireNonNull(date);"},{"lineNumber":235,"author":{"gitID":"muruges95"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":236,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"muruges95"},"content":"            LocalDate ld \u003d LocalDate.parse(date, Appointment.DATE_FORMAT);"},{"lineNumber":238,"author":{"gitID":"muruges95"},"content":"            return ld;"},{"lineNumber":239,"author":{"gitID":"muruges95"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":240,"author":{"gitID":"muruges95"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":241,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":244,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"muruges95"},"content":"     * Parses a {@code Optional\u003cLocalDate\u003e date} into an {@code Optional\u003cLocalDate\u003e} if {@code date} is present."},{"lineNumber":246,"author":{"gitID":"muruges95"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":247,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"muruges95"},"content":"    public static Optional\u003cLocalDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":249,"author":{"gitID":"muruges95"},"content":"        requireNonNull(date);"},{"lineNumber":250,"author":{"gitID":"muruges95"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":251,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":253,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"muruges95"},"content":"     * Validates if a {@code String name} into a valid name."},{"lineNumber":255,"author":{"gitID":"muruges95"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":256,"author":{"gitID":"muruges95"},"content":"     *"},{"lineNumber":257,"author":{"gitID":"muruges95"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":258,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"muruges95"},"content":"    public static String parseGeneralName(String name) throws IllegalValueException {"},{"lineNumber":260,"author":{"gitID":"muruges95"},"content":"        requireNonNull(name);"},{"lineNumber":261,"author":{"gitID":"muruges95"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":262,"author":{"gitID":"muruges95"},"content":"        if (!Appointment.isValidName(trimmedName)) {"},{"lineNumber":263,"author":{"gitID":"muruges95"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"muruges95"},"content":"        return trimmedName;"},{"lineNumber":266,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":268,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"muruges95"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cString\u003e} if {@code name} is present and valid."},{"lineNumber":270,"author":{"gitID":"muruges95"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":271,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"muruges95"},"content":"    public static Optional\u003cString\u003e parseGeneralName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":273,"author":{"gitID":"muruges95"},"content":"        requireNonNull(name);"},{"lineNumber":274,"author":{"gitID":"muruges95"},"content":"        return name.isPresent() ? Optional.of(parseGeneralName(name.get())) : Optional.empty();"},{"lineNumber":275,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":277,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"muruges95"},"content":"     * Parses {@code Collection\u003cString\u003e indices} into a {@code Set\u003cIndex\u003e}."},{"lineNumber":279,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"muruges95"},"content":"    public static Set\u003cIndex\u003e parseIndices(Collection\u003cString\u003e indices) throws IllegalValueException {"},{"lineNumber":281,"author":{"gitID":"muruges95"},"content":"        requireNonNull(indices);"},{"lineNumber":282,"author":{"gitID":"muruges95"},"content":"        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":283,"author":{"gitID":"muruges95"},"content":"        for (String index : indices) {"},{"lineNumber":284,"author":{"gitID":"muruges95"},"content":"            indexSet.add(parseIndex(index));"},{"lineNumber":285,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"muruges95"},"content":"        return indexSet;"},{"lineNumber":287,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":289,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"muruges95"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":291,"author":{"gitID":"muruges95"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":292,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"muruges95"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":294,"author":{"gitID":"muruges95"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":295,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":81,"WJY-norainu":1,"-":190,"Damienskt":24}},{"path":"src/main/java/seedu/address/logic/parser/calendar/DeleteAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.calendar.DeleteAppointmentCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"     * and returns an DeleteAppointmentCommand object for execution"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"            return new DeleteAppointmentCommand(index);"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":26,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/RemoveTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new RemoveTagCommand object"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"     * and returns a RemoveTagCommand object for execution."},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    public RemoveTagCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"        //check if there is an input for tag"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"        if (args.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        //check if args is a valid tag name"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            Tag targetTag \u003d ParserUtil.parseTag(args);"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"            return new RemoveTagCommand(targetTag);"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":28,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/calendar/EditAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CELEBRITY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POINT_OF_CONTACT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.EditAppointmentCommand.EditAppointmentDescriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":" * Parses input arguments and creates a new EditAppointmentCommand object"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"     * and returns an EditAppointmentCommand object for execution"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"     * @throws ParseException if the user input does not comform to the expected format"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME,"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"                PREFIX_START_DATE,  PREFIX_LOCATION, PREFIX_END_TIME, PREFIX_END_DATE, PREFIX_CELEBRITY,"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"                PREFIX_POINT_OF_CONTACT);"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"        Index appointmentIndex;"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"            appointmentIndex \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"        EditAppointmentDescriptor editApptDescriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"            ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_NAME))"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"                    .ifPresent(editApptDescriptor::setAppointmentName);"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"            ParserUtil.parseTime(argMultiMap.getValue(PREFIX_START_TIME)).ifPresent(editApptDescriptor::setStartTime);"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"            ParserUtil.parseDate(argMultiMap.getValue(PREFIX_START_DATE)).ifPresent(editApptDescriptor::setStartDate);"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"            ParserUtil.parseTime(argMultiMap.getValue(PREFIX_END_TIME)).ifPresent(editApptDescriptor::setEndTime);"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"            ParserUtil.parseDate(argMultiMap.getValue(PREFIX_END_DATE)).ifPresent(editApptDescriptor::setEndDate);"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"            ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_LOCATION))"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"                    .ifPresent(editApptDescriptor::setLocation);"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"            parseIndicesForEditAppointment(argMultiMap.getAllValues(PREFIX_CELEBRITY))"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"                    .ifPresent(editApptDescriptor::setCelebrityIndices);"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"            parseIndicesForEditAppointment(argMultiMap.getAllValues(PREFIX_POINT_OF_CONTACT))"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"                    .ifPresent(editApptDescriptor::setPointOfContactIndices);"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"        if (!editApptDescriptor.isAnyFieldEdited()) {"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"        return new EditAppointmentCommand(appointmentIndex, editApptDescriptor);"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"     * Parses {@code Collection\u003cString\u003e indices} into a {@code Set\u003cIndex\u003e}"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"     * if {@code indices} is non-empty. If {@code indices} contain only one element"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"     * which is an empty string, it will be parsed into a {@code Set\u003cIndex\u003e} containing zero indices."},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"    private Optional\u003cSet\u003cIndex\u003e\u003e parseIndicesForEditAppointment(Collection\u003cString\u003e indices)"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        throws IllegalValueException {"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"        assert indices !\u003d null;"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"        if (indices.isEmpty()) {"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"            return Optional.empty();"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"        Collection\u003cString\u003e indexSet \u003d (indices.size() \u003d\u003d 1 \u0026\u0026 indices.contains(\"\"))"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"                ? Collections.emptySet() : indices;"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"        return Optional.of(ParserUtil.parseIndices(indexSet));"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":70,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/map/ShowLocationCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.GoogleWebServices;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.map.Map;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":" * Reads {@code args} and checks if the input has all the necessary values"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"public class ShowLocationCommandParser implements Parser\u003cShowLocationCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    private GoogleWebServices initialiseConnection;"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"     * Parses the given {@code String} of arguments in the context of the ShowLocationCommand"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"     * and returns an ShowLocationCommand object for execution"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    public ShowLocationCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        initialiseConnection \u003d new GoogleWebServices();"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"        if (!initialiseConnection.checkInitialisedConnection()) {"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(GoogleWebServices.MESSAGE_FAIL_CONNECTION);"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        ArgumentMultimap argMultiMap \u003d"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MAP_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_MAP_ADDRESS)"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"            Map.removeExistingMarker();"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"            Map.clearRoute();"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"                    ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"            MapAddress address \u003d ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_MAP_ADDRESS)).get();"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"            return new ShowLocationCommand(address);"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"            Map.removeExistingMarker();"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"            Map.clearRoute();"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":16,"Damienskt":37}},{"path":"src/main/java/seedu/address/logic/map/Geocoding.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.maps.GeocodingApi;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.maps.model.GeocodingResult;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":9,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":10,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":" * Converts address to LatLng form."},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":"public class Geocoding extends GoogleWebServices {"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"    private static LatLng location;"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"     * Send request to google server to obtain {@code results}"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"     * Where that {@code location} is extracted in LatLng form."},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"     * @param address"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    public void initialiseLatLngFromAddress(String address) {"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"            GeocodingResult[] results \u003d GeocodingApi.geocode(GoogleWebServices.getGeoApiContext(),"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"                    address).await();"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"            getLocation(results);"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"        } catch (ApiException e) {"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"    private void getLocation(GeocodingResult[] results) {"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"            location \u003d results[0].geometry.location;"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"            throw e;"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"    public double getLat() {"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        return location.lat;"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"    public double getLong() {"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        return location.lng;"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"    public LatLng getLatLng() {"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        return location;"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"     * Checks if the {@code address} can"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"     * be found in google server"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"     * @param address"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"     * @return boolean"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"    public boolean checkIfAddressCanBeFound(String address) {"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"            GeocodingResult[] results \u003d GeocodingApi.geocode(GoogleWebServices.getGeoApiContext(),"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"                    address).await();"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"            getLocation(results);"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        } catch (ApiException e) {"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"            return false;"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"        return true;"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":8,"Damienskt":71}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":" * Deletes a person identified using its last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NOT_IN_COMBINED_CALENDAR \u003d \"Can only delete when \""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            + \"viewing combined calendar\\n\""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            + \"currently viewing %1$s\u0027s calendar\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getCurrentCelebCalendarOwner() !\u003d null) {"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException("},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_NOT_IN_COMBINED_CALENDAR,"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"                            model.getCurrentCelebCalendarOwner().getName().toString()));"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":10,"-":67}},{"path":"src/main/java/seedu/address/logic/map/DistanceEstimate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.maps.DistanceMatrixApi;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.DistanceMatrixApiRequest;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.maps.GeoApiContext;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.maps.model.Distance;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.maps.model.DistanceMatrix;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.maps.model.DistanceMatrixElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.maps.model.DistanceMatrixRow;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.maps.model.Duration;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.maps.model.TravelMode;"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":" * Calculates distance and travel duration between two location."},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"public class DistanceEstimate extends GoogleWebServices {"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    private String distBetweenOriginDest;"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    private String travelTime;"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"     * Extract time duration details from {@code matrixDetails}"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"     * @return time needed to travel between two location"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    private static Duration extractDurationDetailsToString(DistanceMatrix matrixDetails) {"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"        DistanceMatrixRow[] dataRow \u003d matrixDetails.rows;"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"        DistanceMatrixElement[] dataElements \u003d dataRow[0].elements;"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"        return dataElements[0].duration;"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"     * Extract travel distance details from {@code matrixDetails}"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"     * @return distance between two location"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"    private static Distance extractDistanceDetailsToString(DistanceMatrix matrixDetails) {"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        DistanceMatrixRow[] dataRow \u003d matrixDetails.rows;"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        DistanceMatrixElement[] dataElements \u003d dataRow[0].elements;"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        return dataElements[0].distance;"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"     * Request new approval for each access"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"     * @return successful approval from google server"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"    private static DistanceMatrixApiRequest getApprovalForRequest(GeoApiContext context) {"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"        return DistanceMatrixApi.newRequest(context);"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"     * Initialises the calculation of time and distance between two location by sending request with"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"     * {@code startPostalCode},{@code endPostalCode} and {@code modeOfTravel} to google server, details"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"     * extracted from result {@code estimate} and stored into {@code distBetweenOriginDest} and {@code travelTime}"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"    public void calculateDistanceMatrix(LatLng startLocation, LatLng endLocation, TravelMode modeOfTravel) {"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"        DistanceMatrixApiRequest request \u003d getApprovalForRequest(GoogleWebServices.getGeoApiContext());"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        DistanceMatrix estimate \u003d null;"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"            estimate \u003d request.origins(startLocation)"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"                    .destinations(endLocation)"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"                    .mode(modeOfTravel)"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"                    .language(\"en-EN\")"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"                    .await();"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        } catch (ApiException e) {"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"            e.printStackTrace();"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"            e.printStackTrace();"},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"            e.printStackTrace();"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"        distBetweenOriginDest \u003d String.valueOf(extractDistanceDetailsToString(estimate));"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"        travelTime \u003d String.valueOf(extractDurationDetailsToString(estimate));"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    public String getTravelTime() {"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"        return travelTime;"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"    public String getDistBetweenOriginDest() {"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"        return distBetweenOriginDest;"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":15,"Damienskt":72}},{"path":"src/main/java/seedu/address/logic/commands/calendar/DeleteAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewPageRequestEvent;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowAppointmentListEvent;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":" * Deletes an appointment identified using its last displayed index from the calendar."},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"public class DeleteAppointmentCommand extends Command {"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"deleteAppointment\";"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"da\";"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an appointment. \""},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY \u003d \"\\nAppointment list becomes empty, \""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"            + \"Switching back to calendar view by day\\n\""},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"            + \"Currently showing %1$s calendar\";"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"    private final Index targetIndex;"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    private Appointment apptToDelete;"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        if (!model.getIsListingAppointments()) {"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(Messages.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"            apptToDelete \u003d model.deleteAppointment(targetIndex.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"        } catch (IndexOutOfBoundsException iobe) {"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cAppointment\u003e currentAppointmentList \u003d model.getCurrentlyDisplayedAppointments();"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        // if the list becomes empty, switch back to combined calendar day view"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        if (currentAppointmentList.isEmpty()) {"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"            model.setIsListingAppointments(false);"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"            return changeToCalendarWithDayView();"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ShowAppointmentListEvent(currentAppointmentList));"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, apptToDelete.getTitle()));"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"     * sets the calendar panel to calendar"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"     * @return CommandResult with the corresponding message"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"    private CommandResult changeToCalendarWithDayView() {"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarViewPage(DAY_VIEW_PAGE);"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(DAY_VIEW_PAGE));"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"        Celebrity currentCalendarOwner \u003d model.getCurrentCelebCalendarOwner();"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"        if (currentCalendarOwner \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"            return new CommandResult("},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_SUCCESS, apptToDelete.getTitle())"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"                            + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY,"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"                            \"combined\"));"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        } else {"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"            return new CommandResult("},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_SUCCESS, apptToDelete.getTitle())"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"                            + String.format(MESSAGE_APPOINTMENT_LIST_BECOMES_EMPTY,"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"                            currentCalendarOwner.getName().toString() + \"\u0027s\"));"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        return other \u003d\u003d this"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"                || (other instanceof DeleteAppointmentCommand"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 Objects.equals(this.apptToDelete, ((DeleteAppointmentCommand) other).apptToDelete)"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex));"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":94,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/map/EstimateRouteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MAP_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MAP_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.omg.CosNaming.NamingContextExtPackage.InvalidAddress;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.EstimateRouteCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.GoogleWebServices;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.map.Map;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":" * Reads {@code args} and checks if the input has all the necessary values"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"public class EstimateRouteCommandParser implements Parser\u003cEstimateRouteCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"    private GoogleWebServices initialiseConnection;"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"     * Parses the given {@code String} of arguments in the context of the EstimateRouteCommand"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"     * and returns an EstimateRouteCommand object for execution"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"    public EstimateRouteCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"        initialiseConnection \u003d new GoogleWebServices();"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"        if (!initialiseConnection.checkInitialisedConnection()) {"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(GoogleWebServices.MESSAGE_FAIL_CONNECTION);"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        ArgumentMultimap argMultiMap \u003d"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_START_MAP_ADDRESS, PREFIX_END_MAP_ADDRESS);"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_START_MAP_ADDRESS, PREFIX_END_MAP_ADDRESS)"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"            Map.removeExistingMarker();"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"            Map.clearRoute();"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"                        EstimateRouteCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"            MapAddress start \u003d ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_START_MAP_ADDRESS)).get();"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"            MapAddress end \u003d ParserUtil.parseMapAddress(argMultiMap.getValue(PREFIX_END_MAP_ADDRESS)).get();"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"            if (!MapAddress.isValidAddressForEstimatingRoute(start.toString(), end.toString())) {"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"                Map.removeExistingMarker();"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"                Map.clearRoute();"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"                throw new InvalidAddress(\"\");"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"            return new EstimateRouteCommand(start, end);"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"            Map.removeExistingMarker();"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"            Map.clearRoute();"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"        } catch (InvalidAddress ia) {"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"            Map.removeExistingMarker();"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"            Map.clearRoute();"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"            throw new ParseException(MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS_ROUTE_ESTIMATION);"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":19,"Damienskt":51}},{"path":"src/main/java/seedu/address/logic/commands/calendar/ListAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowAppointmentListEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":" * Lists all appointments within two dates in a calendar."},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"public class ListAppointmentCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":"    public static final String COMMAND_WORD \u003d \"listAppointment\";"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"    public static final String COMMAND_ALIAS \u003d \"la\";"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":"    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM[-yyyy]\");"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"            + \": Lists appointments of all celebrities within the specified date range.\""},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"            + \"Parameter: [START_DATE END_DATE] (includes the space in between.\""},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"            + \" lists all appointments when no range specified.)\""},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"            + \"START_DATE and END_DATE should be in DD-MM-YYYY or DD-MM format, including the dash.\""},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"            + \"When latter is entered, YYYY will take the current year.\\n\""},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"            + \"Example: \" + COMMAND_WORD + \" 23-04 01-05\";"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_INVALID_DATE_RANGE \u003d \"Start date cannot be after end date\";"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed appointments from %s to %s successfully.\";"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_NO_APPTS_ERROR \u003d \"No appointments to list\";"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"    private LocalDate startDate;"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"    private LocalDate endDate;"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"    public ListAppointmentCommand() {}"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    public ListAppointmentCommand(LocalDate startDateInput, LocalDate endDateInput) {"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"        requireNonNull(startDateInput);"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"        requireNonNull(endDateInput);"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"        startDate \u003d startDateInput;"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"        endDate \u003d endDateInput;"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"        if (!model.getStorageCalendar().hasAtLeastOneAppointment()) {"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(MESSAGE_NO_APPTS_ERROR);"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"        if (startDate \u003d\u003d null \u0026\u0026 endDate \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"            startDate \u003d model.getStorageCalendar().getEarliestDate();"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"            endDate \u003d model.getStorageCalendar().getLatestDate();"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"        model.setIsListingAppointments(true);"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"        List\u003cAppointment\u003e newAppointmentList \u003d"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"                model.getStorageCalendar().getAppointmentsWithinDate(startDate, endDate);"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        model.setCurrentlyDisplayedAppointments(newAppointmentList);"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"        EventsCenter.getInstance().post(new ShowAppointmentListEvent(newAppointmentList));"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"        return new CommandResult("},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"                String.format(MESSAGE_SUCCESS, startDate.format(FORMATTER), endDate.format(FORMATTER)));"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"                || (other instanceof ListAppointmentCommand // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 Objects.equals(startDate, ((ListAppointmentCommand) other).startDate)"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 Objects.equals(endDate, ((ListAppointmentCommand) other).endDate));"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":65,"WJY-norainu":4,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/calendar/ViewCalendarByCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.MONTH_VIEW_PAGE;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.WEEK_VIEW_PAGE;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewPageRequestEvent;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":" * Switches the calendar view to another view specified by the user."},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarByCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"viewCalendarBy\";"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"vcb\";"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    public static final String[] VALID_ARGUMENT \u003d {DAY_VIEW_PAGE, WEEK_VIEW_PAGE, MONTH_VIEW_PAGE};"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to the calendar view specified.\\n\""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"            + \"Parameter: VIEW (must be one of \""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            + Arrays.toString(VALID_ARGUMENT)"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            + \". Parameter is not case-sensitive)\\n\""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD + \" week\";"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NO_CHANGE_IN_CALENDARVIEW \u003d \"Calender is already in %1$s view\";"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to view calendar by %1$s\";"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    private final String calendarViewPage;"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    public ViewCalendarByCommand(String calendarViewPage) {"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        this.calendarViewPage \u003d calendarViewPage;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        if (calendarViewPage.contentEquals(model.getCurrentCelebCalendarViewPage())"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 !model.getIsListingAppointments()) {"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(String.format(MESSAGE_NO_CHANGE_IN_CALENDARVIEW, calendarViewPage));"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarViewPage(calendarViewPage);"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(calendarViewPage));"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        // if it\u0027s switching from appointment list view to calendar"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getIsListingAppointments()) {"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"            model.setIsListingAppointments(false);"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, calendarViewPage));"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"                || (other instanceof ViewCalendarByCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.calendarViewPage.equals(((ViewCalendarByCommand) other).calendarViewPage)); // state check"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":61,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/calendar/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CELEBRITY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POINT_OF_CONTACT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewPageRequestEvent;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarBasedOnDateEvent;"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":" * Adds an appointment to a calendar."},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"public class AddAppointmentCommand extends Command {"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"    public static final String COMMAND_WORD \u003d \"addAppointment\";"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"    public static final String COMMAND_ALIAS \u003d \"aa\";"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment.\\n\""},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"            + \"Parameters: \""},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"            + PREFIX_NAME + \"APPOINTMENT NAME \""},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_START_TIME + \"START TIME] \""},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_START_DATE + \"START DATE] \""},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_END_TIME + \"END TIME] \""},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_END_DATE + \"END DATE] \""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_CELEBRITY + \"CELEBRITY_INDEX]... \""},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_POINT_OF_CONTACT + \"POINT_OF_CONTACT_INDEX]...\\n\""},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"            + PREFIX_NAME + \"Oscars 2018 \""},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"            + PREFIX_START_TIME + \"18:00 \""},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"            + PREFIX_START_DATE + \"23-04-2018 \""},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"            + PREFIX_LOCATION + \"Hollywood \""},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"            + PREFIX_END_TIME + \"20:00 \""},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"            + PREFIX_END_DATE + \"23-04-2018 \""},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"            + PREFIX_CELEBRITY + \"1 \""},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"            + PREFIX_CELEBRITY + \"2 \""},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"            + PREFIX_POINT_OF_CONTACT + \"3 \""},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"            + PREFIX_POINT_OF_CONTACT + \"4 \";"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the application\";"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_NOT_IN_COMBINED_CALENDAR \u003d \"Can only add appointment when \""},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"            + \"viewing combined calendar\\n\""},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"            + \"currently viewing %1$s\u0027s calendar\";"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added appointment: %1$s\";"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"    private final Appointment appt;"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"    private final Set\u003cIndex\u003e celebrityIndices;"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"    private final Set\u003cIndex\u003e pointOfContactIndices;"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"     * Creates an AddAppointmentCommand with the following parameter"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"     * @param appt The created appointment"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"     * @param celebrityIndices The indices of the celebrities who are part of this appointment"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"    public AddAppointmentCommand(Appointment appt, Set\u003cIndex\u003e celebrityIndices, Set\u003cIndex\u003e pointOfContactIndices) {"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"        requireNonNull(appt);"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        this.appt \u003d appt;"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"        this.celebrityIndices \u003d celebrityIndices;"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"        this.pointOfContactIndices \u003d pointOfContactIndices;"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        if (model.getCurrentCelebCalendarOwner() !\u003d null) {"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"            throw new CommandException("},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"                    String.format(MESSAGE_NOT_IN_COMBINED_CALENDAR,"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"                            model.getCurrentCelebCalendarOwner().getName().toString()));"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"        List\u003cCelebrity\u003e celebrityList \u003d  model.getCelebritiesChosen(celebrityIndices);"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"        List\u003cPerson\u003e pointOfContactList \u003d model.getPointsOfContactChosen(pointOfContactIndices);"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"            model.addAppointmentToStorageCalendar(appt);"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":"        appt.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"        // reset calendar view to day view and set base date to the day when appointment starts"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"        model.setBaseDate(appt.getStartDate());"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"        EventsCenter.getInstance().post(new ShowCalendarBasedOnDateEvent(appt.getStartDate()));"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"        model.setCelebCalendarViewPage(DAY_VIEW_PAGE);"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(DAY_VIEW_PAGE));"},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"        if (model.getIsListingAppointments()) {"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"            model.setIsListingAppointments(false);"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, appt.getTitle()));"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":"        return other \u003d\u003d this"},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"                || (other instanceof AddAppointmentCommand"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 appt.equals(((AddAppointmentCommand) other).appt));"},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":93,"WJY-norainu":4,"-":25}},{"path":"src/main/java/seedu/address/logic/commands/calendar/ViewDateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewPageRequestEvent;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarBasedOnDateEvent;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":" * Display the calendar based on the date specified by the user."},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"public class ViewDateCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"viewDate\";"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"vd\";"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM[-yyyy]\");"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the calendar which bases on the specified \""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            + \"date.\\n\""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            + \"Parameter: [DATE] (goes back to current date when no parameter is given.)\""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"            + \"DATE should be in DD-MM-YYYY or DD-MM format, including the dash.\""},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"            + \"When latter is entered, YYYY will take the current year.\\n\""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD + \" 23-04\";"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d \"The date entered is invalid\";"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NO_CHANGE_IN_BASE_DATE \u003d \"The current calendar is already based on %1$s\";"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to view calendar based on %1$s\";"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    private final LocalDate date;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"    public ViewDateCommand(LocalDate date) {"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        // view a date that is already the base date"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getBaseDate().equals(date)"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 !model.getIsListingAppointments()) {"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(String.format(MESSAGE_NO_CHANGE_IN_BASE_DATE,"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"                    date.format(FORMATTER)));"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        model.setBaseDate(date);"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ShowCalendarBasedOnDateEvent(date));"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarViewPage(DAY_VIEW_PAGE);"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(DAY_VIEW_PAGE));"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"        // if it\u0027s switching from appointment list view to calendar"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getIsListingAppointments()) {"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"            model.setIsListingAppointments(false);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, date.format(FORMATTER)));"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"                || (other instanceof ViewDateCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 Objects.equals(date, ((ViewDateCommand) other).date));"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":68,"-":4}},{"path":"src/main/java/seedu/address/logic/map/GoogleWebServices.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.maps.GeoApiContext;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.GeocodingApi;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.maps.model.GeocodingResult;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":10,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":" * Initialise connection to google server to use its API"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":"public class GoogleWebServices {"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"    // 6 API keys for accessing google server"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    public static final String API_KEY_1 \u003d \"AIzaSyB78sjE5UtuPn9T7u1WHowRkWj2KFo92rI\";"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"    public static final String API_KEY_2 \u003d \"AIzaSyAplrsZatzM_d2ynML097uqXd1-usgscOA\";"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    public static final String API_KEY_3 \u003d \"AIzaSyDdJMB6Jug8D_45K72FpbEL8S5XQF_98Oc\";"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    public static final String API_KEY_4 \u003d \"AIzaSyA-gBgtvaQU4NMEmO37UJEyx5YHnuFU30E\";"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"    public static final String API_KEY_5 \u003d \"AIzaSyAD8_oIBJlzOp30VA9mOvQKp6GZe8SFsYY\";"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"    public static final String API_KEY_6 \u003d \"AIzaSyBKemZo4WFMDaJ1q_vWxquZxTyYF24skCI\";"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_FAIL_CONNECTION \u003d \"Api key reached max daily usage, \""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"            + \"please wait till 3pm SGT for it to be reset\";"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"    private static GeoApiContext context;"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    private boolean isInitialised;"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"     * Initialises access to google server using Api keys"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"    public GoogleWebServices() {"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        initialiseConnection();"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"     * Initialise with valid Api key and test connection to google server"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"    private void initialiseConnection() {"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        isInitialised \u003d true;"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        context \u003d new GeoApiContext.Builder()"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"                .apiKey(API_KEY_5)"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"                .build();"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"            GeocodingResult[] results \u003d GeocodingApi.geocode(context,"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"                    \"Punggol\").await();"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"            LatLng location \u003d results[0].geometry.location;"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        } catch (ApiException | InterruptedException | IOException | IndexOutOfBoundsException e) {"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"            isInitialised \u003d false;"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"    public boolean checkInitialisedConnection() {"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"        return isInitialised;"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"    public static GeoApiContext getGeoApiContext() {"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        return context;"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":9,"Damienskt":52}},{"path":"src/main/java/seedu/address/logic/commands/calendar/ViewCombinedCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCombinedCalendarViewRequestEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":" * Display the calendar of the celebrity specified by the user."},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCombinedCalendarCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"viewCombinedCalendar\";"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"vcc\";"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays a combined view of calendars \""},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"            + \"of all celebrities.\\n\""},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_ALREADY_IN_COMBINED_VIEW \u003d \"The current calendar is already in combined view\";"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to show combined calendar\";"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    public ViewCombinedCalendarCommand() {}"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        // view combined calendar when it\u0027s already in combined calendar"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getCurrentCelebCalendarOwner() \u003d\u003d null"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 !model.getIsListingAppointments()) {"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(MESSAGE_ALREADY_IN_COMBINED_VIEW);"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(null);"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ShowCombinedCalendarViewRequestEvent());"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        // if it\u0027s switching from appointment list view to calendar"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getIsListingAppointments()) {"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"            model.setIsListingAppointments(false);"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":39,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/calendar/EditAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CELEBRITY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POINT_OF_CONTACT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.DAY_VIEW_PAGE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.model.appointment.Appointment.isDateTimeNotValid;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewPageRequestEvent;"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":" * Edits an appointment in a calendar."},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"public class EditAppointmentCommand extends Command {"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"    public static final String COMMAND_WORD \u003d \"editAppointment\";"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"    public static final String COMMAND_ALIAS \u003d \"ea\";"},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an appointment.\\n\""},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"            + \"Parameters: APPOINTMENT_INDEX (must be a positive integer)\""},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_NAME + \"APPOINTMENT NAME] \""},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_START_TIME + \"START TIME] \""},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_START_DATE + \"START DATE] \""},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_END_TIME + \"END TIME] \""},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_END_DATE + \"END DATE] \""},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_CELEBRITY + \"CELEBRITY_INDEX]... \""},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"            + \"[\" + PREFIX_POINT_OF_CONTACT + \"POINT_OF_CONTACT_INDEX]...\\n\""},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"            + PREFIX_NAME + \"Oscars 2018 \""},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"            + PREFIX_START_TIME + \"18:00 \""},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"            + PREFIX_START_DATE + \"23-04-2018 \""},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"            + PREFIX_LOCATION + \"Hollywood \""},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"            + PREFIX_END_TIME + \"20:00 \""},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"            + PREFIX_END_DATE + \"23-04-2018 \""},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"            + PREFIX_CELEBRITY + \"1 \""},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"            + PREFIX_CELEBRITY + \"2 \""},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"            + PREFIX_POINT_OF_CONTACT + \"3 \""},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"            + PREFIX_POINT_OF_CONTACT + \"4 \";"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the application,\""},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"            + \" or the edited fields are the same as the original.\";"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Edited appointment: %1$s\";"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided\";"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"    private final Index appointmentIndex;"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"    private Appointment appointmentToEdit;"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"    public EditAppointmentCommand(Index appointmentIndex, EditAppointmentDescriptor editAppointmentDescriptor) {"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        requireNonNull(appointmentIndex);"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"        requireNonNull(editAppointmentDescriptor);"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"        this.appointmentIndex \u003d appointmentIndex;"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"        if (!model.getIsListingAppointments()) {"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(Messages.MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"            appointmentToEdit \u003d model.getChosenAppointment(appointmentIndex.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"            Appointment editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"            // either use existing celebrity list or get new one"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"            List\u003cCelebrity\u003e celebrityList \u003d (editAppointmentDescriptor.getCelebrityIndices().isPresent())"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"                    ? model.getCelebritiesChosen(editAppointmentDescriptor.getCelebrityIndices().get())"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"                    : appointmentToEdit.getCelebrities();"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":"            List\u003cPerson\u003e pointOfContactList \u003d (editAppointmentDescriptor.getPointOfContactIndices().isPresent())"},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":"                    ? model.getPointsOfContactChosen(editAppointmentDescriptor.getPointOfContactIndices().get())"},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"                    : appointmentToEdit.getPointOfContactList();"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"            model.addAppointmentToStorageCalendar(editedAppointment);"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"            appointmentToEdit.removeAppointment();"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"            editedAppointment.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"            // reset calendar view to day view"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":"            model.setCelebCalendarViewPage(DAY_VIEW_PAGE);"},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":"            EventsCenter.getInstance().post(new ChangeCalendarViewPageRequestEvent(DAY_VIEW_PAGE));"},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":"            if (model.getIsListingAppointments()) {"},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"                model.setIsListingAppointments(false);"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":"                EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, editedAppointment.getTitle()));"},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":"        } catch (IndexOutOfBoundsException iobe) {"},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"        } catch (ParseException pe) {"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME);"},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code apptToEdit}"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":"     * edited with {@code ead}."},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":"    public static Appointment createEditedAppointment(Appointment apptToEdit, EditAppointmentDescriptor ead)"},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":"            throws ParseException {"},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":"        assert apptToEdit !\u003d null;"},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":"        String apptName \u003d ead.getAppointmentName().orElse(apptToEdit.getTitle());"},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":"        LocalTime startTime \u003d ead.getStartTime().orElse(apptToEdit.getStartTime());"},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":"        LocalTime endTime \u003d ead.getEndTime().orElse(apptToEdit.getEndTime());"},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"        LocalDate startDate \u003d ead.getStartDate().orElse(apptToEdit.getStartDate());"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":"        LocalDate endDate \u003d ead.getEndDate().orElse(apptToEdit.getEndDate());"},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":"        MapAddress location \u003d ead.getLocation().orElse(apptToEdit.getMapAddress());"},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":"        if (isDateTimeNotValid(startDate, endDate, startTime, endTime)) {"},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"            throw new ParseException(MESSAGE_START_DATE_TIME_NOT_BEFORE_END_DATE_TIME);"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":"        return new Appointment(apptName, startTime, startDate, location, endTime, endDate);"},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":152,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"muruges95"},"content":"     * Stores the details to edit an appointment with. Each non-empty field value will replace"},{"lineNumber":154,"author":{"gitID":"muruges95"},"content":"     * the corresponding field value of the person."},{"lineNumber":155,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"muruges95"},"content":"    public static class EditAppointmentDescriptor {"},{"lineNumber":157,"author":{"gitID":"muruges95"},"content":"        private String appointmentName;"},{"lineNumber":158,"author":{"gitID":"muruges95"},"content":"        private LocalTime startTime;"},{"lineNumber":159,"author":{"gitID":"muruges95"},"content":"        private LocalTime endTime;"},{"lineNumber":160,"author":{"gitID":"muruges95"},"content":"        private LocalDate startDate;"},{"lineNumber":161,"author":{"gitID":"muruges95"},"content":"        private LocalDate endDate;"},{"lineNumber":162,"author":{"gitID":"muruges95"},"content":"        private MapAddress location;"},{"lineNumber":163,"author":{"gitID":"muruges95"},"content":"        private Set\u003cIndex\u003e celebrityIndices;"},{"lineNumber":164,"author":{"gitID":"muruges95"},"content":"        private Set\u003cIndex\u003e pointOfContactIndices;"},{"lineNumber":165,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":166,"author":{"gitID":"muruges95"},"content":"        // for JUnit Tests"},{"lineNumber":167,"author":{"gitID":"muruges95"},"content":"        private List\u003cLong\u003e celebIds;"},{"lineNumber":168,"author":{"gitID":"muruges95"},"content":"        private List\u003cLong\u003e pointOfContactIds;"},{"lineNumber":169,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":170,"author":{"gitID":"muruges95"},"content":"        public EditAppointmentDescriptor() {}"},{"lineNumber":171,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":172,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"muruges95"},"content":"         * Copy constructor."},{"lineNumber":174,"author":{"gitID":"muruges95"},"content":"         * A defensive copy of {@code celebrityIndices} is used internally."},{"lineNumber":175,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":176,"author":{"gitID":"muruges95"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"},{"lineNumber":177,"author":{"gitID":"muruges95"},"content":"            setAppointmentName(toCopy.appointmentName);"},{"lineNumber":178,"author":{"gitID":"muruges95"},"content":"            setLocation(toCopy.location);"},{"lineNumber":179,"author":{"gitID":"muruges95"},"content":"            setStartTime(toCopy.startTime);"},{"lineNumber":180,"author":{"gitID":"muruges95"},"content":"            setStartDate(toCopy.startDate);"},{"lineNumber":181,"author":{"gitID":"muruges95"},"content":"            setEndTime(toCopy.endTime);"},{"lineNumber":182,"author":{"gitID":"muruges95"},"content":"            setEndDate(toCopy.endDate);"},{"lineNumber":183,"author":{"gitID":"muruges95"},"content":"            setCelebrityIndices(toCopy.celebrityIndices);"},{"lineNumber":184,"author":{"gitID":"muruges95"},"content":"            setPointOfContactIndices(toCopy.pointOfContactIndices);"},{"lineNumber":185,"author":{"gitID":"muruges95"},"content":"            setCelebIds(toCopy.celebIds);"},{"lineNumber":186,"author":{"gitID":"muruges95"},"content":"            setPointOfContactIds(toCopy.pointOfContactIds);"},{"lineNumber":187,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":189,"author":{"gitID":"muruges95"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":190,"author":{"gitID":"muruges95"},"content":"            return CollectionUtil.isAnyNonNull(this.appointmentName, this.startTime, this.startDate,"},{"lineNumber":191,"author":{"gitID":"muruges95"},"content":"                    this.endTime, this.endDate, this.location, this.celebrityIndices, this.pointOfContactIndices);"},{"lineNumber":192,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":194,"author":{"gitID":"muruges95"},"content":"        public void setAppointmentName(String appointmentName) {"},{"lineNumber":195,"author":{"gitID":"muruges95"},"content":"            this.appointmentName \u003d appointmentName;"},{"lineNumber":196,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":198,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cString\u003e getAppointmentName() {"},{"lineNumber":199,"author":{"gitID":"muruges95"},"content":"            return Optional.ofNullable(appointmentName);"},{"lineNumber":200,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":202,"author":{"gitID":"muruges95"},"content":"        public void setStartTime(LocalTime startTime) {"},{"lineNumber":203,"author":{"gitID":"muruges95"},"content":"            this.startTime \u003d startTime;"},{"lineNumber":204,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":206,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cLocalTime\u003e getStartTime() {"},{"lineNumber":207,"author":{"gitID":"muruges95"},"content":"            return Optional.ofNullable(startTime);"},{"lineNumber":208,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":210,"author":{"gitID":"muruges95"},"content":"        public void setStartDate(LocalDate startDate) {"},{"lineNumber":211,"author":{"gitID":"muruges95"},"content":"            this.startDate \u003d startDate;"},{"lineNumber":212,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":214,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cLocalDate\u003e getStartDate() {"},{"lineNumber":215,"author":{"gitID":"muruges95"},"content":"            return Optional.ofNullable(startDate);"},{"lineNumber":216,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":218,"author":{"gitID":"muruges95"},"content":"        public void setEndTime(LocalTime endTime) {"},{"lineNumber":219,"author":{"gitID":"muruges95"},"content":"            this.endTime \u003d endTime;"},{"lineNumber":220,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":222,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cLocalTime\u003e getEndTime() {"},{"lineNumber":223,"author":{"gitID":"muruges95"},"content":"            return Optional.ofNullable(endTime);"},{"lineNumber":224,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":226,"author":{"gitID":"muruges95"},"content":"        public void setEndDate(LocalDate endDate) {"},{"lineNumber":227,"author":{"gitID":"muruges95"},"content":"            this.endDate \u003d endDate;"},{"lineNumber":228,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":230,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cLocalDate\u003e getEndDate() {"},{"lineNumber":231,"author":{"gitID":"muruges95"},"content":"            return Optional.ofNullable(endDate);"},{"lineNumber":232,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":234,"author":{"gitID":"muruges95"},"content":"        public void setLocation(MapAddress location) {"},{"lineNumber":235,"author":{"gitID":"muruges95"},"content":"            this.location \u003d location;"},{"lineNumber":236,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":238,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cMapAddress\u003e getLocation() {"},{"lineNumber":239,"author":{"gitID":"muruges95"},"content":"            return Optional.ofNullable(location);"},{"lineNumber":240,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":242,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"muruges95"},"content":"         * Sets {@code celebrityIndices} to this object\u0027s {@code celebrityIndices}."},{"lineNumber":244,"author":{"gitID":"muruges95"},"content":"         * A defensive copy of {@code celebrityIndices} is used internally."},{"lineNumber":245,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":246,"author":{"gitID":"muruges95"},"content":"        public void setCelebrityIndices(Set\u003cIndex\u003e celebrityIndices) {"},{"lineNumber":247,"author":{"gitID":"muruges95"},"content":"            this.celebrityIndices \u003d (celebrityIndices !\u003d null) ? new HashSet\u003c\u003e(celebrityIndices) : null;"},{"lineNumber":248,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":250,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":251,"author":{"gitID":"muruges95"},"content":"         * Returns an unmodifiable celebrities set, which throws {@code UnsupportedOperationException}"},{"lineNumber":252,"author":{"gitID":"muruges95"},"content":"         * if modification is attempted."},{"lineNumber":253,"author":{"gitID":"muruges95"},"content":"         * Returns {@code Optional#empty()} if {@code celebrityIndices} is null."},{"lineNumber":254,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":255,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cSet\u003cIndex\u003e\u003e getCelebrityIndices() {"},{"lineNumber":256,"author":{"gitID":"muruges95"},"content":"            return (celebrityIndices !\u003d null) ? Optional.of(Collections.unmodifiableSet(celebrityIndices))"},{"lineNumber":257,"author":{"gitID":"muruges95"},"content":"                                              : Optional.empty();"},{"lineNumber":258,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":260,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":261,"author":{"gitID":"muruges95"},"content":"         * Sets {@code pointOfContactIndices} to this object\u0027s {@code pointOfContactIndices}."},{"lineNumber":262,"author":{"gitID":"muruges95"},"content":"         * A defensive copy of {@code pointOfContactIndices} is used internally."},{"lineNumber":263,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":264,"author":{"gitID":"muruges95"},"content":"        public void setPointOfContactIndices(Set\u003cIndex\u003e pointOfContactIndices) {"},{"lineNumber":265,"author":{"gitID":"muruges95"},"content":"            this.pointOfContactIndices \u003d (pointOfContactIndices !\u003d null) ? new HashSet\u003c\u003e(pointOfContactIndices) : null;"},{"lineNumber":266,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":268,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":269,"author":{"gitID":"muruges95"},"content":"         * Returns an unmodifiable points of contact set, which throws {@code UnsupportedOperationException}"},{"lineNumber":270,"author":{"gitID":"muruges95"},"content":"         * if modification is attempted."},{"lineNumber":271,"author":{"gitID":"muruges95"},"content":"         * Returns {@code Optional#empty()} if {@code pointOfContactIndices} is null."},{"lineNumber":272,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":273,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cSet\u003cIndex\u003e\u003e getPointOfContactIndices() {"},{"lineNumber":274,"author":{"gitID":"muruges95"},"content":"            return (pointOfContactIndices !\u003d null) ? Optional.of(Collections.unmodifiableSet(pointOfContactIndices))"},{"lineNumber":275,"author":{"gitID":"muruges95"},"content":"                    : Optional.empty();"},{"lineNumber":276,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":278,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":279,"author":{"gitID":"muruges95"},"content":"         * Sets {@code celebIds} to this object\u0027s {@code celebIds}."},{"lineNumber":280,"author":{"gitID":"muruges95"},"content":"         * A defensive copy of {@code celebIds} is used internally."},{"lineNumber":281,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":282,"author":{"gitID":"muruges95"},"content":"        public void setCelebIds(List\u003cLong\u003e celebIds) {"},{"lineNumber":283,"author":{"gitID":"muruges95"},"content":"            this.celebIds \u003d (celebIds !\u003d null) ? new ArrayList\u003c\u003e(celebIds) : null;"},{"lineNumber":284,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":286,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":287,"author":{"gitID":"muruges95"},"content":"         * Returns an unmodifiable celebrities id list, which throws {@code UnsupportedOperationException}"},{"lineNumber":288,"author":{"gitID":"muruges95"},"content":"         * if modification is attempted."},{"lineNumber":289,"author":{"gitID":"muruges95"},"content":"         * Returns {@code Optional#empty()} if {@code celebIds} is null."},{"lineNumber":290,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":291,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cList\u003cLong\u003e\u003e getCelebIds() {"},{"lineNumber":292,"author":{"gitID":"muruges95"},"content":"            return (this.celebIds !\u003d null)"},{"lineNumber":293,"author":{"gitID":"muruges95"},"content":"                    ? Optional.of(Collections.unmodifiableList(celebIds))"},{"lineNumber":294,"author":{"gitID":"muruges95"},"content":"                    : Optional.empty();"},{"lineNumber":295,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":297,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":298,"author":{"gitID":"muruges95"},"content":"         * Sets {@code pointOfContactIds} to this object\u0027s {@code pointOfContactIds}."},{"lineNumber":299,"author":{"gitID":"muruges95"},"content":"         * A defensive copy of {@code pointOfContactIds} is used internally."},{"lineNumber":300,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":301,"author":{"gitID":"muruges95"},"content":"        public void setPointOfContactIds(List\u003cLong\u003e pointOfContactIds) {"},{"lineNumber":302,"author":{"gitID":"muruges95"},"content":"            this.pointOfContactIds \u003d (pointOfContactIds !\u003d null) ? new ArrayList\u003c\u003e(pointOfContactIds) : null;"},{"lineNumber":303,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":305,"author":{"gitID":"muruges95"},"content":"        /**"},{"lineNumber":306,"author":{"gitID":"muruges95"},"content":"         * Returns an unmodifiable points of contact id list, which throws {@code UnsupportedOperationException}"},{"lineNumber":307,"author":{"gitID":"muruges95"},"content":"         * if modification is attempted."},{"lineNumber":308,"author":{"gitID":"muruges95"},"content":"         * Returns {@code Optional#empty()} if {@code pointOfContactIds} is null."},{"lineNumber":309,"author":{"gitID":"muruges95"},"content":"         */"},{"lineNumber":310,"author":{"gitID":"muruges95"},"content":"        public Optional\u003cList\u003cLong\u003e\u003e getPointOfContactIds() {"},{"lineNumber":311,"author":{"gitID":"muruges95"},"content":"            return (this.pointOfContactIds !\u003d null)"},{"lineNumber":312,"author":{"gitID":"muruges95"},"content":"                    ? Optional.of(Collections.unmodifiableList(pointOfContactIds))"},{"lineNumber":313,"author":{"gitID":"muruges95"},"content":"                    : Optional.empty();"},{"lineNumber":314,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":316,"author":{"gitID":"muruges95"},"content":"        @Override"},{"lineNumber":317,"author":{"gitID":"muruges95"},"content":"        public boolean equals(Object other) {"},{"lineNumber":318,"author":{"gitID":"muruges95"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":319,"author":{"gitID":"muruges95"},"content":"                return true;"},{"lineNumber":320,"author":{"gitID":"muruges95"},"content":"            } else if (!(other instanceof EditAppointmentDescriptor)) {"},{"lineNumber":321,"author":{"gitID":"muruges95"},"content":"                return false;"},{"lineNumber":322,"author":{"gitID":"muruges95"},"content":"            } else {"},{"lineNumber":323,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":324,"author":{"gitID":"muruges95"},"content":"                EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"},{"lineNumber":325,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":326,"author":{"gitID":"muruges95"},"content":"                return getAppointmentName().equals(e.getAppointmentName())"},{"lineNumber":327,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getStartDate().equals(e.getStartDate())"},{"lineNumber":328,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getEndDate().equals(e.getEndDate())"},{"lineNumber":329,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getStartTime().equals(e.getStartTime())"},{"lineNumber":330,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getEndTime().equals(e.getEndTime())"},{"lineNumber":331,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getLocation().equals(e.getLocation())"},{"lineNumber":332,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getCelebrityIndices().equals(e.getCelebrityIndices())"},{"lineNumber":333,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getPointOfContactIndices().equals(e.getPointOfContactIndices())"},{"lineNumber":334,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getCelebIds().equals(e.getCelebIds())"},{"lineNumber":335,"author":{"gitID":"muruges95"},"content":"                        \u0026\u0026 getPointOfContactIndices().equals(e.getPointOfContactIndices());"},{"lineNumber":336,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":337,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":340,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":341,"author":{"gitID":"muruges95"},"content":"    public boolean equals(Object other) {"},{"lineNumber":342,"author":{"gitID":"muruges95"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":343,"author":{"gitID":"muruges95"},"content":"            return true;"},{"lineNumber":344,"author":{"gitID":"muruges95"},"content":"        } else if (!(other instanceof EditAppointmentCommand)) {"},{"lineNumber":345,"author":{"gitID":"muruges95"},"content":"            return false;"},{"lineNumber":346,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":347,"author":{"gitID":"muruges95"},"content":"            EditAppointmentCommand e \u003d (EditAppointmentCommand) other;"},{"lineNumber":348,"author":{"gitID":"muruges95"},"content":"            return appointmentIndex.equals(e.appointmentIndex)"},{"lineNumber":349,"author":{"gitID":"muruges95"},"content":"                    \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor)"},{"lineNumber":350,"author":{"gitID":"muruges95"},"content":"                    \u0026\u0026 Objects.equals(appointmentToEdit, e.appointmentToEdit);"},{"lineNumber":351,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":352,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":354,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":312,"WJY-norainu":5,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/calendar/ViewAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":" * Display the appointment details in the display panel"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":" * based on the index given"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"public class ViewAppointmentCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"    public static final String COMMAND_WORD \u003d \"viewAppointment\";"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    public static final String COMMAND_ALIAS \u003d \"va\";"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"            + \": Show the appointment details based on index \""},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"            + \"Index (Based on most recent appointment list generated). \\n\""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"            + \"1\";"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS \u003d \"List of appointments must be shown \""},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"            + \"before viewing an appointment\";"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Selected appointment details:\\n\";"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_NO_LOCATION \u003d \"No location for selected appointment!\";"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"    private static Appointment selectedAppointment;"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"    private int chosenIndex;"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"     * Takes in a zero-based index {@code index}"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"    public ViewAppointmentCommand (int index) {"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        chosenIndex \u003d index;"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"        if (!model.getIsListingAppointments()) {"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"            throw new CommandException(MESSAGE_MUST_SHOW_LIST_OF_APPOINTMENTS);"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"            selectedAppointment \u003d model.getChosenAppointment(chosenIndex);"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        } catch (IndexOutOfBoundsException iobe) {"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"            ShowLocationCommand showLocation \u003d new ShowLocationCommand("},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"                    new MapAddress(selectedAppointment.getLocation()));"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"            showLocation.execute();"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"            return new CommandResult(MESSAGE_SUCCESS + getAppointmentDetailsResult());"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"            return new CommandResult(MESSAGE_SUCCESS + getAppointmentDetailsResult());"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"    public static String getAppointmentDetailsResult () {"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"        String displayedLocation \u003d (selectedAppointment.getLocation() \u003d\u003d null)"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"                ? MESSAGE_NO_LOCATION"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"                : selectedAppointment.getLocation();"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        return \"Appointment Name: \" + selectedAppointment.getTitle() + \"\\n\""},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"                + \"Start Date: \" + selectedAppointment.getStartDate() + \"\\n\""},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"                + \"Start Time: \" + selectedAppointment.getStartTime() + \"\\n\""},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"                + \"End Date: \" + selectedAppointment.getEndDate() + \"\\n\""},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"                + \"End Time: \" + selectedAppointment.getEndTime() + \"\\n\""},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"                + \"Location: \" + displayedLocation + \"\\n\""},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"                + \"Celebrities attending: \" + selectedAppointment.getCelebritiesAttending() + \"\\n\""},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"                + \"Points of Contact: \" + selectedAppointment.getPointsOfContact();"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"        return other \u003d\u003d this"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"                || (other instanceof ViewAppointmentCommand"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"                \u0026\u0026 this.chosenIndex \u003d\u003d (((ViewAppointmentCommand) other).chosenIndex));"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"WJY-norainu":3,"-":8,"Damienskt":74}},{"path":"src/main/java/seedu/address/logic/commands/calendar/ViewCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.CELEBRITY_TAG;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ChangeCalendarRequestEvent;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.events.ui.ShowCalendarEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":" * Display the calendar of the celebrity specified by the user."},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"public class ViewCalendarCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"viewCalendar\";"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"vc\";"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the calendar of the celebrity\""},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            + \" identified by the index number used in the last person listing.\\n\""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            + \"Parameter: INDEX (must be a positive integer and the person at the index must be a celebrity)\\n\""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD + \" 6\";"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NO_CHANGE_IN_CALENDAR \u003d \"The calendar shown currently is already %1$s\u0027s\";"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to show %1$s\u0027s calendar\";"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NOT_CELEBRITY \u003d \"The person at the given index is not a celebrity and has \""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"            + \"no calendar to show\";"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    private final Index targetIndex;"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    public ViewCalendarCommand(Index index) {"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        Person personToShowCalendar \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        // person at the given index is not a celebrity"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        if (!personToShowCalendar.hasTag(CELEBRITY_TAG)) {"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(MESSAGE_NOT_CELEBRITY);"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        Celebrity celebrityToShowCalendar \u003d (Celebrity) personToShowCalendar;"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"        // the celebrity\u0027s calendar is currently being shown"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"        if (celebrityToShowCalendar.equals(model.getCurrentCelebCalendarOwner())"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 !model.getIsListingAppointments()) {"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(String.format(MESSAGE_NO_CHANGE_IN_CALENDAR,"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"                    celebrityToShowCalendar.getName().toString()));"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"        model.setCelebCalendarOwner(celebrityToShowCalendar);"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarRequestEvent(celebrityToShowCalendar.getCelebCalendar()));"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        // if it\u0027s switching from appointment list view to calendar"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        if (model.getIsListingAppointments()) {"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"            EventsCenter.getInstance().post(new ShowCalendarEvent());"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"            model.setIsListingAppointments(false);"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, celebrityToShowCalendar.getName().toString()));"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"                || (other instanceof ViewCalendarCommand // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.targetIndex.equals(((ViewCalendarCommand) other).targetIndex)); // state check"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":72,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"    public static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, personToEdit.getId());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":201,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":208,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":209,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":210,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":236}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":" * Selects a person identified using the last displayed index from CelebManager."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":52}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.StorageCalendarChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, StorageCalendarStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates the data file if it is missing."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"    //@@author tzerbin"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"    String getStorageCalendarFilePath();"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":"    Optional\u003cStorageCalendar\u003e readStorageCalendar() throws DataConversionException, IOException;"},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":48,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"tzerbin"},"content":"    void saveStorageCalendar(StorageCalendar storageCalendar) throws IOException;"},{"lineNumber":50,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":51,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"tzerbin"},"content":"     * Saves the current version of the StorageCalendar to the hard disk."},{"lineNumber":53,"author":{"gitID":"tzerbin"},"content":"     * Creates the data file if it is missing."},{"lineNumber":54,"author":{"gitID":"tzerbin"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":55,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"tzerbin"},"content":"    void handleStorageCalendarChangedEvent(StorageCalendarChangedEvent alce);"},{"lineNumber":57,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":17,"-":40}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":2,"author":{"gitID":"tzerbin"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":4,"author":{"gitID":"tzerbin"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"tzerbin"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitID":"tzerbin"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"tzerbin"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"tzerbin"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":" * JAXB-friendly version of an Appointment."},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":" */"},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"    private String title;"},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":"    private String location;"},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":"    private String startDate;"},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    private String startTime;"},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"    private String endDate;"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"    private String endTime;"},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"    private List\u003cLong\u003e celebrityIds;"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":"    private List\u003cLong\u003e pointOfContactIds;"},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"tzerbin"},"content":"     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."},{"lineNumber":49,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"tzerbin"},"content":"    public XmlAdaptedAppointment(String title, LocalTime startTime, LocalDate startDate, MapAddress mapAddress,"},{"lineNumber":51,"author":{"gitID":"tzerbin"},"content":"                                 LocalTime endTime, LocalDate endDate) {"},{"lineNumber":52,"author":{"gitID":"tzerbin"},"content":"        this.title \u003d title;"},{"lineNumber":53,"author":{"gitID":"tzerbin"},"content":"        this.startDate \u003d startDate.toString();"},{"lineNumber":54,"author":{"gitID":"tzerbin"},"content":"        this.startTime \u003d startTime.toString();"},{"lineNumber":55,"author":{"gitID":"tzerbin"},"content":"        this.endDate \u003d endDate.toString();"},{"lineNumber":56,"author":{"gitID":"tzerbin"},"content":"        this.endTime \u003d endTime.toString();"},{"lineNumber":57,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":58,"author":{"gitID":"tzerbin"},"content":"        if (mapAddress !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"tzerbin"},"content":"            location \u003d mapAddress.toString();"},{"lineNumber":60,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"tzerbin"},"content":"        this.celebrityIds \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitID":"tzerbin"},"content":"        this.pointOfContactIds \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":65,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"tzerbin"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":67,"author":{"gitID":"tzerbin"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"tzerbin"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":69,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"tzerbin"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":71,"author":{"gitID":"tzerbin"},"content":"        title \u003d source.getTitle();"},{"lineNumber":72,"author":{"gitID":"tzerbin"},"content":"        startDate \u003d source.getStartDate().toString();"},{"lineNumber":73,"author":{"gitID":"tzerbin"},"content":"        startTime \u003d source.getStartTime().toString();"},{"lineNumber":74,"author":{"gitID":"tzerbin"},"content":"        endDate \u003d source.getEndDate().toString();"},{"lineNumber":75,"author":{"gitID":"tzerbin"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":76,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":77,"author":{"gitID":"tzerbin"},"content":"        if (source.getMapAddress() !\u003d null) {"},{"lineNumber":78,"author":{"gitID":"tzerbin"},"content":"            location \u003d source.getMapAddress().toString();"},{"lineNumber":79,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"tzerbin"},"content":"        this.celebrityIds \u003d source.getCelebIds();"},{"lineNumber":81,"author":{"gitID":"tzerbin"},"content":"        this.pointOfContactIds \u003d source.getPointOfContactIds();"},{"lineNumber":82,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":84,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"tzerbin"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."},{"lineNumber":86,"author":{"gitID":"tzerbin"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"tzerbin"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":88,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"tzerbin"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":91,"author":{"gitID":"tzerbin"},"content":"        LocalDate startDateCreated;"},{"lineNumber":92,"author":{"gitID":"tzerbin"},"content":"        LocalTime startTimeCreated;"},{"lineNumber":93,"author":{"gitID":"tzerbin"},"content":"        LocalDate endDateCreated;"},{"lineNumber":94,"author":{"gitID":"tzerbin"},"content":"        LocalTime endTimeCreated;"},{"lineNumber":95,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":96,"author":{"gitID":"tzerbin"},"content":"        if (startTime \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"tzerbin"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"tzerbin"},"content":"            startTimeCreated \u003d LocalTime.parse(startTime);"},{"lineNumber":101,"author":{"gitID":"tzerbin"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":102,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":105,"author":{"gitID":"tzerbin"},"content":"        if (startDate \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"tzerbin"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"tzerbin"},"content":"            startDateCreated \u003d LocalDate.parse(startDate);"},{"lineNumber":110,"author":{"gitID":"tzerbin"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":111,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":114,"author":{"gitID":"tzerbin"},"content":"        if (endTime \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(String.format(Appointment.MESSAGE_TIME_CONSTRAINTS,"},{"lineNumber":116,"author":{"gitID":"tzerbin"},"content":"                    LocalTime.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"tzerbin"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"tzerbin"},"content":"            endTimeCreated \u003d LocalTime.parse(endTime);"},{"lineNumber":120,"author":{"gitID":"tzerbin"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":121,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":124,"author":{"gitID":"tzerbin"},"content":"        if (endDate \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(String.format(Appointment.MESSAGE_DATE_CONSTRAINTS,"},{"lineNumber":126,"author":{"gitID":"tzerbin"},"content":"                    LocalTime.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"tzerbin"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"tzerbin"},"content":"            endDateCreated \u003d LocalDate.parse(endDate);"},{"lineNumber":130,"author":{"gitID":"tzerbin"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":131,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":134,"author":{"gitID":"tzerbin"},"content":"        if (title \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"tzerbin"},"content":"        if (!Appointment.isValidName(title)) {"},{"lineNumber":138,"author":{"gitID":"tzerbin"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"tzerbin"},"content":"        final String appointmentName \u003d title;"},{"lineNumber":141,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":142,"author":{"gitID":"tzerbin"},"content":"        MapAddress mapAddressCreated \u003d null;"},{"lineNumber":143,"author":{"gitID":"tzerbin"},"content":"        if (location !\u003d null) {"},{"lineNumber":144,"author":{"gitID":"tzerbin"},"content":"            if (!MapAddress.isValidAddress(location)) {"},{"lineNumber":145,"author":{"gitID":"tzerbin"},"content":"                throw new IllegalValueException(String.format(MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS));"},{"lineNumber":146,"author":{"gitID":"tzerbin"},"content":"            }"},{"lineNumber":147,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":148,"author":{"gitID":"tzerbin"},"content":"            mapAddressCreated \u003d new MapAddress(location);"},{"lineNumber":149,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":151,"author":{"gitID":"tzerbin"},"content":"        Appointment appt \u003d  new Appointment(appointmentName, startTimeCreated, startDateCreated,"},{"lineNumber":152,"author":{"gitID":"tzerbin"},"content":"                mapAddressCreated, endTimeCreated, endDateCreated);"},{"lineNumber":153,"author":{"gitID":"tzerbin"},"content":"        if (celebrityIds !\u003d null) {"},{"lineNumber":154,"author":{"gitID":"tzerbin"},"content":"            appt.setCelebIds(celebrityIds);"},{"lineNumber":155,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":157,"author":{"gitID":"tzerbin"},"content":"        if (pointOfContactIds !\u003d null) {"},{"lineNumber":158,"author":{"gitID":"tzerbin"},"content":"            appt.setPointOfContactIds(pointOfContactIds);"},{"lineNumber":159,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"tzerbin"},"content":"        return appt;"},{"lineNumber":161,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":163,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"tzerbin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":165,"author":{"gitID":"tzerbin"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":166,"author":{"gitID":"tzerbin"},"content":"            return true;"},{"lineNumber":167,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":169,"author":{"gitID":"tzerbin"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":170,"author":{"gitID":"tzerbin"},"content":"            return false;"},{"lineNumber":171,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":173,"author":{"gitID":"tzerbin"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":174,"author":{"gitID":"tzerbin"},"content":"        return Objects.equals(title, otherAppointment.title)"},{"lineNumber":175,"author":{"gitID":"tzerbin"},"content":"                \u0026\u0026 Objects.equals(startDate, otherAppointment.startDate)"},{"lineNumber":176,"author":{"gitID":"tzerbin"},"content":"                \u0026\u0026 Objects.equals(startTime, otherAppointment.startTime)"},{"lineNumber":177,"author":{"gitID":"tzerbin"},"content":"                \u0026\u0026 Objects.equals(endDate, otherAppointment.endDate)"},{"lineNumber":178,"author":{"gitID":"tzerbin"},"content":"                \u0026\u0026 Objects.equals(endTime, otherAppointment.endTime)"},{"lineNumber":179,"author":{"gitID":"tzerbin"},"content":"                \u0026\u0026 Objects.equals(location, otherAppointment.location)"},{"lineNumber":180,"author":{"gitID":"tzerbin"},"content":"                \u0026\u0026 Objects.equals(celebrityIds, otherAppointment.celebrityIds);"},{"lineNumber":181,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":182}},{"path":"src/main/java/seedu/address/logic/commands/map/ShowLocationCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.Animation;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.LatLong;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.Marker;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.MarkerOptions;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.Geocoding;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.map.Map;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":" * Update the Map by adding a marker to the location of map selectedLocation"},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":" * and delete existing marker if it exist"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"public class ShowLocationCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    public static final String COMMAND_WORD \u003d \"showLocation\";"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"    public static final String COMMAND_ALIAS \u003d \"sl\";"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"            + \": Shows the location of selectedLocation in the Map.\\n\""},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_MAP_ADDRESS + \"LOCATION (Name of location or postal code)\\n\""},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_MAP_ADDRESS + \"Punggol Central\\n\""},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_MAP_ADDRESS + \"820296\";"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Location is being shown in Map (identified by marker)!\";"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"    private MapAddress selectedLocation;"},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"     * Creates an AddAppointmentCommand with the following parameters"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"     * @param address The created appointment"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"    public ShowLocationCommand (MapAddress address) {"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"        requireNonNull(address);"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        this.selectedLocation \u003d address;"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"    public CommandResult execute() {"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        Map.removeExistingMarker();"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        Map.clearRoute();"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"        addNewMarkerToMap();"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"                || (other instanceof ShowLocationCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"                \u0026\u0026 this.selectedLocation.equals(((ShowLocationCommand) other).selectedLocation));"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"     * Remove any existing marker and add new marker {@code location} to Map"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"    public void addNewMarkerToMap() {"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        LatLong center \u003d getLatLong();"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        Map.setLocation(getMarkerOptions(center));"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":"        Map.setMarkerOnMap(center);"},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"     * Initialise new marker with selected location {@code center} options"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"     * @return Marker with initialised options"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"    private Marker getMarkerOptions(LatLong center) {"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"        MarkerOptions markOptions \u003d new MarkerOptions();"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"        markOptions.animation(Animation.DROP)"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"                .position(center)"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"                .visible(true);"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"        return new Marker(markOptions);"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":"     * Converts selected location {@code selectedLocation} to LatLng form"},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":"     * @return LatLong"},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":"    private LatLong getLatLong() {"},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"        Geocoding convertToLatLng \u003d new Geocoding();"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"        convertToLatLng.initialiseLatLngFromAddress(selectedLocation.toString());"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":"        return new LatLong(convertToLatLng.getLat(), convertToLatLng.getLong());"},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":97,"author":{"gitID":"Damienskt"},"content":"    public MapAddress getLocation() {"},{"lineNumber":98,"author":{"gitID":"Damienskt"},"content":"        return this.selectedLocation;"},{"lineNumber":99,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":15,"Damienskt":85}},{"path":"src/main/java/seedu/address/logic/commands/RemoveTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_PERSON;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.CELEBRITY_TAG;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":" * Removes a tag from every person who has it in the address book"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":" * and shows the number of people affected by the operation."},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"removeTag\";"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\";"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"            + \": Removes a tag from every person who has it in the list and shows the number of people affected \""},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"            + \"by this operation.\\n\""},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"            + \"Parameters: TAG (must be a non-empty string)\\n\""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_CANNOT_REMOVE_CELEBRITY_TAG \u003d \"Cannot remove celebrity tag.\";"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"The tag %1$s does not exist and thus cannot be removed.\";"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Removed tag %1$s and %2$s person(s) affected.\";"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    public final Tag tagToRemove;"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    public RemoveTagCommand(Tag tagToRemove) {"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(tagToRemove);"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        this.tagToRemove \u003d tagToRemove;"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(tagToRemove);"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        if (tagToRemove.equals(CELEBRITY_TAG)) {"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(MESSAGE_CANNOT_REMOVE_CELEBRITY_TAG);"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        int numberOfAffectedPersons \u003d 0;"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"            numberOfAffectedPersons \u003d model.removeTag(tagToRemove);"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagToRemove.toString()));"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format("},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"                MESSAGE_DELETE_TAG_SUCCESS,"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"                tagToRemove.toString(),"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"                numberOfAffectedPersons));"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"                || (other instanceof RemoveTagCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.tagToRemove.equals(((RemoveTagCommand) other).tagToRemove));"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":66,"-":5}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.StorageCalendarChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private StorageCalendarStorage storageCalendarStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                          UserPrefsStorage userPrefsStorage,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                          StorageCalendarStorage storageCalendarStorage) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.storageCalendarStorage \u003d storageCalendarStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"tzerbin"},"content":"    //@@author tzerbin"},{"lineNumber":103,"author":{"gitID":"tzerbin"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StorageCalendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":105,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"tzerbin"},"content":"    public String getStorageCalendarFilePath() {"},{"lineNumber":107,"author":{"gitID":"tzerbin"},"content":"        return storageCalendarStorage.getStorageCalendarFilePath();"},{"lineNumber":108,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":110,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"tzerbin"},"content":"    public Optional\u003cStorageCalendar\u003e readStorageCalendar() throws DataConversionException, IOException {"},{"lineNumber":112,"author":{"gitID":"tzerbin"},"content":"        return readStorageCalendar(storageCalendarStorage.getStorageCalendarFilePath());"},{"lineNumber":113,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":115,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"tzerbin"},"content":"    public Optional\u003cStorageCalendar\u003e readStorageCalendar(String filePath)"},{"lineNumber":117,"author":{"gitID":"tzerbin"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":118,"author":{"gitID":"tzerbin"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":119,"author":{"gitID":"tzerbin"},"content":"        return storageCalendarStorage.readStorageCalendar(filePath);"},{"lineNumber":120,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":122,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"tzerbin"},"content":"    public void saveStorageCalendar(StorageCalendar storageCalendar) throws IOException {"},{"lineNumber":124,"author":{"gitID":"tzerbin"},"content":"        saveStorageCalendar(storageCalendar, storageCalendarStorage.getStorageCalendarFilePath());"},{"lineNumber":125,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":127,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"tzerbin"},"content":"    public void saveStorageCalendar(StorageCalendar storageCalendar, String filePath) throws IOException {"},{"lineNumber":129,"author":{"gitID":"tzerbin"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":130,"author":{"gitID":"tzerbin"},"content":"        storageCalendarStorage.saveStorageCalendar(storageCalendar, filePath);"},{"lineNumber":131,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":133,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"tzerbin"},"content":"    @Subscribe"},{"lineNumber":135,"author":{"gitID":"tzerbin"},"content":"    public void handleStorageCalendarChangedEvent(StorageCalendarChangedEvent event) {"},{"lineNumber":136,"author":{"gitID":"tzerbin"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":137,"author":{"gitID":"tzerbin"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"tzerbin"},"content":"            saveStorageCalendar(event.data);"},{"lineNumber":139,"author":{"gitID":"tzerbin"},"content":"        } catch (IOException e) {"},{"lineNumber":140,"author":{"gitID":"tzerbin"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":141,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":42,"-":101}},{"path":"src/main/java/seedu/address/logic/commands/map/EstimateRouteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MAP_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MAP_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.maps.model.TravelMode;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionStatus;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsRequest;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsService;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsServiceCallback;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.TravelModes;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.DistanceEstimate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.Geocoding;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.map.Map;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":" * Estimates the distance and travel time required between two location"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"public class EstimateRouteCommand extends Command implements DirectionsServiceCallback {"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"    public static final String COMMAND_WORD \u003d \"estimateRoute\";"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    public static final String COMMAND_ALIAS \u003d \"er\";"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"            + \": Shows the estimated route in the Map and the distance and time required.\\n\""},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"            + \"Parameters: \""},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_START_MAP_ADDRESS + \"START LOCATION (Name of location or postal code) \""},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_END_MAP_ADDRESS + \"END LOCATION (Name of location or postal code)\\n\""},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_START_MAP_ADDRESS + \"Punggol Central \""},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_END_MAP_ADDRESS + \"NUS\\n\""},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_START_MAP_ADDRESS + \"820296 \""},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"            + PREFIX_END_MAP_ADDRESS + \"118420\";"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Route is being shown in Map, with start point at marker A\""},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"            + \" and end point at marker B!\\n\""},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"            + \"Mode of transport: DRIVING\\n\";"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"    private static DirectionsRequest directionRequest;"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"    private static MapAddress startLocation \u003d null;"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"    private static MapAddress endLocation \u003d null;"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"    private static String distOfTravel;"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"    private static String timeOfTravel;"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"    private final LatLng endLatLng;"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"    private final LatLng startLatLng;"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"    private DirectionsService directionService;"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"     * Initialises the different class attributes of EstimateRouteCommand"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"     * @param start"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"     * @param end"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"    public EstimateRouteCommand(MapAddress start, MapAddress end) {"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"        requireNonNull(start);"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"        requireNonNull(end);"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"        this.startLocation \u003d start;"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"        this.endLocation \u003d end;"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        this.startLatLng \u003d getLatLong(startLocation);"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        this.endLatLng \u003d getLatLong(endLocation);"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"        setDistAndTimeOfTravel();"},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"    public CommandResult execute() {"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"        directionService \u003d Map.getDirectionService();"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"        Map.removeExistingMarker();"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"        Map.clearRoute();"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":"        addRouteToMap();"},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"        return new CommandResult(MESSAGE_SUCCESS + getStringOfDistanceAndTime());"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":"    public void directionsReceived(DirectionsResult results, DirectionStatus status) {"},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"        status.equals(DirectionStatus.OK);"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":"                || (other instanceof EstimateRouteCommand // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":"                \u0026\u0026 this.startLatLng.toString().equals(((EstimateRouteCommand) other).startLatLng.toString())"},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"                \u0026\u0026 this.endLatLng.toString().equals(((EstimateRouteCommand) other).endLatLng.toString()));"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"Damienskt"},"content":"     * Update {@code MapPanel} to show new route"},{"lineNumber":97,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Damienskt"},"content":"    private void addRouteToMap() {"},{"lineNumber":99,"author":{"gitID":"Damienskt"},"content":"        directionRequest \u003d Map.getDirectionRequest();"},{"lineNumber":100,"author":{"gitID":"Damienskt"},"content":"        directionRequest \u003d new DirectionsRequest("},{"lineNumber":101,"author":{"gitID":"Damienskt"},"content":"                startLatLng.toString(),"},{"lineNumber":102,"author":{"gitID":"Damienskt"},"content":"                endLatLng.toString(),"},{"lineNumber":103,"author":{"gitID":"Damienskt"},"content":"                TravelModes.DRIVING);"},{"lineNumber":104,"author":{"gitID":"Damienskt"},"content":"        directionService.getRoute(directionRequest, this, Map.getDirectionRenderer());"},{"lineNumber":105,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":107,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Damienskt"},"content":"     * Calculates {@code distOfTravel} and {@code timeOfTravel}"},{"lineNumber":109,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Damienskt"},"content":"    private void setDistAndTimeOfTravel() {"},{"lineNumber":111,"author":{"gitID":"Damienskt"},"content":"        DistanceEstimate distEstimate \u003d new DistanceEstimate();"},{"lineNumber":112,"author":{"gitID":"Damienskt"},"content":"        distEstimate.calculateDistanceMatrix(startLatLng, endLatLng, TravelMode.DRIVING);"},{"lineNumber":113,"author":{"gitID":"Damienskt"},"content":"        distOfTravel \u003d distEstimate.getDistBetweenOriginDest();"},{"lineNumber":114,"author":{"gitID":"Damienskt"},"content":"        timeOfTravel \u003d distEstimate.getTravelTime();"},{"lineNumber":115,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":117,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"Damienskt"},"content":"     * Converts {@code address} into LatLng form"},{"lineNumber":119,"author":{"gitID":"Damienskt"},"content":"     * @return LatLng of address"},{"lineNumber":120,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Damienskt"},"content":"    private LatLng getLatLong(MapAddress address) {"},{"lineNumber":122,"author":{"gitID":"Damienskt"},"content":"        Geocoding convertToLatLng \u003d new Geocoding();"},{"lineNumber":123,"author":{"gitID":"Damienskt"},"content":"        convertToLatLng.initialiseLatLngFromAddress(address.toString());"},{"lineNumber":124,"author":{"gitID":"Damienskt"},"content":"        return convertToLatLng.getLatLng();"},{"lineNumber":125,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":127,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"Damienskt"},"content":"     * Retrieves information of {@code startLocation}, {@code endLocation}, {@code distOfTravel} and"},{"lineNumber":129,"author":{"gitID":"Damienskt"},"content":"     * {@code timeOfTravel}"},{"lineNumber":130,"author":{"gitID":"Damienskt"},"content":"     * which is then converted to string format to be shown to user"},{"lineNumber":131,"author":{"gitID":"Damienskt"},"content":"     * @return information of distance and time of travel"},{"lineNumber":132,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"Damienskt"},"content":"    public static String getStringOfDistanceAndTime() {"},{"lineNumber":134,"author":{"gitID":"Damienskt"},"content":"        return \"Start Location: \" + startLocation.toString() + \"\\n\""},{"lineNumber":135,"author":{"gitID":"Damienskt"},"content":"                + \"End Location: \" + endLocation.toString() + \"\\n\""},{"lineNumber":136,"author":{"gitID":"Damienskt"},"content":"                + \"Estimated Distance of travel: \" + distOfTravel + \"\\n\""},{"lineNumber":137,"author":{"gitID":"Damienskt"},"content":"                + \"Estimated Time of travel: \" + timeOfTravel;"},{"lineNumber":138,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":140,"author":{"gitID":"Damienskt"},"content":"    public static MapAddress getStartLocation() {"},{"lineNumber":141,"author":{"gitID":"Damienskt"},"content":"        return startLocation;"},{"lineNumber":142,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":144,"author":{"gitID":"Damienskt"},"content":"    public static MapAddress getEndLocation() {"},{"lineNumber":145,"author":{"gitID":"Damienskt"},"content":"        return endLocation;"},{"lineNumber":146,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":148,"author":{"gitID":"Damienskt"},"content":"    public static String getDistOfTravel() {"},{"lineNumber":149,"author":{"gitID":"Damienskt"},"content":"        return distOfTravel;"},{"lineNumber":150,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":152,"author":{"gitID":"Damienskt"},"content":"    public static String getTimeOfTravel() {"},{"lineNumber":153,"author":{"gitID":"Damienskt"},"content":"        return timeOfTravel;"},{"lineNumber":154,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":21,"Damienskt":134}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.model.ModelManager.CELEBRITY_TAG;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"            Person person \u003d p.toModelType();"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"            if (person.hasTag(CELEBRITY_TAG)) {"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"                Celebrity celebrity \u003d new Celebrity(person);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"                addressBook.addCelebrity(celebrity);"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"            } else {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                addressBook.addPerson(p.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":10,"-":73}},{"path":"src/main/java/seedu/address/storage/StorageCalendarStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":2,"author":{"gitID":"tzerbin"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":4,"author":{"gitID":"tzerbin"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"tzerbin"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":7,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":" * Represents a storage for {@link seedu.address.model.calendar.StorageCalendar}."},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":" */"},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":"public interface StorageCalendarStorage {"},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":"     *  Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":"    String getStorageCalendarFilePath();"},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":"     * Returns StorageCalendar data as a {@link StorageCalendar}."},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":"    Optional\u003cStorageCalendar\u003e readStorageCalendar() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":"     * @see #readStorageCalendar()"},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    Optional\u003cStorageCalendar\u003e readStorageCalendar(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":"     * Saves the given {@link StorageCalendar} to the storage."},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"     * @param storageCalendar cannot be null."},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":"    void saveStorageCalendar(StorageCalendar storageCalendar) throws IOException;"},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"     * @see #saveStorageCalendar(StorageCalendar)"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"    void saveStorageCalendar(StorageCalendar storageCalendar, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":44}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":" * Wraps all data required for an appointment, inheriting from a class of our calendar library"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":" * Each appointment also creates child entries for every celebrity associated with the appointment"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":" * and then attaches the entries to their respective calendars while keeping a reference to them"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":" * in an ArrayList of Entries. Appointments are stored in our StorageCalendar."},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"public class Appointment extends Entry {"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":"            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"            \"Time should be a 2 digit number between 00 to 23 followed by a :\""},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"            + \" followed by a 2 digit number beetween 00 to 59. Some examples include \""},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"            + \"08:45, 13:45, 00:30\";"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"            \"Date should be a 2 digit number between 01 to 31 followed by a -\""},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"            + \" followed by a 2 digit number between 01 to 12 followed by a -\""},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"            + \" followed by a 4 digit number describing a year. Some months might have less than 31 days.\""},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"            + \" Some examples include: 13-12-2018, 02-05-2019, 28-02-2018\";"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":"            .withResolverStyle(ResolverStyle.STRICT); // prevent incorrect dates"},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"    /*"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"    private static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"    // Minimum duration for an appointment is at least 1 minute"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"    private static final Duration minDuration \u003d Duration.ofMinutes(15);"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"    private final List\u003cEntry\u003e childEntryList;"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"    private final List\u003cCelebrity\u003e celebrityList;"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"    private final List\u003cLong\u003e celebrityIds;"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"    private final List\u003cPerson\u003e pointOfContactList;"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"    private final List\u003cLong\u003e pointOfContactIds;"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"    private MapAddress mapAddress;"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"    public Appointment(String title, LocalTime startTime, LocalDate startDate,"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"                       MapAddress mapAddress, LocalTime endTime, LocalDate endDate) {"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        super(requireNonNull(title));"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"        requireNonNull(startTime);"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"        requireNonNull(startDate);"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"        requireNonNull(endTime);"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"        requireNonNull(endDate);"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"        this.setMinimumDuration(minDuration);"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"        this.changeStartDate(startDate);"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"        this.changeEndDate(endDate);"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"        this.changeStartTime(startTime);"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"        this.changeEndTime(endTime);"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"        this.mapAddress \u003d mapAddress;"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"        if (mapAddress \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"            this.setLocation(null);"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":"            this.setLocation(mapAddress.toString());"},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"        this.childEntryList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        this.celebrityList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"        this.celebrityIds \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"        this.pointOfContactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"        this.pointOfContactIds \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"    public Appointment(Appointment appointment) {"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"        this.setTitle(appointment.getTitle());"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":"        this.changeStartDate(appointment.getStartDate());"},{"lineNumber":96,"author":{"gitID":"muruges95"},"content":"        this.changeEndDate(appointment.getEndDate());"},{"lineNumber":97,"author":{"gitID":"muruges95"},"content":"        this.changeStartTime(appointment.getStartTime());"},{"lineNumber":98,"author":{"gitID":"muruges95"},"content":"        this.changeEndTime(appointment.getEndTime());"},{"lineNumber":99,"author":{"gitID":"muruges95"},"content":"        this.mapAddress \u003d appointment.getMapAddress();"},{"lineNumber":100,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":101,"author":{"gitID":"muruges95"},"content":"        this.childEntryList \u003d appointment.getChildEntryList();"},{"lineNumber":102,"author":{"gitID":"muruges95"},"content":"        this.celebrityList \u003d appointment.getCelebrities();"},{"lineNumber":103,"author":{"gitID":"muruges95"},"content":"        this.celebrityIds \u003d appointment.getCelebIds();"},{"lineNumber":104,"author":{"gitID":"muruges95"},"content":"        this.pointOfContactList \u003d appointment.getPointOfContactList();"},{"lineNumber":105,"author":{"gitID":"muruges95"},"content":"        this.pointOfContactIds \u003d appointment.getPointOfContactIds();"},{"lineNumber":106,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":108,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"muruges95"},"content":"     * Checks if the start date/time is NOT at least 15 min before end date/time"},{"lineNumber":110,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"muruges95"},"content":"    public static boolean isDateTimeNotValid(LocalDate startDate, LocalDate endDate, LocalTime startTime,"},{"lineNumber":112,"author":{"gitID":"muruges95"},"content":"                                             LocalTime endTime) {"},{"lineNumber":113,"author":{"gitID":"muruges95"},"content":"        LocalDateTime sdt \u003d LocalDateTime.of(startDate, startTime);"},{"lineNumber":114,"author":{"gitID":"muruges95"},"content":"        LocalDateTime edt \u003d LocalDateTime.of(endDate, endTime);"},{"lineNumber":115,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":116,"author":{"gitID":"muruges95"},"content":"        return edt.isBefore(sdt.plusMinutes(15));"},{"lineNumber":117,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":119,"author":{"gitID":"muruges95"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":120,"author":{"gitID":"muruges95"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":121,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"    public void setCelebIds(List\u003cLong\u003e ids) {"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":"        celebrityIds.clear();"},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"        celebrityIds.addAll(ids);"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":"    public List\u003cLong\u003e getCelebIds() {"},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"        return celebrityIds;"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"    public List\u003cPerson\u003e getPointOfContactList() {"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":"        return pointOfContactList;"},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":"    public List\u003cLong\u003e getPointOfContactIds() {"},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":"        return pointOfContactIds;"},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":"    public void setPointOfContactIds(List\u003cLong\u003e ids) {"},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":"        pointOfContactIds.clear();"},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"        pointOfContactIds.addAll(ids);"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":"    public boolean equals (Object other) {"},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":"            return true;"},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":151,"author":{"gitID":"muruges95"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":152,"author":{"gitID":"muruges95"},"content":"            return false;"},{"lineNumber":153,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":155,"author":{"gitID":"muruges95"},"content":"        Appointment otherAppt \u003d (Appointment) other;"},{"lineNumber":156,"author":{"gitID":"muruges95"},"content":"        return Objects.equals(otherAppt.getTitle(), this.getTitle())"},{"lineNumber":157,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 Objects.equals(otherAppt.getMapAddress(), this.getMapAddress())"},{"lineNumber":158,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 (otherAppt.getStartTime().getHour() \u003d\u003d this.getStartTime().getHour())"},{"lineNumber":159,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 (otherAppt.getStartTime().getMinute() \u003d\u003d this.getStartTime().getMinute())"},{"lineNumber":160,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 Objects.equals(otherAppt.getStartDate(), this.getStartDate())"},{"lineNumber":161,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 (otherAppt.getEndTime().getHour() \u003d\u003d this.getEndTime().getHour())"},{"lineNumber":162,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 (otherAppt.getEndTime().getMinute() \u003d\u003d this.getEndTime().getMinute())"},{"lineNumber":163,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 Objects.equals(otherAppt.getEndDate(), this.getEndDate());"},{"lineNumber":164,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":166,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"muruges95"},"content":"    public int hashCode() {"},{"lineNumber":168,"author":{"gitID":"muruges95"},"content":"        return Objects.hash(getTitle(), getMapAddress(), getStartTime().getHour(), getEndTime().getHour(),"},{"lineNumber":169,"author":{"gitID":"muruges95"},"content":"                getStartDate(), getEndDate(), getStartTime().getMinute(), getEndTime().getMinute());"},{"lineNumber":170,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":172,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"muruges95"},"content":"     * Resets the stores celebrities and points of contacts, along with their associated"},{"lineNumber":174,"author":{"gitID":"muruges95"},"content":"     * information stored in the Appointment object"},{"lineNumber":175,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"muruges95"},"content":"    public void updateEntries(List\u003cCelebrity\u003e celebrities, List\u003cPerson\u003e pointsOfContact) {"},{"lineNumber":177,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":178,"author":{"gitID":"muruges95"},"content":"        updateCelebEntries(celebrities);"},{"lineNumber":179,"author":{"gitID":"muruges95"},"content":"        updatePointsOfContacts(pointsOfContact);"},{"lineNumber":180,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":182,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"muruges95"},"content":"     * Removes old child entries and creates a new child entry for every celebrity"},{"lineNumber":184,"author":{"gitID":"muruges95"},"content":"     * and then stores it in childEntryList. Also stores the id of each celeb and the"},{"lineNumber":185,"author":{"gitID":"muruges95"},"content":"     * celebrities themselves"},{"lineNumber":186,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"muruges95"},"content":"    private void updateCelebEntries(List\u003cCelebrity\u003e celebrities) {"},{"lineNumber":188,"author":{"gitID":"muruges95"},"content":"        clearChildEntries();"},{"lineNumber":189,"author":{"gitID":"muruges95"},"content":"        celebrityList.clear();"},{"lineNumber":190,"author":{"gitID":"muruges95"},"content":"        childEntryList.clear();"},{"lineNumber":191,"author":{"gitID":"muruges95"},"content":"        celebrityIds.clear();"},{"lineNumber":192,"author":{"gitID":"muruges95"},"content":"        for (Celebrity celebrity : celebrities) {"},{"lineNumber":193,"author":{"gitID":"muruges95"},"content":"            childEntryList.add(createChildEntry(celebrity));"},{"lineNumber":194,"author":{"gitID":"muruges95"},"content":"            celebrityIds.add(celebrity.getId());"},{"lineNumber":195,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"muruges95"},"content":"        celebrityList.addAll(celebrities);"},{"lineNumber":197,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":199,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"muruges95"},"content":"     * Update points of contact list stored and their ids."},{"lineNumber":201,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"muruges95"},"content":"    private void updatePointsOfContacts(List\u003cPerson\u003e pointsOfContact) {"},{"lineNumber":203,"author":{"gitID":"muruges95"},"content":"        pointOfContactList.clear();"},{"lineNumber":204,"author":{"gitID":"muruges95"},"content":"        pointOfContactIds.clear();"},{"lineNumber":205,"author":{"gitID":"muruges95"},"content":"        for (Person p : pointsOfContact) {"},{"lineNumber":206,"author":{"gitID":"muruges95"},"content":"            pointOfContactIds.add(p.getId());"},{"lineNumber":207,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"muruges95"},"content":"        pointOfContactList.addAll(pointsOfContact);"},{"lineNumber":209,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":211,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"muruges95"},"content":"     * Returns the current list of Celebrities attending this appointment"},{"lineNumber":213,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"muruges95"},"content":"    public List\u003cCelebrity\u003e getCelebrities() {"},{"lineNumber":215,"author":{"gitID":"muruges95"},"content":"        return celebrityList;"},{"lineNumber":216,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":218,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"muruges95"},"content":"     * Sets old child entries to the new entries."},{"lineNumber":220,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"muruges95"},"content":"    public void setChildEntries(List\u003cEntry\u003e newChildEntryList) {"},{"lineNumber":222,"author":{"gitID":"muruges95"},"content":"        childEntryList.clear();"},{"lineNumber":223,"author":{"gitID":"muruges95"},"content":"        childEntryList.addAll(newChildEntryList);"},{"lineNumber":224,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":226,"author":{"gitID":"muruges95"},"content":"    public List\u003cEntry\u003e getChildEntryList() {"},{"lineNumber":227,"author":{"gitID":"muruges95"},"content":"        return childEntryList;"},{"lineNumber":228,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":230,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"muruges95"},"content":"     * Removes all child entries and then removes the appointment itself from"},{"lineNumber":232,"author":{"gitID":"muruges95"},"content":"     * the StorageCalendar."},{"lineNumber":233,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"muruges95"},"content":"    public void removeAppointment() {"},{"lineNumber":235,"author":{"gitID":"muruges95"},"content":"        clearChildEntries();"},{"lineNumber":236,"author":{"gitID":"muruges95"},"content":"        this.setCalendar(null);"},{"lineNumber":237,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":239,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"muruges95"},"content":"     * Creates new childEntry for a given celebrity and sets the entry to point"},{"lineNumber":241,"author":{"gitID":"muruges95"},"content":"     * to the celebrity\u0027s calendar."},{"lineNumber":242,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"muruges95"},"content":"    private Entry createChildEntry(Celebrity celebrity) {"},{"lineNumber":244,"author":{"gitID":"muruges95"},"content":"        Entry childEntry \u003d new Entry(this.getTitle());"},{"lineNumber":245,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":246,"author":{"gitID":"muruges95"},"content":"        childEntry.setMinimumDuration(minDuration);"},{"lineNumber":247,"author":{"gitID":"muruges95"},"content":"        childEntry.changeStartTime(this.getStartTime());"},{"lineNumber":248,"author":{"gitID":"muruges95"},"content":"        childEntry.changeEndTime(this.getEndTime());"},{"lineNumber":249,"author":{"gitID":"muruges95"},"content":"        childEntry.changeStartDate(this.getStartDate());"},{"lineNumber":250,"author":{"gitID":"muruges95"},"content":"        childEntry.changeEndDate(this.getEndDate());"},{"lineNumber":251,"author":{"gitID":"muruges95"},"content":"        childEntry.setLocation(this.getLocation());"},{"lineNumber":252,"author":{"gitID":"muruges95"},"content":"        childEntry.setCalendar(celebrity.getCelebCalendar());"},{"lineNumber":253,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":254,"author":{"gitID":"muruges95"},"content":"        return childEntry;"},{"lineNumber":255,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":257,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"muruges95"},"content":"     * Remove all existing child entries"},{"lineNumber":259,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"muruges95"},"content":"    private void clearChildEntries() {"},{"lineNumber":261,"author":{"gitID":"muruges95"},"content":"        for (Entry e : childEntryList) {"},{"lineNumber":262,"author":{"gitID":"muruges95"},"content":"            // removed entries from the calendars"},{"lineNumber":263,"author":{"gitID":"muruges95"},"content":"            e.setCalendar(null);"},{"lineNumber":264,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":267,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"muruges95"},"content":"     * Returns the MapAddress of the Appointment."},{"lineNumber":269,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"muruges95"},"content":"    public MapAddress getMapAddress() {"},{"lineNumber":271,"author":{"gitID":"muruges95"},"content":"        return mapAddress;"},{"lineNumber":272,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":274,"author":{"gitID":"Damienskt"},"content":"    //@@author Damienskt"},{"lineNumber":275,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"Damienskt"},"content":"     * Returns list of celebrities attending the appointment in string format."},{"lineNumber":277,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"Damienskt"},"content":"    public String getCelebritiesAttending () {"},{"lineNumber":279,"author":{"gitID":"Damienskt"},"content":"        if (celebrityList.size() \u003d\u003d 0) {"},{"lineNumber":280,"author":{"gitID":"Damienskt"},"content":"            return \"No celebrities attending\";"},{"lineNumber":281,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"Damienskt"},"content":"        String celebritiesAttending \u003d new String(celebrityList.get(0).getName().toString());"},{"lineNumber":283,"author":{"gitID":"Damienskt"},"content":"        for (int i \u003d 1; i \u003c celebrityList.size(); i++) {"},{"lineNumber":284,"author":{"gitID":"Damienskt"},"content":"            celebritiesAttending \u003d celebritiesAttending + \", \" + celebrityList.get(i).getName().toString();"},{"lineNumber":285,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"Damienskt"},"content":"        return celebritiesAttending;"},{"lineNumber":287,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":289,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"Damienskt"},"content":"     * Returns list of points of contact for the appointment in string format."},{"lineNumber":291,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"Damienskt"},"content":"    public String getPointsOfContact () {"},{"lineNumber":293,"author":{"gitID":"Damienskt"},"content":"        if (pointOfContactList.size() \u003d\u003d 0) {"},{"lineNumber":294,"author":{"gitID":"Damienskt"},"content":"            return \"No point of contact\";"},{"lineNumber":295,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"Damienskt"},"content":"        String pointOfContacts \u003d new String(pointOfContactList.get(0).getName().toString());"},{"lineNumber":297,"author":{"gitID":"Damienskt"},"content":"        for (int i \u003d 1; i \u003c pointOfContactList.size(); i++) {"},{"lineNumber":298,"author":{"gitID":"Damienskt"},"content":"            pointOfContacts \u003d pointOfContacts + \", \" + pointOfContactList.get(i).getName().toString();"},{"lineNumber":299,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"Damienskt"},"content":"        return pointOfContacts;"},{"lineNumber":301,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"muruges95":253,"WJY-norainu":1,"-":19,"Damienskt":29}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":" * Signals that the operation is unable to find the specified appointment."},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"public class AppointmentNotFoundException extends Exception {}"}],"authorContributionMap":{"WJY-norainu":6}},{"path":"src/main/java/seedu/address/model/calendar/CelebCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":6,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"muruges95"},"content":" * Stores the entries for a single celebrity"},{"lineNumber":8,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":9,"author":{"gitID":"muruges95"},"content":"public class CelebCalendar extends Calendar {"},{"lineNumber":10,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":"    public CelebCalendar(String name) {"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":"        super(name);"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":11,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlSerializableStorageCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":2,"author":{"gitID":"tzerbin"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":4,"author":{"gitID":"tzerbin"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"tzerbin"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":7,"author":{"gitID":"tzerbin"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"tzerbin"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":" * An Immutable StorageCalendar that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":" */"},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":"@XmlRootElement(name \u003d \"storagecalendar\")"},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":"public class XmlSerializableStorageCalendar {"},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":"     * Creates an empty XMLSerializableStorageCalendar."},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":"    public XmlSerializableStorageCalendar() {"},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    public XmlSerializableStorageCalendar(StorageCalendar storageCalendar) {"},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":"        this();"},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"        if (storageCalendar !\u003d null) {"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":"            List\u003cAppointment\u003e appointmentList \u003d storageCalendar.getAllAppointments();"},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"            for (Appointment appt : appointmentList) {"},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"                appointments.add(new XmlAdaptedAppointment(appt));"},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"     * Converts XMLAdapterAppointments into a {@code StorageCalendar} object."},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"     * {@code XmlAdaptedAppointments}."},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":"    public StorageCalendar toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"tzerbin"},"content":"        StorageCalendar calendar \u003d new StorageCalendar();"},{"lineNumber":49,"author":{"gitID":"tzerbin"},"content":"        for (XmlAdaptedAppointment a : appointments) {"},{"lineNumber":50,"author":{"gitID":"tzerbin"},"content":"            calendar.addAppointment(a.toModelType());"},{"lineNumber":51,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"tzerbin"},"content":"        return calendar;"},{"lineNumber":53,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":55,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"tzerbin"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"tzerbin"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitID":"tzerbin"},"content":"            return true;"},{"lineNumber":59,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":61,"author":{"gitID":"tzerbin"},"content":"        if (!(other instanceof XmlSerializableStorageCalendar)) {"},{"lineNumber":62,"author":{"gitID":"tzerbin"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":65,"author":{"gitID":"tzerbin"},"content":"        XmlSerializableStorageCalendar otherAl \u003d (XmlSerializableStorageCalendar) other;"},{"lineNumber":66,"author":{"gitID":"tzerbin"},"content":"        return appointments.equals(otherAl.appointments);"},{"lineNumber":67,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":68}},{"path":"src/main/java/seedu/address/storage/XmlStorageCalendarStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"tzerbin"},"content":"//@@author tzerbin"},{"lineNumber":2,"author":{"gitID":"tzerbin"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":4,"author":{"gitID":"tzerbin"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":6,"author":{"gitID":"tzerbin"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"tzerbin"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"tzerbin"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"tzerbin"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"tzerbin"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":12,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"tzerbin"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"tzerbin"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":17,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":18,"author":{"gitID":"tzerbin"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"tzerbin"},"content":" * A class to access StorageCalendar data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"tzerbin"},"content":" */"},{"lineNumber":21,"author":{"gitID":"tzerbin"},"content":"public class XmlStorageCalendarStorage implements StorageCalendarStorage {"},{"lineNumber":22,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":23,"author":{"gitID":"tzerbin"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlStorageCalendarStorage.class);"},{"lineNumber":24,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":25,"author":{"gitID":"tzerbin"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":27,"author":{"gitID":"tzerbin"},"content":"    public XmlStorageCalendarStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"tzerbin"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":31,"author":{"gitID":"tzerbin"},"content":"    public String getStorageCalendarFilePath() {"},{"lineNumber":32,"author":{"gitID":"tzerbin"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":35,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"tzerbin"},"content":"    public Optional\u003cStorageCalendar\u003e readStorageCalendar() throws FileNotFoundException, DataConversionException {"},{"lineNumber":37,"author":{"gitID":"tzerbin"},"content":"        return readStorageCalendar(filePath);"},{"lineNumber":38,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":40,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"tzerbin"},"content":"     * Similar to {@link #readStorageCalendar()}"},{"lineNumber":42,"author":{"gitID":"tzerbin"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"tzerbin"},"content":"    public Optional\u003cStorageCalendar\u003e readStorageCalendar(String filePath)"},{"lineNumber":45,"author":{"gitID":"tzerbin"},"content":"            throws FileNotFoundException, DataConversionException {"},{"lineNumber":46,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":47,"author":{"gitID":"tzerbin"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"tzerbin"},"content":"        File storageCalendarFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":50,"author":{"gitID":"tzerbin"},"content":"        if (!storageCalendarFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"tzerbin"},"content":"            logger.info(\"StorageCalendar file \"  + storageCalendarFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"tzerbin"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":55,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":56,"author":{"gitID":"tzerbin"},"content":"        XmlSerializableStorageCalendar xmlStorageCalendar \u003d XmlFileStorage"},{"lineNumber":57,"author":{"gitID":"tzerbin"},"content":"                .loadStorageCalendarFromSaveFile(new File(filePath));"},{"lineNumber":58,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":59,"author":{"gitID":"tzerbin"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"tzerbin"},"content":"            return Optional.of(xmlStorageCalendar.toModelType());"},{"lineNumber":61,"author":{"gitID":"tzerbin"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"tzerbin"},"content":"            logger.info(\"Illegal values found in \" + storageCalendarFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"tzerbin"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"tzerbin"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":67,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"tzerbin"},"content":"    public void saveStorageCalendar(StorageCalendar storageCalendar) throws IOException {"},{"lineNumber":69,"author":{"gitID":"tzerbin"},"content":"        saveStorageCalendar(storageCalendar, filePath);"},{"lineNumber":70,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":72,"author":{"gitID":"tzerbin"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"tzerbin"},"content":"     * Similar to {@link #saveStorageCalendar(StorageCalendar)}"},{"lineNumber":74,"author":{"gitID":"tzerbin"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":75,"author":{"gitID":"tzerbin"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"tzerbin"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"tzerbin"},"content":"    public void saveStorageCalendar(StorageCalendar storageCalendar, String filePath) throws IOException {"},{"lineNumber":78,"author":{"gitID":"tzerbin"},"content":"        requireNonNull(storageCalendar);"},{"lineNumber":79,"author":{"gitID":"tzerbin"},"content":"        requireNonNull(filePath);"},{"lineNumber":80,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":81,"author":{"gitID":"tzerbin"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":82,"author":{"gitID":"tzerbin"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":83,"author":{"gitID":"tzerbin"},"content":"        XmlFileStorage.saveStorageCalendarToFile(file, new XmlSerializableStorageCalendar(storageCalendar));"},{"lineNumber":84,"author":{"gitID":"tzerbin"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"tzerbin"},"content":""},{"lineNumber":86,"author":{"gitID":"tzerbin"},"content":"}"}],"authorContributionMap":{"tzerbin":86}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.concurrent.atomic.AtomicLong;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final AtomicLong NEXT_ID \u003d new AtomicLong(0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final long id;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.id \u003d NEXT_ID.getAndIncrement();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * For use when creating a new person from an old person. id will be copied over."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, long id) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.id \u003d id;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        NEXT_ID.set(id + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"     * Returns {@code true} if the {@code person} has the specified {@code tag},"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"     * else false."},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"    public boolean hasTag(Tag targetTag) {"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e newTags \u003d tags.toSet();"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        for (Tag tag: newTags) {"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"            if (tag.equals(targetTag)) {"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"                return true;"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        return false;"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /** Returns person\u0027s id */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public long getId() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return id;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"     * Returns {@code true} if the person is tagged as a celebrity"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean isCelebrity() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Tag celeb \u003d new Tag(\"celebrity\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return this.hasTag(celeb);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":15,"-":131}},{"path":"src/main/java/seedu/address/model/calendar/StorageCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.SortedSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.TreeSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":" * Stores the list of all the celebrity appointments"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"public class StorageCalendar extends Calendar {"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"    private static String storageCalendarName \u003d \"Storage Calendar\";"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"    public StorageCalendar() {"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"        super(storageCalendarName);"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"    public StorageCalendar(StorageCalendar cal) {"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"        super(storageCalendarName);"},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"        for (Appointment a : cal.getAllAppointments()) {"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"            this.addEntry(new Appointment(a));"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"    public boolean hasAtLeastOneAppointment() {"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"        return this.getEarliestTimeUsed() !\u003d null;"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"    public LocalDate getEarliestDate() {"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"        return LocalDateTime.ofInstant(this.getEarliestTimeUsed(), ZoneId.systemDefault()).toLocalDate();"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"    public LocalDate getLatestDate() {"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":"        return LocalDateTime.ofInstant(this.getLatestTimeUsed(), ZoneId.systemDefault()).toLocalDate();"},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"    public List\u003cAppointment\u003e getAllAppointments() {"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":"        LocalDate startDate;"},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"        LocalDate endDate;"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"        // handle the case when no entries in calendar"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"            startDate \u003d getEarliestDate();"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"            endDate \u003d getLatestDate();"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"        return getAppointmentsWithinDate(startDate, endDate);"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"    public List\u003cAppointment\u003e getAppointmentsWithinDate(LocalDate startDate, LocalDate endDate) {"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":"        List\u003cAppointment\u003e appointmentsWithinDate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"        Map\u003cLocalDate, List\u003cEntry\u003c?\u003e\u003e\u003e dateListMap \u003d this.findEntries(startDate, endDate, ZoneId.systemDefault());"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        SortedSet\u003cLocalDate\u003e sortedKeySet \u003d new TreeSet\u003c\u003e(dateListMap.keySet());"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":"        Set\u003cAppointment\u003e storedAppointments \u003d new HashSet\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"        for (LocalDate date : sortedKeySet) {"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"            for (Entry e : dateListMap.get(date)) {"},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"                Appointment currentAppt \u003d (Appointment) e;"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"                // because same entry might show up on different dates"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"                if (!storedAppointments.contains(currentAppt)) {"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"                    appointmentsWithinDate.add(currentAppt);"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":"                    storedAppointments.add(currentAppt);"},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"                }"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":"        return appointmentsWithinDate;"},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"     * Checks if appointment already exists in the model, and if it doesnt adds it to the calendar"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":"    public void addAppointment(Appointment appt) throws DuplicateAppointmentException {"},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"        if (getAllAppointments().contains(appt)) {"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"        this.addEntry(appt);"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":75,"WJY-norainu":1,"-":18}},{"path":"src/main/java/seedu/address/model/person/Celebrity.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Random;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":10,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":" *  Child class of Person for those who are tagged celebrities"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":"public class Celebrity extends Person {"},{"lineNumber":14,"author":{"gitID":"muruges95"},"content":"    // for creation of different style for each celebrity calendar to differentiate"},{"lineNumber":15,"author":{"gitID":"muruges95"},"content":"    private static final Random random \u003d new Random();"},{"lineNumber":16,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":17,"author":{"gitID":"muruges95"},"content":"    private CelebCalendar celebCalendar;"},{"lineNumber":18,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":19,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"muruges95"},"content":"     * Every field must be present and not null."},{"lineNumber":21,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"muruges95"},"content":"    public Celebrity(Person celeb) {"},{"lineNumber":23,"author":{"gitID":"muruges95"},"content":"        super(celeb.getName(), celeb.getPhone(), celeb.getEmail(), celeb.getAddress(), celeb.getTags(), celeb.getId());"},{"lineNumber":24,"author":{"gitID":"muruges95"},"content":"        celebCalendar \u003d new CelebCalendar(this.getName().fullName);"},{"lineNumber":25,"author":{"gitID":"muruges95"},"content":"        celebCalendar.setStyle(Calendar.Style.getStyle(random.nextInt(7)));"},{"lineNumber":26,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":28,"author":{"gitID":"muruges95"},"content":"    public CelebCalendar getCelebCalendar() {"},{"lineNumber":29,"author":{"gitID":"muruges95"},"content":"        return celebCalendar;"},{"lineNumber":30,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":32,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"muruges95"},"content":"     * Sets the celebCalendar to another one."},{"lineNumber":34,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"muruges95"},"content":"    public void setCelebCalendar(CelebCalendar newCelebCalendar) {"},{"lineNumber":36,"author":{"gitID":"muruges95"},"content":"        this.celebCalendar \u003d newCelebCalendar;"},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":"     * Returns if input celeb is a copy of this celebrity"},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"    public boolean isCopyOf(Celebrity celeb) {"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"        return super.equals(celeb);"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":37,"-":8}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.EditCommand.createEditedPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final ArrayList\u003cCelebrity\u003e celebrities;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        celebrities \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"        savePreviousAddressBookData(toBeCopied);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setCelebrities(List\u003cCelebrity\u003e celebrities) throws DuplicatePersonException {"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        this.celebrities.clear();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.celebrities.addAll(celebrities);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"     * Saves the newData of {@code AddressBook} in an empty {@code AddressBook}."},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"    public void savePreviousAddressBookData(ReadOnlyAddressBook newData) {"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(newData);"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"                .collect(Collectors.toList());"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cCelebrity\u003e filteredCelebrityList \u003d filterCelebrities(syncedPersonList);"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        // make celebrity\u0027s celeb calendar point to the copy of original ones"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cCelebrity\u003e syncedCelebrityList \u003d syncCelebCalendar(filteredCelebrityList, newData.getCelebritiesList());"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"            setCelebrities(syncedCelebrityList);"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"     * Used when user undo/redo"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(newData);"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"                .collect(Collectors.toList());"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cCelebrity\u003e filteredCelebrityList \u003d filterCelebrities(syncedPersonList);"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"        // make celebrity\u0027s celeb calendar point to the copy of original ones"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        List\u003cCelebrity\u003e syncedCelebrityList \u003d syncCelebCalendar(filteredCelebrityList, newData.getCelebritiesList());"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"        if (isUndoingRemovalOfCelebrity(getCelebritiesList(), syncedCelebrityList)) {"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"            Celebrity copiedCelebrityForRemovedCelebrity \u003d"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"                    findCelebrityRemoved(getCelebritiesList(), syncedCelebrityList);"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":"            copiedCelebrityForRemovedCelebrity"},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"                    .setCelebCalendar(new CelebCalendar(copiedCelebrityForRemovedCelebrity.getName().fullName));"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":"            setCelebrities(syncedCelebrityList);"},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"     * Returns true if the user is undoing removal of a celebrity"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":"     * @return true or false"},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"    private boolean isUndoingRemovalOfCelebrity("},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"            List\u003cCelebrity\u003e currentCelebrities, List\u003cCelebrity\u003e previousCelebrities) {"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"        return currentCelebrities.size() \u003c previousCelebrities.size();"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"     * Returns the copiedCelebrity of {@code Celebrity} removed in previous command"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"     * @return copiedCelebrity"},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"    private Celebrity findCelebrityRemoved("},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":"            List\u003cCelebrity\u003e currentCelebrities, List\u003cCelebrity\u003e previousCelebrities) {"},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":"        for (Celebrity copiedCelebrity: previousCelebrities) {"},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":"            boolean inCurrentCelebrities \u003d false;"},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"            for (Celebrity celebrity: currentCelebrities) {"},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":"                if (copiedCelebrity.isCopyOf(celebrity)) {"},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"                    inCurrentCelebrities \u003d true;"},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":"            // this is the celebrity removed, set its celeb calendar to be new empty"},{"lineNumber":150,"author":{"gitID":"WJY-norainu"},"content":"            if (!inCurrentCelebrities) {"},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":"                return copiedCelebrity;"},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":"        return null;"},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":157,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"WJY-norainu"},"content":"     * Counts the number of {@code person}s with a given {@code tag}"},{"lineNumber":159,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"WJY-norainu"},"content":"    public int countPersonsWithTag(Tag tag) {"},{"lineNumber":161,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d 0;"},{"lineNumber":162,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":163,"author":{"gitID":"WJY-norainu"},"content":"            if (person.hasTag(tag)) {"},{"lineNumber":164,"author":{"gitID":"WJY-norainu"},"content":"                count++;"},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":166,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"WJY-norainu"},"content":"        return count;"},{"lineNumber":168,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":170,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"WJY-norainu"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":172,"author":{"gitID":"WJY-norainu"},"content":"     * @return the number of {@code person}s with this {@code tag} removed."},{"lineNumber":173,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException, TagNotFoundException {"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":"        boolean tagExists \u003d false;"},{"lineNumber":176,"author":{"gitID":"WJY-norainu"},"content":"        for (Tag existingTag: tags) {"},{"lineNumber":177,"author":{"gitID":"WJY-norainu"},"content":"            if (existingTag.equals(tag)) {"},{"lineNumber":178,"author":{"gitID":"WJY-norainu"},"content":"                tagExists \u003d true;"},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":"        if (!tagExists) {"},{"lineNumber":182,"author":{"gitID":"WJY-norainu"},"content":"            throw new TagNotFoundException();"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":185,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d 0;"},{"lineNumber":186,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":187,"author":{"gitID":"WJY-norainu"},"content":"            if (person.hasTag(tag)) {"},{"lineNumber":188,"author":{"gitID":"WJY-norainu"},"content":"                //get the new tag set with the specified tag removed"},{"lineNumber":189,"author":{"gitID":"WJY-norainu"},"content":"                Set\u003cTag\u003e oldTags \u003d person.getTags();"},{"lineNumber":190,"author":{"gitID":"WJY-norainu"},"content":"                Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"WJY-norainu"},"content":"                for (Tag tagToKeep: oldTags) {"},{"lineNumber":192,"author":{"gitID":"WJY-norainu"},"content":"                    if (tagToKeep.equals(tag)) {"},{"lineNumber":193,"author":{"gitID":"WJY-norainu"},"content":"                        continue;"},{"lineNumber":194,"author":{"gitID":"WJY-norainu"},"content":"                    }"},{"lineNumber":195,"author":{"gitID":"WJY-norainu"},"content":"                    newTags.add(tagToKeep);"},{"lineNumber":196,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":197,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":"                //create a new person with the specified tag removed to replace the person"},{"lineNumber":199,"author":{"gitID":"WJY-norainu"},"content":"                EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":200,"author":{"gitID":"WJY-norainu"},"content":"                editPersonDescriptor.setTags(newTags);"},{"lineNumber":201,"author":{"gitID":"WJY-norainu"},"content":"                Person editedPerson \u003d createEditedPerson(person, editPersonDescriptor);"},{"lineNumber":202,"author":{"gitID":"WJY-norainu"},"content":"                Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":203,"author":{"gitID":"WJY-norainu"},"content":"                persons.setPerson(person, syncedEditedPerson);"},{"lineNumber":204,"author":{"gitID":"WJY-norainu"},"content":"                removeUnusedTags();"},{"lineNumber":205,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":206,"author":{"gitID":"WJY-norainu"},"content":"                count++;"},{"lineNumber":207,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"WJY-norainu"},"content":"        return count;"},{"lineNumber":210,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":212,"author":{"gitID":"WJY-norainu"},"content":"    //// person-level operations"},{"lineNumber":213,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":214,"author":{"gitID":"WJY-norainu"},"content":"    //@@author"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":227,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Adds a copy of the given celebrity and returns it."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public Celebrity addCelebrity(Person person) throws DuplicatePersonException {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        Celebrity celebrity \u003d (Celebrity) syncWithMasterTagList(person);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        persons.add(celebrity);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        celebrities.add(celebrity);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        return celebrity;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":258,"author":{"gitID":"-"},"content":"        if (target.isCelebrity()) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            celebrities.remove(target);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        if (syncedEditedPerson.isCelebrity()) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            celebrities.add((Celebrity) syncedEditedPerson);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"WJY-norainu"},"content":"        removeUnusedTags();"},{"lineNumber":266,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Filters through a list of persons and returns those with a celebrity tag"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    private ArrayList\u003cCelebrity\u003e filterCelebrities(List\u003cPerson\u003e persons) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        ArrayList\u003cCelebrity\u003e celebrities \u003d new ArrayList\u003c\u003e();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        for (Person p : persons) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            if (p.isCelebrity()) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                celebrities.add((Celebrity) p);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        return celebrities;"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"WJY-norainu"},"content":"     * Removes all {@code tag}s that are not used by any {@code person} in this {@code AddressBook}."},{"lineNumber":283,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"WJY-norainu"},"content":"    private void removeUnusedTags() {"},{"lineNumber":285,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e usedTags \u003d getUsedTags();"},{"lineNumber":286,"author":{"gitID":"WJY-norainu"},"content":"        tags.setTags(usedTags);"},{"lineNumber":287,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":289,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"WJY-norainu"},"content":"     * @return a set of {@code tag}s that are used at least by one {@code person} in the person list."},{"lineNumber":291,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"WJY-norainu"},"content":"    private Set\u003cTag\u003e getUsedTags() {"},{"lineNumber":293,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e usedTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":294,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":295,"author":{"gitID":"WJY-norainu"},"content":"            Set\u003cTag\u003e tagsOfThisPerson \u003d person.getTags();"},{"lineNumber":296,"author":{"gitID":"WJY-norainu"},"content":"            for (Tag tag: tagsOfThisPerson) {"},{"lineNumber":297,"author":{"gitID":"WJY-norainu"},"content":"                if (!usedTags.contains(tag)) {"},{"lineNumber":298,"author":{"gitID":"WJY-norainu"},"content":"                    usedTags.add(tag);"},{"lineNumber":299,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":300,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":301,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"WJY-norainu"},"content":"        return usedTags;"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":307,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":309,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":320,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        Person updatedPerson \u003d new Person("},{"lineNumber":323,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":324,"author":{"gitID":"-"},"content":"                person.getAddress(), correctTagReferences, person.getId());"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"        if (updatedPerson.isCelebrity()) {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"            updatedPerson \u003d new Celebrity(updatedPerson);"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        return updatedPerson;"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":333,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"WJY-norainu"},"content":"     * Change pointers to celebCalendar of copied celebrity to the original celebCalendar"},{"lineNumber":335,"author":{"gitID":"WJY-norainu"},"content":"     * @return modified celebrities"},{"lineNumber":336,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"WJY-norainu"},"content":"    private List\u003cCelebrity\u003e syncCelebCalendar(List\u003cCelebrity\u003e celebrities, List\u003cCelebrity\u003e previousCelebrities) {"},{"lineNumber":338,"author":{"gitID":"WJY-norainu"},"content":"        for (Celebrity celebrity: celebrities) {"},{"lineNumber":339,"author":{"gitID":"WJY-norainu"},"content":"            for (Celebrity previousCelebrity: previousCelebrities) {"},{"lineNumber":340,"author":{"gitID":"WJY-norainu"},"content":"                if (celebrity.isCopyOf(previousCelebrity)) {"},{"lineNumber":341,"author":{"gitID":"WJY-norainu"},"content":"                    celebrity.setCelebCalendar(previousCelebrity.getCelebCalendar());"},{"lineNumber":342,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":343,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":344,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"WJY-norainu"},"content":"        return celebrities;"},{"lineNumber":346,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":348,"author":{"gitID":"WJY-norainu"},"content":"    //@@author"},{"lineNumber":349,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":350,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":352,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":355,"author":{"gitID":"WJY-norainu"},"content":"            if (key.isCelebrity()) {"},{"lineNumber":356,"author":{"gitID":"WJY-norainu"},"content":"                Celebrity keyCelebrity \u003d (Celebrity) key;"},{"lineNumber":357,"author":{"gitID":"WJY-norainu"},"content":"                celebrities.remove(keyCelebrity);"},{"lineNumber":358,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":359,"author":{"gitID":"WJY-norainu"},"content":"            removeUnusedTags();"},{"lineNumber":360,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":362,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":376,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":377,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":391,"author":{"gitID":"-"},"content":"    public ArrayList\u003cCelebrity\u003e getCelebritiesList() {"},{"lineNumber":392,"author":{"gitID":"-"},"content":"        return celebrities;"},{"lineNumber":393,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":396,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":397,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":398,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":399,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":400,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":401,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.celebrities.equals(((AddressBook) other).celebrities));"},{"lineNumber":402,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":405,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":407,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags, celebrities);"},{"lineNumber":408,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":409,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":194,"-":215}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.StorageCalendarChangedEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"muruges95"},"content":"//@@author muruges95"},{"lineNumber":38,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"muruges95"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":40,"author":{"gitID":"muruges95"},"content":" * All changes to any model should be synchronized."},{"lineNumber":41,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":42,"author":{"gitID":"muruges95"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":43,"author":{"gitID":"muruges95"},"content":"    public static final String DAY_VIEW_PAGE \u003d \"day\";"},{"lineNumber":44,"author":{"gitID":"muruges95"},"content":"    public static final String WEEK_VIEW_PAGE \u003d \"week\";"},{"lineNumber":45,"author":{"gitID":"muruges95"},"content":"    public static final String MONTH_VIEW_PAGE \u003d \"month\";"},{"lineNumber":46,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":47,"author":{"gitID":"muruges95"},"content":"    public static final Tag CELEBRITY_TAG \u003d new Tag(\"celebrity\");"},{"lineNumber":48,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":49,"author":{"gitID":"muruges95"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":50,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":51,"author":{"gitID":"muruges95"},"content":"    private static final String CELEB_CALENDAR_SOURCE_NAME  \u003d \"Celeb Calendar Source\";"},{"lineNumber":52,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":53,"author":{"gitID":"muruges95"},"content":"    private final AddressBook addressBook;"},{"lineNumber":54,"author":{"gitID":"muruges95"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":55,"author":{"gitID":"muruges95"},"content":"    private final CalendarSource celebCalendarSource;"},{"lineNumber":56,"author":{"gitID":"muruges95"},"content":"    private final StorageCalendar storageCalendar;"},{"lineNumber":57,"author":{"gitID":"muruges95"},"content":"    private List\u003cAppointment\u003e appointments;"},{"lineNumber":58,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":59,"author":{"gitID":"muruges95"},"content":"    // attributes related to calendarPanel status"},{"lineNumber":60,"author":{"gitID":"muruges95"},"content":"    private String currentCelebCalendarViewPage;"},{"lineNumber":61,"author":{"gitID":"muruges95"},"content":"    private Celebrity currentCelebCalendarOwner;"},{"lineNumber":62,"author":{"gitID":"muruges95"},"content":"    private List\u003cAppointment\u003e currentlyDisplayedAppointments;"},{"lineNumber":63,"author":{"gitID":"muruges95"},"content":"    private boolean isListingAppointments;"},{"lineNumber":64,"author":{"gitID":"muruges95"},"content":"    private LocalDate baseDate;"},{"lineNumber":65,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":66,"author":{"gitID":"muruges95"},"content":"    public ModelManager() {"},{"lineNumber":67,"author":{"gitID":"muruges95"},"content":"        this(new AddressBook(), new StorageCalendar(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":70,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"muruges95"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":72,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"muruges95"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, StorageCalendar storageCalendar, UserPrefs userPrefs) {"},{"lineNumber":74,"author":{"gitID":"muruges95"},"content":"        super();"},{"lineNumber":75,"author":{"gitID":"muruges95"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":76,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":77,"author":{"gitID":"muruges95"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":78,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":79,"author":{"gitID":"muruges95"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":80,"author":{"gitID":"muruges95"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":81,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":82,"author":{"gitID":"muruges95"},"content":"        celebCalendarSource \u003d new CalendarSource(CELEB_CALENDAR_SOURCE_NAME);"},{"lineNumber":83,"author":{"gitID":"muruges95"},"content":"        resetCelebCalendars();"},{"lineNumber":84,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":85,"author":{"gitID":"muruges95"},"content":"        this.storageCalendar \u003d new StorageCalendar(storageCalendar);"},{"lineNumber":86,"author":{"gitID":"muruges95"},"content":"        appointments \u003d getStoredAppointmentList();"},{"lineNumber":87,"author":{"gitID":"muruges95"},"content":"        associateAppointmentsWithCelebritiesAndPointsOfContact();"},{"lineNumber":88,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":89,"author":{"gitID":"muruges95"},"content":"        currentCelebCalendarViewPage \u003d DAY_VIEW_PAGE;"},{"lineNumber":90,"author":{"gitID":"muruges95"},"content":"        currentCelebCalendarOwner \u003d null;"},{"lineNumber":91,"author":{"gitID":"muruges95"},"content":"        currentlyDisplayedAppointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"muruges95"},"content":"        isListingAppointments \u003d false;"},{"lineNumber":93,"author":{"gitID":"muruges95"},"content":"        baseDate \u003d LocalDate.now();"},{"lineNumber":94,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"        addressBook.resetData(newData);"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"        resetCelebCalendars();"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"        indicateAddressBookChanged();"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the appointment list has changed */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void indicateAppointmentListChanged() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        raise(new StorageCalendarChangedEvent(getStorageCalendar()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"muruges95"},"content":"    //@@author muruges95"},{"lineNumber":123,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"muruges95"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":125,"author":{"gitID":"muruges95"},"content":"        if (person.isCelebrity()) {"},{"lineNumber":126,"author":{"gitID":"muruges95"},"content":"            addCelebrity(person);"},{"lineNumber":127,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":128,"author":{"gitID":"muruges95"},"content":"            addressBook.addPerson(person);"},{"lineNumber":129,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"muruges95"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":131,"author":{"gitID":"muruges95"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":134,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"muruges95"},"content":"    public void addCelebrity(Person person) throws DuplicatePersonException {"},{"lineNumber":136,"author":{"gitID":"muruges95"},"content":"        Celebrity celebrity \u003d addressBook.addCelebrity(person);"},{"lineNumber":137,"author":{"gitID":"muruges95"},"content":"        celebCalendarSource.getCalendars().add(celebrity.getCelebCalendar());"},{"lineNumber":138,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":140,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"muruges95"},"content":"    public ArrayList\u003cCelebrity\u003e getCelebrities() {"},{"lineNumber":142,"author":{"gitID":"muruges95"},"content":"        return addressBook.getCelebritiesList();"},{"lineNumber":143,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":145,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"muruges95"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":147,"author":{"gitID":"muruges95"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":148,"author":{"gitID":"muruges95"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":149,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":150,"author":{"gitID":"muruges95"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":151,"author":{"gitID":"muruges95"},"content":"        indicateAddressBookChanged();"},{"lineNumber":152,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":154,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"muruges95"},"content":"    public void associateAppointmentsWithCelebritiesAndPointsOfContact() {"},{"lineNumber":156,"author":{"gitID":"muruges95"},"content":"        List\u003cCelebrity\u003e celebrityList;"},{"lineNumber":157,"author":{"gitID":"muruges95"},"content":"        List\u003cPerson\u003e pointOfContactList;"},{"lineNumber":158,"author":{"gitID":"muruges95"},"content":"        appointments \u003d getStoredAppointmentList();"},{"lineNumber":159,"author":{"gitID":"muruges95"},"content":"        for (Appointment a : appointments) {"},{"lineNumber":160,"author":{"gitID":"muruges95"},"content":"            celebrityList \u003d getCelebritiesFromId(a.getCelebIds());"},{"lineNumber":161,"author":{"gitID":"muruges95"},"content":"            pointOfContactList \u003d getPointsOfContactFromId(a.getPointOfContactIds());"},{"lineNumber":162,"author":{"gitID":"muruges95"},"content":"            a.updateEntries(celebrityList, pointOfContactList);"},{"lineNumber":163,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":166,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":167,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"WJY-norainu"},"content":"    public int countPersonsWithTag(Tag tag) {"},{"lineNumber":169,"author":{"gitID":"WJY-norainu"},"content":"        return addressBook.countPersonsWithTag(tag);"},{"lineNumber":170,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":172,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException, TagNotFoundException {"},{"lineNumber":174,"author":{"gitID":"WJY-norainu"},"content":"        int numPersonsAffected \u003d addressBook.removeTag(tag);"},{"lineNumber":175,"author":{"gitID":"WJY-norainu"},"content":"        indicateAddressBookChanged();"},{"lineNumber":176,"author":{"gitID":"WJY-norainu"},"content":"        return numPersonsAffected;"},{"lineNumber":177,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"    public void setCelebCalendarViewPage(String newCurrentCelebCalendarViewPage) {"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":"        currentCelebCalendarViewPage \u003d newCurrentCelebCalendarViewPage;"},{"lineNumber":182,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":184,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"WJY-norainu"},"content":"    public void setCelebCalendarOwner(Celebrity celerity) {"},{"lineNumber":186,"author":{"gitID":"WJY-norainu"},"content":"        this.currentCelebCalendarOwner \u003d celerity;"},{"lineNumber":187,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":189,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"WJY-norainu"},"content":"    public boolean getIsListingAppointments() {"},{"lineNumber":191,"author":{"gitID":"WJY-norainu"},"content":"        return this.isListingAppointments;"},{"lineNumber":192,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":194,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"WJY-norainu"},"content":"    public void setIsListingAppointments(boolean isListingAppointments) {"},{"lineNumber":196,"author":{"gitID":"WJY-norainu"},"content":"        this.isListingAppointments \u003d isListingAppointments;"},{"lineNumber":197,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":199,"author":{"gitID":"WJY-norainu"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Celeb Calendar Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":200,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":201,"author":{"gitID":"muruges95"},"content":"    //@@author muruges95"},{"lineNumber":202,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":203,"author":{"gitID":"muruges95"},"content":"    public ObservableList\u003cCalendar\u003e getCelebCalendars() {"},{"lineNumber":204,"author":{"gitID":"muruges95"},"content":"        return celebCalendarSource.getCalendars();"},{"lineNumber":205,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":207,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"muruges95"},"content":"    public CalendarSource getCelebCalendarSource() {"},{"lineNumber":209,"author":{"gitID":"muruges95"},"content":"        return celebCalendarSource;"},{"lineNumber":210,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":212,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"muruges95"},"content":"    public StorageCalendar getStorageCalendar() {"},{"lineNumber":214,"author":{"gitID":"muruges95"},"content":"        return storageCalendar;"},{"lineNumber":215,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":217,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"muruges95"},"content":"    public List\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":219,"author":{"gitID":"muruges95"},"content":"        return this.appointments;"},{"lineNumber":220,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":222,"author":{"gitID":"WJY-norainu"},"content":"    //@@author WJY-norainu"},{"lineNumber":223,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"WJY-norainu"},"content":"    public String getCurrentCelebCalendarViewPage() {"},{"lineNumber":225,"author":{"gitID":"WJY-norainu"},"content":"        return currentCelebCalendarViewPage;"},{"lineNumber":226,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":228,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"WJY-norainu"},"content":"    public Celebrity getCurrentCelebCalendarOwner() {"},{"lineNumber":230,"author":{"gitID":"WJY-norainu"},"content":"        return currentCelebCalendarOwner;"},{"lineNumber":231,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":233,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"WJY-norainu"},"content":"    public List\u003cAppointment\u003e getCurrentlyDisplayedAppointments() {"},{"lineNumber":235,"author":{"gitID":"WJY-norainu"},"content":"        return this.currentlyDisplayedAppointments;"},{"lineNumber":236,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":238,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"WJY-norainu"},"content":"    public List\u003cAppointment\u003e getStoredAppointmentList() {"},{"lineNumber":240,"author":{"gitID":"WJY-norainu"},"content":"        return storageCalendar.getAllAppointments();"},{"lineNumber":241,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":243,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"WJY-norainu"},"content":"    public void setCurrentlyDisplayedAppointments(List\u003cAppointment\u003e appointments) {"},{"lineNumber":245,"author":{"gitID":"WJY-norainu"},"content":"        this.currentlyDisplayedAppointments \u003d appointments;"},{"lineNumber":246,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":248,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"WJY-norainu"},"content":"    public LocalDate getBaseDate() {"},{"lineNumber":250,"author":{"gitID":"WJY-norainu"},"content":"        return this.baseDate;"},{"lineNumber":251,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":253,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":254,"author":{"gitID":"WJY-norainu"},"content":"    public  void setBaseDate(LocalDate date) {"},{"lineNumber":255,"author":{"gitID":"WJY-norainu"},"content":"        this.baseDate \u003d date;"},{"lineNumber":256,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":258,"author":{"gitID":"muruges95"},"content":"    //@@author muruges95"},{"lineNumber":259,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":260,"author":{"gitID":"muruges95"},"content":"    public Appointment getChosenAppointment(int chosenIndex) throws IndexOutOfBoundsException {"},{"lineNumber":261,"author":{"gitID":"muruges95"},"content":"        if (chosenIndex \u003c 0 || chosenIndex \u003e\u003d currentlyDisplayedAppointments.size()) {"},{"lineNumber":262,"author":{"gitID":"muruges95"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":263,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"muruges95"},"content":"        return currentlyDisplayedAppointments.get(chosenIndex);"},{"lineNumber":265,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":267,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":268,"author":{"gitID":"muruges95"},"content":"    public void addAppointmentToStorageCalendar(Appointment appt) throws DuplicateAppointmentException {"},{"lineNumber":269,"author":{"gitID":"muruges95"},"content":"        storageCalendar.addAppointment(appt);"},{"lineNumber":270,"author":{"gitID":"muruges95"},"content":"        appointments.add(appt);"},{"lineNumber":271,"author":{"gitID":"muruges95"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":272,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":274,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"muruges95"},"content":"    public Appointment deleteAppointment(int index) throws IndexOutOfBoundsException {"},{"lineNumber":276,"author":{"gitID":"muruges95"},"content":"        Appointment apptToDelete \u003d getChosenAppointment(index);"},{"lineNumber":277,"author":{"gitID":"muruges95"},"content":"        apptToDelete.removeAppointment();"},{"lineNumber":278,"author":{"gitID":"muruges95"},"content":"        removeAppointmentFromInternalList(index);"},{"lineNumber":279,"author":{"gitID":"muruges95"},"content":"        currentlyDisplayedAppointments.remove(apptToDelete);"},{"lineNumber":280,"author":{"gitID":"muruges95"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":281,"author":{"gitID":"muruges95"},"content":"        return apptToDelete;"},{"lineNumber":282,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":284,"author":{"gitID":"muruges95"},"content":"    /** Makes changes to model\u0027s internal appointment list */"},{"lineNumber":285,"author":{"gitID":"muruges95"},"content":"    private void removeAppointmentFromInternalList(int index) {"},{"lineNumber":286,"author":{"gitID":"muruges95"},"content":"        getAppointmentList().remove(index);"},{"lineNumber":287,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":289,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":290,"author":{"gitID":"muruges95"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":291,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":292,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"muruges95"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":294,"author":{"gitID":"muruges95"},"content":"     * {@code addressBook}"},{"lineNumber":295,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":297,"author":{"gitID":"muruges95"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":298,"author":{"gitID":"muruges95"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":299,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":301,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":302,"author":{"gitID":"muruges95"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":303,"author":{"gitID":"muruges95"},"content":"        requireNonNull(predicate);"},{"lineNumber":304,"author":{"gitID":"muruges95"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":305,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":307,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":308,"author":{"gitID":"muruges95"},"content":"    public List\u003cCelebrity\u003e getCelebritiesChosen(Set\u003cIndex\u003e indices) throws CommandException {"},{"lineNumber":309,"author":{"gitID":"muruges95"},"content":"        List\u003cCelebrity\u003e celebrities \u003d new ArrayList\u003c\u003e();"},{"lineNumber":310,"author":{"gitID":"muruges95"},"content":"        for (Index index : indices) {"},{"lineNumber":311,"author":{"gitID":"muruges95"},"content":"            celebrities.add(getCelebrityChosen(index));"},{"lineNumber":312,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"muruges95"},"content":"        return celebrities;"},{"lineNumber":314,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":316,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":317,"author":{"gitID":"muruges95"},"content":"    public Celebrity getCelebrityChosen(Index index) throws CommandException {"},{"lineNumber":318,"author":{"gitID":"muruges95"},"content":"        int zeroBasedIndex \u003d index.getZeroBased();"},{"lineNumber":319,"author":{"gitID":"muruges95"},"content":"        if (zeroBasedIndex \u003e\u003d filteredPersons.size()) {"},{"lineNumber":320,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":321,"author":{"gitID":"muruges95"},"content":"        } else if (!filteredPersons.get(zeroBasedIndex).isCelebrity()) {"},{"lineNumber":322,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(Messages.MESSAGE_NOT_CELEBRITY_INDEX);"},{"lineNumber":323,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":324,"author":{"gitID":"muruges95"},"content":"            return (Celebrity) filteredPersons.get(zeroBasedIndex);"},{"lineNumber":325,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":326,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":328,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":329,"author":{"gitID":"muruges95"},"content":"    public List\u003cPerson\u003e getPointsOfContactChosen(Set\u003cIndex\u003e indices) throws CommandException {"},{"lineNumber":330,"author":{"gitID":"muruges95"},"content":"        List\u003cPerson\u003e pointsOfContact \u003d new ArrayList\u003c\u003e();"},{"lineNumber":331,"author":{"gitID":"muruges95"},"content":"        for (Index index : indices) {"},{"lineNumber":332,"author":{"gitID":"muruges95"},"content":"            pointsOfContact.add(getPointOfContactChosen(index));"},{"lineNumber":333,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"muruges95"},"content":"        return pointsOfContact;"},{"lineNumber":335,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":337,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":338,"author":{"gitID":"muruges95"},"content":"    public Person getPointOfContactChosen(Index index) throws CommandException {"},{"lineNumber":339,"author":{"gitID":"muruges95"},"content":"        int zeroBasedIndex \u003d index.getZeroBased();"},{"lineNumber":340,"author":{"gitID":"muruges95"},"content":"        if (zeroBasedIndex \u003e\u003d filteredPersons.size()) {"},{"lineNumber":341,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":342,"author":{"gitID":"muruges95"},"content":"        } else if (filteredPersons.get(zeroBasedIndex).isCelebrity()) {"},{"lineNumber":343,"author":{"gitID":"muruges95"},"content":"            throw new CommandException(Messages.MESSAGE_NOT_POINT_OF_CONTACT_INDEX);"},{"lineNumber":344,"author":{"gitID":"muruges95"},"content":"        } else {"},{"lineNumber":345,"author":{"gitID":"muruges95"},"content":"            return filteredPersons.get(zeroBasedIndex);"},{"lineNumber":346,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":347,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":349,"author":{"gitID":"muruges95"},"content":"    @Override"},{"lineNumber":350,"author":{"gitID":"muruges95"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":351,"author":{"gitID":"muruges95"},"content":"        // short circuit if same object"},{"lineNumber":352,"author":{"gitID":"muruges95"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":353,"author":{"gitID":"muruges95"},"content":"            return true;"},{"lineNumber":354,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":355,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":356,"author":{"gitID":"muruges95"},"content":"        // instanceof handles nulls"},{"lineNumber":357,"author":{"gitID":"muruges95"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":358,"author":{"gitID":"muruges95"},"content":"            return false;"},{"lineNumber":359,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":360,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":361,"author":{"gitID":"muruges95"},"content":"        // state check"},{"lineNumber":362,"author":{"gitID":"muruges95"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":363,"author":{"gitID":"muruges95"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":364,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":365,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 isListingAppointments \u003d\u003d other.isListingAppointments"},{"lineNumber":366,"author":{"gitID":"muruges95"},"content":"                \u0026\u0026 getStoredAppointmentSet().equals(other.getStoredAppointmentSet());"},{"lineNumber":367,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":368,"author":{"gitID":"muruges95"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Private inner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":369,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":370,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":371,"author":{"gitID":"muruges95"},"content":"     * Returns all stored appointments in a set"},{"lineNumber":372,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":373,"author":{"gitID":"muruges95"},"content":"    private Set\u003cAppointment\u003e getStoredAppointmentSet() {"},{"lineNumber":374,"author":{"gitID":"muruges95"},"content":"        return new HashSet\u003c\u003e(getStoredAppointmentList());"},{"lineNumber":375,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":377,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":378,"author":{"gitID":"muruges95"},"content":"     * Populates our CelebCalendar CalendarSource by creating a calendar for every celebrity in our addressbook"},{"lineNumber":379,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":380,"author":{"gitID":"muruges95"},"content":"    private void resetCelebCalendars() {"},{"lineNumber":381,"author":{"gitID":"muruges95"},"content":"        // reset calendars in celebCalendarSource to the restored calendars"},{"lineNumber":382,"author":{"gitID":"muruges95"},"content":"        List\u003cCelebrity\u003e celebrities \u003d addressBook.getCelebritiesList();"},{"lineNumber":383,"author":{"gitID":"muruges95"},"content":"        List\u003cCalendar\u003e calendars \u003d new ArrayList\u003c\u003e();"},{"lineNumber":384,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":385,"author":{"gitID":"muruges95"},"content":"        for (Celebrity celebrity: celebrities) {"},{"lineNumber":386,"author":{"gitID":"muruges95"},"content":"            calendars.add(celebrity.getCelebCalendar());"},{"lineNumber":387,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":388,"author":{"gitID":"muruges95"},"content":"        celebCalendarSource.getCalendars().clear();"},{"lineNumber":389,"author":{"gitID":"muruges95"},"content":"        celebCalendarSource.getCalendars().addAll(calendars);"},{"lineNumber":390,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":391,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":392,"author":{"gitID":"muruges95"},"content":"    private List\u003cPerson\u003e getPointsOfContactFromId(List\u003cLong\u003e pointOfContactIds) {"},{"lineNumber":393,"author":{"gitID":"muruges95"},"content":"        List\u003cPerson\u003e pointsOfContact \u003d new ArrayList\u003c\u003e();"},{"lineNumber":394,"author":{"gitID":"muruges95"},"content":"        for (long pointOfContactId : pointOfContactIds) {"},{"lineNumber":395,"author":{"gitID":"muruges95"},"content":"            for (Person p : addressBook.getPersonList()) {"},{"lineNumber":396,"author":{"gitID":"muruges95"},"content":"                if (!p.isCelebrity() \u0026\u0026 (p.getId() \u003d\u003d pointOfContactId)) {"},{"lineNumber":397,"author":{"gitID":"muruges95"},"content":"                    pointsOfContact.add(p);"},{"lineNumber":398,"author":{"gitID":"muruges95"},"content":"                    break;"},{"lineNumber":399,"author":{"gitID":"muruges95"},"content":"                }"},{"lineNumber":400,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":401,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":402,"author":{"gitID":"muruges95"},"content":"        return pointsOfContact;"},{"lineNumber":403,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":405,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":406,"author":{"gitID":"muruges95"},"content":"     * Gets the celebrities based on their ids from our person list"},{"lineNumber":407,"author":{"gitID":"muruges95"},"content":"     */"},{"lineNumber":408,"author":{"gitID":"muruges95"},"content":"    private List\u003cCelebrity\u003e getCelebritiesFromId(List\u003cLong\u003e celebrityIds) {"},{"lineNumber":409,"author":{"gitID":"muruges95"},"content":"        List\u003cCelebrity\u003e celebrities \u003d new ArrayList\u003c\u003e();"},{"lineNumber":410,"author":{"gitID":"muruges95"},"content":"        for (long celebId : celebrityIds) {"},{"lineNumber":411,"author":{"gitID":"muruges95"},"content":"            for (Person p : addressBook.getPersonList()) {"},{"lineNumber":412,"author":{"gitID":"muruges95"},"content":"                if (p.isCelebrity() \u0026\u0026 (p.getId() \u003d\u003d celebId)) {"},{"lineNumber":413,"author":{"gitID":"muruges95"},"content":"                    celebrities.add((Celebrity) p);"},{"lineNumber":414,"author":{"gitID":"muruges95"},"content":"                    break;"},{"lineNumber":415,"author":{"gitID":"muruges95"},"content":"                }"},{"lineNumber":416,"author":{"gitID":"muruges95"},"content":"            }"},{"lineNumber":417,"author":{"gitID":"muruges95"},"content":"        }"},{"lineNumber":418,"author":{"gitID":"muruges95"},"content":"        return celebrities;"},{"lineNumber":419,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":420,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":421,"author":{"gitID":"muruges95"},"content":"    /**"},{"lineNumber":422,"author":{"gitID":"muruges95"},"content":"     * Raises an event to indicate the addressbook has changed"},{"lineNumber":423,"author":{"gitID":"muruges95"},"content":"     * and reassoicates appointments with relevant celebrities and points of contact"},{"lineNumber":424,"author":{"gitID":"muruges95"},"content":"     **/"},{"lineNumber":425,"author":{"gitID":"muruges95"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":426,"author":{"gitID":"muruges95"},"content":"        resetCelebCalendars();"},{"lineNumber":427,"author":{"gitID":"muruges95"},"content":"        associateAppointmentsWithCelebritiesAndPointsOfContact();"},{"lineNumber":428,"author":{"gitID":"muruges95"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":429,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":430,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":431,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":298,"WJY-norainu":85,"-":48}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"        if (\"celebrity\".contentEquals(tagName.toLowerCase())) {"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"            tagName \u003d tagName.toLowerCase();"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":3,"-":54}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"public class TagNotFoundException extends Exception {}"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":""}],"authorContributionMap":{"WJY-norainu":7}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.StorageCalendar;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Celebrity;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Adds the given celebrity */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void addCelebrity(Person person) throws DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Gets the list of celebrities */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    ArrayList\u003cCelebrity\u003e getCelebrities();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"    /** Fetches the list of CelebCalendars. */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    ObservableList\u003cCalendar\u003e getCelebCalendars();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"    /** Fetches the CalendarSource of the CelebCalendars. */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    CalendarSource getCelebCalendarSource();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Fetches the StorageCalendar used to store Appointments */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    StorageCalendar getStorageCalendar();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns a String that represents the current calendar view page. */"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"    String getCurrentCelebCalendarViewPage();"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns the celebrity whose calendar is currently shown."},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"     *  If current calendar is a combined view, {@code null} will be returned."},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"    Celebrity getCurrentCelebCalendarOwner();"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns the current base date of the calendar. */"},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"    LocalDate getBaseDate();"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"    /** Sets the current base date of the calendar to the specified date. */"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"    void setBaseDate(LocalDate date);"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns the full appointment list that contains all appointments */"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"    List\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /** Returns stored appointment list in storage calendar */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    List\u003cAppointment\u003e getStoredAppointmentList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns the currently displayed appointment list */"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"    List\u003cAppointment\u003e getCurrentlyDisplayedAppointments();"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"    /** Sets the currently displayed appointment list to be specified list */"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    void setCurrentlyDisplayedAppointments(List\u003cAppointment\u003e appointments);"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the chosen appointment from the displayed appointment list"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * based on zeroBasedIndex"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws CommandException if appointments not listed or invalid index"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    Appointment getChosenAppointment(int chosenIndex) throws CommandException;"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /** Adds the given appointment to the internal StorageCalendar */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    void addAppointmentToStorageCalendar(Appointment appt) throws DuplicateAppointmentException;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"    /** Removes appointment from internal StorageCalendar based on zero-based index"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"     *  Returns the removed appointment"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"    Appointment deleteAppointment(int index) throws IndexOutOfBoundsException;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Returns the list of celebrities chosen based on their index"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @throws CommandException if any of the indices given is invalid or the person is not a celebrity"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    List\u003cCelebrity\u003e getCelebritiesChosen(Set\u003cIndex\u003e indices) throws CommandException;"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns the Celebrity at a particular index given the current personList"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @throws CommandException if the given index is invalid or the person is not a celebrity."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    Celebrity getCelebrityChosen(Index index) throws CommandException;"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns the pointsOfContact list chosen based on their index"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @throws CommandException if any of the indices given is invalid or the person is a celebrity"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    List\u003cPerson\u003e getPointsOfContactChosen(Set\u003cIndex\u003e indices) throws CommandException;"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Returns the Person at a particular index given the current personList"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @throws CommandException if the given index is invalid or the person is a celebrity."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    Person getPointOfContactChosen(Index index) throws CommandException;"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":"    /** Counts the number of {@code persons} with the given {@code tage}. */"},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"    int countPersonsWithTag(Tag tag);"},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"    /** Removes the given {@code tag} from all {@code person}s. */"},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":"    int removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException, TagNotFoundException;"},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":"    /** Changes the currentCelebCalendarViewPage. */"},{"lineNumber":150,"author":{"gitID":"WJY-norainu"},"content":"    void setCelebCalendarViewPage(String newCurrentCelebCalendarViewPage);"},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"    /** Changes the currentCelebCalendarOwner. */"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":"    void setCelebCalendarOwner(Celebrity celerity);"},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"    /** Returns true if calendarPanel is currently displaying appointment list. */"},{"lineNumber":156,"author":{"gitID":"WJY-norainu"},"content":"    boolean getIsListingAppointments();"},{"lineNumber":157,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":158,"author":{"gitID":"WJY-norainu"},"content":"    /** Changes isListAppointments value accordingly. */"},{"lineNumber":159,"author":{"gitID":"WJY-norainu"},"content":"    void setIsListingAppointments(boolean isListingAppointments);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Associates each appointment with the relevant celebrities based on the ids they contain"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    void associateAppointmentsWithCelebritiesAndPointsOfContact();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":51,"-":114}},{"path":"src/main/java/seedu/address/model/map/MapAddress.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.model.LatLng;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.maps.model.TravelMode;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.DistanceEstimate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.map.Geocoding;"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":" * Represents a map address in the CelebManager."},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":"public class MapAddress {"},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_ADDRESS_MAP_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":"            \"Address should be in location name, road name, block and road name or postal code format.\\n\""},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"                    + \"Note:(Person address may not be valid as it consist of too many details like unit number)\";"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"    public static final String MESSAGE_ADDRESS_MAP_CONSTRAINTS_ROUTE_ESTIMATION \u003d"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"            \"Both address cannot be reached by Driving!\\n\""},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":"            + \"Tips: \\n\""},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"            + \"1.Be more specific with location name.\\n\""},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"            + \"2.Insert Country name in front of location name (e.g Botanic Gardens -\u003e Singapore Botanic Gardens).\\n\""},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"            + \"3.Use Postal Code instead.\";"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":"    /*"},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":"    public static final String ADDRESS_MAP_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"    public final String value;"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"     * Constructs an {@code Address}."},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":"     * @param address A valid MapAddress."},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"    public MapAddress(String address) {"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"        requireNonNull(address);"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        this.value \u003d address;"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"     * Returns true if a given string is a valid map address."},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"        boolean isValid;"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"        Geocoding testAddress \u003d new Geocoding();"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"        isValid \u003d testAddress.checkIfAddressCanBeFound(test);"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"        return test.matches(ADDRESS_MAP_VALIDATION_REGEX) \u0026\u0026 isValid;"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"     * Returns true if a given string is a valid map address."},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"    public static boolean isValidAddressForEstimatingRoute(String start, String end) {"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"        boolean isValid \u003d true;"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"        LatLng startLatLng;"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"        LatLng endLatLng;"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        DistanceEstimate checkValid \u003d new DistanceEstimate();"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"        Geocoding latLong \u003d new Geocoding();"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"        latLong.initialiseLatLngFromAddress(start);"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":"        startLatLng \u003d latLong.getLatLng(); //Get LatLong of start location"},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        latLong.initialiseLatLngFromAddress(end);"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"        endLatLng \u003d latLong.getLatLng(); //Get LatLong of end location"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":71,"author":{"gitID":"Damienskt"},"content":"        checkValid.calculateDistanceMatrix(startLatLng, endLatLng, TravelMode.DRIVING);"},{"lineNumber":72,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":73,"author":{"gitID":"Damienskt"},"content":"        if (checkValid.getTravelTime().equals(\"null\")) {"},{"lineNumber":74,"author":{"gitID":"Damienskt"},"content":"            isValid \u003d false;"},{"lineNumber":75,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Damienskt"},"content":"        return isValid;"},{"lineNumber":77,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":79,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"Damienskt"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitID":"Damienskt"},"content":"        return value;"},{"lineNumber":82,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":84,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"Damienskt"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"Damienskt"},"content":"        return (other \u003d\u003d this) // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"Damienskt"},"content":"                || (other instanceof MapAddress // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"Damienskt"},"content":"                \u0026\u0026 this.value.equals(((MapAddress) other).value)); // state check"},{"lineNumber":89,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":91,"author":{"gitID":"Damienskt"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"Damienskt"},"content":"    public int hashCode() {"},{"lineNumber":93,"author":{"gitID":"Damienskt"},"content":"        return value.hashCode();"},{"lineNumber":94,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":10,"Damienskt":85}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"muruges95"},"content":"// @@author muruges95"},{"lineNumber":5,"author":{"gitID":"muruges95"},"content":""},{"lineNumber":6,"author":{"gitID":"muruges95"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"muruges95"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":8,"author":{"gitID":"muruges95"},"content":" */"},{"lineNumber":9,"author":{"gitID":"muruges95"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"muruges95"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":11,"author":{"gitID":"muruges95"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":12,"author":{"gitID":"muruges95"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"muruges95"},"content":"}"}],"authorContributionMap":{"muruges95":10,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/calendar/ListAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ListAppointmentCommand.FORMATTER;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ListAppointmentCommand.MESSAGE_INVALID_DATE_RANGE;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.calendar.ViewDateCommand.MESSAGE_INVALID_DATE;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.ListAppointmentCommand;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"//@@author WJY-norainu"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new ListAppointmentCommand object"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"public class ListAppointmentCommandParser implements Parser\u003cListAppointmentCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the ListAppointmentCommand"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"     * and returns a ListAppointmentCommand object for execution."},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    public ListAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        if (args.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            return new ListAppointmentCommand();"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        String[] arguments \u003d trimmedArgs.split(\" \");"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        //there should be two elements, one for start date, the other for end date."},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        if (arguments.length !\u003d 2) {"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"                    ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        //check if start and end dates follow the format"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"            FORMATTER.parse(arguments[0]);"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":"            FORMATTER.parse(arguments[1]);"},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        } catch (Exception e) {"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"                    ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        LocalDate startDate \u003d convertFormattedStringToLocalDate(arguments[0]);"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"        LocalDate endDate \u003d convertFormattedStringToLocalDate(arguments[1]);"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        if (startDate.isAfter(endDate)) {"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_RANGE);"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        return new ListAppointmentCommand(startDate, endDate);"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"     * Converts a correctly-formatted string to a LocalDate object."},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"     * The input is assumed to be correctly-formmtted."},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"     * @param s"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"     * @return LocalDate"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"    private LocalDate convertFormattedStringToLocalDate(String s) throws ParseException {"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        int[] time \u003d Arrays.stream(s.split(\"-\")).mapToInt(Integer::parseInt).toArray();"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"        LocalDate date;"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"            if (time.length \u003d\u003d 2) {"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"                date \u003d LocalDate.of(LocalDate.now().getYear(), time[1], time[0]);"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"            } else if (time.length \u003d\u003d 3) {"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"                date \u003d LocalDate.of(time[2], time[1], time[0]);"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"            } else {"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"                        ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"        } catch (Exception e) {"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE);"},{"lineNumber":76,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"WJY-norainu"},"content":"        return date;"},{"lineNumber":78,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":73,"-":6}},{"path":"src/main/java/seedu/address/model/map/Map.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.map;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.GoogleMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.LatLong;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.javascript.object.Marker;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsRenderer;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsRequest;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.lynden.gmapsfx.service.directions.DirectionsService;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.ui.MapPanel;"},{"lineNumber":11,"author":{"gitID":"Damienskt"},"content":"//@@author Damienskt"},{"lineNumber":12,"author":{"gitID":"Damienskt"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Damienskt"},"content":" * Map model which allows updating of map state"},{"lineNumber":14,"author":{"gitID":"Damienskt"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Damienskt"},"content":"public class Map extends MapPanel {"},{"lineNumber":16,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":17,"author":{"gitID":"Damienskt"},"content":"    private static Marker location;"},{"lineNumber":18,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":19,"author":{"gitID":"Damienskt"},"content":"    public static GoogleMap getMap() {"},{"lineNumber":20,"author":{"gitID":"Damienskt"},"content":"        return actualMap;"},{"lineNumber":21,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":23,"author":{"gitID":"Damienskt"},"content":"    public static DirectionsRequest getDirectionRequest() {"},{"lineNumber":24,"author":{"gitID":"Damienskt"},"content":"        return directionRequest;"},{"lineNumber":25,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":27,"author":{"gitID":"Damienskt"},"content":"    public static DirectionsService getDirectionService() {"},{"lineNumber":28,"author":{"gitID":"Damienskt"},"content":"        return directionService;"},{"lineNumber":29,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":31,"author":{"gitID":"Damienskt"},"content":"    public static DirectionsRenderer getDirectionRenderer() {"},{"lineNumber":32,"author":{"gitID":"Damienskt"},"content":"        if (renderer \u003d\u003d null) {"},{"lineNumber":33,"author":{"gitID":"Damienskt"},"content":"            renderer \u003d new DirectionsRenderer(true, actualMap, directions);"},{"lineNumber":34,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Damienskt"},"content":"        return renderer;"},{"lineNumber":36,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":38,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Damienskt"},"content":"     * Clear any existing route in Map by clearing {@code renderer}"},{"lineNumber":40,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Damienskt"},"content":"    public static void clearRoute() {"},{"lineNumber":42,"author":{"gitID":"Damienskt"},"content":"        if (renderer !\u003d null) {"},{"lineNumber":43,"author":{"gitID":"Damienskt"},"content":"            renderer.clearDirections();"},{"lineNumber":44,"author":{"gitID":"Damienskt"},"content":"            renderer \u003d new DirectionsRenderer(true, actualMap, directions);"},{"lineNumber":45,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":48,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Damienskt"},"content":"     * Remove any existing marker {@code location} to Map"},{"lineNumber":50,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Damienskt"},"content":"    public static void removeExistingMarker() {"},{"lineNumber":52,"author":{"gitID":"Damienskt"},"content":"        if (location !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"Damienskt"},"content":"            actualMap.removeMarker(location);"},{"lineNumber":54,"author":{"gitID":"Damienskt"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":57,"author":{"gitID":"Damienskt"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Damienskt"},"content":"     * Set new marker with {@code center} LatLong on map"},{"lineNumber":59,"author":{"gitID":"Damienskt"},"content":"     * @param center"},{"lineNumber":60,"author":{"gitID":"Damienskt"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Damienskt"},"content":"    public static void setMarkerOnMap(LatLong center) {"},{"lineNumber":62,"author":{"gitID":"Damienskt"},"content":"        actualMap.addMarker(Map.location);"},{"lineNumber":63,"author":{"gitID":"Damienskt"},"content":"        actualMap.setCenter(center);"},{"lineNumber":64,"author":{"gitID":"Damienskt"},"content":"        actualMap.setZoom(15);"},{"lineNumber":65,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Damienskt"},"content":""},{"lineNumber":67,"author":{"gitID":"Damienskt"},"content":"    public static void setLocation(Marker location) {"},{"lineNumber":68,"author":{"gitID":"Damienskt"},"content":"        Map.location \u003d location;"},{"lineNumber":69,"author":{"gitID":"Damienskt"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Damienskt"},"content":"}"}],"authorContributionMap":{"-":10,"Damienskt":60}}]
