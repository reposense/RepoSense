var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F14-B4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"* *Email us* : You can also reach us at `qiusiyu [at] u.nus.edu`"}],"authorContributionMap":{"takuyakanbr":2,"-":4}},{"path":"docs/UsingCircleCI.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CircleCI"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":linkattrs:"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B4/main"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://circleci.com/[CircleCI, window\u003d\"_blank\"_] is a _Continuous Integration_ platform for GitHub projects."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"CircleCI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"The current CircleCI set up performs the following things whenever someone push code to the repo:"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"* Runs the `gradle checkstyleMain checkstyleTest headless allTests coverage coveralls asciidoctor` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."},{"lineNumber":14,"author":{"gitID":"-"},"content":"* Runs additional link:#repository-wide-checks[repository-wide checks]."},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"If you would like to customise your CircleCI build further, you can learn more about CircleCI from https://circleci.com/docs/2.0/[CircleCI Documentation]."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up CircleCI"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":".  Fork the repo to your own organization."},{"lineNumber":21,"author":{"gitID":"-"},"content":".  Go to https://circleci.com/signup/[https://circleci.com/signup/, window\u003d\"_blank\"] and click `Sign Up with GitHub`, then enter your GitHub account details if needed."},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"image:circleci/signing_in.png[Signing into CircleCI]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":".  On the https://circleci.com/dashboard[Dashboard, window\u003d\"_blank\"], select your organization in the drop-down box at the top left corner."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":"image:circleci/switch_org.png[Select your organization]"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* If the organization is not shown, go to the https://circleci.com/account[Account Integrations] page, and click on `Check permissions` as shown below:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"image:circleci/check_permissions.png[Check permissions]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"image:grant_access.png[Grant access]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"or request access"},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image:request_access.png[Request access]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":"to CircleCI so that it can access your commits and build your code."},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Select `Add Projects` from the left sidebar."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"image:circleci/add_projects.png[Add projects]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Find the forked repository that you wish to add, and select `Set Up Project`."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"-"},"content":"image:circleci/set_up_project.png[Set up project]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"+"},{"lineNumber":51,"author":{"gitID":"-"},"content":".  The next page explains how to configure your project so that CircleCI can test your commits."},{"lineNumber":52,"author":{"gitID":"-"},"content":"Since this repo comes with a CircleCI link:{repoURL}/blob/master/.circleci/config.yml[`config.yml`, window\u003d\"_blank\"], there is no need for you to create one yourself."},{"lineNumber":53,"author":{"gitID":"-"},"content":".  Click on `Start building`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"+"},{"lineNumber":55,"author":{"gitID":"-"},"content":"image:circleci/start_building.png[Start building]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"+"},{"lineNumber":57,"author":{"gitID":"-"},"content":".  CircleCI will start building your latest commit on `master`."},{"lineNumber":58,"author":{"gitID":"-"},"content":"+"},{"lineNumber":59,"author":{"gitID":"-"},"content":"image:circleci/building.png[Building project]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":"* Go to the repository and see the pushed commit. There should be an icon which will link you to the CircleCI build."},{"lineNumber":62,"author":{"gitID":"-"},"content":"+"},{"lineNumber":63,"author":{"gitID":"-"},"content":"image:circleci/commit_build.png[Commit build]"},{"lineNumber":64,"author":{"gitID":"-"},"content":"+"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* As the build is run on a provided remote machine, we can only examine the logs it produces:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"+"},{"lineNumber":67,"author":{"gitID":"-"},"content":"image:circleci/circleci_build.png[CircleCI build]"},{"lineNumber":68,"author":{"gitID":"-"},"content":"+"},{"lineNumber":69,"author":{"gitID":"-"},"content":".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."},{"lineNumber":70,"author":{"gitID":"-"},"content":"+"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* For a more consistent styling, you can use the badges from https://shields.io/[Shields.io, window\u003d\"_blank\"]."},{"lineNumber":72,"author":{"gitID":"-"},"content":"Simply copy the code below, and replace the `\u003cusername\u003e` with your GitHub username (or GitHub organization, if your repository belongs to one) and `\u003crepo\u003e` with your repository name."},{"lineNumber":73,"author":{"gitID":"-"},"content":"+"},{"lineNumber":74,"author":{"gitID":"-"},"content":"----"},{"lineNumber":75,"author":{"gitID":"-"},"content":"https://circleci.com/gh/\u003cusername\u003e/\u003crepo\u003e/tree/master[image:https://img.shields.io/circleci/project/github/\u003cusername\u003e/\u003crepo\u003e.svg?label\u003dcircleci[Build Status]]"},{"lineNumber":76,"author":{"gitID":"-"},"content":"----"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Building pull requests"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"In order to allow CircleCI to build and test pull requests, there are a few options we need to enable."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":".  Go to your https://circleci.com/dashboard[Dashboard, window\u003d\"_blank\"] and click on the cog beside your repository."},{"lineNumber":83,"author":{"gitID":"-"},"content":"+"},{"lineNumber":84,"author":{"gitID":"-"},"content":"image:circleci/project_settings.png[Project settings]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"+"},{"lineNumber":86,"author":{"gitID":"-"},"content":".  Select the `Advanced Settings` tab."},{"lineNumber":87,"author":{"gitID":"-"},"content":"+"},{"lineNumber":88,"author":{"gitID":"-"},"content":"image:circleci/advanced_settings.png[Advanced settings]"},{"lineNumber":89,"author":{"gitID":"-"},"content":"+"},{"lineNumber":90,"author":{"gitID":"-"},"content":".  Turn `On` the following options: `Build forked pull requests`, `Pass secrets to builds from forked pull requests`, and `Only build pull requests`."},{"lineNumber":91,"author":{"gitID":"-"},"content":"This last option lets CircleCI skip the building of the `gh-pages` branch."},{"lineNumber":92,"author":{"gitID":"-"},"content":"+"},{"lineNumber":93,"author":{"gitID":"-"},"content":"image:circleci/enable_options.png[Enable options]"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d Repository-wide checks"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"In addition to running Gradle checks, we also configure CircleCI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[source,shell]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"----"},{"lineNumber":103,"author":{"gitID":"-"},"content":"./config/travis/run-checks.sh"},{"lineNumber":104,"author":{"gitID":"-"},"content":"----"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"Any warnings or errors will be printed out to the console."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Implementing new checks"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Check scripts should print out errors in the following format:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"...."},{"lineNumber":115,"author":{"gitID":"-"},"content":"SEVERITY:FILENAME:LINE: MESSAGE"},{"lineNumber":116,"author":{"gitID":"-"},"content":"...."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"Check scripts must exit with a non-zero exit code if any errors occur."}],"authorContributionMap":{"takuyakanbr":1,"-":119}},{"path":"unused/Aliases.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"content":"//@@author fishTT-unused"},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains a mapping of aliases to their commands, which is referred to when parsing commands."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * When using the Alias and Unalias commands, key-value pairs are added and removed respectively."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class Aliases {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * We initialise the map with aliases for frequently used commands. Users can add other aliases themselves."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Aliases() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        map.put(\"new\", AddCommand.COMMAND_WORD);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        map.put(\"create\", AddCommand.COMMAND_WORD);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        map.put(\"remove\", DeleteCommand.COMMAND_WORD);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        map.put(\"change\", EditCommand.COMMAND_WORD);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        map.put(\"quit\", ExitCommand.COMMAND_WORD);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        map.put(\"man\", HelpCommand.COMMAND_WORD);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        map.put(\"ls\", ListCommand.COMMAND_WORD);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        map.put(\"show\", ListCommand.COMMAND_WORD);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        map.put(\"choose\", SelectCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        map.put(\"pick\", SelectCommand.COMMAND_WORD);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns a set of all aliases"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Set\u003cString\u003e getAllAliases() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return map.keySet();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the command linked to a specific alias, or null otherwise."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getCommand(String alias) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return map.get(alias);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Adds or updates an alias to the map."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addAlias(String alias, String command) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        map.put(alias, command);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Removes an alias from the map."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if no such alias exists"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean removeAlias(String alias) throws NoSuchElementException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (map.remove(alias) \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return map.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                || (other instanceof Aliases // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.map.equals(((Aliases) other).map));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return map.hashCode();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"qiu-siqi":1,"-":88}},{"path":"docs/team/qiu-siqi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"\u003d Qiu Siqi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":":linkattrs:"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B4/main"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d PROJECT: link:{repoURL}[Bibliotek]"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"This portfolio page showcases my contributions to Bibliotek."},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Overview"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek is a free book cataloguing application that is simple, fast, and easy to use. It is targeted at heavy readers who require a hassle-free way of managing and keep tracking of their read and unread books."},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"* *Major enhancement*: Added a command to *search for books in National Library Board (NLB) catalogue*"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"** What it does: Allows the user to easily check for the availability of books in NLB libraries."},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"** Justification: The user may wish to check if a book is available in the library before deciding whether to read it, or may just want a convenient way of searching for books in the library."},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"** Highlights: This function paves the way to extensions beyond NLB libraries and to customized automated book availability checking; functionalities which make Bibliotek more unique."},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"* *Minor enhancement*: Added the ability to *view recently selected books*"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"** What it does: Allows the user to view his recently selected books."},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"** Justification: The user may have recently selected a book in one of his/her searches, and regret not adding that book into his/her book shelf. With this function, he/she can easily locate that book without having to perform the searches again."},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B4/main/blob/master/collated/functional/qiu-siqi.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B4/main/blob/master/collated/test/qiu-siqi.md[Test code]]"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"* *Other contributions*:"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"** Project management:"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"*** Maintained the issue tracker on Github."},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"** Enhancements to existing features:"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"*** Morphed Address Book 4 into Bibliotek (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/56[#56], https://github.com/CS2103JAN2018-F14-B4/main/pull/57[#57], https://github.com/CS2103JAN2018-F14-B4/main/pull/72[#72])"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"*** Refactored code (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/116[#116], https://github.com/CS2103JAN2018-F14-B4/main/pull/156[#156], https://github.com/CS2103JAN2018-F14-B4/main/pull/169[#169])"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"*** Made individual commands handle undo themselves (Pull request https://github.com/CS2103JAN2018-F14-B4/main/pull/170[#170])"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"*** Added command autocorrection (Pull request https://github.com/CS2103JAN2018-F14-B4/main/pull/171[#171])"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"** Documentation:"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"*** Updated the contents of User Guide and Developer Guide: (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/43[#43], https://github.com/CS2103JAN2018-F14-B4/main/pull/67[#67], https://github.com/CS2103JAN2018-F14-B4/main/pull/68[#68], https://github.com/CS2103JAN2018-F14-B4/main/pull/102[#102], https://github.com/CS2103JAN2018-F14-B4/main/pull/155[#155], https://github.com/CS2103JAN2018-F14-B4/main/pull/187[#187], https://github.com/CS2103JAN2018-F14-B4/main/pull/188[#188])"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"** Community:"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"*** PRs reviewed: (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/58[#58], https://github.com/CS2103JAN2018-F14-B4/main/pull/62[#62], https://github.com/CS2103JAN2018-F14-B4/main/pull/91[#91], https://github.com/CS2103JAN2018-F14-B4/main/pull/134[#134])"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"*** Reported bugs and suggestions for other teams in the class (issues https://github.com/CS2103JAN2018-W10-B2/main/issues/76[#76], https://github.com/CS2103JAN2018-W10-B2/main/issues/80[#80], https://github.com/CS2103JAN2018-W10-B2/main/issues/83[#83], https://github.com/CS2103JAN2018-W10-B2/main/issues/87[#87])"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":48,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"include::../UserGuide.adoc[tag\u003dlibrary]"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"include::../UserGuide.adoc[tag\u003drecent]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"include::../DeveloperGuide.adoc[tag\u003dlibrary]"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"include::../DeveloperGuide.adoc[tag\u003drecent]"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""}],"authorContributionMap":{"qiu-siqi":48,"-":15}},{"path":"docs/team/jianghao.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d JIANG HAO - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d PROJECT: Bibliotek"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"Bibliotek is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* **Autocomplete commands and hint alias** (major)"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** Added tab to autocomplete commands."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Added a hint Command box to show hint of alias."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** This allows the user to type commands quickly and know what to type for alias of the input command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* **Quotes about book** (minor)"},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Add a welcome panel to display a random quotes about books."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** This allows users to view a random quotes on books."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B4/main/tree/master/collated/functional.fishTT.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B4/main/tree/master/collated/test.fishTT.md[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Add a welcome panel to display quotes about books (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/132[#132])"},{"lineNumber":29,"author":{"gitID":"-"},"content":"*** Add a autocomplete function to autocomplete command."},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Add a hintCommandBox to show hint of input command."},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/CS2103JAN2018-F14-B4/main/pull/52[#52]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dquoteOfTheDay]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dautocomplete]"}],"authorContributionMap":{"takuyakanbr":1,"-":44}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"Bibliotek was developed by https://github.com/CS2103JAN2018-F14-B4[Team F14-B4]. +"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"We developed this project as part of our Software Engineering Module, CS2103T. +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":10,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d\u003d Qiu Siyu"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"image::takuyakanbr.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"{empty}[https://danielteo.me[homepage]] [http://github.com/takuyakanbr[github]] [\u003c\u003ctakuyakanbr#, portfolio\u003e\u003e]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"Role: Developer +"},{"lineNumber":19,"author":{"gitID":"-"},"content":"Responsibilities: Dev Ops + Model + Network"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d\u003d Qiu Siqi"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"image::qiu-siqi.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"{empty}[http://github.com/qiu-siqi[github]] [\u003c\u003cqiu-siqi#, portfolio\u003e\u003e]"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"Role: Developer +"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"Responsibilities: Logic"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d\u003d Shi Jin"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"image::592363789.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"{empty}[http://github.com/592363789[github]] [\u003c\u003c592363789#, portfolio\u003e\u003e]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"Responsibilities: Storage"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d\u003d Liu Jianghao"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"image::fishtt.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"{empty}[http://github.com/fishTT[github]] [\u003c\u003cjianghao#, portfolio\u003e\u003e]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"qiu-siqi":3,"takuyakanbr":12,"592363789":1,"-":32}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"\u003d Bibliotek"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"https://circleci.com/gh/CS2103JAN2018-F14-B4/main/tree/master[image:https://img.shields.io/circleci/project/github/CS2103JAN2018-F14-B4/main.svg?label\u003dcircleci[Build Status]]"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"https://travis-ci.org/CS2103JAN2018-F14-B4/main[image:https://img.shields.io/travis/CS2103JAN2018-F14-B4/main.svg?label\u003dtravis[Build Status]]"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"https://ci.appveyor.com/project/takuyakanbr/main[image:https://img.shields.io/appveyor/ci/takuyakanbr/main.svg?label\u003dappveyor[Build Status]]"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"https://coveralls.io/github/CS2103JAN2018-F14-B4/main?branch\u003dmaster[image:https://img.shields.io/coveralls/github/CS2103JAN2018-F14-B4/main.svg[Coverage Status]]"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"https://www.codacy.com/app/takuyakanbr/main[image:https://img.shields.io/codacy/grade/aa9140dcebbd474c9dc16c57fe247e78.svg[Codacy Badge]]"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"https://github.com/CS2103JAN2018-F14-B4/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[License]]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"Bibliotek is a free book cataloguing application that is simple, fast, and easy to use. It is targeted at"},{"lineNumber":12,"author":{"gitID":"-"},"content":"heavy readers who require a hassle-free way of managing and keep tracking of their read and unread books."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"You can download Bibliotek for free from our https://github.com/CS2103JAN2018-F14-B4/main/releases/latest[releases page]."},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":18,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d Features"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"* Runs on all mainstream OS"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"* Uses short and simple commands for user interactions"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"* Provides a GUI to display lists and details of books"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"* Search online for new books and add them with a command"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Prioritize, rate, and mark books as reading, read, or unread"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"* View book reviews"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* View availability of books in the library"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"* This application is built upon the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by https://github.com/se-edu[SE-EDU] initiative."},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":45,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"* Libraries used: https://github.com/AsyncHttpClient/async-http-client[AsyncHttpClient], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/google/guava[Guava], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit4[JUnit4], https://github.com/mockito/mockito[Mockito], https://github.com/TestFX/TestFX[TextFX]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":17,"-":30}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"\u003d Bibliotek - User Guide"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":":toc: left"},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":6,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":7,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":8,"author":{"gitID":"-"},"content":":linkattrs:"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"By: `Team F14-B4`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d What is Bibliotek"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek is a free book cataloguing application that is simple, fast and easy to use."},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"You can use Bibliotek to search for books, manage your reading list and track the availability of your books."},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"If you *prefer to use a desktop app*, like *working with a Command Line Interface* (\u003c\u003ccli, CLI\u003e\u003e)"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"while still having the benefits of a Graphical User Interface (\u003c\u003cgui, GUI\u003e\u003e) or *can type fast*, Bibliotek is just for you!"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"Interested? Jump to \u003c\u003cInstalling Bibliotek\u003e\u003e to get started. Enjoy!"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Using this guide"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"This document is a reference for installing and using Bibliotek."},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"It can be accessed using the `help` command in the application."},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Features and Capabilities"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"Below are some features and capabilities that Bibliotek supports:"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"* Search online for new books"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* Track the books you are reading, have read, and want to read"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"* View book reviews"},{"lineNumber":40,"author":{"gitID":"-"},"content":"* View availability of books in the library"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"* Undo your previous actions"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Installing Bibliotek"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"Follow the steps below to get Bibliotek up and running on your computer."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"Having any Java 8 version is not enough. This app will not work with earlier versions of Java 8. +"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"If you are unsure how to check the Java version on your computer, do check out https://www.java.com/en/download/help/version_manual.xml[this link]. +"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"To download the latest Java 8 version, http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html[click here]."},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":".  Download the latest `bibliotek.jar` link:{repoURL}/releases[here]."},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":".  Copy the file to the folder you want to use as the home folder for Bibliotek. +"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"[TIP]"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"The home folder is where the app and its data will be stored. +"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"We recommend placing Bibliotek in a folder of its own, to prevent any disorganization or clutter caused by data files."},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":".  Double-click on `bibliotek.jar` to start the app. The \u003c\u003cgui, GUI\u003e\u003e, similar to that shown below, should appear in a few seconds."},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Navigating Bibliotek"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"The interface of Bibliotek can be broken down into 4 main components."},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":". Just below the menu bar, there is a text box which says `Enter command here...`. This is where you type commands that you wish to execute. +"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"image::CommandBox.png[width\u003d\"700\"]"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"To get started, try typing `search Harry Potter` in this text box and press kbd:[Enter]."},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":". Below this text box, there is a region which shows text. Responses to your commands can be found here. +"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"image::ResultBox.png[width\u003d\"700\"]"},{"lineNumber":75,"author":{"gitID":"-"},"content":"+"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"If you performed the search, you will realise that this region currently displays some message indicating that your search is in progress, successful or unsuccessful."},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":". The left panel displays a list of books, which is the result of your `search` command. These books are identified by their position in the list (given beside the book title). +"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"image::LeftPanel.png[width\u003d\"250\"]"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"Try interacting with the list by clicking on any book."},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":". The right panel displays additional information about books which you ask for. +"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"image::RightPanel.png[width\u003d\"500\"]"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"When you click on books, more detailed information is shown in the right panel, such as the book description."},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"To help you get accustomed to Bibliotek, here are some other commands you can try:"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"* *`list`* : lists all books"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"* **`add 1`** : adds the 1st book shown in the current list to your book shelf"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* **`delete 3`** : deletes the 3rd book shown in the current list"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"[[Command-Format]]"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Command Format"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"This section contains information about the general format of our commands and how they are represented in this documentation."},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"If you are new to Bibliotek, do take some time to read this section so that \u003c\u003cFeatures\u003e\u003e will make sense to you."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"* Words in `UPPER_CASE` are the parameters you supply e.g. in `search t/TITLE`, `TITLE` is a parameter which you can use as `search t/Harry Potter`."},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"* Items in square brackets are optional e.g you can use `[t/TITLE] [a/AUTHOR]` as `t/Harry Potter a/Rowling` or as `t/Harry Potter` (but there cannot be no parameters)."},{"lineNumber":108,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times, including zero times. For example, you can use `[a/AUTHOR]...` as `{nbsp}` (i.e. 0 times), `a/Dubner`, `a/Dubner a/Steven Levitt`, etc."},{"lineNumber":109,"author":{"gitID":"-"},"content":"* Parameters can be in any order. For example, if the command specifies `a/AUTHOR t/TITLE`, `t/TITLE a/AUTHOR` is acceptable."},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"[[Features]]"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Key Features"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"This section documents features that are fundamental for using Bibliotek to manage your books."},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"[[help-command]]"},{"lineNumber":118,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"If you are unsure of some commands, use the `help` command to open this document. +"},{"lineNumber":121,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"[[search-command]]"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Searching for books online : `search`"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Want to search for a specific book? Browsing for new books? Use the `search` command. +"},{"lineNumber":127,"author":{"gitID":"-"},"content":"Format: `search [KEY_WORDS] [i/ISBN] [t/TITLE] [a/AUTHOR] [c/CATEGORY]`"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Searches online for books that contain the specified `KEY_WORDS`, with additional constraints on its `ISBN`, `TITLE`, `AUTHOR`, and `CATEGORY`."},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"* At least one of the fields must be provided."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* The search results will contain a maximum of 30 books, and will be ordered according to their relevance, as determined by the external service."},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You can only perform `search` with Internet connection."},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"If you want to find any books with `Harry Potter` as keyword, enter `search Harry Potter`."},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Searching for matching books...` to indicate that your `search` is being processed."},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"This may take some time since an external service is being called to fetch your search results."},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"image::SearchCommandSearching.png[width\u003d\"650\"]"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"When your search results are ready, Bibliotek shows `Found xx matching books.` and displays your"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"search results in the left panel."},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"image::SearchCommandFound.png[width\u003d\"650\"]"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"NOTE: If Bibliotek shows `Failed to retrieve information from online.`, it means your search request has timed out."},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"You should try again after some time."},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"* `search Artemis a/Andy Weir` +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"Returns a list of books containing the word `Artemis`, where `Andy Weir` matches one of the authors."},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"* `search t/Babylon\u0027s Ashes c/Science Fiction` +"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"Returns a list of `Science Fiction` books that contains `Babylon\u0027s Ashes` in the title."},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[[select-command]]"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Selecting a book : `select`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"If you are interested in a book and want to view more information about it, use `select`. +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"****"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"* Selects the book at the specified `INDEX` and displays detailed information about it."},{"lineNumber":167,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":168,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":169,"author":{"gitID":"-"},"content":"****"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"Suppose you have the following search results."},{"lineNumber":172,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":"image::SearchCommandFound.png[width\u003d\"650\"]"},{"lineNumber":174,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":175,"author":{"gitID":"qiu-siqi"},"content":"If you are interested in `The Ivory Tower and Harry Potter` and wish to view more information,"},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":"enter `select 2`."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Selected Book: 2` to indicate that your `select` is successful. The left panel"},{"lineNumber":179,"author":{"gitID":"qiu-siqi"},"content":"is auto-scrolled to the selected book and the right panel shows detailed information of the book."},{"lineNumber":180,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":181,"author":{"gitID":"qiu-siqi"},"content":"image::SelectCommand.png[width\u003d\"650\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"qiu-siqi"},"content":"Alternatively, instead of entering `select 2`, you can directly select `The Ivory Tower and Harry Potter`"},{"lineNumber":184,"author":{"gitID":"qiu-siqi"},"content":"by clicking on it in the left panel."},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":186,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows the detailed information of the book in the right panel. Note that no confirmation message"},{"lineNumber":187,"author":{"gitID":"qiu-siqi"},"content":"will be shown in this case."},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":189,"author":{"gitID":"qiu-siqi"},"content":"image::SelectCommandUI.png[width\u003d\"650\"]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":"Selects the 2nd book in your book shelf."},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":"* `list p/HIGH` +"},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":"`select 1` +"},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":"Selects the 1st book among books with `HIGH` priority in your book shelf."},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":"* `search Artemis a/Andy Weir` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":201,"author":{"gitID":"qiu-siqi"},"content":"Selects the 1st book in the search results."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"[[add-command]]"},{"lineNumber":204,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Adding a book : `add`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":"If you find a book you wish to read in your search results, you can add this book into your book shelf. Use the `add` command. +"},{"lineNumber":207,"author":{"gitID":"qiu-siqi"},"content":"Format: `add INDEX`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":210,"author":{"gitID":"qiu-siqi"},"content":"* Adds the book at the specified `INDEX`."},{"lineNumber":211,"author":{"gitID":"qiu-siqi"},"content":"* The index refers to the index number shown in your search results."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":213,"author":{"gitID":"-"},"content":"****"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You cannot perform `add` when the list shown is your book shelf. +"},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":"You also need Internet connection."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"Suppose you have the following search results."},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":220,"author":{"gitID":"qiu-siqi"},"content":"image::SearchCommandFound.png[width\u003d\"650\"]"},{"lineNumber":221,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":222,"author":{"gitID":"qiu-siqi"},"content":"If you want to add `Harry Potter and the Classical World` to your book shelf, enter `add 3`."},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"Bibliotek shows `Adding the book into your book shelf...` to indicate that your `add` is being processed."},{"lineNumber":225,"author":{"gitID":"qiu-siqi"},"content":"This may take some time since an external service is being called to fetch more detailed information about"},{"lineNumber":226,"author":{"gitID":"qiu-siqi"},"content":"the book before adding it to your book shelf."},{"lineNumber":227,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":228,"author":{"gitID":"qiu-siqi"},"content":"image::AddCommandAdding.png[width\u003d\"650\"]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"Once the necessary information is fetched and the book is added, Bibliotek shows `New book added: TITLE - Authors: AUTHORS`."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"qiu-siqi"},"content":"image::AddCommandAdded.png[width\u003d\"650\"]"},{"lineNumber":233,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"You can verify that the book have been added by entering `list t/TITLE`. In this case, you can enter `list t/Harry Potter`."},{"lineNumber":235,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":236,"author":{"gitID":"qiu-siqi"},"content":"image::AddCommandAddedConfirmation.png[width\u003d\"650\"]"},{"lineNumber":237,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":238,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"qiu-siqi"},"content":"* `search t/Babylon\u0027s Ashes c/Science Fiction` +"},{"lineNumber":241,"author":{"gitID":"qiu-siqi"},"content":"`add 1` +"},{"lineNumber":242,"author":{"gitID":"qiu-siqi"},"content":"Adds the 1st book in the search results."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[[list-command]]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing, filtering, and sorting your books : `list`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"If you want to view all the books in your book shelf or just a portion of them, use the `list` command. +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Format: `list [t/TITLE] [a/AUTHOR] [c/CATEGORY] [s/STATUS] [p/PRIORITY] [r/RATING] [by/SORT_BY]`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"****"},{"lineNumber":251,"author":{"gitID":"-"},"content":"* Lists all books in your book shelf that satisfies all the constraints on `TITLE`, `AUTHOR`, `CATEGORY`, `STATUS`, `PRIORITY` and `RATING`, and sort them according to `SORT_BY`."},{"lineNumber":252,"author":{"gitID":"-"},"content":"* All parameters are case-insensitive."},{"lineNumber":253,"author":{"gitID":"-"},"content":"* `STATUS` must be one of the following (items in parenthesis are aliases): `read` (`r`), `unread` (`u`), or `reading` (`rd`)."},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `PRIORITY` must be one of the following (items in parenthesis are aliases): `none` (`n`), `low` (`l`), `medium` (`m`), or `high` (`h`)."},{"lineNumber":255,"author":{"gitID":"-"},"content":"* `RATING` must be a valid rating from 0 to 5, or -1, to select unrated books."},{"lineNumber":256,"author":{"gitID":"-"},"content":"* `SORT_BY` must be one of the following:"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"[options\u003d\"header\",]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":260,"author":{"gitID":"-"},"content":"|To sort by ... |Sort Mode |Aliases"},{"lineNumber":261,"author":{"gitID":"-"},"content":"|Title (ascending) |`titleA` |`tA`, `title`, `t`"},{"lineNumber":262,"author":{"gitID":"-"},"content":"|Title (descending) |`titleD` |`tD`"},{"lineNumber":263,"author":{"gitID":"-"},"content":"|Status (order by `READ`, `UNREAD`, `READING`) |`statusA` |`sA`, `status`, `s`"},{"lineNumber":264,"author":{"gitID":"-"},"content":"|Status (reverse order) |`statusD` |`sD`"},{"lineNumber":265,"author":{"gitID":"-"},"content":"|Priority (order by `NONE`, `LOW`, `MEDIUM`, `HIGH`) |`priorityA` |`pA`, `priority`, `p`"},{"lineNumber":266,"author":{"gitID":"-"},"content":"|Priority (reverse order) |`priorityD` |`pD`"},{"lineNumber":267,"author":{"gitID":"-"},"content":"|Rating (ascending) |`ratingA` |`rA`, `rating`, `r`"},{"lineNumber":268,"author":{"gitID":"-"},"content":"|Rating (descending) |`ratingD` |`rD`"},{"lineNumber":269,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"* If no `SORT_BY` is provided, the default sorting order will be used, which sorts by status (ordered by `READING`, `UNREAD`, `READ`). Within books of the same status, they will be sorted by priority (ordered by `HIGH`, `MEDIUM`, `LOW`, `NONE`). Finally, within books of the same priority, they will be sorted in alphabetical order according to their titles."},{"lineNumber":272,"author":{"gitID":"-"},"content":"* If no constraints are provided, all books will be listed."},{"lineNumber":273,"author":{"gitID":"-"},"content":"****"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"If you want to view all books in your book shelf, you can simply enter `list`."},{"lineNumber":276,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Bibliotek shows `Listed xx books.` to indicate that the command was successful."},{"lineNumber":278,"author":{"gitID":"qiu-siqi"},"content":"The left panel will show all the books in your book shelf."},{"lineNumber":279,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":280,"author":{"gitID":"qiu-siqi"},"content":"image::ListCommand.png[width\u003d\"650\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"* `list a/Andy Weir by/title` +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"Lists books in your book shelf that contains `Andy Weir` in one of the authors\u0027 name, and sort them in alphabetical order according to their titles."},{"lineNumber":286,"author":{"gitID":"qiu-siqi"},"content":"* `list t/Babylon\u0027s Ashes c/Science Fiction` +"},{"lineNumber":287,"author":{"gitID":"qiu-siqi"},"content":"Lists `Science Fiction` books in your book shelf that contains `Babylon\u0027s Ashes` in the title."},{"lineNumber":288,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"// tag::edit[]"},{"lineNumber":290,"author":{"gitID":"-"},"content":"[[edit-command]]"},{"lineNumber":291,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a book : `edit` _(since v1.4)_"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"qiu-siqi"},"content":"After reading a book, you may want to give the book a rating or set the book as read."},{"lineNumber":294,"author":{"gitID":"qiu-siqi"},"content":"Or, you may want to change the priority of books to remind yourself what you should read next. These can be done using `edit`. +"},{"lineNumber":295,"author":{"gitID":"qiu-siqi"},"content":"Format: `edit INDEX [s/STATUS] [p/PRIORITY] [r/RATING]`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"****"},{"lineNumber":298,"author":{"gitID":"qiu-siqi"},"content":"* Edits the book at the specified `INDEX`. The index refers to the index number shown in the most recent listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":299,"author":{"gitID":"qiu-siqi"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":300,"author":{"gitID":"qiu-siqi"},"content":"* Existing values will be updated to the input values."},{"lineNumber":301,"author":{"gitID":"-"},"content":"* `STATUS` must be one of the following (items in parenthesis are aliases): `read` (`r`), `unread` (`u`), or `reading` (`rd`)."},{"lineNumber":302,"author":{"gitID":"-"},"content":"* `PRIORITY` must be one of the following (items in parenthesis are aliases): `none` (`n`), `low` (`l`), `medium` (`m`), or `high` (`h`)."},{"lineNumber":303,"author":{"gitID":"qiu-siqi"},"content":"* `RATING` must be a valid rating from 0 to 5, or -1 to remove rating."},{"lineNumber":304,"author":{"gitID":"-"},"content":"****"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"WARNING: You can only edit books from your book shelf."},{"lineNumber":307,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":308,"author":{"gitID":"qiu-siqi"},"content":"Suppose you have a few unread books in your book shelf."},{"lineNumber":309,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":310,"author":{"gitID":"qiu-siqi"},"content":"image::EditCommandStart.png[width\u003d\"650\"]"},{"lineNumber":311,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":312,"author":{"gitID":"qiu-siqi"},"content":"You may want to differentiate them based on how eager you are to read each book."},{"lineNumber":313,"author":{"gitID":"qiu-siqi"},"content":"This helps you to better keep track of what you plan to read next, and also allows you to view the books in a more useful order. +"},{"lineNumber":314,"author":{"gitID":"qiu-siqi"},"content":"For example, if you feel that reading `Gel Electrophoresis of Proteins` is more urgent than reading the other books, you can change its priority to high using `edit 3 p/high`."},{"lineNumber":315,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":316,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Edited Book: TITLE - Authors: AUTHORS` to indicate that the `edit` was successful."},{"lineNumber":317,"author":{"gitID":"qiu-siqi"},"content":"In the left panel, you can see that the priority label of `Gel Electrophoresis of Proteins` is changed to `High`."},{"lineNumber":318,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":319,"author":{"gitID":"qiu-siqi"},"content":"image::EditCommandMid.png[width\u003d\"650\"]"},{"lineNumber":320,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":321,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* `edit 3 p/low` +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"Changes the priority of the 3rd book to `LOW`."},{"lineNumber":325,"author":{"gitID":"qiu-siqi"},"content":"* `edit 2 s/read r/5` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"Marks the 2nd book as `READ` and changes its rating to `5`."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"// end::edit[]"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"[[delete-command]]"},{"lineNumber":331,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Deleting a book : `delete`"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"qiu-siqi"},"content":"No longer want a book in your book shelf? Remove it using `delete`. +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"****"},{"lineNumber":337,"author":{"gitID":"qiu-siqi"},"content":"* Deletes the book at the specified `INDEX`."},{"lineNumber":338,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":339,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":340,"author":{"gitID":"-"},"content":"****"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You can only perform `delete` if the list shown is from your book shelf."},{"lineNumber":343,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":344,"author":{"gitID":"qiu-siqi"},"content":"TIP: You don\u0027t have to delete books after reading them. Simply mark them as read."},{"lineNumber":345,"author":{"gitID":"qiu-siqi"},"content":"They may serve as useful reference in the future."},{"lineNumber":346,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":347,"author":{"gitID":"qiu-siqi"},"content":"Suppose you have the following books in your book shelf."},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"qiu-siqi"},"content":"image::ListCommand.png[width\u003d\"650\"]"},{"lineNumber":350,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":351,"author":{"gitID":"qiu-siqi"},"content":"If you no longer want to read `Artificial Intelligence` and wish to remove it from your book shelf, enter `delete 3`."},{"lineNumber":352,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":353,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Deleted Book: TITLE - Authors: AUTHORS` to indicate that your `delete` is successful."},{"lineNumber":354,"author":{"gitID":"qiu-siqi"},"content":"The book no longer exist in the left panel."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"qiu-siqi"},"content":"image::DeleteCommand.png[width\u003d\"650\"]"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":359,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":360,"author":{"gitID":"qiu-siqi"},"content":"* `list t/Harry Potter` +"},{"lineNumber":361,"author":{"gitID":"qiu-siqi"},"content":"`delete 1` +"},{"lineNumber":362,"author":{"gitID":"qiu-siqi"},"content":"Deletes the 1st book in the results of the `list` command."},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"[[clear-command]]"},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing book shelf : `clear`"},{"lineNumber":366,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":367,"author":{"gitID":"qiu-siqi"},"content":"Don\u0027t need the data in your book shelf anymore? Remove them using `clear`. +"},{"lineNumber":368,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You can only perform `clear` if the list shown is from your book shelf."},{"lineNumber":371,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":372,"author":{"gitID":"qiu-siqi"},"content":"If you want to delete all books, enter `clear`."},{"lineNumber":373,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":374,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Book shelf has been cleared!` to indicate that your `clear` is successful."},{"lineNumber":375,"author":{"gitID":"-"},"content":"The left panel is now empty."},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"qiu-siqi"},"content":"image::ClearCommand.png[width\u003d\"650\"]"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"[[reviews-command]]"},{"lineNumber":380,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing book reviews : `reviews` _(since v1.3)_"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"qiu-siqi"},"content":"If a book catches your eye but you are not sure whether it\u0027s worth the read, use"},{"lineNumber":383,"author":{"gitID":"qiu-siqi"},"content":"`reviews` to find out what other readers think. +"},{"lineNumber":384,"author":{"gitID":"qiu-siqi"},"content":"Format: `reviews INDEX`"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"****"},{"lineNumber":387,"author":{"gitID":"qiu-siqi"},"content":"* Loads reviews of the book at the specified `INDEX`."},{"lineNumber":388,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":389,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":390,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":391,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":392,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You can only perform `reviews` with Internet connection."},{"lineNumber":393,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":394,"author":{"gitID":"qiu-siqi"},"content":"Suppose you have the following search results."},{"lineNumber":395,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":396,"author":{"gitID":"qiu-siqi"},"content":"image::SearchCommandFound.png[width\u003d\"650\"]"},{"lineNumber":397,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":398,"author":{"gitID":"qiu-siqi"},"content":"If you want to view book reviews for `The Ivory Tower and Harry Potter`, enter `reviews 2`."},{"lineNumber":399,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"Bibliotek shows `Showing reviews for book: TITLE - Authors: AUTHORS.` and displays a browser at the right panel."},{"lineNumber":401,"author":{"gitID":"-"},"content":"The browser will begin loading the reviews page of the book on https://goodreads.com[goodreads, window\u003d\"_blank\"]."},{"lineNumber":402,"author":{"gitID":"-"},"content":"Once the web page has loaded, you will be able to see the reviews, as shown below."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"qiu-siqi"},"content":"image::ReviewsCommandLoaded.png[width\u003d\"650\"]"},{"lineNumber":405,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":406,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":407,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":408,"author":{"gitID":"qiu-siqi"},"content":"* `search t/Babylon\u0027s Ashes c/Science Fiction` +"},{"lineNumber":409,"author":{"gitID":"qiu-siqi"},"content":"`reviews 1` +"},{"lineNumber":410,"author":{"gitID":"qiu-siqi"},"content":"Shows online reviews of 1st book in the search results."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"[[library-command]]"},{"lineNumber":413,"author":{"gitID":"qiu-siqi"},"content":"// tag::library[]"},{"lineNumber":414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding a book in the library : `library` _(since v1.5)_"},{"lineNumber":415,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":416,"author":{"gitID":"qiu-siqi"},"content":"If you want to check whether a book is available in the library, use `library`. +"},{"lineNumber":417,"author":{"gitID":"qiu-siqi"},"content":"Format: `library INDEX`"},{"lineNumber":418,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":419,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":420,"author":{"gitID":"qiu-siqi"},"content":"* Checks for the availability of the book at `INDEX` in a \u003c\u003csettings-library,pre-configured library\u003e\u003e."},{"lineNumber":421,"author":{"gitID":"qiu-siqi"},"content":"* Default library searched is National Library Board."},{"lineNumber":422,"author":{"gitID":"-"},"content":"****"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You can only perform `library` with Internet connection."},{"lineNumber":425,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":426,"author":{"gitID":"qiu-siqi"},"content":"Suppose you have the following books in your display list."},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"qiu-siqi"},"content":"image::LibraryCommandBefore.png[width\u003d\"650\"]"},{"lineNumber":429,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"If you want to search the library for `Harry Potter and the Classical World`, enter `library 3`."},{"lineNumber":431,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":432,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Searching for the book in the library...` to indicate that your `library` command is being processed."},{"lineNumber":433,"author":{"gitID":"qiu-siqi"},"content":"This may take some time since data is being loaded from the online library catalogue."},{"lineNumber":434,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":435,"author":{"gitID":"qiu-siqi"},"content":"image::LibraryCommandSearching.png[width\u003d\"650\"]"},{"lineNumber":436,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":437,"author":{"gitID":"qiu-siqi"},"content":"Once the data is ready, Bibliotek shows `Showing availability of book: TITLE - Authors: AUTHORS`."},{"lineNumber":438,"author":{"gitID":"qiu-siqi"},"content":"The availability of the book in the library will show up in the right panel shortly after, as shown below."},{"lineNumber":439,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":440,"author":{"gitID":"qiu-siqi"},"content":"NOTE: You can only interact with (e.g. scroll) the right panel when loading is fully completed."},{"lineNumber":441,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":442,"author":{"gitID":"qiu-siqi"},"content":"TIP: In the event that loading isn\u0027t completed after a long time, you should try the command again."},{"lineNumber":443,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":444,"author":{"gitID":"qiu-siqi"},"content":"image::LibraryCommandAfter.png[width\u003d\"650\"]"},{"lineNumber":445,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"NOTE: If Bibliotek shows `Failed to retrieve information from online.`,"},{"lineNumber":447,"author":{"gitID":"-"},"content":"it means your search request has timed out. You should try again after some time."},{"lineNumber":448,"author":{"gitID":"qiu-siqi"},"content":"// end::library[]"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"qiu-siqi"},"content":"[[exit-command]]"},{"lineNumber":451,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Closing the app : `exit`"},{"lineNumber":452,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":453,"author":{"gitID":"qiu-siqi"},"content":"If you want to close the app, use `exit`. +"},{"lineNumber":454,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":457,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":458,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek saves data in the hard disk automatically after any command that changes the data. +"},{"lineNumber":459,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Convenience Features"},{"lineNumber":462,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":463,"author":{"gitID":"qiu-siqi"},"content":"This section documents features that will provide you greater ease and convenience when using Bibliotek."},{"lineNumber":464,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"[[recent-command]]"},{"lineNumber":466,"author":{"gitID":"qiu-siqi"},"content":"// tag::recent[]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing recently viewed books : `recent` _(since v1.2)_"},{"lineNumber":468,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":469,"author":{"gitID":"qiu-siqi"},"content":"You recently selected a book in one of your searches but did not add it into your"},{"lineNumber":470,"author":{"gitID":"qiu-siqi"},"content":"book shelf, and now you have trouble searching up that book again? No worries, `recent`"},{"lineNumber":471,"author":{"gitID":"qiu-siqi"},"content":"is designed to take care of this. +"},{"lineNumber":472,"author":{"gitID":"qiu-siqi"},"content":"Format: `recent`"},{"lineNumber":473,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":474,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":475,"author":{"gitID":"qiu-siqi"},"content":"* Lists the books you recently selected in reverse chronological order."},{"lineNumber":476,"author":{"gitID":"qiu-siqi"},"content":"* Limited to the last 50 books."},{"lineNumber":477,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"qiu-siqi"},"content":"[NOTE]"},{"lineNumber":480,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":481,"author":{"gitID":"qiu-siqi"},"content":"You can select books in the `recent` list, but this will not count as a newest selection."},{"lineNumber":482,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":483,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":484,"author":{"gitID":"qiu-siqi"},"content":"Suppose you recently selected `The Ivory Tower and Harry Potter` in your search results."},{"lineNumber":485,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":486,"author":{"gitID":"qiu-siqi"},"content":"image::SelectCommand.png[width\u003d\"650\"]"},{"lineNumber":487,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":488,"author":{"gitID":"qiu-siqi"},"content":"You did not add the book into your book shelf. After performing various other selections,"},{"lineNumber":489,"author":{"gitID":"qiu-siqi"},"content":"you regret not adding `The Ivory Tower and Harry Potter` into your book shelf. Instead of"},{"lineNumber":490,"author":{"gitID":"qiu-siqi"},"content":"performing the search again, you can enter `recent` to view recently selected books."},{"lineNumber":491,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":492,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Listed xx recently selected books.` to indicate that your `recent` command"},{"lineNumber":493,"author":{"gitID":"qiu-siqi"},"content":"is successful. You can scroll down the left panel to locate `The Ivory Tower and Harry Potter`"},{"lineNumber":494,"author":{"gitID":"qiu-siqi"},"content":"(index 7 in this case)."},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"qiu-siqi"},"content":"image::RecentCommand.png[width\u003d\"650\"]"},{"lineNumber":497,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":498,"author":{"gitID":"qiu-siqi"},"content":"You can then enter `add 7` to add the book into your book shelf."},{"lineNumber":499,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":500,"author":{"gitID":"qiu-siqi"},"content":"NOTE: If you don\u0027t see the intended book in the list, then too many book selections have been performed after"},{"lineNumber":501,"author":{"gitID":"qiu-siqi"},"content":"that book."},{"lineNumber":502,"author":{"gitID":"qiu-siqi"},"content":"// end::recent[]"},{"lineNumber":503,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"[[undo-command]]"},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":506,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":507,"author":{"gitID":"qiu-siqi"},"content":"If you regret executing a command, use `undo` to reverse your action. +"},{"lineNumber":508,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"****"},{"lineNumber":511,"author":{"gitID":"qiu-siqi"},"content":"* Restores the book shelf to the state before the previous _undoable_ command was executed."},{"lineNumber":512,"author":{"gitID":"-"},"content":"****"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"qiu-siqi"},"content":"[NOTE]"},{"lineNumber":515,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":516,"author":{"gitID":"qiu-siqi"},"content":"Undoable commands are commands that modify the book shelf\u0027s content (`add`, `edit`, `delete`, and `clear`)."},{"lineNumber":517,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"Suppose you just deleted a book `Harry Potter and the Classical World`."},{"lineNumber":520,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":521,"author":{"gitID":"qiu-siqi"},"content":"image::DeleteCommand.png[width\u003d\"650\"]"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"qiu-siqi"},"content":"If you regret your deletion and wish to undo it, enter `undo`."},{"lineNumber":524,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":525,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Successfully undone deleting of TITLE - Authors: AUTHORS.`"},{"lineNumber":526,"author":{"gitID":"qiu-siqi"},"content":"to indicate that your `undo` of the deletion is successful. `Artificial Intelligence` is back in your book shelf as seen in the left panel."},{"lineNumber":527,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":528,"author":{"gitID":"qiu-siqi"},"content":"image::UndoCommand.png[width\u003d\"650\"]"},{"lineNumber":529,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":530,"author":{"gitID":"qiu-siqi"},"content":"NOTE: Your entire book shelf is shown in the left panel after performing `undo`."},{"lineNumber":531,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":532,"author":{"gitID":"qiu-siqi"},"content":"Other examples:"},{"lineNumber":533,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":535,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":536,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":537,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":538,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":540,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":541,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":542,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"[[history-command]]"},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"qiu-siqi"},"content":"If you want to view the commands that you have entered previously, use `history`. +"},{"lineNumber":548,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":551,"author":{"gitID":"qiu-siqi"},"content":"* Lists the previous commands in reverse chronological order."},{"lineNumber":552,"author":{"gitID":"-"},"content":"* Commands that deal with passwords (such as \u003c\u003csetpw-command, `setpw`\u003e\u003e) will not be recorded in history."},{"lineNumber":553,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":554,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":557,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":558,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"// tag::alias[]"},{"lineNumber":561,"author":{"gitID":"-"},"content":"[[addalias-command]]"},{"lineNumber":562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a command alias : `addalias` _(since v1.5)_"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"If there is a command that you use frequently, and you find typing out the entire command to be too tedious,"},{"lineNumber":565,"author":{"gitID":"-"},"content":"you can add a command alias to reduce the amount of typing needed. +"},{"lineNumber":566,"author":{"gitID":"-"},"content":"Format: `addalias ALIAS_NAME cmd/COMMAND`"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"****"},{"lineNumber":569,"author":{"gitID":"-"},"content":"* Adds a command alias for the specified `COMMAND`."},{"lineNumber":570,"author":{"gitID":"-"},"content":"* `COMMAND` should refer to a default, built-in command, and can optionally include command parameters."},{"lineNumber":571,"author":{"gitID":"-"},"content":"* `ALIAS_NAME` is case-insensitive, and must not contain any spaces or tabs."},{"lineNumber":572,"author":{"gitID":"-"},"content":"* If there is an existing alias with the same name as `ALIAS_NAME`, the existing alias will be overwritten."},{"lineNumber":573,"author":{"gitID":"-"},"content":"****"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"WARNING: If `COMMAND` does not specify a valid built-in command, you will"},{"lineNumber":576,"author":{"gitID":"-"},"content":"get an `Unknown command` message when you attempt to use the command alias."},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":579,"author":{"gitID":"-"},"content":"You can use command aliases to specify default named parameters (parameters with a prefix, such as `t/TITLE`). +"},{"lineNumber":580,"author":{"gitID":"-"},"content":"For example, if you want a custom `list` command that sorts by rating by default,"},{"lineNumber":581,"author":{"gitID":"-"},"content":"you can add a command alias using `addalias ls cmd/list by/rating`. +"},{"lineNumber":582,"author":{"gitID":"-"},"content":"You can override this default sort mode by specifying a different sort mode, e.g. `ls by/status`."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"* `addalias rm cmd/delete` +"},{"lineNumber":587,"author":{"gitID":"-"},"content":"Adds a command alias with the name `rm`. +"},{"lineNumber":588,"author":{"gitID":"-"},"content":"You can then use `rm INDEX` in place of `delete INDEX`."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"* `addalias read cmd/edit s/read p/none` +"},{"lineNumber":591,"author":{"gitID":"-"},"content":"Adds a command alias with the name `read`. +"},{"lineNumber":592,"author":{"gitID":"-"},"content":"You can then use `read INDEX` in place of `edit INDEX s/read p/none`."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"[[aliases-command]]"},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing command aliases : `aliases` _(since v1.5)_"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"If you have forgotten some of your command aliases and need a quick refresher, you can use"},{"lineNumber":598,"author":{"gitID":"-"},"content":"the `aliases` command to view them. +"},{"lineNumber":599,"author":{"gitID":"-"},"content":"Format: `aliases`"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"****"},{"lineNumber":602,"author":{"gitID":"-"},"content":"* Lists all command aliases."},{"lineNumber":603,"author":{"gitID":"-"},"content":"****"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"After entering the `aliases` command, Bibliotek shows `Listed xx aliases.` to indicate that the command was successful."},{"lineNumber":606,"author":{"gitID":"-"},"content":"The right panel will display a list of all your command aliases."},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"qiu-siqi"},"content":"image::AliasesCommand.png[width\u003d\"650\"]"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"[[deletealias-command]]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Delete a command alias : `deletealias` _(since v1.5)_"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"If you no longer require a command alias, you can remove it using `deletealias`. +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"Format: `deletealias ALIAS_NAME`"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"****"},{"lineNumber":617,"author":{"gitID":"-"},"content":"* Deletes the command alias specified by the `ALIAS_NAME`."},{"lineNumber":618,"author":{"gitID":"-"},"content":"* `ALIAS_NAME` is case-insensitive, and must match the name of an existing alias."},{"lineNumber":619,"author":{"gitID":"-"},"content":"****"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"* `deletealias rm` +"},{"lineNumber":624,"author":{"gitID":"-"},"content":"Deletes the command alias with the name `rm`."},{"lineNumber":625,"author":{"gitID":"-"},"content":"* `deletealias read` +"},{"lineNumber":626,"author":{"gitID":"-"},"content":"Deletes the command alias with the name `read`."},{"lineNumber":627,"author":{"gitID":"-"},"content":"// end::alias[]"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Hint system _(since v1.5)_"},{"lineNumber":630,"author":{"gitID":"qiu-siqi"},"content":"We understand that Bibliotek has many commands and it is difficult to remember the syntax of every command. With the hint system,"},{"lineNumber":631,"author":{"gitID":"qiu-siqi"},"content":"you can reduce the burden on your memory and count on Bibliotek to remind you instead!"},{"lineNumber":632,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":633,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":634,"author":{"gitID":"qiu-siqi"},"content":"* Provides hints on the syntax of commands based on the command word and/or parameters that you typed."},{"lineNumber":635,"author":{"gitID":"qiu-siqi"},"content":"* Distinguishes between valid and invalid commands using black and red text color respectively."},{"lineNumber":636,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":637,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":638,"author":{"gitID":"qiu-siqi"},"content":"Simply type the command word to view hints about the parameters that the command takes in."},{"lineNumber":639,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":640,"author":{"gitID":"qiu-siqi"},"content":"image::HintSystem.png[width\u003d\"650\"]"},{"lineNumber":641,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":642,"author":{"gitID":"qiu-siqi"},"content":"You can also see whether your command is valid, and if it isn\u0027t, what parameter should come next."},{"lineNumber":643,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":644,"author":{"gitID":"qiu-siqi"},"content":"image::HintSystemNextParameter.png[width\u003d\"650\"]"},{"lineNumber":645,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":646,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Command autocorrection _(since v1.5)_"},{"lineNumber":647,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":648,"author":{"gitID":"qiu-siqi"},"content":"It is common to mispell words when you are typing fast, and when this happens, it is always a hassle to have to correct it and try again."},{"lineNumber":649,"author":{"gitID":"qiu-siqi"},"content":"With the command autocorrection system, this may only be one keypress away."},{"lineNumber":650,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":651,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":652,"author":{"gitID":"qiu-siqi"},"content":"* Corrects mispelled command words which are one letter away from an actual command word, and suggests the correction to you."},{"lineNumber":653,"author":{"gitID":"qiu-siqi"},"content":"* Corrects to alias names too."},{"lineNumber":654,"author":{"gitID":"qiu-siqi"},"content":"* You can execute the corrected command by pressing kbd:[Enter]."},{"lineNumber":655,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":656,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":657,"author":{"gitID":"qiu-siqi"},"content":"If you accidentally typed `delte 1` instead of `delete 1`, there is no need to deliberately go back and correct it. Instead, you could just hit kbd:[Enter]."},{"lineNumber":658,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":659,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek attempts to correct your command, and if successful, you will see a message `Did you mean: COMMAND ...`."},{"lineNumber":660,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":661,"author":{"gitID":"qiu-siqi"},"content":"image::CommandAutocorrection.png[width\u003d\"650\"]"},{"lineNumber":662,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":663,"author":{"gitID":"qiu-siqi"},"content":"Press kbd:[Enter] if the shown `COMMAND` was indeed what you meant to type. The `COMMAND` will be executed as per normal."},{"lineNumber":664,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":665,"author":{"gitID":"qiu-siqi"},"content":"WARNING: If you have aliases with closely matching names, the accuracy of the autocorrection system will degrade."},{"lineNumber":666,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":667,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Other Features"},{"lineNumber":668,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":669,"author":{"gitID":"qiu-siqi"},"content":"This section documents some additional features in Bibliotek that do not fall into the above categories."},{"lineNumber":670,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":671,"author":{"gitID":"qiu-siqi"},"content":"// tag::quoteOfTheDay[]"},{"lineNumber":672,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Displaying quote of the day"},{"lineNumber":673,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":674,"author":{"gitID":"qiu-siqi"},"content":"When the right panel is empty (e.g. on start up), Bibliotek displays a default panel containing a random quote of the day about books."},{"lineNumber":675,"author":{"gitID":"qiu-siqi"},"content":"// end::quoteOfTheDay[]"},{"lineNumber":676,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"[[theme-command]]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing theme : `theme` _(since v1.2)_"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"If you don\u0027t like the default theme used by Bibliotek, you can change it using `theme`. +"},{"lineNumber":681,"author":{"gitID":"-"},"content":"Format: `theme THEME_NAME`"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"****"},{"lineNumber":684,"author":{"gitID":"-"},"content":"* `THEME_NAME` must specify a valid theme, and is case-insensitive."},{"lineNumber":685,"author":{"gitID":"-"},"content":"* The current available themes are: `white`, `light`, and `dark`."},{"lineNumber":686,"author":{"gitID":"qiu-siqi"},"content":"* The default theme is `white`"},{"lineNumber":687,"author":{"gitID":"-"},"content":"****"},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"qiu-siqi"},"content":"You can change the application to the white theme using `theme white`."},{"lineNumber":690,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":691,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek shows `Application theme changed to: white` to indicate that your theme change is successful."},{"lineNumber":692,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":693,"author":{"gitID":"qiu-siqi"},"content":"image::ThemeWhite.png[width\u003d\"650\"]"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"qiu-siqi"},"content":"The same goes for `theme light`:"},{"lineNumber":696,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":697,"author":{"gitID":"qiu-siqi"},"content":"image::ThemeLight.png[width\u003d\"650\"]"},{"lineNumber":698,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":699,"author":{"gitID":"qiu-siqi"},"content":"And `theme dark`:"},{"lineNumber":700,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":701,"author":{"gitID":"qiu-siqi"},"content":"image::ThemeDark.png[width\u003d\"650\"]"},{"lineNumber":702,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"// tag::encrypt[]"},{"lineNumber":704,"author":{"gitID":"-"},"content":"[[setpw-command]]"},{"lineNumber":705,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Changing/Setting a password : `setpw` _(since v1.5)_"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"qiu-siqi"},"content":"If you want to keep your data secure, you can opt to set a password for Bibliotek. This password will be used to encrypt your data."},{"lineNumber":708,"author":{"gitID":"qiu-siqi"},"content":"After starting up Bibliotek, you will have to unlock it using your password before being able to perform any commands. +"},{"lineNumber":709,"author":{"gitID":"qiu-siqi"},"content":"Format: `setpw [old/OLD_PASSWORD] [new/NEW_PASSWORD]`"},{"lineNumber":710,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":711,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":712,"author":{"gitID":"qiu-siqi"},"content":"* Changes the password from `OLD_PASSWORD` to `NEW_PASSWORD`."},{"lineNumber":713,"author":{"gitID":"qiu-siqi"},"content":"* `OLD_PASSWORD` and `NEW_PASSWORD` are case sensitive."},{"lineNumber":714,"author":{"gitID":"qiu-siqi"},"content":"* At least one of the 2 fields must be provided."},{"lineNumber":715,"author":{"gitID":"qiu-siqi"},"content":"* By default, there is no password."},{"lineNumber":716,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"qiu-siqi"},"content":"NOTE: To set a password, use `setpw new/NEW_PASSWORD`. +"},{"lineNumber":719,"author":{"gitID":"qiu-siqi"},"content":"Similarly, to delete the password, use `setpw old/OLD_PASSWORD`."},{"lineNumber":720,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"If the `OLD_PASSWORD` that you provided is correct, Bibliotek shows `Successfully changed your password` to indicate that your password is changed."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"image::setpassword1.png[width\u003d\"650\"]"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"On the other hand, if the `OLD_PASSWORD` that you provided is incorrect, Bibliotek shows `Incorrect old password. Please try again.` to indicate that your password is not changed."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"image::setpassword2.png[width\u003d\"650\"]"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"NOTE: If you provide a `OLD_PASSWORD` when you in fact have no password, it is considered to be incorrect."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"qiu-siqi"},"content":"TIP: You should remember your password after setting a new one."},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"[[Lock-command]]"},{"lineNumber":734,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Locking the app : `lock` _(since v1.5)_"},{"lineNumber":735,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":736,"author":{"gitID":"qiu-siqi"},"content":"If you are going away for a moment and want to prevent others from messing with the application, you can perform `lock`. +"},{"lineNumber":737,"author":{"gitID":"qiu-siqi"},"content":"Format: `lock`"},{"lineNumber":738,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":739,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":740,"author":{"gitID":"qiu-siqi"},"content":"* Locks the app. No commands can be performed other than `help` and `unlock`."},{"lineNumber":741,"author":{"gitID":"qiu-siqi"},"content":"* The app is locked upon start up if you have a password."},{"lineNumber":742,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":743,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":744,"author":{"gitID":"qiu-siqi"},"content":"NOTE: If you perform `lock` without a password, anyone can `unlock` your application."},{"lineNumber":745,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":746,"author":{"gitID":"qiu-siqi"},"content":"When you perform `lock`, Bibliotek responds with `Successfully locked the app.` to indicate that your `lock` is successful."},{"lineNumber":747,"author":{"gitID":"qiu-siqi"},"content":"All your displayed books will be hidden and the welcome panel will be shown on the right panel."},{"lineNumber":748,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":749,"author":{"gitID":"qiu-siqi"},"content":"image::LockCommand.png[width\u003d\"650\"]"},{"lineNumber":750,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":751,"author":{"gitID":"qiu-siqi"},"content":"If your application is locked, you cannot perform any commands other than `help` and `unlock`."},{"lineNumber":752,"author":{"gitID":"qiu-siqi"},"content":"Performing any other valid commands, for example `list`, will be responded with `The app is locked, please unlock it first!`."},{"lineNumber":753,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":754,"author":{"gitID":"qiu-siqi"},"content":"image::LockCommandMessage.png[width\u003d\"650\"]"},{"lineNumber":755,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"[[Unlock-command]]"},{"lineNumber":757,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Unlocking the app : `unlock` _(since v1.5)_"},{"lineNumber":758,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":759,"author":{"gitID":"qiu-siqi"},"content":"If you previously performed `lock`, use `unlock` to unlock the app. +"},{"lineNumber":760,"author":{"gitID":"qiu-siqi"},"content":"Format: `unlock PASSWORD`"},{"lineNumber":761,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":762,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":763,"author":{"gitID":"qiu-siqi"},"content":"* Unlocks the app."},{"lineNumber":764,"author":{"gitID":"qiu-siqi"},"content":"* `PASSWORD` is case sensitive. Leading and trailing spaces are ignored."},{"lineNumber":765,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":766,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":767,"author":{"gitID":"qiu-siqi"},"content":"NOTE: If you did not set a password, simply type `unlock` to unlock the app."},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"qiu-siqi"},"content":"When you perform `unlock` with your password, Bibliotek responds with `Succesfully unlocked the app.` to indicate that your `unlock` is successful."},{"lineNumber":770,"author":{"gitID":"qiu-siqi"},"content":"All the books in your book shelf will be displayed."},{"lineNumber":771,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":772,"author":{"gitID":"qiu-siqi"},"content":"image::UnlockCommand.png[width\u003d\"650\"]"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"qiu-siqi"},"content":"TIP: If you really forgot your password and cannot unlock the system, you can reset Bibliotek by deleting all your data files."},{"lineNumber":775,"author":{"gitID":"qiu-siqi"},"content":"// end::encrypt[]"},{"lineNumber":776,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"\u003d\u003d Upcoming Features"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"qiu-siqi"},"content":"This section documents features which will be worked on in the future."},{"lineNumber":780,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"[[watch-command]]"},{"lineNumber":782,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Placing a book on watchlist : `watch` _(coming in v2.0)_"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"qiu-siqi"},"content":"Interested in _so_ many books that searching them up using `library` is time consuming?"},{"lineNumber":785,"author":{"gitID":"qiu-siqi"},"content":"With `watch`, you can automatically get notified when a book in your watchlist"},{"lineNumber":786,"author":{"gitID":"qiu-siqi"},"content":"becomes available at the library, saving you the trouble of having to check yourself! +"},{"lineNumber":787,"author":{"gitID":"-"},"content":"Format: `watch INDEX`"},{"lineNumber":788,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":789,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":790,"author":{"gitID":"qiu-siqi"},"content":"* Adds the book at the specified `INDEX` into your watchlist."},{"lineNumber":791,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":792,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":793,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":794,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":795,"author":{"gitID":"qiu-siqi"},"content":"[NOTE]"},{"lineNumber":796,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":797,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek informs you of the availability of your watchlisted books in the library"},{"lineNumber":798,"author":{"gitID":"qiu-siqi"},"content":"every time you start up the application."},{"lineNumber":799,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":800,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"[[order-command]]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ordering a book online : `order` _(coming in v2.0)_"},{"lineNumber":803,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":804,"author":{"gitID":"qiu-siqi"},"content":"If you wish to purchase a book, use `order`. +"},{"lineNumber":805,"author":{"gitID":"qiu-siqi"},"content":"Format: `order INDEX`"},{"lineNumber":806,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":807,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":808,"author":{"gitID":"qiu-siqi"},"content":"* Navigates to the purchase page for the book at the specified `INDEX`."},{"lineNumber":809,"author":{"gitID":"qiu-siqi"},"content":"* The online shopping site used is the \u003c\u003csettings-order,pre-configured site\u003e\u003e."},{"lineNumber":810,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":811,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":812,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":813,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":814,"author":{"gitID":"qiu-siqi"},"content":"WARNING: You can only perform `order` with Internet connection."},{"lineNumber":815,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":816,"author":{"gitID":"qiu-siqi"},"content":"Examples:"},{"lineNumber":817,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":818,"author":{"gitID":"qiu-siqi"},"content":"* `list` +"},{"lineNumber":819,"author":{"gitID":"qiu-siqi"},"content":"`order 1` +"},{"lineNumber":820,"author":{"gitID":"qiu-siqi"},"content":"Opens the purchase page of the 1st book in your book shelf in your chosen site."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"[[suggest-command]]"},{"lineNumber":823,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Getting book recommendations : `suggest` _(coming in v2.0)_"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"qiu-siqi"},"content":"Having problems deciding what to read next? Bibliotek can give you book recommendations"},{"lineNumber":826,"author":{"gitID":"qiu-siqi"},"content":"based on the books in your book shelf. Use `suggest` to obtain your personalized recommendations! +"},{"lineNumber":827,"author":{"gitID":"qiu-siqi"},"content":"Format: `suggest`"},{"lineNumber":828,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":829,"author":{"gitID":"qiu-siqi"},"content":"TIP: Give appropriate ratings to books you have read to obtain recommendations that are closer to your preferences."},{"lineNumber":830,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"[[import-command]]"},{"lineNumber":832,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing books from other E-Readers : `import` _(coming in v2.0)_"},{"lineNumber":833,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":834,"author":{"gitID":"qiu-siqi"},"content":"If you are using other E-Readers and have many books in your collection that you wish to"},{"lineNumber":835,"author":{"gitID":"qiu-siqi"},"content":"add into your Bibliotek book shelf, `import` is the command you are looking for. +"},{"lineNumber":836,"author":{"gitID":"qiu-siqi"},"content":"Format: `import SOURCE`"},{"lineNumber":837,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"[[fontsize-command]]"},{"lineNumber":839,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing font size : `fontsize` _(coming in v2.0)_"},{"lineNumber":840,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":841,"author":{"gitID":"qiu-siqi"},"content":"Think the font size is too small or large for your liking? You can customize the"},{"lineNumber":842,"author":{"gitID":"qiu-siqi"},"content":"font size to your own needs. +"},{"lineNumber":843,"author":{"gitID":"-"},"content":"Format: `fontsize FONT_SIZE`"},{"lineNumber":844,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"[[autpcomplete-command]]"},{"lineNumber":846,"author":{"gitID":"-"},"content":"// tag::autocomplete[]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocompleting commands : `Tab` _(coming in v2.0)_"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"qiu-siqi"},"content":"Do you want to type faster? Fret not! Just press kbd:[Tab] and Bibliotek will automatically"},{"lineNumber":850,"author":{"gitID":"-"},"content":"complete your commands for you. +"},{"lineNumber":851,"author":{"gitID":"-"},"content":"// end::autocomplete[]"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"[[settings-command]]"},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing settings: `settings` _(coming in v2.0)_"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"[[settings-library]]"},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Library _(coming in v2.0)_"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"qiu-siqi"},"content":"If you want to search for books in other libraries, you can change your settings. +"},{"lineNumber":860,"author":{"gitID":"qiu-siqi"},"content":"Format: `settings lib/LIBRARY`"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":863,"author":{"gitID":"qiu-siqi"},"content":"* Change the library searched when you perform `library`."},{"lineNumber":864,"author":{"gitID":"qiu-siqi"},"content":"* Default library searched is National Library Board."},{"lineNumber":865,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"qiu-siqi"},"content":"[NOTE]"},{"lineNumber":868,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":869,"author":{"gitID":"qiu-siqi"},"content":"Only some libraries are supported. Do https://f14-b4.netlify.com/contactus[contact us]"},{"lineNumber":870,"author":{"gitID":"qiu-siqi"},"content":"if there are other libraries you wish are supported."},{"lineNumber":871,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"[[settings-order]]"},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Online shopping site _(coming in v2.0)_"},{"lineNumber":875,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":876,"author":{"gitID":"qiu-siqi"},"content":"If you want to purchase books on other online booksellers, you can change your settings. +"},{"lineNumber":877,"author":{"gitID":"qiu-siqi"},"content":"Format: `settings order/SITE`"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":880,"author":{"gitID":"qiu-siqi"},"content":"* Change the online bookseller searched when you perform `order`."},{"lineNumber":881,"author":{"gitID":"qiu-siqi"},"content":"* Default online book selling site is Book Depository."},{"lineNumber":882,"author":{"gitID":"qiu-siqi"},"content":"****"},{"lineNumber":883,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":884,"author":{"gitID":"qiu-siqi"},"content":"[NOTE]"},{"lineNumber":885,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":886,"author":{"gitID":"qiu-siqi"},"content":"Only some sites are supported. Do https://f14-b4.netlify.com/contactus[contact us]"},{"lineNumber":887,"author":{"gitID":"qiu-siqi"},"content":"if there are other sites you wish are supported."},{"lineNumber":888,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":889,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":893,"author":{"gitID":"qiu-siqi"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Bibliotek folder."},{"lineNumber":894,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":895,"author":{"gitID":"qiu-siqi"},"content":"*Q*: Why do my commands keep timing out? +"},{"lineNumber":896,"author":{"gitID":"qiu-siqi"},"content":"*A*: The external service may be down at the moment. You should try again after some time."},{"lineNumber":897,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":898,"author":{"gitID":"qiu-siqi"},"content":"*Q*: I have a problem and this guide did not help. +"},{"lineNumber":899,"author":{"gitID":"qiu-siqi"},"content":"*A*: Post in our https://github.com/CS2103JAN2018-F14-B4/main/issues[issues page] and we will try our best to answer your queries."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"qiu-siqi"},"content":"*Q*: Can I build upon Bibliotek? +"},{"lineNumber":902,"author":{"gitID":"qiu-siqi"},"content":"*A*: Yes, you are free to build upon Bibliotek. The source code for Bibliotek is available on https://github.com/CS2103JAN2018-F14-B4/main[our GitHub page]."},{"lineNumber":903,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"qiu-siqi"},"content":"If all you need is a quick reference on how to use certain commands, you can refer to the table below."},{"lineNumber":907,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"[width\u003d\"72%\",options\u003d\"header\",]"},{"lineNumber":909,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":910,"author":{"gitID":"qiu-siqi"},"content":"|Action |Command syntax"},{"lineNumber":911,"author":{"gitID":"qiu-siqi"},"content":"|*Add book to book shelf* |`add INDEX`"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"qiu-siqi"},"content":"e.g. `add 1`"},{"lineNumber":914,"author":{"gitID":"qiu-siqi"},"content":"|*Add a new alias* |`addalias ALIAS_NAME cmd/COMMAND`"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"e.g. `addalias read cmd/edit s/read p/none`"},{"lineNumber":917,"author":{"gitID":"qiu-siqi"},"content":"|*List existing aliases* |`aliases`"},{"lineNumber":918,"author":{"gitID":"qiu-siqi"},"content":"|*Clear book shelf* |`clear`"},{"lineNumber":919,"author":{"gitID":"qiu-siqi"},"content":"|*Delete book from book shelf* |`delete INDEX`"},{"lineNumber":920,"author":{"gitID":"qiu-siqi"},"content":"|*Delete an existing alias* |`deletealias ALIAS_NAME`"},{"lineNumber":921,"author":{"gitID":"qiu-siqi"},"content":"|*Edit book in book shelf* |`edit INDEX [s/STATUS] [p/PRIORITY] [r/RATING]`"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"e.g. `edit 2 s/READ r/5`"},{"lineNumber":924,"author":{"gitID":"qiu-siqi"},"content":"|*Close the app* |`exit`"},{"lineNumber":925,"author":{"gitID":"qiu-siqi"},"content":"|*View help* |`help`"},{"lineNumber":926,"author":{"gitID":"qiu-siqi"},"content":"|*View previous commands* |`history`"},{"lineNumber":927,"author":{"gitID":"qiu-siqi"},"content":"|*Search for book in library* |`library INDEX`"},{"lineNumber":928,"author":{"gitID":"qiu-siqi"},"content":"|*List books in book shelf* |`list [t/TITLE] [a/AUTHOR] [c/CATEGORY] [s/STATUS]` +"},{"lineNumber":929,"author":{"gitID":"qiu-siqi"},"content":"`[p/PRIORITY] [r/RATING] [by/SORT_BY]`"},{"lineNumber":930,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":931,"author":{"gitID":"qiu-siqi"},"content":"e.g. `list s/unread by/priorityd`"},{"lineNumber":932,"author":{"gitID":"qiu-siqi"},"content":"|*Lock the app* |`lock`"},{"lineNumber":933,"author":{"gitID":"qiu-siqi"},"content":"|*View recently selected books* |`recent`"},{"lineNumber":934,"author":{"gitID":"qiu-siqi"},"content":"|*View book reviews* |`reviews INDEX`"},{"lineNumber":935,"author":{"gitID":"qiu-siqi"},"content":"|*Search for books* |`search [SEARCH_TERM] [i/ISBN] [t/TITLE] [a/AUTHOR] [c/CATEGORY]`"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"qiu-siqi"},"content":"e.g. `search t/Babylon\u0027s Ashes c/Science Fiction`"},{"lineNumber":938,"author":{"gitID":"qiu-siqi"},"content":"|*Select a book* |`select INDEX`"},{"lineNumber":939,"author":{"gitID":"qiu-siqi"},"content":"|*Set a new password* |`setpw [old/OLD_PASSWORD] [new/NEW_PASSWORD]`"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"qiu-siqi"},"content":"e.g. `setpw old/admin new/haha`"},{"lineNumber":942,"author":{"gitID":"qiu-siqi"},"content":"|*Change the theme* |`theme THEME_NAME`"},{"lineNumber":943,"author":{"gitID":"qiu-siqi"},"content":"|*Undo previous change* |`undo`"},{"lineNumber":944,"author":{"gitID":"qiu-siqi"},"content":"|*Unlock the app* |`unlock PASSWORD`"},{"lineNumber":945,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":948,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"qiu-siqi"},"content":"[[cli]] Command Line Interface (CLI)::"},{"lineNumber":951,"author":{"gitID":"qiu-siqi"},"content":"A user interface in which the user interacts with the system by typing in commands."},{"lineNumber":952,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":953,"author":{"gitID":"qiu-siqi"},"content":"[[gui]] Graphical User Interface (GUI)::"},{"lineNumber":954,"author":{"gitID":"qiu-siqi"},"content":"A program interface that make use of visual elements to allow the user to interact with the system."},{"lineNumber":955,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"[[isbn]] International Standard Book Number (ISBN)::"},{"lineNumber":957,"author":{"gitID":"-"},"content":"A unique identifier given to every edition of a book published. +"},{"lineNumber":958,"author":{"gitID":"-"},"content":"The 13-digit ISBN, which is used by Bibliotek to identify books, has been in use since January 2007."}],"authorContributionMap":{"qiu-siqi":572,"takuyakanbr":6,"-":380}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class SampleDataTest extends BibliotekSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    protected BookShelf getInitialData() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public void bookShelf_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(getBookListPanel().getListSize() \u003e\u003d 5);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"takuyakanbr":1,"-":44}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import guitests.GuiRobot;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"public class AddCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    public void add() throws Exception {"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" hello\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        Model model \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        ObservableList\u003cBook\u003e searchResultsList \u003d model.getSearchResultsList();"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        /* --------------------- Perform add operations on the search results list -------------------------- */"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: add a book to a non-empty book shelf, command with leading spaces and trailing spaces -\u003e added */"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        Book firstBook \u003d searchResultsList.get(0);"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  1\";"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, firstBook);"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: undo adding firstBook to the list -\u003e firstBook deleted */"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.UNDO_SUCCESS, firstBook);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.BOOK_SHELF);"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: add to empty book shelf -\u003e added */"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        deleteAllBooks();"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" a/j r r tolkien\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d getModel();"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        searchResultsList \u003d model.getSearchResultsList();"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" 1\";"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        firstBook \u003d searchResultsList.get(0);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, firstBook);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        /* --------------------- Perform add operation while a book card is selected ------------------------ */"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: selects first card in the book list, add a book -\u003e added, card selection remains unchanged */"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        selectBook(Index.fromOneBased(1));"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" 2\";"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, searchResultsList.get(1));"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        /* --------------------- Perform add operations on the recent books list -------------------------- */"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: add a valid book -\u003e added */"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" a/iain banks\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        selectBook(INDEX_FIRST_BOOK);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(\"recent\");"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d getModel();"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" 1\";"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        firstBook \u003d model.getRecentBooksList().get(0);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, firstBook);"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid index -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d getModel();"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(\"recent\");"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" \" + (model.getRecentBooksList().size() + 1),"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        /* ------------------------------- Perform invalid add operations ----------------------------------- */"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: close keyword -\u003e corrected */"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(\"adds 1\");"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"                String.format(Messages.MESSAGE_CORRECTED_COMMAND, \"add 1\"), getModel());"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: add a duplicate book -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"        int invalidIndex \u003d getModel().getRecentBooksList().size() + 1;"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" abc\","},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" 1 2\","},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid active list type */"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(\"list\");"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"                AddCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: add from empty search result list -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" !@#$%^\u0026*()(*%$#@!#$%^\u0026\u0026*\","},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"                SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        model.updateSearchResults(new BookShelf());"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(AddCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"     * Executes {@code command} and verifies that, after the web API has returned a result,\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"     * 3. Result display box displays the search successful message.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model}, {@code Storage} and {@code BookListPanel} equal to the corresponding components in"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"     * 5. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertSelectedBookListCardChanged(Index)"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"    private void assertCommandSuccess(String command, Book toAdd) throws Exception {"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(command);"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        new GuiRobot().waitForEvent(() -\u003e !getResultDisplay().getText().equals(AddCommand.MESSAGE_ADDING),"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"                GuiRobot.NETWORK_ACTION_TIMEOUT_MILLISECONDS);"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"        new GuiRobot().waitForEvent(() -\u003e getCommandBox().isEnabled(), GuiRobot.NETWORK_ACTION_TIMEOUT_MILLISECONDS);"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"        assertBookInBookShelf(toAdd);"},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addBook(getModel().getBookShelf().getBookByIsbn(toAdd.getIsbn()).get());"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxEnabled();"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Book)} except asserts that"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"     * 2. {@code Model}, {@code Storage} and {@code BookListPanel} equal to the"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":"     * corresponding components in {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"     * 3. Selection in {@code BookListPanel} remains unchanged.\u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Book)"},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":172,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":177,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":179,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"qiu-siqi"},"content":"     * Checks that {@code book} is contained in the latest book shelf."},{"lineNumber":181,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"qiu-siqi"},"content":"    private void assertBookInBookShelf(Book book) {"},{"lineNumber":183,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(getModel().getBookShelf().getBookList().contains(book));"},{"lineNumber":184,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":172,"takuyakanbr":2,"-":11}},{"path":"docs/team/592363789.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d SHI JIN - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":linkattrs:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B4/main"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"This portfolio highlights my contributions to the project when studying in School of Computing, National University of Singapore."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: link:{repoURL}[Bibliotek]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"---"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek is a free book cataloguing application that is simple, fast and easy to use."},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"You can use Bibliotek to search for books, manage your reading list and track the availability of your books."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Bibliotek is a desktop book management application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* **Encrypt data with a password** (major)"},{"lineNumber":22,"author":{"gitID":"-"},"content":"** Add two class cipherEngine and LockManagement to help encrypt/decrypt the data/password and keep the data safe."},{"lineNumber":23,"author":{"gitID":"-"},"content":"** Add an ecrypt data function to let bookshelf.xml to be encrypted when user set a non-default password."},{"lineNumber":24,"author":{"gitID":"-"},"content":"** Add one check of isProtect value in LockManagement to decide whether encrypt the bookshelf.xml before saving the data."},{"lineNumber":25,"author":{"gitID":"-"},"content":"** Add `lock`, `unlock` and `setpw` command to do lock management. If password is not default(\"\"), everytime user open the application,"},{"lineNumber":26,"author":{"gitID":"-"},"content":"   he should unlock the bookshelf using password before he can do further instructions."},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"** This allows users to keep their data private and safe."},{"lineNumber":28,"author":{"gitID":"-"},"content":"* **Mark a book as read, change the priority of a book and rate books** (minor)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Added attributes rating, (status and priority by others)."},{"lineNumber":30,"author":{"gitID":"-"},"content":"** Added `edit` command that allows user to `rating`, set `status` and change `priority` of"},{"lineNumber":31,"author":{"gitID":"-"},"content":"some books."},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Added parser for three attributes."},{"lineNumber":33,"author":{"gitID":"-"},"content":"** This allows the user to keep track of what to read and what have been read and give recommendations to others."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* **Set command to be case insensitive**(minor)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"** Added case insensitive to the command."},{"lineNumber":36,"author":{"gitID":"-"},"content":"** This allows the user to type in command without worry about the case, and make user easy to use our application."},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B4/main/tree/master/collated/functional.592363789.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B4/main/tree/master/collated/test.592363789.md[Test code]] _{give links to collated code files}_"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":43,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":44,"author":{"gitID":"-"},"content":"*** Added the `ratingbook` command."},{"lineNumber":45,"author":{"gitID":"-"},"content":"*** Added in `Edit` book command. (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/111[#111])"},{"lineNumber":46,"author":{"gitID":"-"},"content":"*** Added in `lock` command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"*** Added in `unlock` and `setpw` command."},{"lineNumber":48,"author":{"gitID":"-"},"content":"*** Added in data file encryption and decryption features."},{"lineNumber":49,"author":{"gitID":"-"},"content":"*** Added in the data file encryption enhancement. (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/134[#134])"},{"lineNumber":50,"author":{"gitID":"-"},"content":"*** Added one case insensitive feature. (Pull requests https://github.com/CS2103JAN2018-F14-B4/main/pull/179[#179])"},{"lineNumber":51,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"*** Added my major and minor feature into UserGuide and DeveloperGuide, adding my Project Portfolio. (https://github.com/CS2103JAN2018-F14-B4/main/pull/193[#193])"},{"lineNumber":53,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"*** PRs reviewed. (https://github.com[#12], https://github.com/CS2103JAN2018-F14-B4/main/pull/84[#84], https://github.com/CS2103JAN2018-F14-B4/main/pull/79[#79],"},{"lineNumber":55,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F14-B4/main/pull/68[#68], https://github.com/CS2103JAN2018-F14-B4/main/pull/44[#44])"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class. (Issues https://github.com/CS2103JAN2018-F11-B3/main/issues/116[#116],"},{"lineNumber":57,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B3/main/issues/119[#119], https://github.com/CS2103JAN2018-F11-B3/main/issues/133[#133],"},{"lineNumber":58,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B3/main/issues/137[#137], https://github.com/CS2103JAN2018-F11-B3/main/issues/118[#118],"},{"lineNumber":59,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B3/main/issues/123[#123])"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":66,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dedit]"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dencrypt]"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":76,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dedit]"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dencrypt]"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"---"}],"authorContributionMap":{"qiu-siqi":4,"-":80}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class ClearCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"        Model model \u003d getModel();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: clear non-empty book shelf, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":20,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: undo clearing book shelf -\u003e original book shelf restored */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        String expectedResultMessage \u003d ClearCommand.UNDO_SUCCESS;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command,  expectedResultMessage, model);"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: selects first card in book list and clears book shelf -\u003e cleared and no card selected */"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original book shelf"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        selectBook(Index.fromOneBased(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        assertSelectedBookListCardDeselected();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: clear empty book shelf -\u003e cleared */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager(new BookShelf(), new UserPrefs(),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                model.getRecentBooksListAsBookShelf(), model.getAliasList()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":9,"takuyakanbr":9,"-":51}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertDetailsPanelDisplaysBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"public class HelpCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        getBookListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        getBookDetailsPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // use command box"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertDetailsPanelDisplaysBook(getModel().getDisplayBookList().get(0), getBookDetailsPanel());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertListMatching(getBookListPanel(), getModel().getDisplayBookList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":5,"takuyakanbr":2,"-":79}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TestUtil.getBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"public class DeleteCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: delete the first book in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_BOOK.getOneBased() + \"       \";"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        Book deletedBook \u003d removeBook(expectedModel, INDEX_FIRST_BOOK);"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: delete the last book in the list -\u003e deleted */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        Index lastBookIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        deletedBook \u003d getModel().getDisplayBookList().get(lastBookIndex.getZeroBased());"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(lastBookIndex);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: undo deleting the last book in the list -\u003e last book restored */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        expectedResultMessage \u003d String.format(DeleteCommand.UNDO_SUCCESS, deletedBook);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: delete the middle book in the list -\u003e deleted */"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        Index middleBookIndex \u003d getMidIndex(getModel());"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(middleBookIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        /* --------------------- Performing delete operation while a book card is selected ------------------------ */"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: delete the selected book -\u003e book list panel clears selection */"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        showAllBooks();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        selectBook(selectedIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        expectedModel.addRecentBook(expectedModel.getDisplayBookList().get(selectedIndex.getZeroBased()));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        deletedBook \u003d removeBook(expectedModel, selectedIndex);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, true);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"                getModel().getDisplayBookList().size() + 1);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Removes the {@code Book} at the specified {@code index} in {@code model}\u0027s display book list."},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"     * @return the removed book."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"    private Book removeBook(Model model, Index index) {"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"        Book targetBook \u003d getBook(model, index);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"            model.deleteBook(targetBook);"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"            throw new AssertionError(\"targetBook is retrieved from model.\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        return targetBook;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"     * Deletes the book at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        Book deletedBook \u003d removeBook(expectedModel, toDelete);"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"     * 4. Asserts that the selected book list card remains unchanged.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, false);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the selected"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"     * book list card is expected to update accordingly depending on {@code isSelectedCardDeselected}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"     * @see BibliotekSystemTest#assertSelectedBookListCardChanged(Index)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"            boolean isSelectedCardDeselected) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        if (isSelectedCardDeselected) {"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"            assertSelectedBookListCardDeselected();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"            assertSelectedBookListCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":23,"takuyakanbr":26,"-":104}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyBookShelf\u003e bookShelf, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(bookShelf, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"-":70}},{"path":"src/test/java/systemtests/AddAliasCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasesCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"public class AddAliasCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    public void addAlias() {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        /* --------------------------------- Performing valid add operation ----------------------------------------- */"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        /* case: add a new alias without named args -\u003e added */"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        Alias alias \u003d new Alias(\"s\", \"select\", \"\");"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(AddAliasCommand.COMMAND_WORD + \" s \" + PREFIX_COMMAND + \"select\","},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"                alias, String.format(AddAliasCommand.MESSAGE_NEW, alias));"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(AliasesCommand.COMMAND_WORD);"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(getAliasListPanel().isVisible());"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        /* case: add a new alias with named args -\u003e added */"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        alias \u003d new Alias(\"read\", \"edit\", \"s/read\");"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(AddAliasCommand.COMMAND_WORD + \" read \" + PREFIX_COMMAND + \"edit s/read\","},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"                alias, String.format(AddAliasCommand.MESSAGE_NEW, alias));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        /* case: replace an existing alias -\u003e replaced */"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        alias \u003d new Alias(\"read\", \"list\", \"s/read by/title\");"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(AddAliasCommand.COMMAND_WORD + \" read \" + PREFIX_COMMAND + \"list s/read by/title\","},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"                alias, String.format(AddAliasCommand.MESSAGE_UPDATE, alias));"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        /* --------------------------------- Performing invalid add operation --------------------------------------- */"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        /* case: no args -\u003e rejected */"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(AddAliasCommand.COMMAND_WORD + \"\","},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        /* case: empty alias name -\u003e rejected */"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(AddAliasCommand.COMMAND_WORD + \"  \" + PREFIX_COMMAND + \"edit s/read\","},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        /* case: invalid alias name -\u003e rejected */"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(AddAliasCommand.COMMAND_WORD + \" hello world \" + PREFIX_COMMAND + \"edit s/read\","},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        /* case: empty aliased command -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(AddAliasCommand.COMMAND_WORD + \" read \" + PREFIX_COMMAND + \"  \","},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        /* --------------------------------- Performing commands using aliases -------------------------------------- */"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        Model model \u003d getModel();"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        /* case: perform select command using alias */"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(\"s \" + INDEX_FIRST_BOOK.getOneBased());"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        model.addRecentBook(model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased()));"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(getBookDetailsPanel().isVisible());"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(getAliasListPanel().isVisible());"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"                String.format(SelectCommand.MESSAGE_SELECT_BOOK_SUCCESS, INDEX_FIRST_BOOK.getOneBased()), model);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        /* case: perform list command using alias */"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(\"read\");"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        model.updateBookListFilter(book -\u003e book.getStatus() \u003d\u003d Status.READ);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\", String.format(ListCommand.MESSAGE_SUCCESS, 1), model);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        /* case: perform list command using alias, with overridden named parameter */"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(\"read s/unread\");"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        model.updateBookListFilter(book -\u003e book.getStatus() \u003d\u003d Status.UNREAD);"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\", String.format(ListCommand.MESSAGE_SUCCESS, 2), model);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"     * Executes the addalias {@code command} and verifies that,\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"     * 3. Result display box displays the expected message.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"     * 4. {@code Model} and {@code Storage} equal to the corresponding components after adding.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"     * 5. If the alias list is visible, the aliases in the list matches the expected alias list.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"    private void assertCommandSuccess(String command, Alias toAdd, String expectedMessage) {"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.addAlias(toAdd);"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(command);"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\", expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        if (getAliasListPanel().isVisible()) {"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"            assertAliasListDisplaysExpected(expectedModel);"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":95,"-":14}},{"path":"src/test/java/systemtests/RecentCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class RecentCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    public void recent() {"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"        /* -------------------------------- Perform valid recent operations ------------------------------------- */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: Empty recent books list -\u003e 0 book shown */"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        assertRecentCommandSuccess(expectedModel);"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: New selection from book shelf -\u003e 1 book in recent books list */"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addRecentBook(getModel().getDisplayBookList().get(0));"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        assertRecentCommandSuccess(expectedModel);"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: New selection from search results -\u003e 2 books in recent books list */"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" Harry\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addRecentBook(expectedModel.getSearchResultsList().get(0));"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        assertRecentCommandSuccess(expectedModel);"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: Selecting same book again -\u003e selected book goes to first index of list */"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addRecentBook(getModel().getDisplayBookList().get(0));"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        assertRecentCommandSuccess(expectedModel);"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: Selecting a book in recent book list should not change the list */"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 2\");"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        assertRecentCommandSuccess(expectedModel);"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     * Executes the recent command and verifies that,\u003cbr\u003e"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"     * 3. Result display box displays the expected message.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model}, {@code Storage} remain unchanged.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"     * 5. Any selection in {@code BookListPanel} is deselected.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"     * 6. {@code WelcomePanel} is visible.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"     * 7. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    private void assertRecentCommandSuccess(Model expectedModel) {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(RecentCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"                String.format(RecentCommand.MESSAGE_SUCCESS, expectedModel.getRecentBooksList().size()), expectedModel);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectedBookListCardDeselected();"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        assertWelcomePanelVisible();"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":72,"takuyakanbr":1,"-":3}},{"path":"src/test/java/systemtests/ReviewsCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"public class ReviewsCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public void reviews() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        /* ------------ Perform reviews operations on the shown book list ------------ */"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        String command \u003d \"   \" + ReviewsCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \"   \";"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, getModel().getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased()), getModel());"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        /* ------------ Perform reviews operations on the filtered book list ------------ */"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" s/unread\");"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        Index bookCount \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        command \u003d ReviewsCommand.COMMAND_WORD + \" \" + bookCount.getOneBased();"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(command, getModel().getDisplayBookList().get(bookCount.getZeroBased()), getModel());"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        /* ------------ Perform invalid reviews operations ------------ */"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(ReviewsCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewsCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        int invalidIndex \u003d getModel().getDisplayBookList().size() + 1;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(ReviewsCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        /* ------------ Perform reviews operations on the shown search results list ------------ */"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" hello\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(ReviewsCommand.COMMAND_WORD + \" 1\","},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"                getModel().getSearchResultsList().get(0), expectedModel);"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(ReviewsCommand.COMMAND_WORD + \" 39\", MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        /* ------------ Perform reviews operations on the shown recent books list ------------ */"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(RecentCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(ReviewsCommand.COMMAND_WORD + \" 1\","},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"                getModel().getRecentBooksList().get(0), expectedModel);"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(ReviewsCommand.COMMAND_WORD + \" 51\", MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"     * Executes {@code command} and verifies that, after the reviews page has loaded,\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"     * 3. Result display box displays the load successful message.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model} and {@code Storage} remain unchanged.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"     * 5. Selection in {@code BookListPanel} is deselected.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"     * 6. {@code BookReviewsPanel} is visible."},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"     * 7. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    private void assertCommandSuccess(String command, Book toLoad, Model expectedModel) {"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(command);"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        String expectedResultMessage \u003d String.format(ReviewsCommand.MESSAGE_SUCCESS, toLoad);"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectedBookListCardDeselected();"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        assertBookReviewsPanelVisible();"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":77,"takuyakanbr":1,"-":8}},{"path":"src/test/java/systemtests/DeleteAliasCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasesCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteAliasCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"public class DeleteAliasCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void deleteAlias() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(AddAliasCommand.COMMAND_WORD + \" s cmd/select\");"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(AddAliasCommand.COMMAND_WORD + \" read cmd/list s/read by/title\");"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        /* --------------------------------- Performing valid delete operation -------------------------------------- */"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        /* case: delete an existing alias -\u003e deleted */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        Alias alias \u003d new Alias(\"s\", \"select\", \"\");"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(DeleteAliasCommand.COMMAND_WORD + \" s\", alias.getName(),"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"                String.format(DeleteAliasCommand.MESSAGE_SUCCESS, alias));"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(AliasesCommand.COMMAND_WORD);"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(getAliasListPanel().isVisible());"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        /* case: delete an existing alias -\u003e deleted and alias list updated */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        alias \u003d new Alias(\"read\", \"list\", \"s/read by/title\");"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(DeleteAliasCommand.COMMAND_WORD + \"   ReaD   \", alias.getName(),"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"                String.format(DeleteAliasCommand.MESSAGE_SUCCESS, alias));"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        /* case: delete a non-existing alias -\u003e ignored */"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        alias \u003d new Alias(\"notfound\", \"notfound\", \"notfound\");"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(DeleteAliasCommand.COMMAND_WORD + \" notfound\", alias.getName(),"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"                String.format(DeleteAliasCommand.MESSAGE_NOT_FOUND, \"notfound\"));"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     * Executes the deletealias {@code command} and verifies that,\u003cbr\u003e"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"     * 3. Result display box displays the expected message.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"     * 4. {@code Model} and {@code Storage} equal to the corresponding components after deleting.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"     * 5. If the alias list is visible, the aliases in the list matches the expected alias list.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    private void assertCommandSuccess(String command, String toDelete, String expectedMessage) {"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.removeAlias(toDelete);"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(command);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\", expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        if (getAliasListPanel().isVisible()) {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"            assertAliasListDisplaysExpected(expectedModel);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":56,"-":11}},{"path":"src/test/java/systemtests/ThemeCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Theme;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"public class ThemeCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    public void theme() {"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform invalid theme operations ------------------------------------- */"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: no theme name -\u003e rejected */"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ThemeCommand.COMMAND_WORD,"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: invalid theme name -\u003e rejected */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ThemeCommand.COMMAND_WORD + \" 12345\","},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"                String.format(ThemeCommand.MESSAGE_INVALID_THEME, \"12345\"));"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: invalid theme name -\u003e rejected */"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ThemeCommand.COMMAND_WORD + \" light 123\","},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"                String.format(ThemeCommand.MESSAGE_INVALID_THEME, \"light 123\"));"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform valid theme operations --------------------------------------- */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        assertThemeCommandSuccess(ThemeCommand.COMMAND_WORD + \" light\", Theme.LIGHT);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        assertThemeCommandSuccess(ThemeCommand.COMMAND_WORD + \" DARK\", Theme.DARK);"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        assertThemeCommandSuccess(ThemeCommand.COMMAND_WORD + \" WhitE\", Theme.WHITE);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * box displays {@code ThemeCommand#MESSAGE_SUCCESS} and the model related components remain unchanged."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status does not"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * change, and the active stylesheet has changed to the one that is specified by the {@code theme}."},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private void assertThemeCommandSuccess(String command, Theme theme) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":53,"author":{"gitID":"-"},"content":"                String.format(ThemeCommand.MESSAGE_SUCCESS, theme.getThemeName()), expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(theme.getCssFile(), getMainWindowHandle().getActiveStylesheet());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":27,"-":31}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_BOOK_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"public class SelectCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: select the first card in the book list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(command, INDEX_FIRST_BOOK);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: select the last card in the book list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        Index bookCount \u003d Index.fromOneBased(TypicalBooks.getTypicalBooks().size());"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + bookCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(command, bookCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: select the middle card in the book list -\u003e selected */"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        Index middleIndex \u003d Index.fromOneBased(bookCount.getOneBased() / 2);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(command, middleIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(command, middleIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" s/unread\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the displayed book list -\u003e selected */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased();"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(command, INDEX_FIRST_BOOK);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the displayed book list -\u003e selected */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        bookCount \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + bookCount.getOneBased();"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(command, bookCount);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getDisplayBookList().size() + 1;"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":78,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":82,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: select from empty book shelf -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        deleteAllBooks();"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        /* ------------------------ Perform select operations on the shown results list ----------------------------- */"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        // Note: this test requires an Internet connection."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" hello\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(SelectCommand.COMMAND_WORD + \" 1\", Index.fromOneBased(1));"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(SelectCommand.COMMAND_WORD + \" 1\", Index.fromOneBased(1));"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        invalidIndex \u003d getModel().getSearchResultsList().size() + 1;"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        /* -------------------- Perform select operations on the shown recent books list ------------------------- */"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(RecentCommand.COMMAND_WORD);"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(SelectCommand.COMMAND_WORD + \" 1\", Index.fromOneBased(1));"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectSuccess(SelectCommand.COMMAND_WORD + \" 1\", Index.fromOneBased(1));"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        invalidIndex \u003d getModel().getRecentBooksList().size() + 1;"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"     * {@code expectedSelectedCardIndex} of the selected search result.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model}, {@code Storage} {@code BookListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * 5. Selected book list card is at {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"     * @see BibliotekSystemTest#assertSelectedBookListCardChanged(Index)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"    private void assertSelectSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"                MESSAGE_SELECT_BOOK_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        int preExecutionSelectedCardIndex \u003d getBookListPanel().getSelectedCardIndex();"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        if (expectedModel.getActiveListType() !\u003d ActiveListType.RECENT_BOOKS) {"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"            expectedModel.addRecentBook(expectedModel.getActiveList().get("},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"                    expectedSelectedCardIndex.getZeroBased()));"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"            assertSelectedBookListCardUnchanged();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"            assertSelectedBookListCardChanged(expectedSelectedCardIndex);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":41,"takuyakanbr":19,"-":87}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"\u003d Bibliotek - Developer Guide"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":":toc: left"},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":6,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":7,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":8,"author":{"gitID":"-"},"content":":linkattrs:"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B4/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"By: `Team F14-B4`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d What is Bibliotek"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek is a free book cataloguing application that is simple, fast, and easy to use. It is targeted at heavy readers who require a hassle-free way of managing and keep tracking of their read and unread books."},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Core team"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek was developed and is maintained by https://github.com/CS2103JAN2018-F14-B4[Team F14-B4]. Feel free to https://f14-b4.netlify.com/contactus[contact us] for any enquries."},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Contributing"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"Bibliotek is an open source project and contributors are always welcome. To get involved, start by reading \u003c\u003cSetting-Up\u003e\u003e."},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"[[Setting-Up]]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"This section includes the instructions to set up your development environment."},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"Prior to setting up the project proper, make sure you have the following."},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"You can get the latest Java 8 JDK at http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[this link]."},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"To setup the project in IntelliJ, follow the steps below."},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":". Click `Import Project`."},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":". Click `Open as Project`."},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":". Click `OK` to accept the default settings."},{"lineNumber":65,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":66,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"To verify that the setup is completed successfully, you should:"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":73,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"This subsection includes configurations that you may find necessary or useful as you work on this project. We recommend that you make these configuration changes and additions before you start writing code."},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. Follow the instructions below to rectify this."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":". Click on the `Imports` tab to set the order."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":103,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"When you are ready to start coding:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":115,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"This section documents the design and interaction of components in Bibliotek. Please take a moment to understand the different components before making any code changes."},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":122,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"The *_Architecture Diagram_* in Figure 1 explains the high-level design of the App."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":126,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":129,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"Given below is a quick overview of each component."},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. Its responsibilities are as follows."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"The rest of the App consists of five components. These components and a brief summary of their responsibilities are given below."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":147,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":148,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Network,*`Network`*\u003e\u003e: Makes web API calls to online services."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"Each of the five components:"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"For example, the `Logic` component defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"The _Class Diagram_ in Figure 2 shows the interaction between different classes in the `Logic` component."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"The _Sequence Diagram_ in Figure 3 shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"image::SDforDeleteBook.png[width\u003d\"800\"]"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"Note how the `Model` simply raises a `BookShelfChangedEvent` when the `BookShelf` data is changed, instead of asking `Storage` to save the updates to the hard disk."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":"Figure 4 shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":"image::SDforDeleteBookEventHandling.png[width\u003d\"800\"]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"qiu-siqi"},"content":"The _Class Diagram_ in Figure 5 shows the interaction between different classes in the `Ui` component."},{"lineNumber":187,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":189,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"qiu-siqi"},"content":"The UI consists of a `MainWindow` that is made up of parts, such as `CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter`, `BookDetailsPanel`, etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":"The `Ui` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":"The key functionalities of the `Ui` component are:"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":"* Executing user commands using the `Logic` component."},{"lineNumber":200,"author":{"gitID":"qiu-siqi"},"content":"* Binding itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":201,"author":{"gitID":"qiu-siqi"},"content":"* Responding to events raised from various parts of the App and updating the UI accordingly."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":"The _Class Diagram_ in Figure 6 shows the interaction between different classes in the `Logic` component."},{"lineNumber":207,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":209,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":210,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":"The `Logic` component is home to various classes which extends `Command`. These classes represent supported commands that may or may not be undoable."},{"lineNumber":213,"author":{"gitID":"qiu-siqi"},"content":"The structural relationship between `Command` and `UndoableCommand` is shown in Figure 7 below."},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"NOTE: An `UndoableCommand` is a command that makes changes to the book shelf data."},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":221,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":"The following is the general workflow when the user enters some input."},{"lineNumber":224,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":225,"author":{"gitID":"qiu-siqi"},"content":".  `Logic` uses the `BookShelfParser` class to parse the user input."},{"lineNumber":226,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":227,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a book), make web API calls using the `Network`, and/or raise events."},{"lineNumber":228,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"qiu-siqi"},"content":"The _Sequence Diagram_ in Figure 8 shows the interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":233,"author":{"gitID":"qiu-siqi"},"content":"image::DeleteBookSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"qiu-siqi"},"content":"The _Class Diagram_ in Figure 9 shows the interaction between different classes in the `Model` component."},{"lineNumber":239,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"qiu-siqi"},"content":"The `Model`:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":248,"author":{"gitID":"qiu-siqi"},"content":"* stores the `BookShelf` data."},{"lineNumber":249,"author":{"gitID":"qiu-siqi"},"content":"* stores the user added aliases."},{"lineNumber":250,"author":{"gitID":"qiu-siqi"},"content":"* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes."},{"lineNumber":251,"author":{"gitID":"qiu-siqi"},"content":"* does not depend on any of the other components."},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"qiu-siqi"},"content":"The _Class Diagram_ in Figure 10 shows the interaction between different classes in the `Storage` component."},{"lineNumber":257,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":259,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"qiu-siqi"},"content":"The `Storage` component:"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":266,"author":{"gitID":"qiu-siqi"},"content":"* can save the `BookShelf` data in xml format and read it back."},{"lineNumber":267,"author":{"gitID":"qiu-siqi"},"content":"* can save the recently selected books data in xml format and read it back."},{"lineNumber":268,"author":{"gitID":"qiu-siqi"},"content":"* can save the `UniqueAliasList` data in xml format and read it back."},{"lineNumber":269,"author":{"gitID":"-"},"content":"* does not depend on any of the other four components."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"[[Design-Network]]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Network component"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"qiu-siqi"},"content":"The _Class Diagram_ in Figure 11 shows the interaction between different classes in the `Network` component."},{"lineNumber":275,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":".Structure of the Network Component"},{"lineNumber":277,"author":{"gitID":"-"},"content":"image::NetworkClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"*API*: link:{repoURL}/src/main/java/seedu/address/network/Network.java[`Network.java`]"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"qiu-siqi"},"content":"The `Network` component:"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"* can make asynchronous web API calls to Google Books API."},{"lineNumber":284,"author":{"gitID":"qiu-siqi"},"content":"* can make asynchronous web API calls to NLB catalogue."},{"lineNumber":285,"author":{"gitID":"-"},"content":"* does not depend on any of the other four components."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"qiu-siqi"},"content":"Classes used by multiple components are in the `seedu.address.commons` package. This includes event and utility classes."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"// tag::search1[]"},{"lineNumber":297,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Search feature"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The search feature allows the user to search for books on https://books.google.com/[Google Books, window\u003d\"_blank\"] that matches some user-specified parameters."},{"lineNumber":300,"author":{"gitID":"-"},"content":"This allows the user to easily search for particular books, and to add them without having to enter all the information manually (using the `add` command)."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[[Search-Network]]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Network component"},{"lineNumber":306,"author":{"gitID":"-"},"content":"// end::search1[]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"As part of the implementation of the search feature, the network component was added to allow for communicating with online services."},{"lineNumber":309,"author":{"gitID":"-"},"content":"An overview of the network component can be found in \u003c\u003cDesign-Network\u003e\u003e."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"// tag::search2[]"},{"lineNumber":312,"author":{"gitID":"-"},"content":"The `Network` object is passed by `LogicManager` into each `Command`, and is available for use by default, without the need for the `Command` to override `setData`."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"The `Network` API exposes various methods for making web API calls to various endpoints."},{"lineNumber":315,"author":{"gitID":"-"},"content":"Apart from those, it also provides a `stop` method that allows for graceful shutdown of the internal asynchronous HTTP client."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"As an example, if a command needs to retrieve search results from https://developers.google.com/books/[Google Books API, window\u003d\"_blank\"], it can make a call to the `searchBooks` method of the `Network` API."},{"lineNumber":318,"author":{"gitID":"-"},"content":"The following sequence diagram shows what happens when `searchBooks` is called:"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"image::SearchBooksSequenceDiagram.png[width\u003d\"700\"]"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"The methods shown above are asynchronous - they will not wait for the completion of the HTTP request."},{"lineNumber":323,"author":{"gitID":"-"},"content":"In particular, note that when `Network#searchBooks` finishes execution, the HTTP request might not have completed yet."},{"lineNumber":324,"author":{"gitID":"-"},"content":"This is accomplished through the use of a chain of `CompletableFuture` objects, which holds the operations that the above methods wish to apply to the data."},{"lineNumber":325,"author":{"gitID":"-"},"content":"This is most evident in the `executeGetAndApply` method, as shown below:"},{"lineNumber":326,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":327,"author":{"gitID":"-"},"content":"----"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    private \u003cT\u003e CompletableFuture\u003cT\u003e executeGetAndApply(String url, Function\u003cString, ? extends T\u003e fn) {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        return httpClient"},{"lineNumber":330,"author":{"gitID":"-"},"content":"                .makeGetRequest(url)"},{"lineNumber":331,"author":{"gitID":"-"},"content":"                .thenApply(GoogleBooksApi::requireJsonContentType)"},{"lineNumber":332,"author":{"gitID":"-"},"content":"                .thenApply(GoogleBooksApi::requireHttpStatusOk)"},{"lineNumber":333,"author":{"gitID":"-"},"content":"                .thenApply(HttpResponse::getResponseBody)"},{"lineNumber":334,"author":{"gitID":"-"},"content":"                .thenApply(fn);"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":"----"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"Once the HTTP request completes, the operations in the `CompletableFuture` objects will be executed. These operations are summarized by the following activity diagram:"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"image::SearchBooksActivityDiagram.png[width\u003d\"600\"]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"If the HTTP request fails, the response is unexpected, or the conversion to `BookShelf` fails, then the proceeding operations"},{"lineNumber":343,"author":{"gitID":"-"},"content":"added by the calls to `thenApply` will be skipped, and the `CompletableFuture` is considered to have completed exceptionally."},{"lineNumber":344,"author":{"gitID":"-"},"content":"If necessary, the caller can handle the failure by chaining an `exceptionally` call onto the `CompletableFuture` it receives."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"[[Search-Command]]"},{"lineNumber":347,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Search command"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"With the network component in place, the `search` command can now be implemented."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"When a `search` command is entered, a `SearchCommand` object will be created if the parsing of the command was successful,"},{"lineNumber":352,"author":{"gitID":"-"},"content":"which will make a call to `searchBooks` on the `Network` API, as shown in the sequence diagram below:"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"image::SearchCommandSequenceDiagram.png[width\u003d\"750\"]"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"As described in \u003c\u003cSearch-Network\u003e\u003e, when the event is handled by `NetworkManager`, this will result in an asynchronous HTTP request being made to https://developers.google.com/books/[Google Books API, window\u003d\"_blank\"]."},{"lineNumber":357,"author":{"gitID":"-"},"content":"Once the request and the parsing of the response completes successfully, the operation added by the `thenAccept` call in `SearchCommand` will be executed."},{"lineNumber":358,"author":{"gitID":"-"},"content":"This results in the execution of the following method in `SearchCommand`:"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":361,"author":{"gitID":"-"},"content":"----"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    private void displaySearchResults(ReadOnlyBookShelf bookShelf) {"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        model.updateSearchResults(bookShelf);"},{"lineNumber":364,"author":{"gitID":"-"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":367,"author":{"gitID":"-"},"content":"                String.format(SearchCommand.MESSAGE_SEARCH_SUCCESS, bookShelf.size())));"},{"lineNumber":368,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new EnableCommandBoxRequestEvent());"},{"lineNumber":369,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":370,"author":{"gitID":"-"},"content":"----"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"NOTE: The above method is run on the JavaFX thread (using `Platform#runLater`) because it will result in updates to the book list panel."},{"lineNumber":373,"author":{"gitID":"-"},"content":"If such updates are not done on the JavaFX thread, JavaFX will throw an `IllegalStateException`."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Asynchronous vs synchronous"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** HTTP requests are made asynchronously."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Pros: The application will be more responsive, as potentially long-running HTTP requests will not block the application thread."},{"lineNumber":381,"author":{"gitID":"-"},"content":"** Cons: Not straightforward to implement, especially considering that changes to the UI have to be made on the JavaFX application thread."},{"lineNumber":382,"author":{"gitID":"-"},"content":"* **Alternative 2:** HTTP requests are made synchronously (on the JavaFX application thread)."},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Pros: More straightforward to implement, as well as to understand the implementation."},{"lineNumber":384,"author":{"gitID":"-"},"content":"** Cons: The UI will be unresponsive for the duration of the HTTP requests, and this can degrade the user experience."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Design of network API"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Call methods on the `Network` API directly, which return `CompletableFuture` objects."},{"lineNumber":389,"author":{"gitID":"-"},"content":"** Pros: More explicit flow of data, making it easier to understand and debug."},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Cons: Since web API calls are made by certain commands, the `NetworkManager` will have to be passed from `MainApp` all the way into each `Command`."},{"lineNumber":391,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use events to request for web API calls and retrieve the results."},{"lineNumber":392,"author":{"gitID":"-"},"content":"** Pros: Less coupling - no component will be directly depending on the network component."},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Cons: The flow of data can become less explicit and clear, and it becomes more complicated to use a single web API call for multiple purposes."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Converting JSON responses to model types"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Convert to a temporary data holder before converting to model type."},{"lineNumber":398,"author":{"gitID":"-"},"content":"** Pros: Easier and more straightforward implementation - a large part of the conversion work is done by the Jackson library."},{"lineNumber":399,"author":{"gitID":"-"},"content":"** Cons: Slower and less efficient - due to the double conversion and the use of the Reflection API (in the Jackson library)."},{"lineNumber":400,"author":{"gitID":"-"},"content":"* **Alternative 2:** Convert parsed JSON directly to model type."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Pros: Faster and more efficient."},{"lineNumber":402,"author":{"gitID":"-"},"content":"** Cons: Code will be more complicated and tedious - we will need to traverse through the JSON node tree manually."},{"lineNumber":403,"author":{"gitID":"-"},"content":"// end::search2[]"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo previous command"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"The `undo` command allows the user to undo a previous command that caused changes to the book shelf."},{"lineNumber":409,"author":{"gitID":"-"},"content":"This allows the user to easily reverse their actions."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"qiu-siqi"},"content":"The undo mechanism is facilitated by an `UndoStack`, which resides inside `LogicManager`. It supports undoing of commands that modifies the state of the book shelf (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"qiu-siqi"},"content":"`UndoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"qiu-siqi"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undo-able_ way, such as saving the state of the book shelf before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":422,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":423,"author":{"gitID":"-"},"content":"----"},{"lineNumber":424,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":425,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":426,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":427,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":428,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":429,"author":{"gitID":"-"},"content":"}"},{"lineNumber":430,"author":{"gitID":"-"},"content":"----"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":433,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":434,"author":{"gitID":"-"},"content":"----"},{"lineNumber":435,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":437,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":441,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":442,"author":{"gitID":"-"},"content":"}"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":445,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":447,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":448,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"-"},"content":"}"},{"lineNumber":450,"author":{"gitID":"-"},"content":"----"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"qiu-siqi"},"content":"Suppose that the user has just launched the application. The `UndoStack` will be empty at the beginning."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"qiu-siqi"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th book in the book shelf. The current state of the book shelf is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"qiu-siqi"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"700\"]"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"qiu-siqi"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add 1` to add a new book."},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"qiu-siqi"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"700\"]"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":463,"author":{"gitID":"qiu-siqi"},"content":"If a command fails its execution, it will not be pushed to the `UndoStack` at all."},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"qiu-siqi"},"content":"The user now decides that adding the book was a mistake, and decides to undo that action using `undo`."},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"qiu-siqi"},"content":"We will pop the most recent command out of the `undoStack`. We will restore the book shelf to the state before the `add` command executed."},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"qiu-siqi"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"700\"]"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"qiu-siqi"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"700\"]"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"qiu-siqi"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"700\"]"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"qiu-siqi"},"content":"The following activity diagram summarize what happens inside the `UndoStack` when a user executes a new command:"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"qiu-siqi"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"550\"]"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":491,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":492,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":493,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":494,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":495,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo executes"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Individual command knows how to undo by itself."},{"lineNumber":500,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."},{"lineNumber":501,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":502,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Saves the entire book shelf."},{"lineNumber":503,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":504,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the book fetch (`add`, `clear`, `edit`)."},{"lineNumber":509,"author":{"gitID":"qiu-siqi"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost)."},{"lineNumber":510,"author":{"gitID":"qiu-siqi"},"content":"** Cons: User might think that undo also applies when the view is modified (for example `search`), only to realize that it does not do that, after executing `undo`."},{"lineNumber":511,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":512,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":513,"author":{"gitID":"qiu-siqi"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the book  shelf and not the view."},{"lineNumber":514,"author":{"gitID":"qiu-siqi"},"content":"**Additional Info:** See the discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":515,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"// tag::edit[]"},{"lineNumber":518,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Edit status, priority, and rating of books"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"The `edit` command allows the user to change the priority, status and rating of books in his/her book shelf to facilitate organization and management of books."},{"lineNumber":521,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":522,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":523,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"When `edit` command is entered,"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"qiu-siqi"},"content":". `EditCommandParser` will extract the index and the parameters from the user input."},{"lineNumber":527,"author":{"gitID":"qiu-siqi"},"content":". `EditCommandParser` checks that at least one parameter is present, and that the parameter(s) are valid."},{"lineNumber":528,"author":{"gitID":"qiu-siqi"},"content":". `EditCommandParser` creates an `EditCommand` with the index and parameter(s)."},{"lineNumber":529,"author":{"gitID":"qiu-siqi"},"content":". `EditCommand` is preprocessed to check that `ActiveListType` is correct and index is valid."},{"lineNumber":530,"author":{"gitID":"qiu-siqi"},"content":". The `Book` to edit (`bookToEdit`) is identified by the index. Another `Book` (`editedBook`) is created based on the specified parameters."},{"lineNumber":531,"author":{"gitID":"qiu-siqi"},"content":". `editedBook` replaces `bookToEdit` in `BookShelf`."},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"Sequence Diagram"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"image::editseq.png[width\u003d\"550\"]"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":540,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":541,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Presentation of rating"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"* **Alternative 1:** Show users the rating as a number."},{"lineNumber":544,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":545,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Not aesthetically appealing."},{"lineNumber":546,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Show users the rating as stars."},{"lineNumber":547,"author":{"gitID":"-"},"content":"** Pros: Difficult to implement."},{"lineNumber":548,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Improves the aesthetic appeal and clarity."},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Interpretation of unspecified parameters"},{"lineNumber":551,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":552,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Unspecified parameters are left unchanged."},{"lineNumber":553,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Users can omit parameters that they do not wish to change."},{"lineNumber":554,"author":{"gitID":"qiu-siqi"},"content":"** Cons: More difficult to implement."},{"lineNumber":555,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Unspecified parameters are set to default value."},{"lineNumber":556,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Easy to implement."},{"lineNumber":557,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Users need to specify all parameters to change one."},{"lineNumber":558,"author":{"gitID":"-"},"content":"// end::edit[]"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"qiu-siqi"},"content":"// tag::recent[]"},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View recently selected books"},{"lineNumber":562,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":563,"author":{"gitID":"qiu-siqi"},"content":"The `recent` command allows the user to view books that he/she recently selected."},{"lineNumber":564,"author":{"gitID":"qiu-siqi"},"content":"This allows the user to easily look back for a particular book, and to add it into his/her book shelf without having to perform a search again."},{"lineNumber":565,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":566,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":567,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":568,"author":{"gitID":"qiu-siqi"},"content":"Recently selected books are stored in a `UniqueBookCircularList` which resides in `ModelManager`."},{"lineNumber":569,"author":{"gitID":"qiu-siqi"},"content":"`Model` exposes a method `addRecentBook(Book)` to add new book selections. Whenever a new book is selected, `LogicManager` handles the `BookListSelectionChangedEvent` and adds the book into the list using `addRecentBook(Book)`."},{"lineNumber":570,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":571,"author":{"gitID":"qiu-siqi"},"content":"When `recent` is entered, it will be parsed into a `RecentCommand`, which when executed, sets the `ActiveListType` to `RECENT_BOOKS`."},{"lineNumber":572,"author":{"gitID":"qiu-siqi"},"content":"It then posts `ActiveListChangedEvent` to the `EventCenter` to signal this change. The interaction between components is shown in the diagram below."},{"lineNumber":573,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":574,"author":{"gitID":"qiu-siqi"},"content":"image::SequenceDiagramRecentCommandLogic.png[width\u003d\"550\"]"},{"lineNumber":575,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":576,"author":{"gitID":"qiu-siqi"},"content":"NOTE: `ActiveListType` is needed because the commands that users can perform on different lists differ. For example, users cannot delete books if the `ActiveListType` is `RECENT_BOOKS`."},{"lineNumber":577,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":578,"author":{"gitID":"qiu-siqi"},"content":"`ActiveListChangedEvent` is handled by `MainWindow`, which updates the list displayed in `BookListPanel`."},{"lineNumber":579,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":580,"author":{"gitID":"qiu-siqi"},"content":"image::SequenceDiagramRecentCommandEvent.png[width\u003d\"450\"]"},{"lineNumber":581,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":582,"author":{"gitID":"qiu-siqi"},"content":"`UniqueBookCircularList` has size 50 by default. For illustration purposes, assume we have a"},{"lineNumber":583,"author":{"gitID":"qiu-siqi"},"content":"`UniqueBookCircularList` of size 2 that is empty at the start. `ActiveListType` is `BOOK_SHELF`."},{"lineNumber":584,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":585,"author":{"gitID":"qiu-siqi"},"content":"The user performs `select 1` to view information on the 1st book in the book shelf. The"},{"lineNumber":586,"author":{"gitID":"qiu-siqi"},"content":"selected book is added onto the `UniqueBookCircularList`."},{"lineNumber":587,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":588,"author":{"gitID":"qiu-siqi"},"content":"image::RecentCommandListOne.png[width\u003d\"450\"]"},{"lineNumber":589,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":590,"author":{"gitID":"qiu-siqi"},"content":"NOTE: If select fails to execute (eg. given index is invalid), the list will remain unchanged."},{"lineNumber":591,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":592,"author":{"gitID":"qiu-siqi"},"content":"The user then selects another book with `select 2`. The book is added to the front of the `UniqueBookCircularList`."},{"lineNumber":593,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":594,"author":{"gitID":"qiu-siqi"},"content":"image::RecentCommandListTwo.png[width\u003d\"450\"]"},{"lineNumber":595,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":596,"author":{"gitID":"qiu-siqi"},"content":"NOTE: Selecting a book directly from the UI (without using `select` command) will also update the list according."},{"lineNumber":597,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":598,"author":{"gitID":"qiu-siqi"},"content":"Now if the user performs `select 1` again, the book `One`, which already exists in the list, will be removed"},{"lineNumber":599,"author":{"gitID":"qiu-siqi"},"content":"from the list and added again so that it is in the first index of the list (most recently selected)."},{"lineNumber":600,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":601,"author":{"gitID":"qiu-siqi"},"content":"image::RecentCommandListThree.png[width\u003d\"450\"]"},{"lineNumber":602,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":603,"author":{"gitID":"qiu-siqi"},"content":"Note that the `UniqueBookCircularList` is currently full. When user performs `select 3`, since"},{"lineNumber":604,"author":{"gitID":"qiu-siqi"},"content":"`Three` is not in the list, the book at the last index (the least recent selection) is removed to make space for `Three` (`Two` in this case)."},{"lineNumber":605,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":606,"author":{"gitID":"qiu-siqi"},"content":"image::RecentCommandListFour.png[width\u003d\"450\"]"},{"lineNumber":607,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":608,"author":{"gitID":"qiu-siqi"},"content":"NOTE: `UniqueBookCircularList::equals` is order sensitive since the order determines the recency."},{"lineNumber":609,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":610,"author":{"gitID":"qiu-siqi"},"content":"When Bibliotek is exited, the data in the `UniqueBookCircularList` is stored in the format"},{"lineNumber":611,"author":{"gitID":"qiu-siqi"},"content":"of `BookShelf`. This data is read and converted to `UniqueBookCircularList` upon opening Bibliotek."},{"lineNumber":612,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":613,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":614,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":615,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of selected books that are shown"},{"lineNumber":616,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":617,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** All books selected from the user\u0027s book shelf or search results."},{"lineNumber":618,"author":{"gitID":"qiu-siqi"},"content":"** Pros: More intuitive for the user."},{"lineNumber":619,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Users can easily find books in his book shelf. Including these books in `recent` list"},{"lineNumber":620,"author":{"gitID":"qiu-siqi"},"content":"may not be useful and take up space."},{"lineNumber":621,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Only books selected from the user\u0027s search results."},{"lineNumber":622,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Users are more likely to need `recent` to find these books. We can reduce clutter"},{"lineNumber":623,"author":{"gitID":"qiu-siqi"},"content":"by only showing these books."},{"lineNumber":624,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Less intuitive for the user. We also need to deal with books that are added or deleted after selection."},{"lineNumber":625,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":626,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to hold the recently selected books data"},{"lineNumber":627,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":628,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Make a new type of book list `UniqueBookCircularList`."},{"lineNumber":629,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Can make the size limit and add mechanism a property of the new list."},{"lineNumber":630,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Have to deal with multiple data structures to hold data for different purposes."},{"lineNumber":631,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Use `BookShelf`."},{"lineNumber":632,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Re-use of existing data structure."},{"lineNumber":633,"author":{"gitID":"qiu-siqi"},"content":"** Cons: `BookShelf` supports functionalities that are not needed to store recently selected books."},{"lineNumber":634,"author":{"gitID":"qiu-siqi"},"content":"// end::recent[]"},{"lineNumber":635,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":636,"author":{"gitID":"qiu-siqi"},"content":"// tag::library[]"},{"lineNumber":637,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Check for availability of book in NLB library"},{"lineNumber":638,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":639,"author":{"gitID":"qiu-siqi"},"content":"The `library` command allows the user to easily check for the availability of books in NLB libraries."},{"lineNumber":640,"author":{"gitID":"qiu-siqi"},"content":"This eliminates the need to manually enter search information into the NLB catalogue. The user can use this information to decide when or whether to read a book."},{"lineNumber":641,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":642,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":643,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":644,"author":{"gitID":"qiu-siqi"},"content":"When a `library` command is entered, a `LibraryCommand` will be created if the parsing of the command was successful, which will"},{"lineNumber":645,"author":{"gitID":"qiu-siqi"},"content":"make a call to `searchLibraryForBook(Book)` on the `Network` API. This will result in an asynchronous HTTP request being made to"},{"lineNumber":646,"author":{"gitID":"qiu-siqi"},"content":"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/MSGTRN/EXPNOS/NLBHOME?HOMEPRMS\u003dNLBGENPARAMS[NLB Catalogue]."},{"lineNumber":647,"author":{"gitID":"qiu-siqi"},"content":"Once the HTTP request completes, the operations in the `.thenApply(...)`, shown in the code block below, will execute."},{"lineNumber":648,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":649,"author":{"gitID":"qiu-siqi"},"content":"[source,java]"},{"lineNumber":650,"author":{"gitID":"qiu-siqi"},"content":"----"},{"lineNumber":651,"author":{"gitID":"qiu-siqi"},"content":"    private CompletableFuture\u003cString\u003e execute(String url, Book book) {"},{"lineNumber":652,"author":{"gitID":"-"},"content":"        return httpClient"},{"lineNumber":653,"author":{"gitID":"-"},"content":"                .makeGetRequest(url)"},{"lineNumber":654,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(NlbCatalogueApi::requireHtmlContentType)"},{"lineNumber":655,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(NlbCatalogueApi::requireHttpStatusOk)"},{"lineNumber":656,"author":{"gitID":"-"},"content":"                .thenApply(HttpResponse::getResponseBody)"},{"lineNumber":657,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(result -\u003e NlbResultHelper.getUrl(result, book));"},{"lineNumber":658,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":659,"author":{"gitID":"qiu-siqi"},"content":"----"},{"lineNumber":660,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":661,"author":{"gitID":"qiu-siqi"},"content":"This is summarized by the following activity diagram:"},{"lineNumber":662,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":663,"author":{"gitID":"qiu-siqi"},"content":"image::LibraryCommandActivityDiagram.png[width\u003d\"600\"]"},{"lineNumber":664,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":665,"author":{"gitID":"qiu-siqi"},"content":"The `CompletableFuture` completes exceptionally if the content type or status code is wrong."},{"lineNumber":666,"author":{"gitID":"qiu-siqi"},"content":"Else, a URL of the page showing availability of the target book, if any, is obtained."},{"lineNumber":667,"author":{"gitID":"qiu-siqi"},"content":"This depends on the response HTML, which can be categorized into the following:"},{"lineNumber":668,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":669,"author":{"gitID":"qiu-siqi"},"content":"* Full display (the page we want): The URL which the HTTP GET request was made to is returned."},{"lineNumber":670,"author":{"gitID":"qiu-siqi"},"content":"* Non-empty list of results: The URL of the top result is returned."},{"lineNumber":671,"author":{"gitID":"qiu-siqi"},"content":"* Empty list of results: A custom message, reporting that no result is found, is returned."},{"lineNumber":672,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":673,"author":{"gitID":"qiu-siqi"},"content":"Once the necessary result is obtained, the following method in `LibraryCommand` is executed:"},{"lineNumber":674,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":675,"author":{"gitID":"qiu-siqi"},"content":"[source,java]"},{"lineNumber":676,"author":{"gitID":"qiu-siqi"},"content":"----"},{"lineNumber":677,"author":{"gitID":"qiu-siqi"},"content":"    private void onSuccessfulRequest(String result, Book book) {"},{"lineNumber":678,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new ShowLibraryResultRequestEvent(result));"},{"lineNumber":679,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent(String.format(MESSAGE_SUCCESS, book)));"},{"lineNumber":680,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":681,"author":{"gitID":"qiu-siqi"},"content":"----"},{"lineNumber":682,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":683,"author":{"gitID":"qiu-siqi"},"content":"`ShowLibraryResultRequestEvent` is handled by `MainWindow` and `BookInLibraryPanel` to load the URL using a `WebView` and display the webpage."},{"lineNumber":684,"author":{"gitID":"qiu-siqi"},"content":"The loaded page is post-processed using a script to show only the relevant section."},{"lineNumber":685,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":686,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":687,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":688,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to show availability of the book"},{"lineNumber":689,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":690,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Load the webpage using a `WebView`."},{"lineNumber":691,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Immune to changes in structure of that webpage."},{"lineNumber":692,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Lesser flexibility in structure and content. Also subject to limitations of `WebView`."},{"lineNumber":693,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Extract the relevant information from the HTTP response and design a new panel to show the results."},{"lineNumber":694,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Greater control over structure and content."},{"lineNumber":695,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Vulnerable to changes in structure of that webpage."},{"lineNumber":696,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":697,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Using advanced search versus basic search"},{"lineNumber":698,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":699,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Perform basic search, which uses a HTTP GET request."},{"lineNumber":700,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Faster response time."},{"lineNumber":701,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Searched keyword seems to be matched to title or authors only."},{"lineNumber":702,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Perform advanced search, which uses a HTTP POST request."},{"lineNumber":703,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Able to limit the search results using more parameters such as publication year or ISBN."},{"lineNumber":704,"author":{"gitID":"qiu-siqi"},"content":"** Cons: Slower response time."},{"lineNumber":705,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":706,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Whether to load in `WebView` directly or pre-process through `Network` component"},{"lineNumber":707,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":708,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 1 (current choice):** Pre-process HTTP response in `Network` component, then send intended URL to `WebView`."},{"lineNumber":709,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Processing happens behind the scene, and does not distract the user."},{"lineNumber":710,"author":{"gitID":"qiu-siqi"},"content":"** Cons: User is subject to waiting times without feedback on progress. Furthermore, the control flow becomes more complicated since a URL still needs to be passed to and loaded on the `WebView` eventually."},{"lineNumber":711,"author":{"gitID":"qiu-siqi"},"content":"* **Alternative 2:** Load search URL in `WebView` and navigate to intended page using script."},{"lineNumber":712,"author":{"gitID":"qiu-siqi"},"content":"** Pros: Easier to implement. Eliminate the need to modify `Network` component."},{"lineNumber":713,"author":{"gitID":"qiu-siqi"},"content":"** Cons: User will be able to see the navigation between pages."},{"lineNumber":714,"author":{"gitID":"qiu-siqi"},"content":"// end::library[]"},{"lineNumber":715,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"// tag::alias[]"},{"lineNumber":717,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Command aliasing"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":"The command aliasing system allows the user to specify short command aliases to use in place of the original commands."},{"lineNumber":720,"author":{"gitID":"-"},"content":"This improves the user experience by reducing the amount of typing the user needs to do."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"The user can customize their command aliases using the `addalias` and `deletealias` commands."},{"lineNumber":725,"author":{"gitID":"-"},"content":"These commands allow the user to add and delete aliases respectively."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Adding command aliases"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"When the user attempts to add a new command alias using `addalias ALIAS_NAME cmd/COMMAND`, the user input will first be"},{"lineNumber":730,"author":{"gitID":"-"},"content":"validated and pre-processed by `AddAliasCommandParser`."},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"`AddAliasCommandParser` verifies that both the `ALIAS_NAME` and `COMMAND` are non-empty, before"},{"lineNumber":733,"author":{"gitID":"-"},"content":"searching the `COMMAND` for the first occurrence of an empty space that is followed by a named command parameter."},{"lineNumber":734,"author":{"gitID":"-"},"content":"Using this point, the parser will split the `COMMAND` into two parts - the prefix, and the named arguments."},{"lineNumber":735,"author":{"gitID":"-"},"content":"The figure below shows an example for the `edit 12 s/reading p/high` command."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"image::AliasSampleCommand.png[width\u003d\"300\"]"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"The searching and splitting is accomplished using the following regular expression."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":742,"author":{"gitID":"-"},"content":"----"},{"lineNumber":743,"author":{"gitID":"-"},"content":"    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cprefix\u003e((?! \\\\w+\\\\/.*)[\\\\S ])+)(?\u003cnamedArgs\u003e.*)\");"},{"lineNumber":744,"author":{"gitID":"-"},"content":"----"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"Following this pre-processing step, a new `Alias` will be created using the alias name, command prefix, and named arguments."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"----"},{"lineNumber":750,"author":{"gitID":"-"},"content":"    private static Alias createAlias(String aliasName, Matcher commandMatcher) {"},{"lineNumber":751,"author":{"gitID":"-"},"content":"        return new Alias(aliasName, commandMatcher.group(\"prefix\"), commandMatcher.group(\"namedArgs\"));"},{"lineNumber":752,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":753,"author":{"gitID":"-"},"content":"----"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"The `Alias` is then added to the `UniqueAliasList` in `ModelManager`, and this update will cause an `AliasListChangedEvent` to be posted."},{"lineNumber":756,"author":{"gitID":"-"},"content":"The event is handled by `StorageManager`, which saves the updated alias list to `data/aliaslist.xml`."},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"NOTE: There are currently no checks in place to prevent the user from adding a command alias that refers to an invalid or non-existent built-in command."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Using command aliases"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"The user can use command aliases in the same way they use normal commands. In this section, we assume that the user added `rd` as an alias for `edit s/reading`."},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"Whenever a command is entered into the command box, the command will be passed by `LogicManager` into `BookShelfParser#applyCommandAlias`,"},{"lineNumber":765,"author":{"gitID":"-"},"content":"where an attempt will be made to apply a matching command alias."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"The application of a command alias begins by splitting the input into three parts - the alias name (first word in the input), unnamed arguments, and named arguments."},{"lineNumber":768,"author":{"gitID":"-"},"content":"The figure below shows an example for the `rd 12 p/high` command."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"image::AliasSampleCommand2.png[width\u003d\"300\"]"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"This splitting is accomplished using the following regular expression."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":775,"author":{"gitID":"-"},"content":"----"},{"lineNumber":776,"author":{"gitID":"-"},"content":"    private static final Pattern ALIASED_COMMAND_FORMAT \u003d"},{"lineNumber":777,"author":{"gitID":"-"},"content":"            Pattern.compile(\" *(?\u003caliasName\u003e\\\\S+)(?\u003cunnamedArgs\u003e((?! [\\\\w]+\\\\/.*)[\\\\S ])*)(?\u003cnamedArgs\u003e.*)\");"},{"lineNumber":778,"author":{"gitID":"-"},"content":"----"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"If the alias name matches that of an existing alias, then the alias will be applied."},{"lineNumber":781,"author":{"gitID":"-"},"content":"Otherwise, the input will be returned unchanged. In this case, the alias named `rd` will be applied."},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"The result of the application of the alias is a new command that is formed by splicing parts of the user input into the aliased command."},{"lineNumber":784,"author":{"gitID":"-"},"content":"Using `rd 12 p/high` as the user input, this process is demonstrated in the figure below."},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"image::AliasApplication.png[width\u003d\"560\"]"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"The resulting command, `edit 12 s/reading p/high`, will then be parsed and executed, instead of the original user input."},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Inclusion of command parameters in aliases"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Allow aliasing of command parameters, together with the command word."},{"lineNumber":795,"author":{"gitID":"-"},"content":"** Pros: Increases the usefulness of the command aliasing system."},{"lineNumber":796,"author":{"gitID":"-"},"content":"** Cons: Less straightforward to implement, especially considering that some commands may require an index that comes before the named parameters."},{"lineNumber":797,"author":{"gitID":"-"},"content":"* **Alternative 2:** Only allow command words to be aliased."},{"lineNumber":798,"author":{"gitID":"-"},"content":"** Pros: More straightforward to implement."},{"lineNumber":799,"author":{"gitID":"-"},"content":"** Cons: Limits the usefulness of the command aliasing system, especially for users who may need to use certain commands that contain parameters regularly, e.g. `list s/high by/status`."},{"lineNumber":800,"author":{"gitID":"-"},"content":"// end::alias[]"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"// tag::encrypt[]"},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypt data"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"This allows the user to protect his book shelf data with a password so that others cannot gain access to these data."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Encrypt the Bookshelf.xml"},{"lineNumber":810,"author":{"gitID":"-"},"content":"An addition class `CipherEngine` is added to the `Bookshelf` class. This class contatins some methods"},{"lineNumber":811,"author":{"gitID":"-"},"content":"  to encrypt or decrypt file(`Bookshelf.xml`)and `password`. +"},{"lineNumber":812,"author":{"gitID":"-"},"content":"  Note that when \u0027CipherEngine\u0027 encrypt the file, it will use the (encryped)`password`."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"  * ** Every time user make change in `Bookshelf` **"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"  . The `model manager` will post an `BookshelfChangedEvent`."},{"lineNumber":817,"author":{"gitID":"-"},"content":"  . Before saving the data into `Bookshelf.xml`, the system will check whether `Bookshelf` is protected by the `password`(checking"},{"lineNumber":818,"author":{"gitID":"-"},"content":"  whether the `password` is `defaultpassword`: \"\")."},{"lineNumber":819,"author":{"gitID":"-"},"content":"  . When the `password` is not default, the `Bookshelf.xml` will be encrypted."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"  * ** Every time user set the new `password` **"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"  . The `Setpwcommand` will check the `password`."},{"lineNumber":824,"author":{"gitID":"-"},"content":"  . If the new `password` is equal to \"\", the `Lockmanager` will set `isProtected` to be false."},{"lineNumber":825,"author":{"gitID":"-"},"content":"  . The isProtect will be checked by `xmlBookshelfstorage` whether to  encrypt the \"Bookshelf.xml\" and save"},{"lineNumber":826,"author":{"gitID":"-"},"content":"   the data into `Bookshelf.xml`."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"  * ** When the system need to be encrypt **"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"  . The `password` will be encode, and set it to be a key to encrypt the file(`Bookshelf.xml`)."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Lock the book shelf"},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"An addition class `LockManager` is added to save the password and the situation of the locking system. +"},{"lineNumber":835,"author":{"gitID":"-"},"content":"The default `password` provided for the new user is defaultpassword(\"\"), which means that the `Bookshelf` is not locked."},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"  * ** When `Lock` command is entered **"},{"lineNumber":838,"author":{"gitID":"-"},"content":"  . `LockCommand` is processed to set `isLock`(`LockManager`) to be true."},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"NOTE:  . The `Bookshelf` cannot be run any command except `unlock` and `help` command."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"  * **When the `Bookshelf` is locked and `unlock` command is entered**"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"  . `UnlockCommandParser` will extract `password` from the user input."},{"lineNumber":846,"author":{"gitID":"-"},"content":"  . `UnlockCommandParser` creates an `UnlockCommand` for the `password`."},{"lineNumber":847,"author":{"gitID":"-"},"content":"  . `UnlockCommand` is preprocessed to execute `LockManager`\u0027s unlock(password)."},{"lineNumber":848,"author":{"gitID":"-"},"content":"  . If the password is corrct, the unlock will be run successfully, otherwise it will send a WRONG_PASSWORD commandresult."},{"lineNumber":849,"author":{"gitID":"-"},"content":"  . `UnlockCommand` is processed to set isLock(LockManager) to be false."},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"  * **When `setpw` command is entered**"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"  . `setpasswordCommandParser` will extract the old key and new key from the user input."},{"lineNumber":854,"author":{"gitID":"-"},"content":"  . `setpwParser` checks that  two parameters are valid."},{"lineNumber":855,"author":{"gitID":"-"},"content":"  . `setpasswordCommandParser` creates an `setpwCommand` with the parameters."},{"lineNumber":856,"author":{"gitID":"-"},"content":"  . `setpwCommand` is preprocessed to check that oldKey is correct using `LockManager`."},{"lineNumber":857,"author":{"gitID":"-"},"content":"  . If the oldKey is correct, `setpwCommand` will post a `passwordChangedevent`."},{"lineNumber":858,"author":{"gitID":"-"},"content":"  . MainApp will handle it, and set `UserPrefs.password` to be new encoded `password`(using cipherEngine)."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"  * The encode key are implement in this way:"},{"lineNumber":861,"author":{"gitID":"-"},"content":"  [source,java]"},{"lineNumber":862,"author":{"gitID":"-"},"content":"----"},{"lineNumber":863,"author":{"gitID":"-"},"content":"    public static String encrypKey(String mykey) throws Exception {"},{"lineNumber":864,"author":{"gitID":"-"},"content":"        byte[] byarray \u003d encrypt(mykey.getBytes(ENCODE), defaultKey.getBytes(ENCODE));"},{"lineNumber":865,"author":{"gitID":"-"},"content":"        String encryptkey \u003d new BASE64Encoder().encode(byarray);"},{"lineNumber":866,"author":{"gitID":"-"},"content":"        return encryptkey;"},{"lineNumber":867,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"    public static byte[] encrypt(byte[] mykey, byte[] key) throws Exception {"},{"lineNumber":870,"author":{"gitID":"-"},"content":"        SecureRandom secureRandom \u003d new SecureRandom();"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"        DESKeySpec desKeySpec \u003d new DESKeySpec(key);"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"        SecretKeyFactory secretKeyFactory \u003d SecretKeyFactory.getInstance(DES);"},{"lineNumber":875,"author":{"gitID":"-"},"content":"        SecretKey securekey \u003d secretKeyFactory.generateSecret(desKeySpec);"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"        Cipher cipher \u003d Cipher.getInstance(DES);"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"        cipher.init(Cipher.ENCRYPT_MODE, securekey, secureRandom);"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"        return cipher.doFinal(mykey);"},{"lineNumber":882,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":883,"author":{"gitID":"-"},"content":"----"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"* The encode key are implement in this way:"},{"lineNumber":886,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":887,"author":{"gitID":"-"},"content":"----"},{"lineNumber":888,"author":{"gitID":"-"},"content":"    public static String decryptKey(String yourkey) throws IOException, Exception {"},{"lineNumber":889,"author":{"gitID":"-"},"content":"        if (yourkey \u003d\u003d null) {"},{"lineNumber":890,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":891,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":892,"author":{"gitID":"-"},"content":"        BASE64Decoder base64Decoder \u003d new BASE64Decoder();"},{"lineNumber":893,"author":{"gitID":"-"},"content":"        byte[] decodeBuffer \u003d base64Decoder.decodeBuffer(yourkey);"},{"lineNumber":894,"author":{"gitID":"-"},"content":"        byte[] bytes \u003d decrypt(decodeBuffer, defaultKey.getBytes(ENCODE));"},{"lineNumber":895,"author":{"gitID":"-"},"content":"        return new String(bytes, ENCODE);"},{"lineNumber":896,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"    private static byte[] decrypt(byte[] yourkey, byte[] key) throws Exception {"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"        SecureRandom secureRandom \u003d new SecureRandom();"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"        DESKeySpec desKeySpec \u003d new DESKeySpec(key);"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"        SecretKeyFactory secretKeyFactory \u003d SecretKeyFactory.getInstance(DES);"},{"lineNumber":905,"author":{"gitID":"-"},"content":"        SecretKey securekey \u003d secretKeyFactory.generateSecret(desKeySpec);"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"        Cipher cipher \u003d Cipher.getInstance(DES);"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"        cipher.init(Cipher.DECRYPT_MODE, securekey, secureRandom);"},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"        return cipher.doFinal(yourkey);"},{"lineNumber":912,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":913,"author":{"gitID":"-"},"content":"----"},{"lineNumber":914,"author":{"gitID":"-"},"content":"// end::encrypt[]"},{"lineNumber":915,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":916,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":917,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Whether to use three commands instead of only one"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use three commands to do the lock, unlock and setpassword actions."},{"lineNumber":921,"author":{"gitID":"-"},"content":"** Pros: Users can clearly know what they can do about the password."},{"lineNumber":922,"author":{"gitID":"-"},"content":"** Cons: Users should learn two more commands."},{"lineNumber":923,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use only one `setpw` command to solve all three features."},{"lineNumber":924,"author":{"gitID":"-"},"content":"** Pros: Seem that users can eliminate the typing."},{"lineNumber":925,"author":{"gitID":"-"},"content":"** Cons: Users will feel confuse, not so clear about the command."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Whether to encode the password before store it"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Stores the encoded password."},{"lineNumber":930,"author":{"gitID":"-"},"content":"** Pros: Others cannot know users\u0027 passwords easily."},{"lineNumber":931,"author":{"gitID":"-"},"content":"** Cons: Difficult to implement."},{"lineNumber":932,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store the text form password."},{"lineNumber":933,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":934,"author":{"gitID":"-"},"content":"** Cons: Others can know users\u0027 passwords easily."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"qiu-siqi"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":941,"author":{"gitID":"qiu-siqi"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."},{"lineNumber":942,"author":{"gitID":"qiu-siqi"},"content":"* Currently log messages are output through `Console` and to a `.log` file."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"qiu-siqi"},"content":"Below are the different *logging levels* and descriptions of when each level should be used."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"qiu-siqi"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application."},{"lineNumber":947,"author":{"gitID":"qiu-siqi"},"content":"* `WARNING` : Can continue, but with caution."},{"lineNumber":948,"author":{"gitID":"qiu-siqi"},"content":"* `INFO` : Information showing the noteworthy actions by the App."},{"lineNumber":949,"author":{"gitID":"qiu-siqi"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"qiu-siqi"},"content":"Certain properties of the application (e.g App name, logging level) can be controlled through the configuration file (default: `config.json` which can be found in your project folder)."},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":961,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":966,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":979,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":980,"author":{"gitID":"qiu-siqi"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu. You should see a pop-up similar to Figure 12 below."},{"lineNumber":981,"author":{"gitID":"qiu-siqi"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, follow the settings as indicated in Figure 12."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":984,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":987,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"qiu-siqi"},"content":"This section includes some information that may be useful for testing the project."},{"lineNumber":990,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":996,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"qiu-siqi"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."},{"lineNumber":1001,"author":{"gitID":"qiu-siqi"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"qiu-siqi"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX, window\u003d\"_blank\"_] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"qiu-siqi"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"qiu-siqi"},"content":".  *GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":1021,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1022,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1023,"author":{"gitID":"qiu-siqi"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1036,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"qiu-siqi"},"content":"**Problem: `AddCommandSystemTest` or `SearchCommandSystemTest` fails with a `GuiRobot$EventTimeoutException`.**"},{"lineNumber":1039,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1040,"author":{"gitID":"qiu-siqi"},"content":"* Reason: The required data could not be fetched from the online service within 10s. The service could be down at the moment."},{"lineNumber":1041,"author":{"gitID":"qiu-siqi"},"content":"* Solution: Check that you are connected to the Internet, or if you are, try again later."},{"lineNumber":1042,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"qiu-siqi"},"content":"This section contains some information or tools that may be useful for managing the project."},{"lineNumber":1046,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"We use https://circleci.com/[CircleCI, window\u003d\"_blank\"], https://travis-ci.org/[Travis CI, window\u003d\"_blank\"], and https://www.appveyor.com/[AppVeyor, window\u003d\"_blank\"_] to perform _Continuous Integration_ on our projects."},{"lineNumber":1054,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingCircleCI#, UsingCircleCI.adoc\u003e\u003e, \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e, and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls, window\u003d\"_blank\"] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify, window\u003d\"_blank\"] to see a preview of how the"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`, window\u003d\"_blank\"]."},{"lineNumber":1069,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1070,"author":{"gitID":"qiu-siqi"},"content":".  Tag the repo with the version number, e.g. `v0.1`."},{"lineNumber":1071,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub, window\u003d\"_blank\"] and upload the JAR file you created."},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Bibliotek depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library, window\u003d\"_blank\"_] for XML parsing."},{"lineNumber":1076,"author":{"gitID":"qiu-siqi"},"content":"We make use of Gradle to manage the project dependencies. Gradle can automate the downloading of these dependencies, saving us time and effort."},{"lineNumber":1077,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1078,"author":{"gitID":"qiu-siqi"},"content":"While strongly discouraged by us, you can nevertheless opt for one of the following alternatives."},{"lineNumber":1079,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1080,"author":{"gitID":"qiu-siqi"},"content":"* Include those libraries in the repo (though this bloats the repo size)."},{"lineNumber":1081,"author":{"gitID":"qiu-siqi"},"content":"* Download those libraries manually (though this creates extra work for you)."},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"qiu-siqi"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for a new user, who has not set up any custom aliases yet, to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"qiu-siqi"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all books in the list."},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1110,"author":{"gitID":"qiu-siqi"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/EditCommand.java[`EditCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `EditCommand#COMMAND_ALIAS`)."},{"lineNumber":1111,"author":{"gitID":"qiu-siqi"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/BookShelfParser.java[`BookShelfParser`] is responsible for analyzing command words."},{"lineNumber":1112,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1113,"author":{"gitID":"qiu-siqi"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/BookShelfParser.java[`BookShelfParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1114,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1115,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1116,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1117,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"qiu-siqi"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove all custom aliases for a certain command, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"qiu-siqi"},"content":". Add a `removeAliasForCommand(String)` method. All aliases for the specified command will be removed from the alias list."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1131,"author":{"gitID":"qiu-siqi"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/alias/UniqueAliasList.java[`UniqueAliasList`] API need to be updated."},{"lineNumber":1132,"author":{"gitID":"qiu-siqi"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting aliases?"},{"lineNumber":1133,"author":{"gitID":"qiu-siqi"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/alias/UniqueAliasList.java[`UniqueAliasList`] and link:{repoURL}/src/main/java/seedu/address/model/alias/Alias.java[`Alias`] classes are used in implementing the removal logic. link:{repoURL}/src/main/java/seedu/address/model/alias/UniqueAliasList.java[`UniqueAliasList`] allows you to remove an alias, and link:{repoURL}/src/main/java/seedu/address/model/alias/Alias.java[`Alias`] allows you to access the alias prefix."},{"lineNumber":1134,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1135,"author":{"gitID":"qiu-siqi"},"content":"** Implement a `removeAliasWithPrefix(String)` method in link:{repoURL}/src/main/java/seedu/address/model/alias/UniqueAliasList.java[`UniqueAliasList`]. Loop through each alias, and remove the alias if the prefix of the alias matches the given `String`."},{"lineNumber":1136,"author":{"gitID":"qiu-siqi"},"content":"** Add a new API method `removeAliasForCommand(String)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `UniqueAliasList#removeAliasWithPrefix(String)`."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1138,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"qiu-siqi"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how users use Bibliotek. You realize that one user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A second user keeps scrolling down the list, because he keeps forgetting the index of the last book in the list. Your job is to implement improvements to the UI to solve these problems."},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1149,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1161,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1162,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1164,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1165,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1167,"author":{"gitID":"qiu-siqi"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/BibliotekSystemTest.java[`BibliotekSystemTest#assertCommandBoxShowsDefaultStyle() and BibliotekSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1169,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1170,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"qiu-siqi"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of books in the book shelf."},{"lineNumber":1173,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1185,"author":{"gitID":"qiu-siqi"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the book shelf is updated."},{"lineNumber":1186,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1187,"author":{"gitID":"qiu-siqi"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of books when the application just started."},{"lineNumber":1188,"author":{"gitID":"qiu-siqi"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleBookShelfChangedEvent(BookShelfChangedEvent)`] to update the number of books whenever there are new changes to the book shelf."},{"lineNumber":1189,"author":{"gitID":"qiu-siqi"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of books status, just like what we did for save location and sync status."},{"lineNumber":1190,"author":{"gitID":"qiu-siqi"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/BibliotekSystemTest.java[`BibliotekSystemTest`] to also verify the new total number of books status bar."},{"lineNumber":1191,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1192,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"qiu-siqi"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the book shelf to the cloud. However, the current implementation of the application constantly saves the book shelf after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the book shelf storage."},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"qiu-siqi"},"content":". Add a new method `backupBookShelf(ReadOnlyBookShelf)`, so that the book shelf can be saved in a fixed temporary location."},{"lineNumber":1203,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1206,"author":{"gitID":"qiu-siqi"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/BookShelfStorage.java[`BookShelfStorage`] interface."},{"lineNumber":1207,"author":{"gitID":"qiu-siqi"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlBookShelfStorage.java[`XmlBookShelfStorage`] class."},{"lineNumber":1208,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1210,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"qiu-siqi"},"content":"*Scenario:* You are a software maintainer for Bibliotek, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular book, by providing a flexible `remark` field for each book. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1220,"author":{"gitID":"qiu-siqi"},"content":"Edits the remark for a book specified in the `INDEX`. +"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"qiu-siqi"},"content":"* `remark 1 r/Recommended by YX.` +"},{"lineNumber":1226,"author":{"gitID":"qiu-siqi"},"content":"Edits the remark for the first book to `Recommended by YX.`"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1228,"author":{"gitID":"qiu-siqi"},"content":"Removes the remark for the first book."},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1238,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/BookShelfParser.java[`BookShelfParser`] to accept a `RemarkCommand`."},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1243,"author":{"gitID":"qiu-siqi"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/BookShelfParserTest.java[`BookShelfParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1246,"author":{"gitID":"qiu-siqi"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Recommended by YX.`"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1251,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1252,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/BookShelfParser.java[`BookShelfParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1257,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1259,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/BookShelfParserTest.java[`BookShelfParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `BookCard`"},{"lineNumber":1262,"author":{"gitID":"qiu-siqi"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/BookCard.java[`BookCard`] s to display a remark for each book later."},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"qiu-siqi"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/BookListCard.fxml[`BookListCard.fxml`]."},{"lineNumber":1267,"author":{"gitID":"qiu-siqi"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/BookCard.java[`BookCard`] to tie the variable to the actual label."},{"lineNumber":1268,"author":{"gitID":"-"},"content":""},{"lineNumber":1269,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/BookCardHandle.java[`BookCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1274,"author":{"gitID":"qiu-siqi"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/book/Book.java[`Book`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"qiu-siqi"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/book/Description.java[`Description`] and change the names accordingly)."},{"lineNumber":1279,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Book` to support a `Remark` field"},{"lineNumber":1286,"author":{"gitID":"qiu-siqi"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/book/Book.java[`Book`]."},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"qiu-siqi"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/book/Book.java[`Book`]."},{"lineNumber":1291,"author":{"gitID":"qiu-siqi"},"content":". You may assume that the user will not be able to use the `edit` command to modify the remarks field."},{"lineNumber":1292,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `bookshelf.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedBook` class"},{"lineNumber":1295,"author":{"gitID":"qiu-siqi"},"content":"We now have `Remark` s for `Book` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedBook.java[`XmlAdaptedBook`] to include a `Remark` field so that it will be saved."},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"qiu-siqi"},"content":". Fix `invalidAndValidBookBookShelf.xml`, `typicalBooksBookShelf.xml`, `validBookShelf.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `BookBuilder`"},{"lineNumber":1306,"author":{"gitID":"qiu-siqi"},"content":"Since `Book` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/BookBuilder.java[`BookBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/book/Book.java[`Book`]."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"qiu-siqi"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/BookBuilder.java[`BookBuilder`]. This method will create a new `Remark` for the book that it is currently building."},{"lineNumber":1311,"author":{"gitID":"qiu-siqi"},"content":". Try and use the method on any sample `Book` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalBooks.java[`TypicalBooks`]."},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `BookCard`"},{"lineNumber":1314,"author":{"gitID":"qiu-siqi"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/BookCard.java[`BookCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/BookCard.java[`BookCard`]\u0027s constructor to bind the `Remark` field to the `Book` \u0027s remark."},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"qiu-siqi"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysBook(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1325,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"qiu-siqi"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a book."},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"qiu-siqi"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution in the context of an address book application. Mapping the solution to the context of Bibliotek is left as an exercise."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"qiu-siqi"},"content":"* has a need to catalogue a significant number of books"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1347,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"qiu-siqi"},"content":"*Value proposition*: manage books faster than a typical mouse/GUI driven app"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1353,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1354,"author":{"gitID":"takuyakanbr"},"content":"[discrete]"},{"lineNumber":1355,"author":{"gitID":"takuyakanbr"},"content":"\u003d\u003d\u003d\u003d Qiu Siyu"},{"lineNumber":1356,"author":{"gitID":"takuyakanbr"},"content":"* **Search for books using Google Books API** (major)"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"** Added network component to support making asychronous HTTP requests."},{"lineNumber":1358,"author":{"gitID":"-"},"content":"** Added `search` command to allow the user to search for books on Google Books."},{"lineNumber":1359,"author":{"gitID":"takuyakanbr"},"content":"** This allows the user to easily search for particular books, and add them without having to enter all the information manually (using the updated `add` command)."},{"lineNumber":1360,"author":{"gitID":"-"},"content":"* **Customize command aliases to use in place of full commands** (minor)"},{"lineNumber":1361,"author":{"gitID":"qiu-siqi"},"content":"** Added `addalias`, `aliases` and `deletealias` commands to allow adding, viewing and deleting of aliases."},{"lineNumber":1362,"author":{"gitID":"-"},"content":"** Updated command parser to support command aliases."},{"lineNumber":1363,"author":{"gitID":"-"},"content":"** Updated storage component to save command aliases in XML format."},{"lineNumber":1364,"author":{"gitID":"-"},"content":"** This allows users to reduce the amount of typing needed."},{"lineNumber":1365,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1366,"author":{"gitID":"qiu-siqi"},"content":"[discrete]"},{"lineNumber":1367,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d\u003d Qiu Siqi"},{"lineNumber":1368,"author":{"gitID":"qiu-siqi"},"content":"* **Search for books in the library** (major)"},{"lineNumber":1369,"author":{"gitID":"qiu-siqi"},"content":"** Updated network component to support NLB catalogue."},{"lineNumber":1370,"author":{"gitID":"qiu-siqi"},"content":"** Added `library` command to perform search in NLB catalogue."},{"lineNumber":1371,"author":{"gitID":"qiu-siqi"},"content":"** This allows the user to easily check the availability of books."},{"lineNumber":1372,"author":{"gitID":"qiu-siqi"},"content":"* **Get recently viewed books** (minor)"},{"lineNumber":1373,"author":{"gitID":"qiu-siqi"},"content":"** Added a `recent` command that allows user to view previous selections that he did not add into his book shelf."},{"lineNumber":1374,"author":{"gitID":"qiu-siqi"},"content":"** This allows the user to reconsider his choices without having to perform the search again."},{"lineNumber":1375,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Shi Jin"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"* **Mark a book as read, change the priority of a book and rate books** (major)"},{"lineNumber":1379,"author":{"gitID":"qiu-siqi"},"content":"** Added `edit` command that allows user to rate, set status and change priority of"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"some books."},{"lineNumber":1381,"author":{"gitID":"-"},"content":"** This allows the user to keep track of what to read and what have been read and give recommendations to others."},{"lineNumber":1382,"author":{"gitID":"qiu-siqi"},"content":"* **Encrypt data with a password** (minor)"},{"lineNumber":1383,"author":{"gitID":"qiu-siqi"},"content":"** Add an `encrypt` command to encrypt data with a password."},{"lineNumber":1384,"author":{"gitID":"qiu-siqi"},"content":"** This allows users to keep their data private and safe."},{"lineNumber":1385,"author":{"gitID":"-"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Jianghao"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"* **Get command auto-completion suggestions** (major)"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"** Add auto-completion suggestions for command."},{"lineNumber":1390,"author":{"gitID":"-"},"content":"** This allows the user to reduce the amount of typing needed."},{"lineNumber":1391,"author":{"gitID":"-"},"content":"* **View hints when typing command** (minor)"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"** Add hints to UI when typing commands."},{"lineNumber":1393,"author":{"gitID":"-"},"content":"** This helps the user to recall the syntax of the command."},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"takuyakanbr"},"content":"[width\u003d\"70%\",cols\u003d\"\u003c18%,\u003c18%,29%,34%\",options\u003d\"header\",]"},{"lineNumber":1401,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1402,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1403,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1404,"author":{"gitID":"-"},"content":""},{"lineNumber":1405,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |search for books |find new books to read"},{"lineNumber":1406,"author":{"gitID":"-"},"content":""},{"lineNumber":1407,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |add books |keep track of what to read and what have been read"},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |view a listing of my books |decide what to read next"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |view a single book |obtain more information about it"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |delete books |remove books I no longer want to read"},{"lineNumber":1414,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1415,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |mark a book as read |keep track of what to read and what have been read"},{"lineNumber":1416,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1417,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |change the priority of a book |keep track of what to read and what have been read"},{"lineNumber":1418,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1419,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |filter books by title, author, tag, priority, etc. |easily find my books"},{"lineNumber":1420,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1421,"author":{"gitID":"takuyakanbr"},"content":"|`* * *` |user |sort books by title, author, tag, priority, etc. |easily find my books"},{"lineNumber":1422,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1423,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |view the books I recently looked at |reconsider my choices"},{"lineNumber":1424,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1425,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |undo my commands |change my mind"},{"lineNumber":1426,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1427,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |redo my undone commands |change my mind twice"},{"lineNumber":1428,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1429,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |view book reviews |decide on suitability of book"},{"lineNumber":1430,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1431,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |rate books |give recommendations to others"},{"lineNumber":1432,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1433,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |search the library catalogue |check for availability of the book"},{"lineNumber":1434,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1435,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |add books to my watchlist |get updated on the availability of the book in the library"},{"lineNumber":1436,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1437,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |order books from online services |get access to them"},{"lineNumber":1438,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1439,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |power user |use aliases in place of full commands |reduce the amount of typing needed"},{"lineNumber":1440,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1441,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |view hints when typing commands |recall the syntax of the command"},{"lineNumber":1442,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1443,"author":{"gitID":"qiu-siqi"},"content":"|`* *` |user |get command auto-completion suggestions |reduce the amount of typing needed"},{"lineNumber":1444,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1445,"author":{"gitID":"qiu-siqi"},"content":"|`* *` |user |change the theme of the App |choose a theme I prefer"},{"lineNumber":1446,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1447,"author":{"gitID":"takuyakanbr"},"content":"|`* *` |user |add and open eBook files |easily open and read my eBooks"},{"lineNumber":1448,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1449,"author":{"gitID":"qiu-siqi"},"content":"|`*` |user |obtain recommendations |get exposure to more books"},{"lineNumber":1450,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1451,"author":{"gitID":"takuyakanbr"},"content":"|`*` |user |add book reviews |share with others my thoughts"},{"lineNumber":1452,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1453,"author":{"gitID":"takuyakanbr"},"content":"|`*` |user |open eBooks in the App |easily read my eBooks"},{"lineNumber":1454,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1455,"author":{"gitID":"takuyakanbr"},"content":"|`*` |user |import list of books from online services |easily populate my collection of books"},{"lineNumber":1456,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1457,"author":{"gitID":"takuyakanbr"},"content":"|`*` |user |change the font size of the App |make the text easier on my eyes"},{"lineNumber":1458,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":1459,"author":{"gitID":"takuyakanbr"},"content":"|`*` |user |encrypt my data using a password |keep my data secure"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1461,"author":{"gitID":"-"},"content":""},{"lineNumber":1462,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1465,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1466,"author":{"gitID":"-"},"content":""},{"lineNumber":1467,"author":{"gitID":"qiu-siqi"},"content":"(For all use cases below, the *System* is `Bibliotek` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1470,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Use case: UC1 - View my reading list"},{"lineNumber":1471,"author":{"gitID":"-"},"content":""},{"lineNumber":1472,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"qiu-siqi"},"content":"1.  User requests to list all books in his reading list."},{"lineNumber":1475,"author":{"gitID":"592363789"},"content":"2.  Bibliotek shows a list of the books."},{"lineNumber":1476,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1483,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1485,"author":{"gitID":"qiu-siqi"},"content":"** 2a1. Bibliotek shows an empty list."},{"lineNumber":1486,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1487,"author":{"gitID":"qiu-siqi"},"content":"Use case ends."},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"qiu-siqi"},"content":"[discrete]"},{"lineNumber":1490,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Use case: UC2 - Search for books"},{"lineNumber":1491,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1492,"author":{"gitID":"qiu-siqi"},"content":"*MSS*"},{"lineNumber":1493,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1494,"author":{"gitID":"qiu-siqi"},"content":"1.  User performs a search with some constraints (title, author, etc.)."},{"lineNumber":1495,"author":{"gitID":"qiu-siqi"},"content":"2.  Bibliotek lists books satisfying all the constraints."},{"lineNumber":1496,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1498,"author":{"gitID":"-"},"content":""},{"lineNumber":1499,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1500,"author":{"gitID":"-"},"content":""},{"lineNumber":1501,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1502,"author":{"gitID":"qiu-siqi"},"content":"* 2a. Bibliotek doesn’t find any books satisfying all the constraints."},{"lineNumber":1503,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1504,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1505,"author":{"gitID":"qiu-siqi"},"content":"** 2a1. Bibliotek shows an empty list."},{"lineNumber":1506,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1507,"author":{"gitID":"qiu-siqi"},"content":"Use case ends."},{"lineNumber":1508,"author":{"gitID":"-"},"content":""},{"lineNumber":1509,"author":{"gitID":"qiu-siqi"},"content":"* 2b. Bibliotek cannot fetch the list of books within 5s."},{"lineNumber":1510,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":1511,"author":{"gitID":"qiu-siqi"},"content":"[none]"},{"lineNumber":1512,"author":{"gitID":"qiu-siqi"},"content":"** 2b1. Bibliotek shows an error message."},{"lineNumber":1513,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":1514,"author":{"gitID":"qiu-siqi"},"content":"Use case ends."},{"lineNumber":1515,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1516,"author":{"gitID":"592363789"},"content":"[discrete]"},{"lineNumber":1517,"author":{"gitID":"592363789"},"content":"\u003d\u003d\u003d Use case: UC3 - View a specific book"},{"lineNumber":1518,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1519,"author":{"gitID":"592363789"},"content":"*MSS*"},{"lineNumber":1520,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1521,"author":{"gitID":"592363789"},"content":"1. User obtains a list of books by listing (\u003c\u003cUse case: UC1 - View my reading list, *UC1*\u003e\u003e)"},{"lineNumber":1522,"author":{"gitID":"592363789"},"content":"                                            or searching (\u003c\u003cUse case: UC2 - Search for books,*UC2*\u003e\u003e)."},{"lineNumber":1523,"author":{"gitID":"592363789"},"content":"2. User requests to view more information on a specific book in the list."},{"lineNumber":1524,"author":{"gitID":"592363789"},"content":"3. Bibliotek shows detailed information of the book."},{"lineNumber":1525,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1526,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1527,"author":{"gitID":"-"},"content":""},{"lineNumber":1528,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1531,"author":{"gitID":"592363789"},"content":"* 2a. User does not find the intended book in the list."},{"lineNumber":1532,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1533,"author":{"gitID":"592363789"},"content":"Use case restarts from step 1."},{"lineNumber":1534,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1535,"author":{"gitID":"592363789"},"content":"* 2b. User gives an invalid index."},{"lineNumber":1536,"author":{"gitID":"qiu-siqi"},"content":"+"},{"lineNumber":1537,"author":{"gitID":"qiu-siqi"},"content":"[none]"},{"lineNumber":1538,"author":{"gitID":"qiu-siqi"},"content":"** 2b1. Bibliotek shows an error message."},{"lineNumber":1539,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1540,"author":{"gitID":"592363789"},"content":"Use case resumes at step 2."},{"lineNumber":1541,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1542,"author":{"gitID":"592363789"},"content":"* 3a. Bibliotek cannot fetch the details of the book within 5s."},{"lineNumber":1543,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1544,"author":{"gitID":"592363789"},"content":"[none]"},{"lineNumber":1545,"author":{"gitID":"592363789"},"content":"** 3a1. Bibliotek shows an error message."},{"lineNumber":1546,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1547,"author":{"gitID":"592363789"},"content":"Use case ends."},{"lineNumber":1548,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1549,"author":{"gitID":"592363789"},"content":"[discrete]"},{"lineNumber":1550,"author":{"gitID":"592363789"},"content":"\u003d\u003d\u003d Use case: UC4 - Add a book to my reading list"},{"lineNumber":1551,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1552,"author":{"gitID":"592363789"},"content":"*MSS*"},{"lineNumber":1553,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1554,"author":{"gitID":"592363789"},"content":"1. User obtains a list of books by listing (\u003c\u003cUse case: UC1 - View my reading list, *UC1*\u003e\u003e)"},{"lineNumber":1555,"author":{"gitID":"592363789"},"content":"                                            or searching (\u003c\u003cUse case: UC2 - Search for books,*UC2*\u003e\u003e)."},{"lineNumber":1556,"author":{"gitID":"592363789"},"content":"2. User requests to add a specific book from the list to his reading list."},{"lineNumber":1557,"author":{"gitID":"592363789"},"content":"3. Bibliotek adds the book to the user\u0027s reading list."},{"lineNumber":1558,"author":{"gitID":"592363789"},"content":"4. Bibliotek shows a success message."},{"lineNumber":1559,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1560,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1561,"author":{"gitID":"-"},"content":""},{"lineNumber":1562,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1563,"author":{"gitID":"-"},"content":""},{"lineNumber":1564,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1565,"author":{"gitID":"592363789"},"content":"* 2a. User gives an invalid index."},{"lineNumber":1566,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1567,"author":{"gitID":"592363789"},"content":"[none]"},{"lineNumber":1568,"author":{"gitID":"592363789"},"content":"** 2a1. Bibliotek shows an error message."},{"lineNumber":1569,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1570,"author":{"gitID":"592363789"},"content":"Use case resume at step 2."},{"lineNumber":1571,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1572,"author":{"gitID":"592363789"},"content":"* 2b. The book is already in user\u0027s reading list."},{"lineNumber":1573,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1574,"author":{"gitID":"592363789"},"content":"[none]"},{"lineNumber":1575,"author":{"gitID":"592363789"},"content":"** 2b1. Bibliotek tells user that the book is already in his reading list."},{"lineNumber":1576,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1577,"author":{"gitID":"592363789"},"content":"Use case ends."},{"lineNumber":1578,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1579,"author":{"gitID":"592363789"},"content":"[discrete]"},{"lineNumber":1580,"author":{"gitID":"592363789"},"content":"\u003d\u003d\u003d Use case: UC5 - Rate a book"},{"lineNumber":1581,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1582,"author":{"gitID":"592363789"},"content":"*MSS*"},{"lineNumber":1583,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1584,"author":{"gitID":"592363789"},"content":"1. User obtains a list of books by listing (\u003c\u003cUse case: UC1 - View my reading list, *UC1*\u003e\u003e)"},{"lineNumber":1585,"author":{"gitID":"592363789"},"content":" or searching (\u003c\u003cUse case: UC2 - Search for books,*UC2*\u003e\u003e)."},{"lineNumber":1586,"author":{"gitID":"592363789"},"content":"2. User requests to give a rating to a specific book in the list."},{"lineNumber":1587,"author":{"gitID":"592363789"},"content":"3. Bibliotek shows a success message."},{"lineNumber":1588,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1592,"author":{"gitID":"-"},"content":""},{"lineNumber":1593,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1594,"author":{"gitID":"592363789"},"content":"* 2a. The given rating is out of range."},{"lineNumber":1595,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1596,"author":{"gitID":"592363789"},"content":"[none]"},{"lineNumber":1597,"author":{"gitID":"592363789"},"content":"** 2a1. Bibliotek says that the rating is invalid and asks user to try again."},{"lineNumber":1598,"author":{"gitID":"592363789"},"content":"+"},{"lineNumber":1599,"author":{"gitID":"592363789"},"content":"Use case resumes at step 2"},{"lineNumber":1600,"author":{"gitID":"592363789"},"content":""},{"lineNumber":1601,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1602,"author":{"gitID":"-"},"content":""},{"lineNumber":1603,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1604,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1605,"author":{"gitID":"-"},"content":""},{"lineNumber":1606,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1607,"author":{"gitID":"qiu-siqi"},"content":".  Should work on both 32-bit and 64-bit environments."},{"lineNumber":1608,"author":{"gitID":"qiu-siqi"},"content":".  Should come with automated unit tests and open source code."},{"lineNumber":1609,"author":{"gitID":"qiu-siqi"},"content":".  Should come with a user guide and a developer guide."},{"lineNumber":1610,"author":{"gitID":"qiu-siqi"},"content":".  Should favor \u003c\u003cdos-style-commands,DOS style commands\u003e\u003e over Unix-style commands."},{"lineNumber":1611,"author":{"gitID":"qiu-siqi"},"content":".  Should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1612,"author":{"gitID":"qiu-siqi"},"content":".  Should respond to user commands within 50ms if no external API calls are required. Otherwise, respond within 10s."},{"lineNumber":1613,"author":{"gitID":"qiu-siqi"},"content":".  Should be intuitive such that a new user can learn to search and add books within 10 minutes."},{"lineNumber":1614,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1615,"author":{"gitID":"-"},"content":""},{"lineNumber":1616,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1617,"author":{"gitID":"-"},"content":""},{"lineNumber":1618,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1619,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1620,"author":{"gitID":"-"},"content":""},{"lineNumber":1621,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1622,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1623,"author":{"gitID":"-"},"content":""},{"lineNumber":1624,"author":{"gitID":"qiu-siqi"},"content":"[[dos-style-commands]] DOS style commands::"},{"lineNumber":1625,"author":{"gitID":"qiu-siqi"},"content":"The use of backslashes \u0027/\u0027 to indicate command parameters"},{"lineNumber":1626,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1627,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1628,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1629,"author":{"gitID":"-"},"content":""},{"lineNumber":1630,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1631,"author":{"gitID":"-"},"content":""},{"lineNumber":1632,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1633,"author":{"gitID":"-"},"content":""},{"lineNumber":1634,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1635,"author":{"gitID":"-"},"content":""},{"lineNumber":1636,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1637,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1638,"author":{"gitID":"-"},"content":""},{"lineNumber":1639,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1640,"author":{"gitID":"-"},"content":""},{"lineNumber":1641,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1642,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1643,"author":{"gitID":"-"},"content":""},{"lineNumber":1644,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1645,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1648,"author":{"gitID":"-"},"content":""},{"lineNumber":1649,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1650,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1651,"author":{"gitID":"-"},"content":""},{"lineNumber":1652,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1653,"author":{"gitID":"-"},"content":""},{"lineNumber":1654,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1655,"author":{"gitID":"-"},"content":""},{"lineNumber":1656,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1657,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1658,"author":{"gitID":"qiu-siqi"},"content":"   Expected: Shows the GUI with a set of sample books. The window size may not be optimum."},{"lineNumber":1659,"author":{"gitID":"-"},"content":""},{"lineNumber":1660,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1661,"author":{"gitID":"-"},"content":""},{"lineNumber":1662,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1663,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1664,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1665,"author":{"gitID":"-"},"content":""},{"lineNumber":1666,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Deleting a book"},{"lineNumber":1667,"author":{"gitID":"-"},"content":""},{"lineNumber":1668,"author":{"gitID":"qiu-siqi"},"content":". Deleting a book while all books are listed"},{"lineNumber":1669,"author":{"gitID":"-"},"content":""},{"lineNumber":1670,"author":{"gitID":"qiu-siqi"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1671,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1672,"author":{"gitID":"qiu-siqi"},"content":"   Expected: First book is deleted from the list. Details of the deleted book shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1673,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1674,"author":{"gitID":"qiu-siqi"},"content":"   Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1675,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1677,"author":{"gitID":"-"},"content":""},{"lineNumber":1678,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Searching for a book in the library"},{"lineNumber":1679,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1680,"author":{"gitID":"qiu-siqi"},"content":". Prerequisites: Have a non-empty list of books in the left panel."},{"lineNumber":1681,"author":{"gitID":"qiu-siqi"},"content":". Test case: `library 1` +"},{"lineNumber":1682,"author":{"gitID":"qiu-siqi"},"content":".. Immediately: Bibliotek shows `Searching for the book in the library...`. Everything else remains the same. You are still able to interact with the GUI. +"},{"lineNumber":1683,"author":{"gitID":"qiu-siqi"},"content":".. After some time: Bibliotek shows `Showing availability of book: TITLE - Authors: AUTHORS`. The right panel should start loading (a white screen is first seen). +"},{"lineNumber":1684,"author":{"gitID":"qiu-siqi"},"content":".. When loading is complete: A table with the availability of the book at different libraries is shown in the right panel. +"},{"lineNumber":1685,"author":{"gitID":"qiu-siqi"},"content":".. Exception: Bibliotek shows `Failed to retrieve information from online.` if the request has failed or timed out (10s). This may be because you are not connected to the internet, or the response from NLB Catalogue is slow."},{"lineNumber":1686,"author":{"gitID":"qiu-siqi"},"content":".. Interrupted: If you performed other commands when `library` is in progress, note that the webpage will still load when the search is done and replace whatever is in the right panel."},{"lineNumber":1687,"author":{"gitID":"qiu-siqi"},"content":". Test case: `library 0`, `library x` (where x is larger than the list size) +"},{"lineNumber":1688,"author":{"gitID":"qiu-siqi"},"content":"..  Expected: Bibliotek shows `The book index provided is invalid`. No change should happen other than the message showing."},{"lineNumber":1689,"author":{"gitID":"qiu-siqi"},"content":". Test case: `librar 1` (Test integration with command autocorrect) +"},{"lineNumber":1690,"author":{"gitID":"qiu-siqi"},"content":".. Expected: Bibliotek asks whether you meant `library 1`."},{"lineNumber":1691,"author":{"gitID":"qiu-siqi"},"content":".. If you press Enter, the command should execute the same fashion as test case in (b)."},{"lineNumber":1692,"author":{"gitID":"qiu-siqi"},"content":". Test case: `LiBrArY 1` (Test for case insensitivity) +"},{"lineNumber":1693,"author":{"gitID":"qiu-siqi"},"content":"..  Expected: The command executes in the same fashion as test case in (b)."},{"lineNumber":1694,"author":{"gitID":"qiu-siqi"},"content":". Test case: `library` (Test for invalid format) +"},{"lineNumber":1695,"author":{"gitID":"qiu-siqi"},"content":".. Expected: Bibliotek shows message on correct use of `library`."},{"lineNumber":1696,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1697,"author":{"gitID":"qiu-siqi"},"content":"\u003d\u003d\u003d Viewing recently selected books"},{"lineNumber":1698,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":1699,"author":{"gitID":"qiu-siqi"},"content":". Prerequisites: Have a non-empty list of books in the left panel."},{"lineNumber":1700,"author":{"gitID":"qiu-siqi"},"content":". Assumes: Have not recently selected any books."},{"lineNumber":1701,"author":{"gitID":"qiu-siqi"},"content":". Test case: `list`, `select 1`, `recent` +"},{"lineNumber":1702,"author":{"gitID":"qiu-siqi"},"content":".. Expected: There is one book in the recently selected books list."},{"lineNumber":1703,"author":{"gitID":"qiu-siqi"},"content":". Test case: `search hello`, `select 1`, `recent` +"},{"lineNumber":1704,"author":{"gitID":"qiu-siqi"},"content":".. Assumes: Searched completed successfully and selection is made, which is different from selection above."},{"lineNumber":1705,"author":{"gitID":"qiu-siqi"},"content":".. Expected: There is another book in the recently selected book list, at index 1."},{"lineNumber":1706,"author":{"gitID":"qiu-siqi"},"content":". Test case: `list`, `select 1`, `recent` +"},{"lineNumber":1707,"author":{"gitID":"qiu-siqi"},"content":".. Expected: The first book is brought up to the first index in the recent books list"},{"lineNumber":1708,"author":{"gitID":"qiu-siqi"},"content":". Test case: `select 2` (in the recent book list) +"},{"lineNumber":1709,"author":{"gitID":"qiu-siqi"},"content":".. Expected: The position of the book selected in the recent book list does not change in the list."},{"lineNumber":1710,"author":{"gitID":"-"},"content":""},{"lineNumber":1711,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1712,"author":{"gitID":"-"},"content":""},{"lineNumber":1713,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1714,"author":{"gitID":"-"},"content":""},{"lineNumber":1715,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1716,"author":{"gitID":"-"},"content":""},{"lineNumber":1717,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"qiu-siqi":486,"takuyakanbr":59,"592363789":65,"-":1107}},{"path":"src/test/java/systemtests/LibraryCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import guitests.GuiRobot;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LibraryCommand;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"public class LibraryCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private static final String NLB_CATALOGUE_URL \u003d \"catalogue.nlb.gov.sg\";"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    public void library() {"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        /* ---------- Test on book shelf ------------- */"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        ObservableList\u003cBook\u003e bookList \u003d getModel().getDisplayBookList();"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(LibraryCommand.COMMAND_WORD + \" 1\", bookList.get(0));"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        assertValidUrlLoaded();"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(LibraryCommand.COMMAND_WORD + \" \" + bookList.size(),"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"                bookList.get(bookList.size() - 1));"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        assertValidUrlLoaded();"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(LibraryCommand.COMMAND_WORD + \" \" + (bookList.size() + 1),"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        /* ---------- Test on search results list ------------- */"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        executeBackgroundCommand(SearchCommand.COMMAND_WORD + \" hello\", SearchCommand.MESSAGE_SEARCHING);"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        bookList \u003d getModel().getSearchResultsList();"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(LibraryCommand.COMMAND_WORD + \" 1\", bookList.get(0));"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(LibraryCommand.COMMAND_WORD + \" \" + (bookList.size() + 1),"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        /* ---------- Test on recent books list ------------- */"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(RecentCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        bookList \u003d getModel().getRecentBooksList();"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(LibraryCommand.COMMAND_WORD + \" 1\", bookList.get(0));"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(LibraryCommand.COMMAND_WORD + \" \" + (bookList.size() + 1),"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        /* ---------- Negative test cases ------------- */"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(LibraryCommand.COMMAND_WORD + \" 0\","},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, LibraryCommand.MESSAGE_USAGE));"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"     * Executes {@code command} and verifies that, after the web API has returned a result,\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     * 3. Result display box displays the success message.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model} and {@code Storage} remain unchanged.\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"     * 5. Selected book list card remain unchanged.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"     * 6. {@code BookInLibraryPanel} is visible."},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"     * 7. Status bar\u0027s sync status remains unchanged.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertSelectedBookListCardChanged(Index)"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    private void assertCommandSuccess(String command, Book bookToSearch) {"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(command);"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        new GuiRobot().waitForEvent(() -\u003e !getResultDisplay().getText().equals(LibraryCommand.MESSAGE_SEARCHING));"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        String expectedResultMessage \u003d String.format(LibraryCommand.MESSAGE_SUCCESS, bookToSearch);"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"        assertBookInLibraryPanelVisible();"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"     * Verifies that some NLB catalogue page is being loaded."},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"    private void assertValidUrlLoaded() {"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(getBookInLibraryPanel().getLoadedUrl().toExternalForm().contains(NLB_CATALOGUE_URL));"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":97,"takuyakanbr":1,"-":6}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     * Updates {@code model}\u0027s search results to be {@code results}."},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    public static void setSearchResults(Model model, List\u003cBook\u003e results) {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf searchResults \u003d new BookShelf();"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"            searchResults.setBooks(results);"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"            throw new AssertionError(\"Results contains duplicate books.\");"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        model.updateSearchResults(searchResults);"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"     * Updates {@code model}\u0027s recent books to be {@code results}."},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    public static void setRecentBooks(Model model, List\u003cBook\u003e results) {"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        for (int index \u003d results.size() - 1; index \u003e\u003d 0; index--) {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"            model.addRecentBook(results.get(index));"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":10,"takuyakanbr":15,"-":12}},{"path":"src/test/java/systemtests/ListCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.COLLAPSING_EMPIRE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.CONSIDER_PHLEBAS;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.WAKING_GODS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"public class ListCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    public void list() {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform valid list operations ---------------------------------------- */"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: valid filters -\u003e 1 book listed */"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        assertListSuccess(ListCommand.COMMAND_WORD + \" t/artemis a/andy weir c/fiction s/read p/low r/5\", ARTEMIS);"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: valid filters -\u003e 0 books listed */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        assertListSuccess(ListCommand.COMMAND_WORD + \" c/space s/reading r/3\");"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: valid filters and sort mode -\u003e 2 books listed */"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        assertListSuccess(ListCommand.COMMAND_WORD + \" s/u r/-1 by/title\", CONSIDER_PHLEBAS, WAKING_GODS);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: showing recent books -\u003e switches to showing book shelf */"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(RecentCommand.COMMAND_WORD);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        assertListSuccess(ListCommand.COMMAND_WORD + \" t/co r/-1 by/statusd\", COLLAPSING_EMPIRE, CONSIDER_PHLEBAS);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: no parameters -\u003e all 5 books listed */"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        assertListSuccess(ListCommand.COMMAND_WORD,"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"                BABYLON_ASHES, COLLAPSING_EMPIRE, CONSIDER_PHLEBAS, WAKING_GODS, ARTEMIS);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform invalid list operations -------------------------------------- */"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: invalid status filter -\u003e rejected */"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ListCommand.COMMAND_WORD + \" s/\", Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: invalid priority filter -\u003e rejected */"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ListCommand.COMMAND_WORD + \" p/null r/2\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: invalid rating filter -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ListCommand.COMMAND_WORD + \" r/20\", Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: invalid sort mode -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ListCommand.COMMAND_WORD + \" by/123\", Messages.MESSAGE_INVALID_SORT_BY);"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing list command with the expected"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * number of listed books.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * 4. {@code Model} and {@code Storage} remain unchanged.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * 5. {@code WelcomePanel} is visible."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void assertListSuccess(String command, Book... expectedBooks) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        List\u003cBook\u003e expectedBookList \u003d Arrays.asList(expectedBooks);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListFilter(expectedBookList::contains);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListSorter(getModel().getBookListSorter());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(expectedBooks.length, getModel().getDisplayBookList().size());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, expectedBooks.length);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertWelcomePanelVisible();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertSelectedBookListCardDeselected();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"takuyakanbr":46,"-":41}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: edit all fields -\u003e edited */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + PREFIX_STATUS + \"u  \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"                + PREFIX_PRIORITY + \"high \" + PREFIX_RATING + \"4  \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Book editedBook \u003d new BookBuilder(getModel().getDisplayBookList().get(0)).withStatus(Status.UNREAD)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .withPriority(Priority.HIGH).withRating(4).build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: edit a book with new values same as existing values -\u003e edited */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Book bookToEdit \u003d getModel().getDisplayBookList().get(0);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_STATUS"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                + bookToEdit.getStatus().toString() + \" \" + PREFIX_PRIORITY + bookToEdit.getPriority().toString()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_RATING + bookToEdit.getRating().toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, new BookBuilder(bookToEdit).build());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_STATUS + \"r\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withStatus(Status.READ).build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: un-rate book -\u003e unrated */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        index \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_RATING + \"-1\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withRating(-1).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        //@@author 592363789"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"        /* Case: non-priority book -\u003e non-priority */"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"        index \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":61,"author":{"gitID":"592363789"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"592363789"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_PRIORITY + \"n\";"},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withPriority(Priority.NONE).build();"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":65,"author":{"gitID":"592363789"},"content":""},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"        /* Case: unread book -\u003e unread */"},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"        index \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":68,"author":{"gitID":"592363789"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_STATUS + \"u\";"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withStatus(Status.UNREAD).build();"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":72,"author":{"gitID":"592363789"},"content":""},{"lineNumber":73,"author":{"gitID":"592363789"},"content":"        /* Case: edit two fields -\u003e rating and status */"},{"lineNumber":74,"author":{"gitID":"592363789"},"content":"        index \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":75,"author":{"gitID":"592363789"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_STATUS + \"u\" + \" \""},{"lineNumber":77,"author":{"gitID":"592363789"},"content":"                + PREFIX_RATING + \"4\";"},{"lineNumber":78,"author":{"gitID":"592363789"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withStatus(Status.UNREAD).withRating(4).build();"},{"lineNumber":79,"author":{"gitID":"592363789"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":80,"author":{"gitID":"592363789"},"content":""},{"lineNumber":81,"author":{"gitID":"592363789"},"content":"        /* Case: edit two fields -\u003e rating and priority */"},{"lineNumber":82,"author":{"gitID":"592363789"},"content":"        index \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":83,"author":{"gitID":"592363789"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"592363789"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_PRIORITY + \"h\""},{"lineNumber":85,"author":{"gitID":"592363789"},"content":"                + \" \" + PREFIX_RATING + \"0\";"},{"lineNumber":86,"author":{"gitID":"592363789"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withPriority(Priority.HIGH).withRating(0).build();"},{"lineNumber":87,"author":{"gitID":"592363789"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":88,"author":{"gitID":"592363789"},"content":""},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"        /* Case: edit two fields -\u003e status and priority */"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":"        index \u003d Index.fromOneBased(getModel().getDisplayBookList().size());"},{"lineNumber":91,"author":{"gitID":"592363789"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"592363789"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_STATUS + \"r\""},{"lineNumber":93,"author":{"gitID":"592363789"},"content":"                + \" \" + PREFIX_PRIORITY + \"l\";"},{"lineNumber":94,"author":{"gitID":"592363789"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withStatus(Status.READ).withPriority(Priority.LOW).build();"},{"lineNumber":95,"author":{"gitID":"592363789"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":96,"author":{"gitID":"592363789"},"content":"        //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: filtered book list, edit index within bounds of book shelf and book list -\u003e edited */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" \" + PREFIX_STATUS + \"u\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getDisplayBookList().size());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_STATUS + \"r\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withStatus(Status.READ).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: edit index within bounds of book shelf but out of bounds of filtered book list -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" \" + PREFIX_STATUS + \"u\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getDisplayBookList().size() + 1;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + \" \" + PREFIX_RATING + \"2\","},{"lineNumber":112,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a book card is selected -------------------------- */"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the book list, edit a book -\u003e edited, card selection remains unchanged */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_RATING + \"5\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        bookToEdit \u003d getModel().getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withRating(5).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        expectedModel.updateBook(bookToEdit, editedBook);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, editedBook, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0 \" + PREFIX_RATING + \"5\","},{"lineNumber":132,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1 \" + PREFIX_RATING + \"5\","},{"lineNumber":136,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getDisplayBookList().size() + 1;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + \" \" + PREFIX_RATING + \"5\","},{"lineNumber":141,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + PREFIX_RATING + \"5\","},{"lineNumber":145,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NO_PARAMETERS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: invalid status -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":153,"author":{"gitID":"-"},"content":"                + PREFIX_STATUS + \"status\", Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: invalid priority -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":157,"author":{"gitID":"-"},"content":"                + PREFIX_PRIORITY + \"priority\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: invalid rating -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":161,"author":{"gitID":"-"},"content":"                + PREFIX_RATING + \"100\", Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":162,"author":{"gitID":"592363789"},"content":"        //@@author 592363789"},{"lineNumber":163,"author":{"gitID":"592363789"},"content":"        /* Case: valid rating + invalid status -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":165,"author":{"gitID":"592363789"},"content":"                + PREFIX_RATING + \"3\" + \" \" + PREFIX_STATUS + \"STATUS\", Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":166,"author":{"gitID":"592363789"},"content":""},{"lineNumber":167,"author":{"gitID":"592363789"},"content":"        /* Case: valid rating + invalid priority -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":169,"author":{"gitID":"592363789"},"content":"                + PREFIX_RATING + \"3\" + \" \" + PREFIX_PRIORITY + \"priority\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":170,"author":{"gitID":"592363789"},"content":""},{"lineNumber":171,"author":{"gitID":"592363789"},"content":"        /* Case: valid priority + invalid status -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":173,"author":{"gitID":"592363789"},"content":"                + PREFIX_PRIORITY + \"h\" + \" \" + PREFIX_STATUS + \"STATUS\", Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":174,"author":{"gitID":"592363789"},"content":""},{"lineNumber":175,"author":{"gitID":"592363789"},"content":"        /* Case: valid priority + invalid rating -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":177,"author":{"gitID":"592363789"},"content":"                + PREFIX_RATING + \"-100\" + \" \" + PREFIX_STATUS + \"r\", Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":178,"author":{"gitID":"592363789"},"content":""},{"lineNumber":179,"author":{"gitID":"592363789"},"content":"        /* Case: valid status + invalid rating -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":181,"author":{"gitID":"592363789"},"content":"                + PREFIX_RATING + \"-3\" + \" \" + PREFIX_STATUS + \"r\", Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":182,"author":{"gitID":"592363789"},"content":""},{"lineNumber":183,"author":{"gitID":"592363789"},"content":"        /* Case: valid status + invalid priority -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + \" \""},{"lineNumber":185,"author":{"gitID":"592363789"},"content":"                + PREFIX_PRIORITY + \"highpriority\" + \" \" + PREFIX_STATUS"},{"lineNumber":186,"author":{"gitID":"592363789"},"content":"                + \"r\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":187,"author":{"gitID":"592363789"},"content":"        //@@author"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Book, Model)} with the"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * expected model having an empty search result and recent book list, and the only difference in"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * book shelf is the edited book."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Book, Model)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index index, Book expectedBook) throws Exception {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs(),"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                model.getRecentBooksListAsBookShelf(), model.getAliasList());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListFilter(getModel().getBookListFilter());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        expectedModel.updateBook(expectedModel.getDisplayBookList().get(index.getZeroBased()), expectedBook);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedBook, expectedModel);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code BookListPanel} equal to the corresponding components"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * after editing.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":"     * 5. Selected book card remain unchanged.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":215,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":217,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertSelectedBookListCardChanged(Index)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Book expectedBook, Model expectedModel) throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":222,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_SUCCESS, expectedBook), expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":6,"takuyakanbr":1,"592363789":65,"-":155}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"public class ErrorDialogGuiTest extends BibliotekSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"-":33}},{"path":"src/test/java/systemtests/BibliotekSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertDetailsPanelDisplaysBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.AliasListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import guitests.guihandles.BookDetailsPanelHandle;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookInLibraryPanelHandle;"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookReviewsPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.WelcomePanelHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.ui.WebViewManager;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":" * A system test class for Bibliotek, which provides access to handles of GUI components and helper methods"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"public abstract class BibliotekSystemTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"    public void tearDown() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager.getInstance().cleanUp();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"    protected BookShelf getInitialData() {"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        return TypicalBooks.getTypicalBookShelf();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"    public BookListPanelHandle getBookListPanel() {"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        return mainWindowHandle.getBookListPanel();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public WelcomePanelHandle getWelcomePanel() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getWelcomePanel();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"    public BookDetailsPanelHandle getBookDetailsPanel() {"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        return mainWindowHandle.getBookDetailsPanel();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"    public BookReviewsPanelHandle getBookReviewsPanel() {"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        return mainWindowHandle.getBookReviewsPanel();"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"    public BookInLibraryPanelHandle getBookInLibraryPanel() {"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        return mainWindowHandle.getBookInLibraryPanel();"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public AliasListPanelHandle getAliasListPanel() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getAliasListPanel();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":159,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Executes a {@code command} in the application\u0027s {@code CommandBox} and waits for it to complete."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * In particular, this method will wait for the text in the result display to be changed to something other"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * than {@code resultText}, and for the command box to be enabled again."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    protected void executeBackgroundCommand(String command, String resultText) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(() -\u003e !getResultDisplay().getText().equals(resultText),"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                GuiRobot.NETWORK_ACTION_TIMEOUT_MILLISECONDS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(() -\u003e getCommandBox().isEnabled(), GuiRobot.NETWORK_ACTION_TIMEOUT_MILLISECONDS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":"     * Displays all books in the book shelf."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"qiu-siqi"},"content":"    protected void showAllBooks() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":182,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(getModel().getBookShelf().size(), getModel().getDisplayBookList().size());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"takuyakanbr"},"content":"     * Selects the book at {@code index} of the book list."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":"    protected void selectBook(Index index) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":190,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(index.getZeroBased(), getBookListPanel().getSelectedCardIndex());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"qiu-siqi"},"content":"     * Deletes all books in the book shelf."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":"    protected void deleteAllBooks() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(0, getModel().getBookShelf().size());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model}, {@code Storage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by {@code assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see #assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":216,"author":{"gitID":"takuyakanbr"},"content":"        assertSelectedBookListCardUnchanged();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same book objects as {@code expectedModel}"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * and the currently displayed list displays the books in the model correctly."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":231,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(expectedModel.getBookShelf(), testApp.readStorageBookShelf());"},{"lineNumber":232,"author":{"gitID":"qiu-siqi"},"content":"        assertListMatching(getBookListPanel(), expectedModel.getActiveList());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the alias list panel displays the aliases in the model correctly."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    protected void assertAliasListDisplaysExpected(Model expectedModel) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertListMatching(getAliasListPanel(), expectedModel.getDisplayAliasList());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"qiu-siqi"},"content":"     * Calls {@code BookListPanelHandle}, {@code StatusBarFooterHandle},"},{"lineNumber":244,"author":{"gitID":"takuyakanbr"},"content":"     * and {@code BookDetailsPanelHandle} to remember their current state."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":250,"author":{"gitID":"qiu-siqi"},"content":"        getBookListPanel().rememberSelectedBookCard();"},{"lineNumber":251,"author":{"gitID":"takuyakanbr"},"content":"        getBookDetailsPanel().rememberIsbn();"},{"lineNumber":252,"author":{"gitID":"qiu-siqi"},"content":"        getBookDetailsPanel().rememberVisibility();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected book list card is now deselected."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"takuyakanbr"},"content":"    protected void assertSelectedBookListCardDeselected() {"},{"lineNumber":259,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(getBookListPanel().isAnyCardSelected());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"takuyakanbr"},"content":"     * Asserts that the book details panel displays the details of the book in the book list panel at"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":265,"author":{"gitID":"qiu-siqi"},"content":"     * @see BookListPanelHandle#isSelectedBookCardChanged()"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"takuyakanbr"},"content":"    protected void assertSelectedBookListCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":268,"author":{"gitID":"qiu-siqi"},"content":"        Book selectedBook \u003d getModel().getActiveList().get(expectedSelectedCardIndex.getZeroBased());"},{"lineNumber":269,"author":{"gitID":"takuyakanbr"},"content":"        assertDetailsPanelDisplaysBook(selectedBook, getBookDetailsPanel());"},{"lineNumber":270,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getBookListPanel().getSelectedCardIndex());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"takuyakanbr"},"content":"     * Asserts that the selected card in the book list panel remain unchanged and the book details panel"},{"lineNumber":275,"author":{"gitID":"takuyakanbr"},"content":"     * remains displaying the details of the previously selected book."},{"lineNumber":276,"author":{"gitID":"takuyakanbr"},"content":"     * @see BookDetailsPanelHandle#isIsbnChanged()"},{"lineNumber":277,"author":{"gitID":"qiu-siqi"},"content":"     * @see BookListPanelHandle#isSelectedBookCardChanged()"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"takuyakanbr"},"content":"    protected void assertSelectedBookListCardUnchanged() {"},{"lineNumber":280,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(getBookDetailsPanel().isIsbnChanged());"},{"lineNumber":281,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(getBookListPanel().isSelectedBookCardChanged());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"qiu-siqi"},"content":"     * Checks that {@code WelcomePanel} is visible and {@code BookDetailsPanel}, {@code BookInLibraryPanel},"},{"lineNumber":286,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BookReviewsPanel} and {@code AliasListPanel} is not visible."},{"lineNumber":287,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"qiu-siqi"},"content":"    protected void assertWelcomePanelVisible() {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertTrue(getWelcomePanel().isVisible());"},{"lineNumber":290,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(getBookDetailsPanel().isVisible());"},{"lineNumber":291,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(getBookInLibraryPanel().isVisible());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertFalse(getBookReviewsPanel().isVisible());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertFalse(getAliasListPanel().isVisible());"},{"lineNumber":294,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Checks that {@code BookDetailsPanel} is visible, {@code BookReviewsPanel} and {@code BookInLibraryPanel}"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * is not visible."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    protected void assertBookDetailsPanelVisible() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertTrue(getBookDetailsPanel().isVisible());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertFalse(getBookReviewsPanel().isVisible());"},{"lineNumber":303,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(getBookInLibraryPanel().isVisible());"},{"lineNumber":304,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":306,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"qiu-siqi"},"content":"     * Checks that {@code BookReviewsPanel} is visible, {@code BookDetailsPanel} and {@code BookInLibraryPanel}"},{"lineNumber":308,"author":{"gitID":"qiu-siqi"},"content":"     * is not visible."},{"lineNumber":309,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"qiu-siqi"},"content":"    protected void assertBookReviewsPanelVisible() {"},{"lineNumber":311,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(getBookReviewsPanel().isVisible());"},{"lineNumber":312,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(getBookDetailsPanel().isVisible());"},{"lineNumber":313,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(getBookInLibraryPanel().isVisible());"},{"lineNumber":314,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":316,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"qiu-siqi"},"content":"     * Checks that {@code BookInLibraryPanel} is visible, {@code BookDetailsPanel} and {@code BookReviewsPanel}"},{"lineNumber":318,"author":{"gitID":"qiu-siqi"},"content":"     * is not visible."},{"lineNumber":319,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"qiu-siqi"},"content":"    protected void assertBookInLibraryPanelVisible() {"},{"lineNumber":321,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(getBookInLibraryPanel().isVisible());"},{"lineNumber":322,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(getBookDetailsPanel().isVisible());"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertFalse(getBookReviewsPanel().isVisible());"},{"lineNumber":324,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":328,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":335,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Asserts that the command box is enabled."},{"lineNumber":342,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxEnabled() {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertTrue(getCommandBox().isEnabled());"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":349,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":357,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":358,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":359,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":364,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":366,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":369,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":370,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":373,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":374,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":375,"author":{"gitID":"qiu-siqi"},"content":"            assertListMatching(getBookListPanel(), getModel().getActiveList());"},{"lineNumber":376,"author":{"gitID":"-"},"content":"            assertTrue(getWelcomePanel().isVisible());"},{"lineNumber":377,"author":{"gitID":"takuyakanbr"},"content":"            assertFalse(getBookDetailsPanel().isVisible());"},{"lineNumber":378,"author":{"gitID":"-"},"content":"            assertFalse(getBookReviewsPanel().isVisible());"},{"lineNumber":379,"author":{"gitID":"-"},"content":"            assertFalse(getAliasListPanel().isVisible());"},{"lineNumber":380,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":381,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":383,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":385,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":73,"takuyakanbr":21,"-":293}},{"path":"src/test/java/systemtests/AliasesCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasesCommand;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AliasesCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void aliases() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertAliasCommandSuccess();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        /* selecting a book should hide the alias list panel */"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(getBookDetailsPanel().isVisible());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertFalse(getAliasListPanel().isVisible());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* executing aliases command should hide all other main panels */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        executeCommand(ReviewsCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertAliasCommandSuccess();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Executes the aliases command and verifies that,\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the expected message.\u003cbr\u003e"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"     * 4. {@code Model}, {@code Storage} remain unchanged.\u003cbr\u003e"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"     * 5. Any selection in {@code BookListPanel} is deselected.\u003cbr\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * 6. {@code AliasListPanel} is visible, and {@code BookReviewsPanel} and {@code BookDetailsPanel} are hidden.\u003cbr\u003e"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"     * 7. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private void assertAliasCommandSuccess() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(AliasesCommand.COMMAND_WORD);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":50,"author":{"gitID":"-"},"content":"                String.format(AliasesCommand.MESSAGE_SUCCESS, expectedModel.getAliasList().size()), expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertAliasListDisplaysExpected(expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedBookListCardDeselected();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertAliasListPanelVisible();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Checks that {@code AliasListPanel} is visible, and that {@code BookDetailsPanel}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * and {@code BookReviewsPanel} are not visible."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private void assertAliasListPanelVisible() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(getAliasListPanel().isVisible());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(getBookDetailsPanel().isVisible());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(getBookReviewsPanel().isVisible());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":12,"-":55}},{"path":"src/test/java/seedu/address/ui/BookReviewsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookReviewsPanelHandle;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"public class BookReviewsPanelTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String URL_GOODREADS_ARTEMIS \u003d \"https://www.goodreads.com/book/show/35098840-artemis\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private BookReviewsPanel bookReviewsPanel;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    private BookReviewsPanelHandle bookReviewsPanelHandle;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        guiRobot.interact(() -\u003e bookReviewsPanel \u003d new BookReviewsPanel());"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        uiPartRule.setUiPart(bookReviewsPanel);"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        bookReviewsPanelHandle \u003d new BookReviewsPanelHandle(bookReviewsPanel.getRoot());"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    public void display() throws Exception {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        // hidden by default"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(bookReviewsPanelHandle.isVisible());"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        // associated reviews page of a book"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e bookReviewsPanel.loadPageForBook(ARTEMIS));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedUrl \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new URL(BookReviewsPanel.SEARCH_PAGE_URL.replace(\"%isbn\", ARTEMIS.getIsbn().isbn)).toExternalForm();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String loadedUrl \u003d bookReviewsPanelHandle.getLoadedUrl().toExternalForm();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(loadedUrl.equals(expectedUrl) || loadedUrl.startsWith(URL_GOODREADS_ARTEMIS));"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":28,"-":14}},{"path":"src/test/java/systemtests/LockCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LockCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void lock() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertLockCommandSuccess();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform blocked commands --------------------------------------------- */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandBlocked(ListCommand.COMMAND_WORD);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandBlocked(RecentCommand.COMMAND_WORD);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertCommandBlocked(SetPasswordCommand.COMMAND_WORD + \" new/123\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandBlocked(SearchCommand.COMMAND_WORD + \" hello\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform unblocked commands ------------------------------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* case: help command -\u003e success */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(HelpWindowHandle.isWindowPresent());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* case: unlock command -\u003e success */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        executeCommand(UnlockCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListFilter(Model.PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", UnlockCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, and the result"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * display box displays {@code Messages.MESSAGE_APP_LOCKED}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private void assertCommandBlocked(String command) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListFilter(Model.PREDICATE_HIDE_ALL_BOOKS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", Messages.MESSAGE_APP_LOCKED, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * box displays {@code LockCommand#MESSAGE_SUCCESS} and the model related components remain unchanged."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status does not"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * change, and the welcome panel is visible."},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void assertLockCommandSuccess() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListFilter(Model.PREDICATE_HIDE_ALL_BOOKS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(LockCommand.COMMAND_WORD);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", LockCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertWelcomePanelVisible();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":7,"takuyakanbr":1,"-":75}},{"path":"src/test/java/systemtests/SearchCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ARTEMIS;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_ARTEMIS;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_ARTEMIS;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_ARTEMIS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BABYLON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"public class SearchCommandSystemTest extends BibliotekSystemTest {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    public void search() throws Exception {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform invalid search operations ------------------------------------ */"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: close command word -\u003e corrected */"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(\"searchh hello\");"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"                String.format(Messages.MESSAGE_CORRECTED_COMMAND, \"search hello\"), getModel());"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: no key words or named parameters -\u003e rejected */"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(SearchCommand.COMMAND_WORD, SearchCommand.MESSAGE_EMPTY_QUERY);"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: no key words or named parameters -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(\"    \" + SearchCommand.COMMAND_WORD + \"    \", SearchCommand.MESSAGE_EMPTY_QUERY);"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: misspelled command word -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(\"saerch hello\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform valid search operations -------------------------------------- */"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        // Note: these tests require network connection."},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: search for books given key word -\u003e success */"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        assertSearchSuccess(SearchCommand.COMMAND_WORD + \" hello\");"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: search for books given named parameters -\u003e success */"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        assertSearchSuccess(SearchCommand.COMMAND_WORD + TITLE_DESC_ARTEMIS + CATEGORY_DESC_ARTEMIS"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"                + AUTHOR_DESC_ARTEMIS);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: search for non-existant book -\u003e return 0 results */"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        assertSearchSuccess(SearchCommand.COMMAND_WORD + TITLE_DESC_BABYLON + CATEGORY_DESC_ARTEMIS"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"                + ISBN_DESC_ARTEMIS + AUTHOR_DESC_ARTEMIS);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        /* ----------------------------------- Perform commands on search results ----------------------------------- */"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        /* Case: trying to clear or delete result items -\u003e rejected */"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(ClearCommand.COMMAND_WORD, ClearCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1\", DeleteCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"     * Executes {@code command} and verifies that, after the web API has returned a result,\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"     * 3. Result display box displays the search successful message.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"     * 4. {@code Storage} and{@code BookListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * 5. {@code WelcomePanel} is visible."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"     * {@code BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"     * @see BibliotekSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"     * @see BibliotekSystemTest#assertSelectedBookListCardChanged(Index)"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"    private void assertSearchSuccess(String command) throws Exception {"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        executeCommand(command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(() -\u003e !getResultDisplay().getText().equals(SearchCommand.MESSAGE_SEARCHING),"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                GuiRobot.NETWORK_ACTION_TIMEOUT_MILLISECONDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(() -\u003e getCommandBox().isEnabled(), GuiRobot.NETWORK_ACTION_TIMEOUT_MILLISECONDS);"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf searchResults \u003d new BookShelf();"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        searchResults.setBooks(getModel().getSearchResultsList());"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.updateSearchResults(searchResults);"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        assertApplicationDisplaysExpected(\"\","},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"                String.format(SearchCommand.MESSAGE_SEARCH_SUCCESS, searchResults.size()), expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertWelcomePanelVisible();"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxEnabled();"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":7,"takuyakanbr":73,"-":22}},{"path":"src/test/java/seedu/address/ui/BookCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysBook;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookCardHandle;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class BookCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"        // no categories"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        Book bookWithNoCategories \u003d new BookBuilder().withCategories().build();"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        BookCard bookCard \u003d new BookCard(bookWithNoCategories, 1);"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        uiPartRule.setUiPart(bookCard);"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        assertCardDisplay(bookCard, bookWithNoCategories, 1);"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        // with categories"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        Book bookWithCategories \u003d new BookBuilder().build();"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        bookCard \u003d new BookCard(bookWithCategories, 2);"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        uiPartRule.setUiPart(bookCard);"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        assertCardDisplay(bookCard, bookWithCategories, 2);"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        Book book \u003d new BookBuilder().build();"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        BookCard bookCard \u003d new BookCard(book, 0);"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        // same book, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        BookCard copy \u003d new BookCard(book, 0);"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(bookCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(bookCard.equals(bookCard));"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(bookCard \u003d\u003d null);"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(bookCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        // different book, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        Book differentBook \u003d new BookBuilder().withIsbn(\"111\").build();"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(bookCard.equals(new BookCard(differentBook, 0)));"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        // same book, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(bookCard.equals(new BookCard(book, 1)));"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that {@code bookCard} displays the details of {@code expectedBook} correctly and matches"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"    private void assertCardDisplay(BookCard bookCard, Book expectedBook, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        BookCardHandle bookCardHandle \u003d new BookCardHandle(bookCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", bookCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        // verify book details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        assertCardDisplaysBook(expectedBook, bookCardHandle);"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":65,"takuyakanbr":2,"-":5}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.AliasCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.AliasListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookCardHandle;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import guitests.guihandles.BookDetailsPanelHandle;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"     * Asserts that {@code detailsPanel} displays the details of {@code expectedBook}."},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    public static void assertDetailsPanelDisplaysBook(Book expectedBook, BookDetailsPanelHandle detailsPanel) {"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook.getTitle().toString(), detailsPanel.getTitle());"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook.getIsbn().toString(), detailsPanel.getIsbn());"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook.getPublisher().toString(), detailsPanel.getPublisher());"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook.getPublicationDate().toString(), detailsPanel.getPublicationDate());"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook.getDescription().toString(), detailsPanel.getDescription());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedBook.getAuthors().stream().map(Author::getDisplayText)"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"                .collect(Collectors.toList()), detailsPanel.getAuthors());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedBook.getCategories().stream().map(Category::getDisplayText)"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"                .collect(Collectors.toList()), detailsPanel.getCategories());"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    public static void assertCardEquals(BookCardHandle expectedCard, BookCardHandle actualCard) {"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(actualCard.equals(expectedCard));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedBook}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    public static void assertCardDisplaysBook(Book expectedBook, BookCardHandle actualCard) {"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(actualCard.equals(expectedBook));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static void assertAliasCardEquals(AliasCardHandle expectedCard, AliasCardHandle actualCard) {"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(actualCard.equals(expectedCard));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedAlias}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void assertAliasCardDisplaysAlias(Alias expectedAlias, AliasCardHandle actualCard) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(actualCard.equals(expectedAlias));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that the list in {@code bookListPanelHandle} displays the details of {@code books} correctly and"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    public static void assertListMatching(BookListPanelHandle bookListPanelHandle, Book... books) {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        for (int i \u003d 0; i \u003c books.length; i++) {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"            bookListPanelHandle.navigateToCard(i);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            assertCardDisplaysBook(books[i], bookListPanelHandle.getBookCardHandle(i).get());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code aliasListPanelHandle} displays the details of {@code aliases} correctly and"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static void assertListMatching(AliasListPanelHandle aliasListPanelHandle, Alias... aliases) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c aliases.length; i++) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            aliasListPanelHandle.navigateToCard(i);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            assertAliasCardDisplaysAlias(aliases[i], aliasListPanelHandle.getAliasCardHandle(i).get());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that the list in {@code bookListPanelHandle} displays the details of {@code books} correctly and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    public static void assertListMatching(BookListPanelHandle bookListPanelHandle, List\u003cBook\u003e books) {"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        assertListMatching(bookListPanelHandle, books.toArray(new Book[0]));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code aliasListPanelHandle} displays the details of {@code aliases} correctly and"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static void assertListMatching(AliasListPanelHandle aliasListPanelHandle, List\u003cAlias\u003e aliases) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertListMatching(aliasListPanelHandle, aliases.toArray(new Alias[0]));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts the size of the list in {@code bookListPanelHandle} equals to {@code size}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"    public static void assertListSize(BookListPanelHandle bookListPanelHandle, int size) {"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        int numberOfBooks \u003d bookListPanelHandle.getListSize();"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(size, numberOfBooks);"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":19,"takuyakanbr":19,"-":82}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.WindowSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.storage.XmlSerializableBookShelf;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String BOOK_SHELF_NAME \u003d \"Test\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String PASSWORD_HASH \u003d \"\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String saveFileLocation;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final String recentBooksFileLocation;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final String aliasListFileLocation;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final String prefFileLocation;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public TestApp(Supplier\u003cReadOnlyBookShelf\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.recentBooksFileLocation \u003d TestUtil.getFilePathInSandboxFolder(\"recentbooks.xml\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.aliasListFileLocation \u003d TestUtil.getFilePathInSandboxFolder(\"aliaslist.xml\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefFileLocation \u003d TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableBookShelf(initialDataSupplier.get()),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(prefFileLocation);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new WindowSettings(800.0, 800.0, (int) x, (int) y));"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        userPrefs.setBookShelfFilePath(saveFileLocation);"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        userPrefs.setRecentBooksFilePath(recentBooksFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAliasListFilePath(aliasListFileLocation);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        userPrefs.setBookShelfName(BOOK_SHELF_NAME);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        userPrefs.setPasswordHash(PASSWORD_HASH);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a defensive copy of the book shelf data stored inside the storage file."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    public BookShelf readStorageBookShelf() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"            return new BookShelf(storage.readBookShelf().get());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"            throw new AssertionError(\"Data is not in the BookShelf format.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        return storage.getBookShelfFilePath();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager(model.getBookShelf(), new UserPrefs(),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                model.getRecentBooksListAsBookShelf(), model.getAliasList());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        copy.updateBookListFilter(model.getBookListFilter());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        copy.updateBookListSorter(model.getBookListSorter());"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        copy.setActiveListType(model.getActiveListType());"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        ModelHelper.setSearchResults(copy, model.getSearchResultsList());"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        ModelHelper.setRecentBooks(copy, model.getRecentBooksList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":14,"takuyakanbr":1,"-":115}},{"path":"src/test/java/seedu/address/ui/testutil/EventsCollectorRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Sets up an {@code EventsCollector} and tears it down after each test."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EventsCollectorRule implements TestRule {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final EventsCollector eventsCollector \u003d new EventsCollector();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * A class that collects events raised by other classes."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public class EventsCollector {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        public EventsCollector() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * Collects any event raised by any class"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        @Subscribe"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        public void collectEvent(BaseEvent event) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            events.add(event);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * Removes collected events from the collected list"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        public void reset() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            events.clear();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        public int getSize() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return events.size();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * Returns the most recent event collected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        public BaseEvent getMostRecent() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            if (events.isEmpty()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return events.get(events.size() - 1);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        /**"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"         * Returns the most recent event collected, of the specified class."},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        public BaseEvent getMostRecent(Class clazz) {"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"            for (int i \u003d events.size() - 1; i \u003e\u003d 0; --i) {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"                if (events.get(i).getClass() \u003d\u003d clazz) {"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"                    return events.get(i);"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"                }"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"            return null;"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"         * Returns true if the collector did not receive any events"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        public boolean isEmpty() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return events.isEmpty();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":12,"-":86}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.model.BookShelfChangedEvent;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private static final BookShelfChangedEvent EVENT_STUB \u003d new BookShelfChangedEvent(new BookShelf());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        // after book shelf is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":71}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"        String defaultConfigAsString \u003d \"App title : Bibliotek\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":1,"-":30}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        assertNotNull(AppUtil.getImage(\"/images/book_flat_32.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"-":46}},{"path":"src/test/java/seedu/address/ui/BookListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBooks;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookCardHandle;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import guitests.guihandles.BookListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.JumpToBookListIndexRequestEvent;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"public class BookListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private static final ObservableList\u003cBook\u003e TYPICAL_BOOKS \u003d"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"            FXCollections.observableList(getTypicalBooks());"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private static final JumpToBookListIndexRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"            new JumpToBookListIndexRequestEvent(INDEX_SECOND_BOOK);"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private BookListPanelHandle bookListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        BookListPanel bookListPanel \u003d new BookListPanel(TYPICAL_BOOKS);"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        uiPartRule.setUiPart(bookListPanel);"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        bookListPanelHandle \u003d new BookListPanelHandle(getChildNode(bookListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"                BookListPanelHandle.BOOK_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_BOOKS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"            bookListPanelHandle.navigateToCard(TYPICAL_BOOKS.get(i));"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"            Book expectedBook \u003d TYPICAL_BOOKS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            BookCardHandle actualCard \u003d bookListPanelHandle.getBookCardHandle(i).get();"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"            assertCardDisplaysBook(expectedBook, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    public void handleJumpToBookListIndexRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        BookCardHandle expectedCard \u003d bookListPanelHandle.getBookCardHandle(INDEX_SECOND_BOOK.getZeroBased()).get();"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        BookCardHandle selectedCard \u003d bookListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":31,"takuyakanbr":4,"-":24}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":80,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":86,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"    //---------------- Tests for isValidUrl --------------------------------------"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":"    //@@author qiu-siqi"},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"    public void isValidUrl_nullGiven_throwsNullPointerException() {"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"        StringUtil.isValidUrl(null);"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":"    public void isValidUrl_emptyString() {"},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(StringUtil.isValidUrl(\"\"));"},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"qiu-siqi"},"content":"    public void isValidUrl_validUrl_success() {"},{"lineNumber":175,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(StringUtil.isValidUrl("},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":"                \"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/FULL/EXPNOS/BIBENQ/6689797/241229563,1\"));"},{"lineNumber":177,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":179,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"qiu-siqi"},"content":"    public void isValidUrl_invalidUrl_failure() {"},{"lineNumber":181,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(StringUtil.isValidUrl("},{"lineNumber":182,"author":{"gitID":"qiu-siqi"},"content":"                \"https:///catalogue.nlb.gov.sg/cgi-bin/spydus.exe/FULL/EXPNOS/BIBENQ/6689797/241229563,1\"));"},{"lineNumber":183,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":"    //---------------- Tests for replace --------------------------------------"},{"lineNumber":186,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":187,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":"    public void replace_success() {"},{"lineNumber":189,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"hello\", StringUtil.replace(\"aello\", \u0027h\u0027, 0));"},{"lineNumber":190,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":192,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"qiu-siqi"},"content":"    public void replace_invalidIndex() {"},{"lineNumber":194,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(IndexOutOfBoundsException.class);"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":"        StringUtil.replace(\"aello\", \u0027h\u0027, 6);"},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":"    //---------------- Tests for addAfter --------------------------------------"},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":200,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"qiu-siqi"},"content":"    public void addAfter_first_success() {"},{"lineNumber":202,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"hello\", StringUtil.addAfter(\"ello\", \u0027h\u0027, -1));"},{"lineNumber":203,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":205,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":"    public void addAfter_last_success() {"},{"lineNumber":207,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"hello\", StringUtil.addAfter(\"hell\", \u0027o\u0027, 3));"},{"lineNumber":208,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":210,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"qiu-siqi"},"content":"    public void addAfter_invalidIndex() {"},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(IndexOutOfBoundsException.class);"},{"lineNumber":213,"author":{"gitID":"qiu-siqi"},"content":"        StringUtil.replace(\"hello\", \u0027h\u0027, 5);"},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":"    //---------------- Tests for removeAt --------------------------------------"},{"lineNumber":217,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":"    public void removeAt_success() {"},{"lineNumber":220,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"hello\", StringUtil.removeAt(\"heello\", 1));"},{"lineNumber":221,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"qiu-siqi"},"content":"    public void removeAt_invalidIndex() {"},{"lineNumber":225,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(IndexOutOfBoundsException.class);"},{"lineNumber":226,"author":{"gitID":"qiu-siqi"},"content":"        StringUtil.removeAt(\"hello\", -1);"},{"lineNumber":227,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":229,"author":{"gitID":"qiu-siqi"},"content":"    //---------------- Tests for leftTrim --------------------------------------"},{"lineNumber":230,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":231,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"qiu-siqi"},"content":"    public void leftTrim_success() {"},{"lineNumber":233,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"hello\", StringUtil.leftTrim(\"     hello\"));"},{"lineNumber":234,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":236,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"qiu-siqi"},"content":"    public void leftTrim_rightNotTrimmed_success() {"},{"lineNumber":238,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"hello \", StringUtil.leftTrim(\"     hello \"));"},{"lineNumber":239,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":82,"-":158}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.storage.XmlAdaptedAuthor;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.storage.XmlAdaptedBook;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.storage.XmlAdaptedCategory;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.storage.XmlSerializableBookShelf;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.BookShelfBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validBookShelf.xml\");"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    private static final File MISSING_BOOK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingBookField.xml\");"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    private static final File VALID_BOOK_FILE \u003d new File(TEST_DATA_FOLDER + \"validBook.xml\");"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempBookShelf.xml\"));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_TITLE \u003d \"Artemis\";"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_DESCRIPTION \u003d \"This is Artemis.\";"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    private static final List\u003cXmlAdaptedAuthor\u003e VALID_AUTHORS \u003d"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"            Collections.singletonList(new XmlAdaptedAuthor(\"Andy Weir\"));"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    private static final List\u003cXmlAdaptedCategory\u003e VALID_CATEGORIES \u003d"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"            Collections.singletonList(new XmlAdaptedCategory(\"Fiction\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Status VALID_STATUS \u003d Status.READ;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Priority VALID_PRIORITY \u003d Priority.LOW;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final int VALID_RATING \u003d Rating.DEFAULT_RATING;"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_GID \u003d \"ry3GjwEACAAJ\";"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_ISBN \u003d \"9780525572664\";"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_PUBLISHER \u003d \" \";"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_PUBLICATION_DATE \u003d \"2017-11-14\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        XmlUtil.getDataFromFile(null, BookShelf.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, BookShelf.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, BookShelf.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableBookShelf.class).toModelType();"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(5, dataFromFile.size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    public void xmlAdaptedBookFromFile_fileWithMissingBookField_validResult() throws Exception {"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        XmlAdaptedBook actualBook \u003d XmlUtil.getDataFromFile("},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"                MISSING_BOOK_FIELD_FILE, XmlAdaptedBookWithRootElement.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedBook expectedBook \u003d new XmlAdaptedBook(null, null, null, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, null, null);"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook, actualBook);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    public void xmlAdaptedBookFromFile_fileWithValidBook_validResult() throws Exception {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        XmlAdaptedBook actualBook \u003d XmlUtil.getDataFromFile("},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"                VALID_BOOK_FILE, XmlAdaptedBookWithRootElement.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedBook expectedBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_AUTHORS, VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBook, actualBook);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        XmlUtil.saveDataToFile(null, new BookShelf());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new BookShelf());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        XmlSerializableBookShelf dataToWrite \u003d new XmlSerializableBookShelf(new BookShelf());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        XmlSerializableBookShelf dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableBookShelf.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"        BookShelfBuilder builder \u003d new BookShelfBuilder(new BookShelf());"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"        dataToWrite \u003d new XmlSerializableBookShelf(builder.withBook(new BookBuilder().build()).build());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableBookShelf.class);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedBook}"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"    @XmlRootElement(name \u003d \"book\")"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"    private static class XmlAdaptedBookWithRootElement extends XmlAdaptedBook {}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":5,"takuyakanbr":40,"-":100}},{"path":"src/test/java/seedu/address/commons/core/ThemeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.InvalidThemeException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ThemeTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getThemeByName_validName_returnsTheme() throws Exception {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(Theme.WHITE, Theme.getThemeByName(\"white\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(Theme.LIGHT, Theme.getThemeByName(\"light\"));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(Theme.DARK, Theme.getThemeByName(\"dark\"));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // theme names should be case insensitive"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(Theme.WHITE, Theme.getThemeByName(\"whITE\"));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(Theme.LIGHT, Theme.getThemeByName(\"LIGht\"));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(Theme.DARK, Theme.getThemeByName(\"Dark\"));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void getThemeByName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Theme.getThemeByName(null);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void getThemeByName_invalidName_throwsInvalidThemeException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(InvalidThemeException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Theme.getThemeByName(\"12345\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":4,"-":35}},{"path":"src/test/java/seedu/address/network/HttpClientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.ExecutionException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import org.asynchttpclient.Dsl;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"public class HttpClientTest {"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        new HttpClient(null);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void makeGetRequest_invalidUrl_throwsExecutionException() throws ExecutionException, InterruptedException {"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        HttpClient httpClient \u003d new HttpClient(Dsl.asyncHttpClient());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(ExecutionException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        httpClient.makeGetRequest(\"http://this.is.an.invalid.url\").get();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    public void close_executedMultipleTimes_success() {"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        HttpClient httpClient \u003d new HttpClient(Dsl.asyncHttpClient());"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        httpClient.close();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        httpClient.close();"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        httpClient.close();"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        // should not throw any exceptions"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":21,"-":14}},{"path":"src/test/java/seedu/address/network/NetworkManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.concurrent.ExecutionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.api.google.GoogleBooksApi;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.network.library.NlbCatalogueApi;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"public class NetworkManagerTest {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final String PARAM_EMPTY_RESULT \u003d \"1\";"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    private static final String PARAM_SUCCESS \u003d \"12345\";"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private static final String PARAM_FAILURE \u003d \"failure\";"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private static final Book BOOK_SUCESS \u003d TypicalBooks.ARTEMIS;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private static final String BOOK_SUCCESS_RESULT \u003d \"Success\";"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    private static final Book BOOK_FAILURE \u003d TypicalBooks.BABYLON_ASHES;"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    private NetworkManager networkManager;"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    private GoogleBooksApi mockGoogleBooksApi;"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    private NlbCatalogueApi mockNlbCatalogueApi;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        mockGoogleBooksApi \u003d mock(GoogleBooksApi.class);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        mockNlbCatalogueApi \u003d mock(NlbCatalogueApi.class);"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        networkManager \u003d new NetworkManager(mock(HttpClient.class), mockGoogleBooksApi, mockNlbCatalogueApi);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    public void handleGoogleApiSearchRequestEvent_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        when(mockGoogleBooksApi.searchBooks(PARAM_EMPTY_RESULT))"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(CompletableFuture.completedFuture(new BookShelf()));"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d networkManager.searchBooks(PARAM_EMPTY_RESULT).get();"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockGoogleBooksApi).searchBooks(PARAM_EMPTY_RESULT);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(0, bookShelf.size());"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    public void handleGoogleApiSearchRequestEvent_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        when(mockGoogleBooksApi.searchBooks(PARAM_SUCCESS))"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(CompletableFuture.completedFuture(TypicalBooks.getTypicalBookShelf()));"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d networkManager.searchBooks(PARAM_SUCCESS).get();"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockGoogleBooksApi).searchBooks(PARAM_SUCCESS);"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(5, bookShelf.size());"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    public void handleGoogleApiSearchRequestEvent_failure() throws Exception {"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        when(mockGoogleBooksApi.searchBooks(PARAM_FAILURE))"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(TestUtil.getFailedFuture());"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        CompletableFuture\u003cReadOnlyBookShelf\u003e bookShelf \u003d networkManager.searchBooks(PARAM_FAILURE);"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockGoogleBooksApi).searchBooks(PARAM_FAILURE);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(ExecutionException.class);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.get();"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    public void handleGoogleApiBookDetailsRequestEvent_success() throws Exception {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        when(mockGoogleBooksApi.getBookDetails(PARAM_SUCCESS))"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(CompletableFuture.completedFuture(TypicalBooks.ARTEMIS));"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        Book book \u003d networkManager.getBookDetails(PARAM_SUCCESS).get();"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockGoogleBooksApi).getBookDetails(PARAM_SUCCESS);"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(TypicalBooks.ARTEMIS, book);"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"    public void handleGoogleApiBookDetailsRequestEvent_failure() throws Exception {"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        when(mockGoogleBooksApi.getBookDetails(PARAM_FAILURE))"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(TestUtil.getFailedFuture());"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        CompletableFuture\u003cBook\u003e book \u003d networkManager.getBookDetails(PARAM_FAILURE);"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockGoogleBooksApi).getBookDetails(PARAM_FAILURE);"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(ExecutionException.class);"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        book.get();"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    //@@author qiu-siqi"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    public void nlbCatalogueApiSearchForBooks_success() throws Exception {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        when(mockNlbCatalogueApi.searchForBook(BOOK_SUCESS))"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(CompletableFuture.completedFuture(BOOK_SUCCESS_RESULT));"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        String result \u003d networkManager.searchLibraryForBook(BOOK_SUCESS).get();"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"        verify(mockNlbCatalogueApi).searchForBook(BOOK_SUCESS);"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(BOOK_SUCCESS_RESULT, result);"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"    public void nlbCatalogueApiSearchForBooks_failure() throws Exception {"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"        when(mockNlbCatalogueApi.searchForBook(BOOK_FAILURE)).thenReturn(TestUtil.getFailedFuture());"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        CompletableFuture\u003cString\u003e result \u003d networkManager.searchLibraryForBook(BOOK_FAILURE);"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"        verify(mockNlbCatalogueApi).searchForBook(BOOK_FAILURE);"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(ExecutionException.class);"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        result.get();"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":25,"takuyakanbr":92,"-":10}},{"path":"src/test/java/seedu/address/ui/BookDetailsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import guitests.guihandles.BookDetailsPanelHandle;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.BookListSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.ui.testutil.GuiTestAssert;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"public class BookDetailsPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private BookDetailsPanel bookDetailsPanel;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    private BookDetailsPanelHandle bookDetailsPanelHandle;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        guiRobot.interact(() -\u003e bookDetailsPanel \u003d new BookDetailsPanel());"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        uiPartRule.setUiPart(bookDetailsPanel);"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        bookDetailsPanelHandle \u003d new BookDetailsPanelHandle(bookDetailsPanel.getRoot());"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public void display() {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        // hidden by default"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(bookDetailsPanelHandle.isVisible());"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        // check that the correct details are displayed"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        postNow(new BookListSelectionChangedEvent(ARTEMIS));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(bookDetailsPanelHandle.isVisible());"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        assertDetailsPanelDisplaysBook(ARTEMIS);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        // check that the correct details are displayed"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        postNow(new BookListSelectionChangedEvent(BABYLON_ASHES));"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        assertDetailsPanelDisplaysBook(BABYLON_ASHES);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        // no categories"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        Book bookWithNoCategories \u003d new BookBuilder().withCategories().build();"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        postNow(new BookListSelectionChangedEvent(bookWithNoCategories));"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        assertDetailsPanelDisplaysBook(bookWithNoCategories);"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        // no authors"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        Book bookWithNoAuthors \u003d new BookBuilder().withAuthors().build();"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        postNow(new BookListSelectionChangedEvent(bookWithNoAuthors));"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        assertDetailsPanelDisplaysBook(bookWithNoAuthors);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        // empty book"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        Book emptyBook \u003d new BookBuilder().withGid(\"\").withTitle(\"\").withAuthors().withCategories()"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"                .withDescription(\"\").withIsbn(\"\").withPublicationDate(\"\").withPublisher(\"\").build();"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        postNow(new BookListSelectionChangedEvent(emptyBook));"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        assertDetailsPanelDisplaysBook(emptyBook);"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that the {@code BookDetailsPanel} displays the details of {@code expectedBook} correctly"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"     * and is visible."},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    private void assertDetailsPanelDisplaysBook(Book expectedBook) {"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(bookDetailsPanelHandle.isVisible());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(() -\u003e"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                bookDetailsPanelHandle.getDescription().equals(expectedBook.getDescription().toString()), 1500);"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        GuiTestAssert.assertDetailsPanelDisplaysBook(expectedBook, bookDetailsPanelHandle);"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":11,"takuyakanbr":56,"-":6}},{"path":"src/test/java/seedu/address/network/library/NlbResultHelperTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.network.library;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"public class NlbResultHelperTest {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"            FileUtil.getPath(\"src/test/data/NlbResultTest/\");"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    private static final File INVALID_RESPONSE_TOO_MANY_REQUESTS \u003d"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"            new File(TEST_DATA_FOLDER + \"InvalidResponseTooManyRequests.html\");"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    private static final File VALID_RESPONSE_BRIEF_DISPLAY \u003d"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            new File(TEST_DATA_FOLDER + \"ValidResponseBriefDisplay.html\");"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private static final File VALID_RESPONSE_FULL_DISPLAY \u003d"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"            new File(TEST_DATA_FOLDER + \"ValidResponseFullDisplay.html\");"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private static final File VALID_RESPONSE_NO_RESULTS \u003d"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"            new File(TEST_DATA_FOLDER + \"ValidResponseNoResults.html\");"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private static final String INVALID_RESPONSE_TOO_MANY_REQUESTS_URL \u003d NlbResultHelper.NO_RESULTS_FOUND;"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_RESPONSE_BRIEF_DISPLAY_URL \u003d"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"            \"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/FULL/EXPNOS/BIBENQ/6585278/226559740,1\";"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_RESPONSE_FULL_DISPLAY_URL \u003d NlbResultHelper.URL_FULL_DISPLAY"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"            .replaceAll(\"%s\", \"Harry Potter and the Classical World Richard A. Spencer\");"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_RESPONSE_NO_RESULTS_URL \u003d NlbResultHelper.NO_RESULTS_FOUND;"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    public void getUrl_nullString_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        NlbResultHelper.getUrl(null, TypicalBooks.ARTEMIS);"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    public void getUrl_nullBook_throwsNullPointerException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        String content \u003d FileUtil.readFromFile(VALID_RESPONSE_BRIEF_DISPLAY);"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        NlbResultHelper.getUrl(content, null);"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    public void getUrl_invalidResponseTooManyRequests_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        String content \u003d FileUtil.readFromFile(INVALID_RESPONSE_TOO_MANY_REQUESTS);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(INVALID_RESPONSE_TOO_MANY_REQUESTS_URL, NlbResultHelper.getUrl(content, TypicalBooks.ARTEMIS));"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    public void getUrl_validResponseBriefDisplay_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        String content \u003d FileUtil.readFromFile(VALID_RESPONSE_BRIEF_DISPLAY);"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(VALID_RESPONSE_BRIEF_DISPLAY_URL, NlbResultHelper.getUrl(content, TypicalBooks.ARTEMIS));"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    public void getUrl_validResponseFullDisplay_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        String content \u003d FileUtil.readFromFile(VALID_RESPONSE_FULL_DISPLAY);"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        Book expectedBook \u003d new BookBuilder()"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"                .withTitle(\"Harry Potter and the Classical World\").withAuthors(\"Richard A. Spencer\").build();"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(VALID_RESPONSE_FULL_DISPLAY_URL, NlbResultHelper.getUrl(content, expectedBook));"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"    public void getUrl_validResponseNoResults() throws Exception {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        String content \u003d FileUtil.readFromFile(VALID_RESPONSE_NO_RESULTS);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        Book book \u003d new BookBuilder().withTitle(\"xxxxxxxxxxxxxxxxxxxxxx\").withAuthors(\"yyyyyyyyy\").build();"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(VALID_RESPONSE_NO_RESULTS_URL, NlbResultHelper.getUrl(content, book));"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":70,"-":9}},{"path":"src/test/java/seedu/address/network/api/google/JsonDeserializerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network.api.google;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"public class JsonDeserializerTest {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    private static final String TEST_DATA_BOOK_DETAILS_FOLDER \u003d"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"            FileUtil.getPath(\"src/test/data/JsonDeserializerTest/bookDetails/\");"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    private static final File ERROR_BOOK_DETAILS_RESPONSE_FILE \u003d"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_BOOK_DETAILS_FOLDER + \"ErrorResponse.json\");"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    private static final File INVALID_BOOK_DETAILS_RESPONSE_NO_ISBN_FILE \u003d"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_BOOK_DETAILS_FOLDER + \"InvalidResponseNoIsbn.json\");"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private static final File INVALID_BOOK_DETAILS_RESPONSE_WRONG_TYPE_FILE \u003d"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_BOOK_DETAILS_FOLDER + \"InvalidResponseWrongType.json\");"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final File VALID_BOOK_DETAILS_RESPONSE_NO_DESC_FILE \u003d"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_BOOK_DETAILS_FOLDER + \"ValidResponseNoDesc.json\");"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    protected static final File VALID_BOOK_DETAILS_RESPONSE_FILE \u003d"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_BOOK_DETAILS_FOLDER + \"ValidResponse.json\");"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private static final String TEST_DATA_SEARCH_FOLDER \u003d"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"            FileUtil.getPath(\"src/test/data/JsonDeserializerTest/search/\");"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    private static final File ERROR_SEARCH_RESPONSE_FILE \u003d new File(TEST_DATA_SEARCH_FOLDER + \"ErrorResponse.json\");"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    private static final File INVALID_SEARCH_RESPONSE_NO_ISBN_FILE \u003d"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_SEARCH_FOLDER + \"InvalidResponseNoIsbn.json\");"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    private static final File INVALID_SEARCH_RESPONSE_WRONG_TYPE_FILE \u003d"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_SEARCH_FOLDER + \"InvalidResponseWrongType.json\");"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    private static final File VALID_SEARCH_RESPONSE_NO_ID_FILE \u003d"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_SEARCH_FOLDER + \"ValidResponseNoDesc.json\");"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    private static final File VALID_SEARCH_RESPONSE_DUPLICATE_BOOKS \u003d"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"            new File(TEST_DATA_SEARCH_FOLDER + \"ValidResponseDuplicateBooks.json\");"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public static final File VALID_SEARCH_RESPONSE_FILE \u003d new File(TEST_DATA_SEARCH_FOLDER + \"ValidResponse.json\");"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    private static final int MAXIMUM_BOOK_COUNT \u003d 30;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    private JsonDeserializer deserializer \u003d new JsonDeserializer();"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBook_validResponse_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(VALID_BOOK_DETAILS_RESPONSE_FILE);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        Book book \u003d deserializer.convertJsonStringToBook(json);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book.getTitle().title);"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"This is a valid description.\", book.getDescription().description);"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBook_validResponseNoDesc_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(VALID_BOOK_DETAILS_RESPONSE_NO_DESC_FILE);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        Book book \u003d deserializer.convertJsonStringToBook(json);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book.getTitle().title);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"\", book.getDescription().description);"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBook_invalidResponseWrongType_throwsCompletionException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(INVALID_BOOK_DETAILS_RESPONSE_WRONG_TYPE_FILE);"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        deserializer.convertJsonStringToBook(json);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBook_invalidResponseNoIsbn_throwsCompletionException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(INVALID_BOOK_DETAILS_RESPONSE_NO_ISBN_FILE);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        deserializer.convertJsonStringToBook(json);"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBook_errorResponse_throwsCompletionException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(ERROR_BOOK_DETAILS_RESPONSE_FILE);"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        deserializer.convertJsonStringToBook(json);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBookShelf_validResponse_success() throws Exception {"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(VALID_SEARCH_RESPONSE_FILE);"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d deserializer.convertJsonStringToBookShelf(json, MAXIMUM_BOOK_COUNT);"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        Book book1 \u003d bookShelf.getBookList().get(0);"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(3, bookShelf.size());"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book1.getTitle().title);"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"This is a valid description.\", book1.getDescription().description);"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBookShelf_validResponseDuplicateBooks_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(VALID_SEARCH_RESPONSE_DUPLICATE_BOOKS);"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d deserializer.convertJsonStringToBookShelf(json, MAXIMUM_BOOK_COUNT);"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        Book book1 \u003d bookShelf.getBookList().get(0);"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(1, bookShelf.size());"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book1.getTitle().title);"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"This is a valid description.\", book1.getDescription().description);"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBookShelf_validResponseNoId_success() throws Exception {"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(VALID_SEARCH_RESPONSE_NO_ID_FILE);"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d deserializer.convertJsonStringToBookShelf(json, MAXIMUM_BOOK_COUNT);"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"        Book book1 \u003d bookShelf.getBookList().get(0);"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book1.getTitle().title);"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"\", book1.getDescription().description);"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        Book book2 \u003d bookShelf.getBookList().get(1);"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title 2\", book2.getTitle().title);"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"\", book2.getDescription().description);"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBookShelf_invalidResponseNoIsbn_ignoresBookWithoutIsbn() throws Exception {"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(INVALID_SEARCH_RESPONSE_NO_ISBN_FILE);"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d deserializer.convertJsonStringToBookShelf(json, MAXIMUM_BOOK_COUNT);"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        Book book1 \u003d bookShelf.getBookList().get(0);"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title 2\", book1.getTitle().title);"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        Book book2 \u003d bookShelf.getBookList().get(1);"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title 3\", book2.getTitle().title);"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBookShelf_invalidResponseWrongType_throwsCompletionException() throws Exception {"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(INVALID_SEARCH_RESPONSE_WRONG_TYPE_FILE);"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        deserializer.convertJsonStringToBookShelf(json, MAXIMUM_BOOK_COUNT);"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"    public void convertJsonStringToBookShelf_errorResponse_throwsCompletionException() throws Exception {"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        String json \u003d FileUtil.readFromFile(ERROR_SEARCH_RESPONSE_FILE);"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        deserializer.convertJsonStringToBookShelf(json, MAXIMUM_BOOK_COUNT);"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":141,"-":5}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertArrayEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.After;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model, mock(NetworkManager.class));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void isValidCommand_validCommand_true() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(logic.isValidCommand(\"delete 9\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(logic.isValidCommand(\"list s/read by/pd\"));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(logic.isValidCommand(\"   list   s/read    by/pd  \"));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void isValidCommand_validAlias_true() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        model.addAlias(new Alias(\"ls\", \"list\", \"s/read by/pd\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        model.addAlias(new Alias(\"d\", \"delete\", \"\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(logic.isValidCommand(\"ls\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(logic.isValidCommand(\"d 9\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(logic.isValidCommand(\"    ls    by/s    \"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void isValidCommand_invalidCommand_false() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(logic.isValidCommand(\"listt\"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertFalse(logic.isValidCommand(\"delete\"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertFalse(logic.isValidCommand(\"del ete 9\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        model.addAlias(new Alias(\"d\", \"delete\", \"\"));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(logic.isValidCommand(\"d\"));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parse_emptyCommandText_throwsParseException() throws ParseException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        logic.parse(\"\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_aliasedCommand_aliasApplied() throws ParseException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.addAlias(new Alias(\"ls\", \"list\", \"s/read by/pd\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.addAlias(new Alias(\"d\", \"delete\", \"\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertArrayEquals(new String[]{\"list\", \" s/read by/pd\"}, logic.parse(\"ls\"));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertArrayEquals(new String[]{\"list\", \" s/read by/pd s/unread\"}, logic.parse(\"ls s/unread\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertArrayEquals(new String[]{\"delete\", \"\"}, logic.parse(\"d\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_nonAliasedCommand_processed() throws ParseException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertArrayEquals(new String[]{\"list\", \"\"}, logic.parse(\"list\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertArrayEquals(new String[]{\"list\", \" 123\"}, logic.parse(\"list 123\"));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertArrayEquals(new String[]{\"list\", \" 123 s/read \"}, logic.parse(\"list 123 s/read \"));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void execute_emptyCommandText_emptyResult() throws CommandException, ParseException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        CommandResult result \u003d logic.execute(\"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(CommandResult.isEmptyResult(result));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                String.format(ListCommand.MESSAGE_SUCCESS, model.getDisplayBookList().size()), model);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_closeCommand_corrected() {"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"lst\", String.format(Messages.MESSAGE_CORRECTED_COMMAND, \"list\"), model);"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"\","},{"lineNumber":131,"author":{"gitID":"-"},"content":"                String.format(ListCommand.MESSAGE_SUCCESS, model.getDisplayBookList().size()), model);"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_locked() {"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().lock();"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"list\", Messages.MESSAGE_APP_LOCKED, model);"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"help\", HelpCommand.SHOWING_HELP_MESSAGE, model);"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"unlock\", UnlockCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_password_notInHistory() {"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"list\","},{"lineNumber":145,"author":{"gitID":"-"},"content":"                String.format(ListCommand.MESSAGE_SUCCESS, model.getDisplayBookList().size()), model);"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        assertHistoryCorrect(\"list\");"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"lock\", LockCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"unlock \", UnlockCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"        assertHistoryCorrect(\"lock\", \"history\", \"list\");"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(\"setpw new/xxx\", SetPasswordCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"        assertHistoryCorrect(\"history\", \"lock\", \"history\", \"list\");"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":"    public void getActiveList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"        logic.getActiveList().remove(0);"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void getDisplayAliasList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        logic.getDisplayAliasList().remove(0);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":196,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":229,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":38,"takuyakanbr":1,"-":196}},{"path":"src/test/java/seedu/address/network/library/NlbCatalogueApiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.network.library;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpClient;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpResponse;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.network.api.google.JsonDeserializerTest;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"public class NlbCatalogueApiTest {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private static final File VALID_RESPONSE_BRIEF_DISPLAY \u003d"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"            new File(\"src/test/data/NlbResultTest/ValidResponseBriefDisplay.html\");"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_RESPONSE_BRIEF_DISPLAY_URL \u003d"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"            \"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/FULL/EXPNOS/BIBENQ/6585278/226559740,1\";"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    private NlbCatalogueApi nlbCatalogueApi;"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    private HttpClient mockClient;"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        mockClient \u003d mock(HttpClient.class);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        nlbCatalogueApi \u003d new NlbCatalogueApi(mockClient);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    public void makeSearchUrl_validBook_success() {"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/ENQ/EXPNOS/BIBENQ?ENTRY\u003dArtemis+Andy+Weir\""},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"                + \"\u0026ENTRY_NAME\u003dBS\u0026ENTRY_TYPE\u003dK\u0026GQ\u003dArtemis+Andy+Weir\u0026SORTS\u003dSQL_REL_TITLE\","},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"                NlbCatalogueApi.makeSearchUrl(TypicalBooks.ARTEMIS).replaceAll(\" \", \"+\"));"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    public void searchForBooks_validParam_success() throws IOException {"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        when(mockClient.makeGetRequest(NlbCatalogueApi.makeSearchUrl(TypicalBooks.ARTEMIS)))"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(makeFutureResponse(200, FileUtil.readFromFile(VALID_RESPONSE_BRIEF_DISPLAY)));"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        String result \u003d nlbCatalogueApi.searchForBook(TypicalBooks.ARTEMIS).join();"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        verify(mockClient).makeGetRequest(NlbCatalogueApi.makeSearchUrl(TypicalBooks.ARTEMIS));"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(VALID_RESPONSE_BRIEF_DISPLAY_URL, result);"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    public void searchForBooks_badResponseType_throwsCompletionException() {"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        when(mockClient.makeGetRequest(NlbCatalogueApi.makeSearchUrl(TypicalBooks.ARTEMIS)))"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(makeFutureResponse(503, \"\"));"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        nlbCatalogueApi.searchForBook(TypicalBooks.ARTEMIS).join();"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    public void searchForBooks_badReturnType_throwsCompletionException() throws IOException {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        when(mockClient.makeGetRequest(NlbCatalogueApi.makeSearchUrl(TypicalBooks.ARTEMIS)))"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(makeFutureResponse(200, \"application/json\","},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"                        FileUtil.readFromFile(JsonDeserializerTest.VALID_SEARCH_RESPONSE_FILE)));"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        nlbCatalogueApi.searchForBook(TypicalBooks.ARTEMIS).join();"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a {@link CompletableFuture} that resolves to a {@link HttpResponse} of content type HTML."},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    private static CompletableFuture\u003cHttpResponse\u003e makeFutureResponse(int code, String response) {"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        return makeFutureResponse(code, \"text/html;\", response);"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a {@link CompletableFuture} that resolves to a {@link HttpResponse}."},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    private static CompletableFuture\u003cHttpResponse\u003e makeFutureResponse(int code, String contentType, String response) {"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        return CompletableFuture.completedFuture(new HttpResponse(code, contentType, response));"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":76,"takuyakanbr":12,"-":6}},{"path":"src/test/java/seedu/address/network/api/google/GoogleBooksApiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network.api.google;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpClient;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpResponse;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"public class GoogleBooksApiTest {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final String URL_SEARCH_BOOKS_OK \u003d String.format(GoogleBooksApi.URL_SEARCH_BOOKS, \"123\");"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    private static final String URL_BOOK_DETAILS_OK \u003d String.format(GoogleBooksApi.URL_BOOK_DETAILS, \"123\");"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private static final String URL_SEARCH_BOOKS_FAIL \u003d String.format(GoogleBooksApi.URL_SEARCH_BOOKS, \"\");"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private static final String URL_BOOK_DETAILS_FAIL \u003d String.format(GoogleBooksApi.URL_BOOK_DETAILS, \"\");"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private static final String URL_SEARCH_BOOKS_BAD_RESPONSE \u003d String.format(GoogleBooksApi.URL_SEARCH_BOOKS, \"html\");"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private static final String URL_BOOK_DETAILS_BAD_RESPONSE \u003d String.format(GoogleBooksApi.URL_BOOK_DETAILS, \"html\");"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    private GoogleBooksApi googleBooksApi;"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    private HttpClient mockClient;"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        mockClient \u003d mock(HttpClient.class);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        googleBooksApi \u003d new GoogleBooksApi(mockClient);"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    public void searchBooks_validParam_success() throws IOException {"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        when(mockClient.makeGetRequest(URL_SEARCH_BOOKS_OK))"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(makeFutureResponse(200,"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"                        FileUtil.readFromFile(JsonDeserializerTest.VALID_SEARCH_RESPONSE_FILE)));"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf bookShelf \u003d googleBooksApi.searchBooks(\"123\").join();"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        Book book1 \u003d bookShelf.getBookList().get(0);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockClient).makeGetRequest(URL_SEARCH_BOOKS_OK);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book1.getTitle().title);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"This is a valid description.\", book1.getDescription().description);"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    public void searchBooks_invalidParam_throwsCompletionException() {"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        when(mockClient.makeGetRequest(URL_SEARCH_BOOKS_FAIL))"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(makeFutureResponse(503, \"{ \\\"error\\\": { \\\"code\\\": 503 } }\"));"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        googleBooksApi.searchBooks(\"\").join();"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    public void searchBooks_badResponseType_throwsCompletionException() {"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        when(mockClient.makeGetRequest(URL_SEARCH_BOOKS_BAD_RESPONSE))"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(makeFutureResponse(503, \"text/html;\", \"{ \\\"error\\\": { \\\"code\\\": 503 } }\"));"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        googleBooksApi.searchBooks(\"html\").join();"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"    public void getBookDetails_validId_success() throws IOException {"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        when(mockClient.makeGetRequest(URL_BOOK_DETAILS_OK))"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(makeFutureResponse(200,"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"                        FileUtil.readFromFile(JsonDeserializerTest.VALID_BOOK_DETAILS_RESPONSE_FILE)));"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        Book book \u003d googleBooksApi.getBookDetails(\"123\").join();"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        verify(mockClient).makeGetRequest(URL_BOOK_DETAILS_OK);"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"The Book Without a Title\", book.getTitle().title);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"This is a valid description.\", book.getDescription().description);"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    public void getBookDetails_invalidId_throwsCompletionException() {"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        when(mockClient.makeGetRequest(URL_BOOK_DETAILS_FAIL))"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(makeFutureResponse(503, \"{ \\\"error\\\": { \\\"code\\\": 503 } }\"));"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        googleBooksApi.getBookDetails(\"\").join();"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    public void getBookDetails_badResponseType_throwsCompletionException() {"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        when(mockClient.makeGetRequest(URL_BOOK_DETAILS_BAD_RESPONSE))"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(makeFutureResponse(503, \"text/html;\", \"{ \\\"error\\\": { \\\"code\\\": 503 } }\"));"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(CompletionException.class);"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        googleBooksApi.getBookDetails(\"html\").join();"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"     * Returns a {@link CompletableFuture} that resolves to a {@link HttpResponse} of content type JSON."},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"    private static CompletableFuture\u003cHttpResponse\u003e makeFutureResponse(int code, String response) {"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"        return makeFutureResponse(code, \"application/json;\", response);"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"     * Returns a {@link CompletableFuture} that resolves to a {@link HttpResponse}."},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"    private static CompletableFuture\u003cHttpResponse\u003e makeFutureResponse(int code, String contentType, String response) {"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        return CompletableFuture.completedFuture(new HttpResponse(code, contentType, response));"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":116,"-":6}},{"path":"src/test/java/seedu/address/logic/LockManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.After;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"public class LockManagerTest {"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    @After"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    public void tearDown() {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    public void initialize() throws Exception {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(CipherEngine.hashPassword(\"testing\"));"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().isLocked());"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().hasLoggedIn());"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().isPasswordProtected());"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public void lock() {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().lock();"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().isLocked());"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        // Locking again shouldn\u0027t change anything"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().lock();"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().isLocked());"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public void unlock() throws Exception {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(CipherEngine.hashPassword(\"testing\"));"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        // Cannot unlock if wrong password"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().unlock(\"other password\"));"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        // Correct password -\u003e Unlocked"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().unlock(\"testing\"));"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().hasLoggedIn());"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().isLocked());"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"testing\", LockManager.getInstance().getPassword());"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        // Cannot unlock if not locked"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().unlock(\"testing\"));"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        // Cannot unlock if initialized with invalid hash"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(\"invalid$11$11$invalid$invalid\");"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().unlock(\"\"));"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    public void changePassword() {"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        // Set a password"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().setPassword(LockManager.NO_PASSWORD, \"testing\"));"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().isPasswordProtected());"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(LockManager.getInstance().getPassword(), \"testing\");"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        // Change the password"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().setPassword(\"testing\", \"testing2\"));"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().isPasswordProtected());"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(LockManager.getInstance().getPassword(), \"testing2\");"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        // Wrong old password -\u003e Password not changed"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().setPassword(\"wrongpw\", \"newpw\"));"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(LockManager.getInstance().getPassword(), \"testing2\");"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        // Delete the password"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(LockManager.getInstance().setPassword(\"testing2\", LockManager.NO_PASSWORD));"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(LockManager.getInstance().isPasswordProtected());"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(LockManager.getInstance().getPassword(), LockManager.NO_PASSWORD);"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":77,"-":5}},{"path":"src/test/java/seedu/address/logic/UndoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.UndoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"public class UndoStackTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    public void push_nonUndoableCommand_commandNotAdded() {"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(dummyCommandOne);"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(dummyCommandOne);"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public void push_undoableCommand_commandAdded() {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(dummyUndoableCommandOne);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne));"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(dummyUndoableCommandOne);"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(new UndoCommand());"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(new UndoCommand());"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    public void canUndo() {"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        // empty undo stack"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(undoStack.canUndo());"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        // non-empty undo stack"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(undoStack.canUndo());"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    public void popUndo() {"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        // multiple commands in undoStack"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        // single command in undoStack"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList());"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        // no command in undoStack"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        assertPopUndoFailure(Collections.emptyList());"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    public void equals() {"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(undoStack.equals(copy));"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        // same object -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(undoStack.equals(undoStack));"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(undoStack.equals(null));"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        // different types -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(undoStack.equals(1));"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(undoStack.equals(differentUndoStack));"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that the result of {@code undoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"     * Also asserts that the content of the {@code undoStack#undoStack} equals {@code undoElements}."},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand,"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"                                      List\u003cUndoableCommand\u003e expectedUndoElements) {"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(expectedCommand, undoStack.popUndo());"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"        assertStackStatus(expectedUndoElements);"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that the execution of {@code undoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"     * Also asserts that the content of the {@code undoStack#undoStack} equals {@code undoElements}."},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements) {"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"            undoStack.popUndo();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"            assertStackStatus(expectedUndoElements);"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"     * Asserts that {@code undoStack#undoStack} equals {@code undoElements}."},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements) {"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(prepareStack(undoElements), undoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"        protected String undo() {"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"            return \"\";"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":108,"-":45}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_BOOK));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ARTEMIS;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_BABYLON;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_ARTEMIS;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_ARTEMIS;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_ARTEMIS;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BABYLON;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ARTEMIS;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_BABYLON;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_ARTEMIS;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_ARTEMIS;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ARTEMIS;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BABYLON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand.SearchDescriptor;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.SearchDescriptorBuilder;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"public class SearchCommandParserTest {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final String DEFAULT_KEY_WORDS \u003d \"key words\";"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private SearchCommandParser parser \u003d new SearchCommandParser();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_noFieldSpecified_failure() {"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        // no key words and no named parameters specified"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \"\", SearchCommand.MESSAGE_EMPTY_QUERY);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d DEFAULT_KEY_WORDS + TITLE_DESC_ARTEMIS + CATEGORY_DESC_ARTEMIS"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"                + ISBN_DESC_ARTEMIS + AUTHOR_DESC_ARTEMIS;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(VALID_TITLE_ARTEMIS)"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"                .withCategory(VALID_CATEGORY_ARTEMIS).withIsbn(VALID_ISBN_ARTEMIS)"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthor(VALID_AUTHOR_ARTEMIS).withKeyWords(DEFAULT_KEY_WORDS).build();"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d DEFAULT_KEY_WORDS + TITLE_DESC_ARTEMIS + AUTHOR_DESC_ARTEMIS;"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(VALID_TITLE_ARTEMIS)"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthor(VALID_AUTHOR_ARTEMIS).withKeyWords(DEFAULT_KEY_WORDS).build();"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d DEFAULT_KEY_WORDS;"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withKeyWords(DEFAULT_KEY_WORDS).build();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d AUTHOR_DESC_ARTEMIS;"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        searchDescriptor \u003d new SearchDescriptorBuilder().withAuthor(VALID_AUTHOR_ARTEMIS).build();"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d CATEGORY_DESC_ARTEMIS;"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        searchDescriptor \u003d new SearchDescriptorBuilder().withCategory(VALID_CATEGORY_ARTEMIS).build();"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d ISBN_DESC_ARTEMIS;"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        searchDescriptor \u003d new SearchDescriptorBuilder().withIsbn(VALID_ISBN_ARTEMIS).build();"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d TITLE_DESC_ARTEMIS;"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(VALID_TITLE_ARTEMIS).build();"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d DEFAULT_KEY_WORDS + TITLE_DESC_ARTEMIS + TITLE_DESC_ARTEMIS + AUTHOR_DESC_ARTEMIS"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"                + AUTHOR_DESC_ARTEMIS + TITLE_DESC_BABYLON + AUTHOR_DESC_BABYLON;"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(VALID_TITLE_BABYLON)"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthor(VALID_AUTHOR_BABYLON).withKeyWords(DEFAULT_KEY_WORDS).build();"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand expectedCommand \u003d new SearchCommand(searchDescriptor);"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":92,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/SetPasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"public class SetPasswordCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":""},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"    private SetPasswordCommandParser parser \u003d new SetPasswordCommandParser();"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":""},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"    public void parse_missingCompulsoryField_failure() {"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":""},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"        String expectedinvalidMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE);"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":""},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"        // no parameters"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"        assertParseFailure(parser, \"\", expectedinvalidMessage);"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":""},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"        // no one of the key"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"        assertParseFailure(parser, \" \", expectedinvalidMessage);"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":""},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":""},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"    public void parse_validCompulsoryField_success() {"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        assertParseSuccess(parser, SetPasswordCommand.COMMAND_WORD + \" \" + PREFIX_OLD + \" \" + \"oldkey\""},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"                        + \" \" + PREFIX_NEW + \" \" + \"newkey\","},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"                new SetPasswordCommand(\"oldkey\", \"newkey\"));"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"        // no one of the key"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"        assertParseSuccess(parser, SetPasswordCommand.COMMAND_WORD + \" \" + PREFIX_NEW + \"newkey\","},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"                new SetPasswordCommand(\"\", \"newkey\"));"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":""},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":29,"-":12}},{"path":"src/test/java/seedu/address/logic/parser/LibraryCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LibraryCommand;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class LibraryCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    private LibraryCommandParser parser \u003d new LibraryCommandParser();"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    public void parse_validArgs_returnsLibraryCommand() {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"        assertParseSuccess(parser, \"1\", new LibraryCommand(INDEX_FIRST_BOOK));"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        // No args"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LibraryCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        // Invalid arg"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LibraryCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        // Multiple args"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LibraryCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":24,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/ReviewsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class ReviewsCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    private ReviewsCommandParser parser \u003d new ReviewsCommandParser();"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    public void parse_validArgs_returnsReviewsCommand() {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"        assertParseSuccess(parser, \"1\", new ReviewsCommand(INDEX_FIRST_BOOK));"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        // No args"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewsCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        // Invalid arg"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewsCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        // Multiple args"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewsCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":24,"-":8}},{"path":"src/test/java/seedu/address/logic/CommandAutocorrectionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"public class CommandAutocorrectionTest {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(new BookShelf(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        logic \u003d new LogicManager(model, mock(NetworkManager.class));"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_add() throws Exception {"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"list by/title\", test(\"lst by/title\"));"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"add 1\", test(\"dd 1\"));"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"deletealias r\", test(\"deletealia r\"));"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_remove() throws Exception {"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"edit 1 s/r\", test(\"eedit 1 s/r\"));"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"delete 1\", test(\"deletee 1\"));"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"aliases\", test(\"alliases\"));"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_replace() throws Exception {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"edit 1 s/r\", test(\"adit 1 s/r\"));"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"recent\", test(\"resent\"));"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"addalias a cmd/add\", test(\"addaliae a cmd/add\"));"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        test(\"addbook 1\");"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_tooDifferent_throwsParseException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        test(\"eidt 1 s/r\");"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_longText_throwsParseException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        test(\"thisismetryingtomakeyoursystemcrashbygivingareallylongstring 1\");"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"    public void attemptCommandAutoCorrection_alias() throws Exception {"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        model.addAlias(new Alias(\"rm\", \"delete\", \"\"));"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(\"rm 1\", test(\"r 1\"));"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"    private String test(String commandText) throws ParseException {"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        return CommandAutocorrection.attemptCommandAutoCorrection(logic, commandText);"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":70,"takuyakanbr":3,"-":12}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_BOOK));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_TITLE \u003d \"Valid Title\";"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_DESCRIPTION \u003d \"Valid Description\";"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_AUTHOR_1 \u003d \"Author A\";"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_AUTHOR_2 \u003d \"Author B\";"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_CATEGORY_1 \u003d \"Category A\";"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_CATEGORY_2 \u003d \"Category B\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    public void parseTitle_null_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((Optional\u003cString\u003e) null));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseTitle_optionalEmpty_returnsOptionalEmpty() {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(ParserUtil.parseTitle(Optional.empty()).isPresent());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseTitle_validValueWithoutWhitespace_returnsTitle() {"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        Title expectedTitle \u003d new Title(VALID_TITLE);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(Optional.of(expectedTitle), ParserUtil.parseTitle(Optional.of(VALID_TITLE)));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() {"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        Title expectedTitle \u003d new Title(VALID_TITLE);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(Optional.of(expectedTitle), ParserUtil.parseTitle(Optional.of(titleWithWhitespace)));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    public void parseDescription_null_throwsNullPointerException() {"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((Optional\u003cString\u003e) null));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseDescription_optionalEmpty_returnsOptionalEmpty() {"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(ParserUtil.parseDescription(Optional.empty()).isPresent());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseDescription_validValueWithoutWhitespace_returnsDescription() {"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(Optional.of(expectedDescription), ParserUtil.parseDescription(Optional.of(VALID_DESCRIPTION)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() {"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        String descWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(descWithWhitespace));"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(Optional.of(expectedDescription), ParserUtil.parseDescription(Optional.of(descWithWhitespace)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parseAuthor_null_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        ParserUtil.parseAuthor(null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseAuthor_validValueWithoutWhitespace_returnsAuthor() {"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        Author expectedAuthor \u003d new Author(VALID_AUTHOR_1);"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedAuthor, ParserUtil.parseAuthor(VALID_AUTHOR_1));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseAuthors_collectionWithValidAuthors_returnsAuthorSet() {"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        Set\u003cAuthor\u003e actualAuthorSet \u003d ParserUtil.parseAuthors(Arrays.asList(VALID_AUTHOR_1, VALID_AUTHOR_2));"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        Set\u003cAuthor\u003e expectedAuthorSet \u003d"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"                new HashSet\u003c\u003e(Arrays.asList(new Author(VALID_AUTHOR_1), new Author(VALID_AUTHOR_2)));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedAuthorSet, actualAuthorSet);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parseCategory_null_throwsNullPointerException() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"        ParserUtil.parseCategory(null);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseCategory_validValueWithoutWhitespace_returnsCategory() {"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseCategorys_collectionWithValidCategorys_returnsCategorySet() {"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"        Set\u003cCategory\u003e expectedCategorySet \u003d"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"                new HashSet\u003c\u003e(Arrays.asList(new Category(VALID_CATEGORY_1), new Category(VALID_CATEGORY_2)));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedCategorySet, actualCategorySet);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parseRating_validRating_success() throws ParseException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(-1, ParserUtil.parseRating(\"-1\").rating);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(0, ParserUtil.parseRating(\"0\").rating);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(5, ParserUtil.parseRating(\"5\").rating);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseRating_invalidRating_throwsParseException() throws ParseException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        ParserUtil.parseRating(\"6\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"takuyakanbr":47,"-":117}},{"path":"src/test/java/seedu/address/logic/parser/BookShelfParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.SEARCH;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.UNREAD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.getTypicalAliasList;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasesCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteAliasCommand;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LibraryCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditDescriptorBuilder;"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"public class BookShelfParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final BookShelfParser parser \u003d new BookShelfParser(getTypicalAliasList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        new BookShelfParser(null);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void applyCommandAlias_matchingAlias_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String namedArgs \u003d \"s/unread by/title\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String command \u003d UNREAD.getName() + \" \" + namedArgs;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(UNREAD.getPrefix() + \" \" + UNREAD.getNamedArgs() + \" \" + namedArgs,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                parser.applyCommandAlias(command));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d SEARCH.getName() + \" 1984  a/george orwell\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(SEARCH.getPrefix() + \" 1984  a/george orwell\", parser.applyCommandAlias(command));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void applyCommandAlias_noMatchingAlias_doesNothing() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \"helloworld 123456 z/arg1\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(command, parser.applyCommandAlias(command));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void applyCommandAlias_invalidInput_throwsParseException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        parser.applyCommandAlias(\"\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddAliasCommand command \u003d (AddAliasCommand) parser.parseCommand(AddAliasCommand.COMMAND_WORD"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + \" urd \" + PREFIX_COMMAND + \"list s/unread\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(new AddAliasCommand(new Alias(\"urd\", \"list\", \"s/unread\")), command);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(new AddCommand(INDEX_FIRST_BOOK), command);"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseCommand_aliases() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(AliasesCommand.COMMAND_WORD) instanceof AliasesCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(AliasesCommand.COMMAND_WORD + \" 3 abc\") instanceof AliasesCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        DeleteAliasCommand command \u003d (DeleteAliasCommand) parser.parseCommand(DeleteAliasCommand.COMMAND_WORD + \" urd\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteAliasCommand(\"urd\"), command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_BOOK), command);"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_BOOK.getOneBased() + \" \" + PREFIX_RATING + \"2\" + \" \" + PREFIX_PRIORITY"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + \"n\" + \" \" + PREFIX_STATUS + \"u\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_BOOK, new EditDescriptorBuilder().withRating(new Rating(2))"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withPriority(Priority.NONE).withStatus(Status.UNREAD).build()), command);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseCommand_unlock() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        UnlockCommand command \u003d (UnlockCommand) parser.parseCommand(UnlockCommand.COMMAND_WORD + \" \" + \"key\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(new UnlockCommand(\"key\"), command);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseCommand_setPassword() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        SetPasswordCommand command \u003d (SetPasswordCommand) parser.parseCommand(SetPasswordCommand.COMMAND_WORD + \" \""},{"lineNumber":142,"author":{"gitID":"-"},"content":"                + PREFIX_OLD + \"oldkey\" + \" \" + PREFIX_NEW + \"newkey\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(new SetPasswordCommand(\"oldkey\", \"newkey\"), command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"    public void parseCommand_library() throws Exception {"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand command \u003d (LibraryCommand) parser.parseCommand(LibraryCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(new LibraryCommand(INDEX_FIRST_BOOK), command);"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"    public void parseCommand_reviewsCommandWord_returnsReviewsCommand() throws Exception {"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(parser.parseCommand(ReviewsCommand.COMMAND_WORD + \" 3\") instanceof ReviewsCommand);"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"fishTT"},"content":"    //@@author fishTT"},{"lineNumber":177,"author":{"gitID":"fishTT"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"fishTT"},"content":"    public void parseCommand_mixedCaseCommandWord_success() throws Exception {"},{"lineNumber":179,"author":{"gitID":"fishTT"},"content":"        /* Case: first character is uppercase */"},{"lineNumber":180,"author":{"gitID":"fishTT"},"content":"        char[] commandWord \u003d ListCommand.COMMAND_WORD.toCharArray();"},{"lineNumber":181,"author":{"gitID":"fishTT"},"content":"        commandWord[0] \u003d Character.toUpperCase(commandWord[0]);"},{"lineNumber":182,"author":{"gitID":"fishTT"},"content":"        String firstCharUppercaseCommand \u003d String.copyValueOf(commandWord);"},{"lineNumber":183,"author":{"gitID":"fishTT"},"content":"        assertTrue(parser.parseCommand(firstCharUppercaseCommand) instanceof ListCommand);"},{"lineNumber":184,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":185,"author":{"gitID":"fishTT"},"content":"        /* Case: last character is uppercase */"},{"lineNumber":186,"author":{"gitID":"fishTT"},"content":"        commandWord[commandWord.length - 1] \u003d Character.toUpperCase(commandWord[commandWord.length - 1]);"},{"lineNumber":187,"author":{"gitID":"fishTT"},"content":"        String lastCharUppercaseCommand \u003d String.copyValueOf(commandWord);"},{"lineNumber":188,"author":{"gitID":"fishTT"},"content":"        assertTrue(parser.parseCommand(lastCharUppercaseCommand) instanceof ListCommand);"},{"lineNumber":189,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":190,"author":{"gitID":"fishTT"},"content":"        /* Case: middle character is uppercase */"},{"lineNumber":191,"author":{"gitID":"fishTT"},"content":"        commandWord[commandWord.length / 2] \u003d Character.toUpperCase(commandWord[commandWord.length / 2]);"},{"lineNumber":192,"author":{"gitID":"fishTT"},"content":"        String middleCharUppercaseCommand \u003d String.copyValueOf(commandWord);"},{"lineNumber":193,"author":{"gitID":"fishTT"},"content":"        assertTrue(parser.parseCommand(middleCharUppercaseCommand) instanceof ListCommand);"},{"lineNumber":194,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":195,"author":{"gitID":"fishTT"},"content":"        /* Case: all character is uppercase */"},{"lineNumber":196,"author":{"gitID":"fishTT"},"content":"        String allCharUppercaseCommand \u003d ListCommand.COMMAND_WORD.toUpperCase();"},{"lineNumber":197,"author":{"gitID":"fishTT"},"content":"        assertTrue(parser.parseCommand(allCharUppercaseCommand) instanceof ListCommand);"},{"lineNumber":198,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"fishTT"},"content":"    //@@author"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"fishTT":24,"qiu-siqi":30,"-":160}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class AddCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    public void parse_validArgs_returnsAddCommand() {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"        assertParseSuccess(parser, \"1\", new AddCommand(INDEX_FIRST_BOOK));"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        // No args"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        // Invalid arg"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        // Multiple args"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        assertParseFailure(parser, \"1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":22,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditDescriptorBuilder;"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"public class EditCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"    private static final int EMPTY_RATING \u003d -1;"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"    private static final int NON_EMPTY_RATING \u003d 5;"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"    private static final String STATUS_UNREAD \u003d \"u\";"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    private static final String PRIORITY_HIGH \u003d \"high\";"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":""},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":""},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"    public void parse_indexSpecified_success() {"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"        // edit status"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"        Index targetIndex \u003d INDEX_FIRST_BOOK;"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_STATUS + STATUS_UNREAD;"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        EditCommand expectedCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"                new EditDescriptorBuilder().withStatus(Status.UNREAD).build());"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":""},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"        // edit priority"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_PRIORITY + PRIORITY_HIGH;"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"        expectedCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"                new EditDescriptorBuilder().withPriority(Priority.HIGH).build());"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":""},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"        // edit rating"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_RATING + NON_EMPTY_RATING;"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"        expectedCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"                new EditDescriptorBuilder().withRating(new Rating(NON_EMPTY_RATING)).build());"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":48,"author":{"gitID":"592363789"},"content":""},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"        // delete rating"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_RATING + EMPTY_RATING;"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"        expectedCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"                new EditDescriptorBuilder().withRating(new Rating(EMPTY_RATING)).build());"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":""},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"    public void parse_missingCompulsoryField_failure() {"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":""},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"        // no parameters"},{"lineNumber":61,"author":{"gitID":"592363789"},"content":"        assertParseFailure(parser, EditCommand.COMMAND_WORD + \" 1\", expectedMessage);"},{"lineNumber":62,"author":{"gitID":"592363789"},"content":""},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"        // no parameters"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":"        assertParseFailure(parser, EditCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"592363789"},"content":""},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"        // no index"},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"        assertParseFailure(parser, EditCommand.COMMAND_WORD + \" \" + NON_EMPTY_RATING + \" \""},{"lineNumber":68,"author":{"gitID":"592363789"},"content":"                + Priority.DEFAULT_PRIORITY + \" \" + Status.DEFAULT_STATUS, expectedMessage);"},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"592363789":52,"-":17}},{"path":"src/test/java/seedu/address/logic/UndoStackUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" * Contains helper methods for testing {@code UndoStack}."},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"public class UndoStackUtil {"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"     * Adds {@code undoElements} into {@code UndoStack#undoStack}."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"     * The first element in {@code undoElements} will be the bottommost element"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"     * in the stack in {@code undoStack}, while the last element will"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"     * be the topmost element."},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    public static UndoStack prepareStack(List\u003cUndoableCommand\u003e undoElements) {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        undoElements.forEach(undoStack::push);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        return undoStack;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":18,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/AddAliasCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"public class AddAliasCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    private AddAliasCommandParser parser \u003d new AddAliasCommandParser();"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        // command without named argument"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, \"s \" + PREFIX_COMMAND + \"search\","},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"                new AddAliasCommand(new Alias(\"s\", \"search\", \"\")));"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        // command with named argument"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, \"e \" + PREFIX_COMMAND + \"edit s/reading\","},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"                new AddAliasCommand(new Alias(\"e\", \"edit\", \"s/reading\")));"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        // leading and trailing spaces should be removed"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, \"      e      \" + PREFIX_COMMAND + \"        edit s/reading        \","},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"                new AddAliasCommand(new Alias(\"e\", \"edit\", \"s/reading\")));"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        // no args"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        // empty alias name"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \"     \" + PREFIX_COMMAND + \"edit s/reading\","},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        // invalid alias name"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" hello world \" + PREFIX_COMMAND + \"edit s/reading\","},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        // empty aliased command"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" e \" + PREFIX_COMMAND + \"     \","},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":37,"-":12}},{"path":"src/test/java/seedu/address/logic/CipherEngineTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"public class CipherEngineTest {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlUtilTest/\");"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_BOOK_SHELF \u003d TEST_DATA_FOLDER + \"validBookShelf.xml\";"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TEST_KEY_1 \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TEST_KEY_2 \u003d \"Qg5gk20g%1~\";"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private static final String PASSWORD_1 \u003d \"\";"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    private static final String PASSWORD_2 \u003d \"thisismypassword\";"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private static final String PASSWORD_3 \u003d \"1RS#(`D #Q HT%\";"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public void encryptDecryptFile() throws Exception {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        File validBookShelf \u003d new File(VALID_BOOK_SHELF);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        String tempFile \u003d testFolder.getRoot().getPath() + File.separator"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"                + StringUtil.generateRandomPrefix() + \"temp.xml\";"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        File copy \u003d new File(tempFile);"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"            FileUtil.copyFile(validBookShelf, copy);"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"            CipherEngine.encryptFile(tempFile, TEST_KEY_1);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"            assertDifferentContent(validBookShelf, copy);"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"            CipherEngine.decryptFile(tempFile, TEST_KEY_1);"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"            assertSameContent(validBookShelf, copy);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"            CipherEngine.encryptFile(tempFile, TEST_KEY_2);"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"            assertDifferentContent(validBookShelf, copy);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"            CipherEngine.decryptFile(tempFile, TEST_KEY_2);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"            assertSameContent(validBookShelf, copy);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        } finally {"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"            copy.delete();"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    public void encryptDecryptKey() throws Exception {"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        String hashed \u003d CipherEngine.hashPassword(PASSWORD_1);"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        assertNotEquals(hashed, PASSWORD_1);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(CipherEngine.isValidPasswordHash(hashed));"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(CipherEngine.checkPassword(PASSWORD_1, hashed));"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        hashed \u003d CipherEngine.hashPassword(PASSWORD_2);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        assertNotEquals(hashed, PASSWORD_2);"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(CipherEngine.isValidPasswordHash(hashed));"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(CipherEngine.checkPassword(PASSWORD_2, hashed));"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        hashed \u003d CipherEngine.hashPassword(PASSWORD_3);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        assertNotEquals(hashed, PASSWORD_3);"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(CipherEngine.isValidPasswordHash(hashed));"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(CipherEngine.checkPassword(PASSWORD_3, hashed));"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void checkPassword_invalidHash_throwsIllegalArgumentException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        CipherEngine.checkPassword(\"12345\", \"PBKDF2WithHmacSHA256$22000$256$hash\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void isValidPasswordHash_invalidHash_false() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(CipherEngine.isValidPasswordHash(\"PBKDF2WithHmacSHA256$22000$256$hash\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(CipherEngine.isValidPasswordHash(\"PBKDF2WithHmacSHA256$xxxx$xxxx$hash$salt\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void isValidPasswordHash_validHash_true() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(CipherEngine.isValidPasswordHash(\"PBKDF2WithHmacSHA256$22000$256$hash$salt\"));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"    //@@author qiu-siqi"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"    private boolean isSameInContent(File one, File two) throws IOException {"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        return Arrays.equals(Files.readAllBytes(one.toPath()), (Files.readAllBytes(two.toPath())));"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    private void assertSameContent(File one, File two) throws IOException {"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(isSameInContent(one, two));"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    private void assertDifferentContent(File one, File two) throws IOException {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(isSameInContent(one, two));"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":86,"-":24}},{"path":"src/test/java/seedu/address/logic/commands/ThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Theme;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class ThemeCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_validTheme_success() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(Theme.WHITE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(Theme.LIGHT);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(Theme.DARK);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        final ThemeCommand standardCommand \u003d prepareCommand(Theme.WHITE);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ThemeCommand commandWithSameValues \u003d prepareCommand(Theme.WHITE);"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different themes -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ThemeCommand(Theme.DARK)));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes a {@code ThemeCommand} with the given {@code theme}, and checks that"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code ChangeThemeRequestEvent} is raised with the correct parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Theme theme) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ThemeCommand command \u003d prepareCommand(theme);"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                String.format(ThemeCommand.MESSAGE_SUCCESS, theme.getThemeName()), expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ChangeThemeRequestEvent lastEvent \u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                (ChangeThemeRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(theme, lastEvent.newTheme);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private ThemeCommand prepareCommand(Theme theme) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        ThemeCommand themeCommand \u003d new ThemeCommand(theme);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        themeCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return themeCommand;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"takuyakanbr":18,"-":63}},{"path":"src/test/java/seedu/address/logic/commands/FilterDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand.FilterDescriptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FilterDescriptorBuilder;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class FilterDescriptorTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        FilterDescriptor descriptorA \u003d new FilterDescriptorBuilder()"},{"lineNumber":18,"author":{"gitID":"-"},"content":"                .withAuthorFilter(\"a1\").withStatusFilter(Status.UNREAD).build();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        FilterDescriptor descriptorB \u003d new FilterDescriptorBuilder()"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                .withTitleFilter(\"t1\").withAuthorFilter(\"a2\").withPriorityFilter(Priority.HIGH).build();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same filters in same sequence -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        FilterDescriptor descriptorWithSameFilters \u003d new FilterDescriptorBuilder()"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                .withAuthorFilter(\"a1\").withStatusFilter(Status.UNREAD).build();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(descriptorA.equals(descriptorWithSameFilters));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same filters in same sequence -\u003e returns true (ignores case in search terms)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        descriptorWithSameFilters \u003d new FilterDescriptorBuilder()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                .withAuthorFilter(\"A1\").withStatusFilter(Status.UNREAD).build();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertTrue(descriptorA.equals(descriptorWithSameFilters));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // same filters in different sequence -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptorWithSameFilters \u003d new FilterDescriptorBuilder()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                .withStatusFilter(Status.UNREAD).withAuthorFilter(\"a1\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(descriptorA.equals(descriptorWithSameFilters));"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        // same object -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptorA.equals(descriptorA));"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(null));"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        // different types -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(5));"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different filters -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(descriptorA.equals(descriptorB));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different copies of the same filter -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        FilterDescriptor editedDescriptor \u003d new FilterDescriptorBuilder()"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .withAuthorFilter(\"a1\").withAuthorFilter(\"a1\").withStatusFilter(Status.UNREAD).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(descriptorA.equals(editedDescriptor));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":10,"-":44}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":" * Contains integration tests (interaction with the Model and UndoCommand) and unit tests for"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Book bookToDelete \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.deleteBook(bookToDelete);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidActiveListType_throwsCommandException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(deleteCommand, model, DeleteCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(deleteCommand, model, DeleteCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidBook_throwsAssertionError() throws Exception {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        deleteCommand.preprocessUndoableCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model.deleteBook(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        deleteCommand.executeUndoableCommand();"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getDisplayBookList().size() + 1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Book bookToDelete \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.deleteBook(bookToDelete);"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        showNoBook(expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"        // ensures that outOfBoundIndex is still in bounds of book shelf list"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().size());"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Book bookToDelete \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        // delete -\u003e first book deleted"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(deleteCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"        // undo -\u003e reverts bookshelf back to previous state and filtered book list to show all books"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(undoCommand, model,"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"                String.format(DeleteCommand.UNDO_SUCCESS, bookToDelete), expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getDisplayBookList().size() + 1);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoStack"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"        // no commands in undoStack -\u003e undoCommand fail"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"     * 1. Deletes a {@code Book} from a filtered book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted book in the"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"        showBookAtIndex(model, INDEX_SECOND_BOOK);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Book bookToDelete \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"        // delete -\u003e deletes second book in unfiltered book list / first book in filtered book list"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(deleteCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"        // undo -\u003e reverts book shelf back to previous state and filtered book list to show all books"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(undoCommand, model,"},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":"                String.format(DeleteCommand.UNDO_SUCCESS, bookToDelete), expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.deleteBook(bookToDelete);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertNotEquals(bookToDelete, model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased()));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":179,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_BOOK);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":"        // different book -\u003e returns false"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":"     * Updates {@code model}\u0027s filtered list to show no book."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":"    private void showNoBook(Model model) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        model.updateBookListFilter(p -\u003e false);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertTrue(model.getDisplayBookList().isEmpty());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":65,"takuyakanbr":21,"-":133}},{"path":"src/test/java/seedu/address/logic/commands/HistoryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private HistoryCommand historyCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        historyCommand \u003d new HistoryCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        historyCommand.setData(model, mock(NetworkManager.class), history, new UndoStack());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, HistoryCommand.MESSAGE_NO_HISTORY);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command1 \u003d \"clear\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        history.add(command1);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, String.format(HistoryCommand.MESSAGE_SUCCESS, command1));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command2 \u003d \"randomCommand\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String command3 \u003d \"select 1\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        history.add(command2);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        history.add(command3);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                String.join(\"\\n\", command3, command2, command1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, expectedMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void assertCommandResult(HistoryCommand historyCommand, String expectedMessage) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, historyCommand.execute().feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"-":51}},{"path":"src/test/java/seedu/address/logic/parser/ListCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand.FilterDescriptor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ListCommandParser.SortMode;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FilterDescriptorBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"public class ListCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private ListCommandParser parser \u003d new ListCommandParser();"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_noParameterSpecified_success() {"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(new FilterDescriptor(), Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, \"\", expectedCommand);"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_allParametersSpecified_success() {"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d \" t/t1 a/a1 c/c1 s/read p/low r/0 by/title\";"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptor \u003d new FilterDescriptorBuilder().withTitleFilter(\"t1\")"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthorFilter(\"a1\").withCategoryFilter(\"c1\").withStatusFilter(Status.READ)"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"                .withPriorityFilter(Priority.LOW).withRatingFilter(new Rating(0)).build();"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(descriptor, SortMode.TITLE.getComparator());"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_someParametersSpecified_success() {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d \" by/ratingd s/read p/low t/t1\";"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptor \u003d new FilterDescriptorBuilder().withTitleFilter(\"t1\")"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"                .withStatusFilter(Status.READ).withPriorityFilter(Priority.LOW).build();"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(descriptor, SortMode.RATINGD.getComparator());"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_oneFilterSpecified_success() {"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d \" t/t1\";"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptor \u003d new FilterDescriptorBuilder().withTitleFilter(\"t1\").build();"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" a/a1\";"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withAuthorFilter(\"a1\").build();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" c/c1\";"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withCategoryFilter(\"c1\").build();"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" s/read\";"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withStatusFilter(Status.READ).build();"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" p/low\";"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withPriorityFilter(Priority.LOW).build();"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" r/0\";"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withRatingFilter(new Rating(0)).build();"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_multipleRepeatedFilters_acceptsLast() {"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d \" s/unread s/rd t/hello t/world t/t1 s/read\";"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptor \u003d new FilterDescriptorBuilder()"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"                .withTitleFilter(\"t1\").withStatusFilter(Status.READ).build();"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(descriptor, Model.DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_validSortBy_success() {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        // select sorting mode using its name"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d \" by/title\";"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.TITLE.getComparator());"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" by/ratingd\";"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.RATINGD.getComparator());"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        // select sorting mode using its alias"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" by/p\";"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.PRIORITY.getComparator());"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" by/rd\";"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.RATINGD.getComparator());"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"        // sorting mode selection should be case insensitive"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" by/StatusD\";"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.STATUSD.getComparator());"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        userInput \u003d \" by/PA\";"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.PRIORITY.getComparator());"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_multipleRepeatedSortBy_acceptsLast() {"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        String userInput \u003d \" by/title by/rating by/priority by/status\";"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand expectedCommand \u003d new ListCommand(new FilterDescriptor(), SortMode.STATUS.getComparator());"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"    public void parse_invalidFilterOrSortBy_failure() {"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" s/readd\", Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" t/title p/\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" p/123\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" r/-2\", Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" r/zero c/category\", Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" by/author\", Messages.MESSAGE_INVALID_SORT_BY);"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" by/\", Messages.MESSAGE_INVALID_SORT_BY);"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" by/1\", Messages.MESSAGE_INVALID_SORT_BY);"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"        // multiple invalid items -\u003e show first error message from list [status, priority, rating, sort by]"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" s/readd p/ r/zero p/123 s/123 by/1\", Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"        assertParseFailure(parser, \" by/1 r/zero r/-2 p/123 p/\", Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":129,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/SearchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand.SearchDescriptor;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.SearchDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SearchCommand."},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"public class SearchCommandTest {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    private Model model;"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    public void constructor_nullDescriptor_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        new SearchCommand(null);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_allFieldsSpecifiedWithKeyWord_success() {"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(\"1\")"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"                .withCategory(\"1\").withIsbn(\"1\").withAuthor(\"1\").withKeyWords(\"searchterm\").build();"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(searchDescriptor);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_allFieldsSpecifiedNoKeyWord_success() {"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(\"1\")"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"                .withCategory(\"1\").withIsbn(\"1\").withAuthor(\"1\").build();"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(searchDescriptor);"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_someFieldsSpecifiedNoKeyWord_success() {"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withTitle(\"1\").withIsbn(\"1\").build();"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(searchDescriptor);"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_noFieldSpecifiedNoKeyWord_throwsAssertionError() {"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().build();"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(searchDescriptor);"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_networkError_raisesExpectedEvent() {"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptorBuilder().withKeyWords(\"error\").build();"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand searchCommand \u003d new SearchCommand(searchDescriptor, false);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        when(networkManagerMock.searchBooks(searchDescriptor.toSearchString()))"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(TestUtil.getFailedFuture());"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        searchCommand.setData(model, networkManagerMock, new CommandHistory(), new UndoStack());"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"        searchCommand.execute();"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        NewResultAvailableEvent resultEvent \u003d (NewResultAvailableEvent)"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent(NewResultAvailableEvent.class);"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(SearchCommand.MESSAGE_SEARCH_FAIL, resultEvent.message);"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    public void equals() {"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor descriptorA \u003d"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"                new SearchDescriptorBuilder().withAuthor(\"author1\").withIsbn(\"12345\").build();"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor descriptorB \u003d"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"                new SearchDescriptorBuilder().withAuthor(\"author2\").withIsbn(\"12345\").withTitle(\"title2\").build();"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        final SearchCommand standardCommand \u003d prepareCommand(descriptorA);"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        // same values -\u003e returns true"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptorBuilder copyDescriptor \u003d new SearchDescriptorBuilder(descriptorA);"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand commandWithSameValues \u003d prepareCommand(copyDescriptor.build());"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"        // same object -\u003e returns true"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        // null -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        // different types -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(new SearchCommand(descriptorB)));"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"     * Executes a {@code SearchCommand} with the given {@code descriptor}, and checks that"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"     * {@code network.searchBooks(params)} is being called with the correct search parameters."},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"    private void assertExecutionSuccess(SearchDescriptor descriptor) {"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand searchCommand \u003d new SearchCommand(descriptor, false);"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        when(networkManagerMock.searchBooks(descriptor.toSearchString()))"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"                .thenReturn(CompletableFuture.completedFuture(new BookShelf()));"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"        searchCommand.setData(model, networkManagerMock, new CommandHistory(), new UndoStack());"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(searchCommand, model, SearchCommand.MESSAGE_SEARCHING, expectedModel);"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        verify(networkManagerMock).searchBooks(descriptor.toSearchString());"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"    private SearchCommand prepareCommand(SearchDescriptor descriptor) {"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand searchCommand \u003d new SearchCommand(descriptor, false);"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"        searchCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"        return searchCommand;"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":131,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.COLLAPSING_EMPIRE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.CONSIDER_PHLEBAS;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.WAKING_GODS;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand.FilterDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ListCommandParser.SortMode;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.FilterDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"public class ListCommandTest {"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    private Model model;"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_noParameterSpecified_success() {"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        // empty filter, default comparator -\u003e shows everything"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(new FilterDescriptor(), Model.DEFAULT_BOOK_COMPARATOR, 5);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(BABYLON_ASHES, model.getDisplayBookList().get(0));"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(COLLAPSING_EMPIRE, model.getDisplayBookList().get(1));"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(CONSIDER_PHLEBAS, model.getDisplayBookList().get(2));"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(WAKING_GODS, model.getDisplayBookList().get(3));"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(ARTEMIS, model.getDisplayBookList().get(4));"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        // filtered list -\u003e shows everything"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(new FilterDescriptor(), Model.DEFAULT_BOOK_COMPARATOR, 5);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(BABYLON_ASHES, model.getDisplayBookList().get(0));"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(COLLAPSING_EMPIRE, model.getDisplayBookList().get(1));"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(CONSIDER_PHLEBAS, model.getDisplayBookList().get(2));"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(WAKING_GODS, model.getDisplayBookList().get(3));"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(ARTEMIS, model.getDisplayBookList().get(4));"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_allParametersSpecified_success() {"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        // matches 1 book: ARTEMIS"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptor \u003d new FilterDescriptorBuilder().withTitleFilter(ARTEMIS.getTitle().title)"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthorFilter(\"andy weir\").withCategoryFilter(\"fiction\").withStatusFilter(Status.READ)"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"                .withPriorityFilter(Priority.LOW).withRatingFilter(new Rating(5)).build();"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(descriptor, SortMode.STATUSD.getComparator(), 1);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(ARTEMIS, model.getDisplayBookList().get(0));"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        // matches 0 books"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withTitleFilter(ARTEMIS.getTitle().title)"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthorFilter(\"andy weir\").withCategoryFilter(\"fiction\").withStatusFilter(Status.UNREAD)"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"                .withPriorityFilter(Priority.HIGH).withRatingFilter(new Rating(-1)).build();"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(descriptor, SortMode.PRIORITYD.getComparator(), 0);"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_someParametersSpecified_success() {"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        // matches 2 books: CONSIDER_PHLEBAS, WAKING_GODS"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptor \u003d new FilterDescriptorBuilder()"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"                .withStatusFilter(Status.UNREAD).withRatingFilter(new Rating(-1)).build();"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(descriptor, SortMode.TITLE.getComparator(), 2);"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(CONSIDER_PHLEBAS, model.getDisplayBookList().get(0));"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(WAKING_GODS, model.getDisplayBookList().get(1));"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"        // matches 2 books: WAKING_GODS, CONSIDER_PHLEBAS"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder()"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"                .withRatingFilter(new Rating(-1)).withStatusFilter(Status.UNREAD).build();"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(descriptor, SortMode.TITLED.getComparator(), 2);"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(WAKING_GODS, model.getDisplayBookList().get(0));"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(CONSIDER_PHLEBAS, model.getDisplayBookList().get(1));"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        // matches 2 books: ARTEMIS, COLLAPSING_EMPIRE"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder().withTitleFilter(\"em\").build();"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(descriptor, SortMode.RATINGD.getComparator(), 2);"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(ARTEMIS, model.getDisplayBookList().get(0));"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(COLLAPSING_EMPIRE, model.getDisplayBookList().get(1));"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        // matches 0 books"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new FilterDescriptorBuilder()"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"                .withCategoryFilter(\"space\").withStatusFilter(Status.READING).withRatingFilter(new Rating(3)).build();"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(descriptor, Model.DEFAULT_BOOK_COMPARATOR, 0);"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"    public void equals() {"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptorA \u003d new FilterDescriptorBuilder()"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthorFilter(\"a1\").withStatusFilter(Status.UNREAD).build();"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor descriptorB \u003d new FilterDescriptorBuilder()"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"                .withTitleFilter(\"t1\").withAuthorFilter(\"a2\").withPriorityFilter(Priority.HIGH).build();"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand standardCommand \u003d prepareCommand(descriptorA, SortMode.STATUS.getComparator());"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        // same values -\u003e returns true"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        FilterDescriptor sameDescriptor \u003d new FilterDescriptorBuilder()"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthorFilter(\"a1\").withStatusFilter(Status.UNREAD).build();"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand commandWithSameValues \u003d prepareCommand(sameDescriptor, SortMode.STATUS.getComparator());"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        // same object -\u003e returns true"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"        // null -\u003e returns false"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"        // different types -\u003e returns false"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        // different filter descriptor -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(new ListCommand(descriptorB, SortMode.STATUS.getComparator())));"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"        // different comparator -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(standardCommand.equals(new ListCommand(descriptorA, SortMode.RATING.getComparator())));"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"     * Executes a {@code ListCommand} with the given {@code descriptor} and {@code comparator}, and checks that"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"     * the resulting display book list contains the expected number of books."},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"    private void assertExecutionSuccess(FilterDescriptor descriptor, Comparator\u003cBook\u003e comparator, int expectedBooks) {"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand command \u003d prepareCommand(descriptor, comparator);"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(expectedBooks, model.getDisplayBookList().size());"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(String.format(ListCommand.MESSAGE_SUCCESS, expectedBooks), result.feedbackToUser);"},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":153,"author":{"gitID":"takuyakanbr"},"content":"    private ListCommand prepareCommand(FilterDescriptor descriptor, Comparator\u003cBook\u003e comparator) {"},{"lineNumber":154,"author":{"gitID":"takuyakanbr"},"content":"        ListCommand listCommand \u003d new ListCommand(descriptor, comparator);"},{"lineNumber":155,"author":{"gitID":"takuyakanbr"},"content":"        listCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":156,"author":{"gitID":"takuyakanbr"},"content":"        return listCommand;"},{"lineNumber":157,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":6,"takuyakanbr":126,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    public static final String VALID_TITLE_ARTEMIS \u003d \"Artemis\";"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public static final String VALID_TITLE_BABYLON \u003d \"Babylon\u0027s Ashes\";"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public static final String VALID_AUTHOR_ARTEMIS \u003d \"Andy Weir\";"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public static final String VALID_AUTHOR_BABYLON \u003d \"James S. A. Corey\";"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public static final String VALID_CATEGORY_ARTEMIS \u003d \"Fiction\";"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    public static final String VALID_ISBN_ARTEMIS \u003d \"234910247\";"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    public static final String TITLE_DESC_ARTEMIS \u003d \" \" + PREFIX_TITLE + VALID_TITLE_ARTEMIS;"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public static final String TITLE_DESC_BABYLON \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BABYLON;"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    public static final String AUTHOR_DESC_ARTEMIS \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_ARTEMIS;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public static final String AUTHOR_DESC_BABYLON \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_BABYLON;"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public static final String CATEGORY_DESC_ARTEMIS \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_ARTEMIS;"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public static final String ISBN_DESC_ARTEMIS \u003d \" \" + PREFIX_ISBN + VALID_ISBN_ARTEMIS;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"     * - the book shelf and the filtered book list in the {@code actualModel} remain unchanged"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf expectedBookShelf \u003d new BookShelf(actualModel.getBookShelf());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getDisplayBookList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"            assertEquals(expectedBookShelf, actualModel.getBookShelf());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getDisplayBookList());"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"     * {@code model}\u0027s book shelf."},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"    public static void showBookAtIndex(Model model, Index targetIndex) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getDisplayBookList().size());"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Book book \u003d model.getDisplayBookList().get(targetIndex.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.updateBookListFilter(thisBook -\u003e thisBook.equals(book));"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getDisplayBookList().size());"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"     * Deletes the first book in {@code model}\u0027s filtered list from {@code model}\u0027s book shelf."},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"    public static void deleteFirstBook(Model model) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Book firstBook \u003d model.getDisplayBookList().get(0);"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"            model.deleteBook(firstBook);"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"            throw new AssertionError(\"Book in filtered list must exist in model.\", pnfe);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoStack} set."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoStack undoStack) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), undoStack);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":34,"takuyakanbr":13,"-":71}},{"path":"src/test/java/seedu/address/logic/commands/SearchDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand.SearchDescriptor;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.SearchDescriptorBuilder;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public class SearchDescriptorTest {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    public void isAnyFieldEdited() {"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"        // has at least 1 modified field -\u003e returns true"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        SearchDescriptor descriptor \u003d new SearchDescriptorBuilder().withAuthor(\"12345\").build();"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptorBuilder().withCategory(\"12345\").build();"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptorBuilder().withIsbn(\"12345\").build();"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new SearchDescriptorBuilder().withKeyWords(\"12345\").build();"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptorBuilder().withTitle(\"12345\").build();"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        // has no modified field -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptorBuilder().build();"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptor.isValid());"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public void toString_equalsToSearchString() {"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor descriptor \u003d"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"                new SearchDescriptorBuilder().withAuthor(\"author1\").withIsbn(\"12345\").build();"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(descriptor.toSearchString(), descriptor.toString());"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptorBuilder().withAuthor(\"12345\").build();"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(descriptor.toSearchString(), descriptor.toString());"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptorBuilder().build();"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(descriptor.toSearchString(), descriptor.toString());"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor descriptorA \u003d"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"                new SearchDescriptorBuilder().withAuthor(\"author1\").withIsbn(\"12345\").build();"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor descriptorWithSameValues \u003d"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"                new SearchDescriptorBuilder().withAuthor(\"author1\").withIsbn(\"12345\").build();"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptorA.equals(descriptorWithSameValues));"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptorA.equals(descriptorA));"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(null));"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(5));"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        // different author -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor editedDescriptor \u003d"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"                new SearchDescriptorBuilder().withAuthor(\"author2\").withIsbn(\"12345\").build();"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        // different category -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        editedDescriptor \u003d new SearchDescriptorBuilder()"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthor(\"author1\").withCategory(\"cat1\").withIsbn(\"12345\").build();"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        // different isbn -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        editedDescriptor \u003d new SearchDescriptorBuilder()"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthor(\"author1\").withIsbn(\"234567\").build();"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        // different title -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        editedDescriptor \u003d new SearchDescriptorBuilder()"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"                .withAuthor(\"author1\").withIsbn(\"12345\").withTitle(\"title2\").build();"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different key word -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        editedDescriptor \u003d new SearchDescriptorBuilder()"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withAuthor(\"author1\").withIsbn(\"12345\").withKeyWords(\"search\").build();"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":79,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/AliasesCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.getTypicalAliasList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowAliasListRequestEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"public class AliasesCommandTest {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager(new BookShelf(), new UserPrefs(), new BookShelf(), getTypicalAliasList());"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_aliases_success() {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        CommandResult result \u003d prepareCommand().execute();"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(String.format(AliasesCommand.MESSAGE_SUCCESS, model.getAliasList().size()), result.feedbackToUser);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowAliasListRequestEvent);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    private AliasesCommand prepareCommand() {"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        AliasesCommand command \u003d new AliasesCommand();"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        command.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        return command;"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":29,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/EditDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditDescriptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditDescriptorBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class EditDescriptorTest {"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void isAnyFieldEdited() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        // has at least 1 modified field -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        EditDescriptor descriptor \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                new EditDescriptorBuilder().withStatus(Status.READ).withPriority(Priority.HIGH).build();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditDescriptorBuilder().withStatus(Status.READ).build();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditDescriptorBuilder().withPriority(Priority.HIGH).build();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditDescriptorBuilder().withRating(new Rating(5)).build();"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptor.isValid());"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        // has no modified field -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditDescriptorBuilder().build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(descriptor.isValid());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        EditDescriptor descriptorA \u003d new EditDescriptorBuilder().withStatus(Status.UNREAD)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                .withPriority(Priority.LOW).build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        EditDescriptor descriptorB \u003d new EditDescriptorBuilder().withStatus(Status.UNREAD)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .withPriority(Priority.HIGH).withRating(new Rating(2)).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EditDescriptor descriptorWithSameValues \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new EditDescriptorBuilder().withStatus(Status.UNREAD).withPriority(Priority.LOW).build();"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptorA.equals(descriptorWithSameValues));"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(descriptorA.equals(descriptorA));"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        // null -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(null));"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(5));"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        // different values -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(descriptorB));"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // different status -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        EditDescriptor editedDescriptor \u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                new EditDescriptorBuilder().withStatus(Status.READ).withPriority(Priority.LOW).build();"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different priority -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        editedDescriptor \u003d new EditDescriptorBuilder()"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withStatus(Status.UNREAD).withPriority(Priority.HIGH).build();"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // different rating -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        editedDescriptor \u003d new EditDescriptorBuilder()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .withStatus(Status.UNREAD).withPriority(Priority.HIGH).withRating(new Rating(3)).build();"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(descriptorA.equals(editedDescriptor));"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":28,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/RecentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RecentCommand."},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"public class RecentCommandTest {"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private Model expectedModel;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private RecentCommand recentCommand;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        recentCommand \u003d new RecentCommand();"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        recentCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_showsEmptyRecent() {"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(recentCommand, model, String.format(RecentCommand.MESSAGE_SUCCESS, 0), expectedModel);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(ActiveListType.RECENT_BOOKS, model.getActiveListType());"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_showsNonEmptyRecent() {"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(recentCommand, model, String.format(RecentCommand.MESSAGE_SUCCESS, 1), expectedModel);"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(ActiveListType.RECENT_BOOKS, model.getActiveListType());"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_repeatedRecentBook() {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(recentCommand, model, String.format(RecentCommand.MESSAGE_SUCCESS, 1), expectedModel);"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(ActiveListType.RECENT_BOOKS, model.getActiveListType());"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":50,"takuyakanbr":2,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/DeleteAliasCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.getTypicalAliasList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalAliases;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteAliasCommand}."},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"public class DeleteAliasCommandTest {"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager(new BookShelf(), new UserPrefs(), new BookShelf(), getTypicalAliasList());"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_validName_success() {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        Alias aliasToDelete \u003d TypicalAliases.UNREAD;"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        DeleteAliasCommand command \u003d prepareCommand(aliasToDelete.getName());"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        String expectedMessage \u003d String.format(DeleteAliasCommand.MESSAGE_SUCCESS, aliasToDelete);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(),"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"                new UserPrefs(), new BookShelf(), model.getAliasList());"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.removeAlias(aliasToDelete.getName());"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_mixedCaseAndSpacePaddedName_success() {"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        Alias aliasToDelete \u003d TypicalAliases.UNREAD;"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        DeleteAliasCommand command \u003d prepareCommand(\"   URd     \");"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        String expectedMessage \u003d String.format(DeleteAliasCommand.MESSAGE_SUCCESS, aliasToDelete);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(),"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"                new UserPrefs(), new BookShelf(), model.getAliasList());"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.removeAlias(aliasToDelete.getName());"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidName_doesNotModifyList() {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        String toDelete \u003d \"non_existing_alias\";"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        DeleteAliasCommand command \u003d prepareCommand(toDelete);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        String expectedMessage \u003d String.format(DeleteAliasCommand.MESSAGE_NOT_FOUND, toDelete);"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(),"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"                new UserPrefs(), new BookShelf(), model.getAliasList());"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        DeleteAliasCommand command \u003d new DeleteAliasCommand(\"urd\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same value -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteAliasCommand commandCopy \u003d new DeleteAliasCommand(\"urd\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(command.equals(commandCopy));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(command.equals(\"123\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different value -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeleteAliasCommand differentCommand \u003d new DeleteAliasCommand(\"s\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(command.equals(differentCommand));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private DeleteAliasCommand prepareCommand(String toDelete) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DeleteAliasCommand command \u003d new DeleteAliasCommand(toDelete);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":52,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.UndoStackUtil.prepareStack;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstBook;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final NetworkManager MOCK_NETWORK_MANAGER \u003d mock(NetworkManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private static final UndoStack EMPTY_STACK \u003d new UndoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_BOOK);"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_BOOK);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, MOCK_NETWORK_MANAGER, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, MOCK_NETWORK_MANAGER, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, MOCK_NETWORK_MANAGER, EMPTY_COMMAND_HISTORY, undoStack);"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        Book deleteCommandOneBook \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        Book deleteCommandTwoBook \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        deleteFirstBook(expectedModel);"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(undoCommand, model,"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"                String.format(DeleteCommand.UNDO_SUCCESS, deleteCommandTwoBook), expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(undoCommand, model,"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"                String.format(DeleteCommand.UNDO_SUCCESS, deleteCommandOneBook), expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":21,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidActiveListType_throwsCommandException() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        ClearCommand clearCommand \u003d prepareCommand(model);"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(clearCommand, model, ClearCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        clearCommand \u003d prepareCommand(model);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandFailure(clearCommand, model, ClearCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":6,"takuyakanbr":9,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstBook;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        deleteFirstBook(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        private Book bookToDelete;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        @Override"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        protected String undo() {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"            try {"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"                model.addBook(bookToDelete);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"                return \"Success\";"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"            } catch (DuplicateBookException e) {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"                fail(\"Impossible: bookToDelete was deleted.\");"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"                return \"Failure\";"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"            bookToDelete \u003d model.getDisplayBookList().get(0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"                model.deleteBook(bookToDelete);"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"            } catch (BookNotFoundException pnfe) {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"                fail(\"Impossible: bookToDelete was retrieved from model.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":28,"takuyakanbr":1,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/UnlockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.network.Network;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"public class UnlockCommandTest {"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":""},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    private static final String DEFAULT_PW \u003d \"testing\";"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":""},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"        // set password + lock"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().setPassword(LockManager.NO_PASSWORD, DEFAULT_PW);"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().lock();"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":""},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"    @After"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"    public void tearDown() {"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":""},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":""},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"        UnlockCommand unlockCommand \u003d new UnlockCommand(DEFAULT_PW);"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":""},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"        UnlockCommand sameCommand \u003d new UnlockCommand(DEFAULT_PW);"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":""},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"        // same value -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"        assertTrue(unlockCommand.equals(sameCommand));"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":""},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"        assertTrue(unlockCommand.equals(unlockCommand));"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":""},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"        assertFalse(unlockCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":""},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"        // different commandtypes -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        assertFalse(unlockCommand.equals(new ClearCommand()));"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":""},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"        // different types -\u003e return false"},{"lineNumber":61,"author":{"gitID":"592363789"},"content":"        assertFalse(unlockCommand.equals(0));"},{"lineNumber":62,"author":{"gitID":"592363789"},"content":""},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":""},{"lineNumber":65,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"    public void samePasswordTest() {"},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"        CommandResult commandResult \u003d prepareUnlockCommand(DEFAULT_PW).execute();"},{"lineNumber":68,"author":{"gitID":"592363789"},"content":""},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"        assertEquals(UnlockCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":""},{"lineNumber":72,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"592363789"},"content":"    public void wrongPasswordTest() {"},{"lineNumber":74,"author":{"gitID":"592363789"},"content":"        CommandResult commandResult \u003d prepareUnlockCommand(\"\").execute();"},{"lineNumber":75,"author":{"gitID":"592363789"},"content":""},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"        assertEquals(UnlockCommand.MESSAGE_WRONG_PASSWORD, commandResult.feedbackToUser);"},{"lineNumber":77,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"592363789"},"content":""},{"lineNumber":79,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"592363789"},"content":"    public void differentPasswordTest() {"},{"lineNumber":81,"author":{"gitID":"592363789"},"content":"        CommandResult commandResult \u003d prepareUnlockCommand(DEFAULT_PW + \"x\").execute();"},{"lineNumber":82,"author":{"gitID":"592363789"},"content":""},{"lineNumber":83,"author":{"gitID":"592363789"},"content":"        assertEquals(UnlockCommand.MESSAGE_WRONG_PASSWORD, commandResult.feedbackToUser);"},{"lineNumber":84,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"592363789"},"content":""},{"lineNumber":86,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"592363789"},"content":"    public void notLockedTest() {"},{"lineNumber":88,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().unlock(DEFAULT_PW);"},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"        CommandResult commandResult \u003d prepareUnlockCommand(DEFAULT_PW).execute();"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":""},{"lineNumber":91,"author":{"gitID":"592363789"},"content":"        assertEquals(UnlockCommand.MESSAGE_NOT_LOCKED, commandResult.feedbackToUser);"},{"lineNumber":92,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"592363789"},"content":""},{"lineNumber":94,"author":{"gitID":"592363789"},"content":"    private UnlockCommand prepareUnlockCommand(String key) {"},{"lineNumber":95,"author":{"gitID":"592363789"},"content":"        UnlockCommand unlock \u003d new UnlockCommand(key);"},{"lineNumber":96,"author":{"gitID":"592363789"},"content":"        unlock.setData(model, mock(Network.class), new CommandHistory(), new UndoStack());"},{"lineNumber":97,"author":{"gitID":"592363789"},"content":"        return unlock;"},{"lineNumber":98,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"592363789"},"content":""},{"lineNumber":100,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":2,"592363789":80,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":3,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"592363789"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":6,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":13,"author":{"gitID":"592363789"},"content":""},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":""},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.commands.EditCommand.EditDescriptor;"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"import seedu.address.testutil.EditDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":""},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"//@@author"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    public void constructor_nullBook_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        new EditCommand(null, null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidActiveListType_failure() {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withPriority(Priority.DEFAULT_PRIORITY).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        EditCommand editCommandSmallIndex \u003d prepareCommand(INDEX_FIRST_BOOK, descriptor);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        EditCommand editCommandLargeIndex \u003d prepareCommand(Index.fromOneBased(100), descriptor);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommandSmallIndex, model, EditCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        // Wrong active list message should take precedence over invalid index"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommandLargeIndex, model, EditCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Book editedBook \u003d new BookBuilder(model.getDisplayBookList().get(0)).withStatus(Status.UNREAD).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withStatus(Status.UNREAD).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_BOOK, descriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedBook);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel.updateBook(model.getDisplayBookList().get(0), editedBook);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        model.updateBookListFilter(x -\u003e x.getStatus().equals(Status.UNREAD));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Index indexLastBook \u003d Index.fromOneBased(model.getDisplayBookList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Book lastBook \u003d model.getDisplayBookList().get(indexLastBook.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        BookBuilder bookInList \u003d new BookBuilder(lastBook);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Book editedBook \u003d bookInList.withStatus(Status.READ).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withStatus(Status.READ).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastBook, descriptor);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedBook);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedModel.updateBook(lastBook, editedBook);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.updateBookListFilter(x -\u003e x.getStatus().equals(Status.UNREAD));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"        Book editedBook \u003d model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder(editedBook).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_BOOK, descriptor);"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // edit -\u003e first book edited"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        undoStack.push(editCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts book shelf back to previous state"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(undoCommand, model, String.format(EditCommand.UNDO_SUCCESS, editedBook), expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getDisplayBookList().size() + 1);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withStatus(Status.UNREAD).build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoStack"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"        // no commands in undoStack -\u003e undoCommand fail"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"592363789"},"content":"    //@@author 592363789"},{"lineNumber":138,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"592363789"},"content":"    public void execute_invalidBookIndexUnfilteredList_failure() {"},{"lineNumber":140,"author":{"gitID":"592363789"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getDisplayBookList().size() + 1);"},{"lineNumber":141,"author":{"gitID":"592363789"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withStatus(Status.DEFAULT_STATUS).build();"},{"lineNumber":142,"author":{"gitID":"592363789"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":143,"author":{"gitID":"592363789"},"content":""},{"lineNumber":144,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":145,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"592363789"},"content":""},{"lineNumber":147,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"592363789"},"content":"     * Test with index larger than size of filtered list"},{"lineNumber":149,"author":{"gitID":"592363789"},"content":"     * but smaller than size of book shelf."},{"lineNumber":150,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"592363789"},"content":"    public void execute_invalidBookIndexFilteredList_failure() {"},{"lineNumber":153,"author":{"gitID":"592363789"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":154,"author":{"gitID":"592363789"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":155,"author":{"gitID":"592363789"},"content":"        // ensures that outOfBoundIndex is still in bounds of book shelf"},{"lineNumber":156,"author":{"gitID":"592363789"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getBookList().size());"},{"lineNumber":157,"author":{"gitID":"592363789"},"content":""},{"lineNumber":158,"author":{"gitID":"592363789"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withStatus(Status.DEFAULT_STATUS).build();"},{"lineNumber":159,"author":{"gitID":"592363789"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"592363789"},"content":""},{"lineNumber":161,"author":{"gitID":"592363789"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":162,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"592363789"},"content":""},{"lineNumber":164,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"592363789"},"content":"    public void equals() {"},{"lineNumber":166,"author":{"gitID":"592363789"},"content":"        EditDescriptor descriptor \u003d new EditDescriptorBuilder().withStatus(Status.DEFAULT_STATUS).build();"},{"lineNumber":167,"author":{"gitID":"592363789"},"content":""},{"lineNumber":168,"author":{"gitID":"592363789"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_BOOK, descriptor);"},{"lineNumber":169,"author":{"gitID":"592363789"},"content":""},{"lineNumber":170,"author":{"gitID":"592363789"},"content":"        // same values -\u003e returns true"},{"lineNumber":171,"author":{"gitID":"592363789"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_BOOK, new EditDescriptor(descriptor));"},{"lineNumber":172,"author":{"gitID":"592363789"},"content":"        assertTrue(editCommand.equals(commandWithSameValues));"},{"lineNumber":173,"author":{"gitID":"592363789"},"content":""},{"lineNumber":174,"author":{"gitID":"592363789"},"content":"        // same object -\u003e returns true"},{"lineNumber":175,"author":{"gitID":"592363789"},"content":"        assertTrue(editCommand.equals(editCommand));"},{"lineNumber":176,"author":{"gitID":"592363789"},"content":""},{"lineNumber":177,"author":{"gitID":"592363789"},"content":"        // null -\u003e returns false"},{"lineNumber":178,"author":{"gitID":"592363789"},"content":"        assertFalse(editCommand.equals(null));"},{"lineNumber":179,"author":{"gitID":"592363789"},"content":""},{"lineNumber":180,"author":{"gitID":"592363789"},"content":"        // different types -\u003e returns false"},{"lineNumber":181,"author":{"gitID":"592363789"},"content":"        assertFalse(editCommand.equals(new ClearCommand()));"},{"lineNumber":182,"author":{"gitID":"592363789"},"content":""},{"lineNumber":183,"author":{"gitID":"592363789"},"content":"        // different index -\u003e returns false"},{"lineNumber":184,"author":{"gitID":"592363789"},"content":"        assertFalse(editCommand.equals(new EditCommand(INDEX_SECOND_BOOK, descriptor)));"},{"lineNumber":185,"author":{"gitID":"592363789"},"content":""},{"lineNumber":186,"author":{"gitID":"592363789"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"592363789"},"content":"        assertFalse(editCommand.equals(new EditCommand(INDEX_FIRST_BOOK,"},{"lineNumber":188,"author":{"gitID":"592363789"},"content":"                new EditDescriptorBuilder().withRating(new Rating(5)).build())));"},{"lineNumber":189,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"592363789"},"content":""},{"lineNumber":191,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"592363789"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}."},{"lineNumber":193,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"592363789"},"content":"    private EditCommand prepareCommand(Index index, EditDescriptor descriptor) {"},{"lineNumber":195,"author":{"gitID":"592363789"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":196,"author":{"gitID":"592363789"},"content":"        editCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":197,"author":{"gitID":"592363789"},"content":"        return editCommand;"},{"lineNumber":198,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"qiu-siqi":15,"592363789":102,"takuyakanbr":6,"-":76}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.JumpToBookListIndexRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_validIndexUnfilteredBookList_success() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index lastBookIndex \u003d Index.fromOneBased(model.getDisplayBookList().size());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK);"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_THIRD_BOOK);"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(lastBookIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidIndexUnfilteredBookList_failure() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getDisplayBookList().size() + 1);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_validIndexFilteredBookList_success() {"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_validIndexSearchResultsList_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager();"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(TypicalBooks.ARTEMIS);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        model.updateSearchResults(bookShelf);"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK);"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(INDEX_SECOND_BOOK);"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexRecentBooksList_success() throws Exception {"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK);"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionSuccess(INDEX_SECOND_BOOK);"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidIndexFilteredBookList_failure() {"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        // ensures that outOfBoundIndex is still in bounds of book shelf list"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getBookShelf().size());"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_invalidIndexSearchResultsList_failure() throws Exception {"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager();"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(TypicalBooks.ARTEMIS);"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        model.updateSearchResults(bookShelf);"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionFailure(INDEX_SECOND_BOOK, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexRecentBooksList_failure() throws Exception {"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager();"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        assertExecutionFailure(INDEX_SECOND_BOOK, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_BOOK);"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_BOOK);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_BOOK);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"        // different book -\u003e returns false"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_BOOK_SUCCESS, index.getOneBased()),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"takuyakanbr"},"content":"        BaseEvent lastEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"        int targetIndex \u003d ((JumpToBookListIndexRequestEvent) lastEvent).targetIndex;"},{"lineNumber":161,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(index, Index.fromZeroBased(targetIndex));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":35,"takuyakanbr":40,"-":113}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":" * Contains integration tests (interaction with the Model and UndoCommand) and unit tests for"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":" * {@code AddCommand}."},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"public class AddCommandTest {"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    private Model model;"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"     * By default, set up search results list as active list."},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager();"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(model);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    public void constructor_nullBook_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        new AddCommand(null);"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidActiveListType_failure() {"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.BOOK_SHELF);"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommandSmallIndex \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommandLargeIndex \u003d prepareCommand(Index.fromOneBased(100));"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(addCommandSmallIndex, model, AddCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        // Wrong active list message should take precedence over invalid index"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(addCommandLargeIndex, model, AddCommand.MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexSearchResults_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(expectedModel);"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addBook(model.getSearchResultsList().get(0));"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK, model.getSearchResultsList().get(0), expectedModel);"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexSearchResults_failure() {"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d prepareCommand(Index.fromOneBased(model.getSearchResultsList().size() + 1));"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(addCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexRecentBooks_success() throws Exception {"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareRecentBooksListInModel(model);"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(expectedModel);"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareRecentBooksListInModel(expectedModel);"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        expectedModel.addBook(model.getRecentBooksList().get(0));"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK, model.getRecentBooksList().get(0), expectedModel);"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexRecentBooks_failure() {"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareRecentBooksListInModel(model);"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d prepareCommand(Index.fromOneBased(model.getRecentBooksList().size() + 1));"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(addCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_validIndex_success() throws Exception {"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(expectedModel);"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        Book toAdd \u003d model.getSearchResultsList().get(0);"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        when(networkManagerMock.getBookDetails(toAdd.getGid().gid))"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(CompletableFuture.completedFuture(model.getSearchResultsList().get(0)));"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d new AddCommand(INDEX_FIRST_BOOK, false);"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        addCommand.setData(model, networkManagerMock, new CommandHistory(), new UndoStack());"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"        // add -\u003e first book added"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        addCommand.execute();"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        undoStack.push(addCommand);"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"        // undo -\u003e reverts bookshelf back to previous state"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(undoCommand, model, String.format(AddCommand.UNDO_SUCCESS, toAdd), expectedModel);"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"    public void executeUndo_invalidIndex_failure() throws Exception {"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSearchResultsList().size() + 1);"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"        // execution failed -\u003e addCommand not pushed into undoStack"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(addCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        // no commands in undoStack -\u003e undoCommand fail"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_networkError_raisesExpectedEvent() throws Exception {"},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d new AddCommand(INDEX_FIRST_BOOK, false);"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"        Book toAdd \u003d model.getSearchResultsList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        when(networkManagerMock.getBookDetails(toAdd.getGid().gid))"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(TestUtil.getFailedFuture());"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack undoStack \u003d new UndoStack();"},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"        addCommand.setData(model, networkManagerMock, new CommandHistory(), undoStack);"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"        addCommand.execute();"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"        NewResultAvailableEvent resultEvent \u003d (NewResultAvailableEvent)"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent(NewResultAvailableEvent.class);"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(AddCommand.MESSAGE_ADD_FAIL, resultEvent.message);"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":"        // undo -\u003e nothing to undo"},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoStack);"},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":172,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":174,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"qiu-siqi"},"content":"    public void equals() throws Exception {"},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addFirstCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":177,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addSecondCommand \u003d prepareCommand(INDEX_SECOND_BOOK);"},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":179,"author":{"gitID":"qiu-siqi"},"content":"        // same object -\u003e returns true"},{"lineNumber":180,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(addFirstCommand.equals(addFirstCommand));"},{"lineNumber":181,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":182,"author":{"gitID":"qiu-siqi"},"content":"        // same values -\u003e returns true"},{"lineNumber":183,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":184,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(addFirstCommand.equals(addFirstCommandCopy));"},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":186,"author":{"gitID":"qiu-siqi"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"qiu-siqi"},"content":"        addFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(addFirstCommand.equals(addFirstCommandCopy));"},{"lineNumber":189,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":190,"author":{"gitID":"qiu-siqi"},"content":"        // different types -\u003e returns false"},{"lineNumber":191,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(addFirstCommand.equals(1));"},{"lineNumber":192,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":193,"author":{"gitID":"qiu-siqi"},"content":"        // null -\u003e returns false"},{"lineNumber":194,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(addFirstCommand.equals(null));"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":"        // different book -\u003e returns false"},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(addFirstCommand.equals(addSecondCommand));"},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":200,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"qiu-siqi"},"content":"     * Executes an {@code AddCommand} with the given {@code index}, and checks that"},{"lineNumber":202,"author":{"gitID":"qiu-siqi"},"content":"     * {@code network.getBookDetails(bookId)} is being called with the correct book ID."},{"lineNumber":203,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"qiu-siqi"},"content":"    private void assertExecutionSuccess(Index index, Book expectedBook, Model expectedModel) {"},{"lineNumber":205,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d new AddCommand(index, false);"},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":207,"author":{"gitID":"qiu-siqi"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":208,"author":{"gitID":"qiu-siqi"},"content":"        when(networkManagerMock.getBookDetails(expectedBook.getGid().gid))"},{"lineNumber":209,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(CompletableFuture.completedFuture(expectedBook));"},{"lineNumber":210,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":211,"author":{"gitID":"qiu-siqi"},"content":"        addCommand.setData(model, networkManagerMock, new CommandHistory(), new UndoStack());"},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":213,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(addCommand, model, AddCommand.MESSAGE_ADDING, expectedModel);"},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":"        verify(networkManagerMock).getBookDetails(expectedBook.getGid().gid);"},{"lineNumber":215,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":217,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"     * Returns an {@code AddCommand} with the parameter {@code index}."},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"qiu-siqi"},"content":"    private AddCommand prepareCommand(Index index) {"},{"lineNumber":221,"author":{"gitID":"qiu-siqi"},"content":"        AddCommand addCommand \u003d new AddCommand(index, false);"},{"lineNumber":222,"author":{"gitID":"qiu-siqi"},"content":"        addCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":"        return addCommand;"},{"lineNumber":224,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":226,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":201,"takuyakanbr":2,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/SetPasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"public class SetPasswordCommandTest {"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":""},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":""},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":""},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().setPassword(LockManager.NO_PASSWORD, \"testing\");"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":""},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"    @After"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"    public void tearDown() {"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":""},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"    public void constructor_nullOldPw_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"        new SetPasswordCommand(null, \" \");"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"592363789"},"content":""},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"    public void constructor_nullNewPw_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"        new SetPasswordCommand(\" \", null);"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"592363789"},"content":""},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"    public void execute_correctPw_success() {"},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"        SetPasswordCommand command \u003d prepareCommand(\"testing\", \"hello\");"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"        assertEquals(SetPasswordCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"592363789"},"content":""},{"lineNumber":62,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"    public void execute_wrongPw_failure() {"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":"        SetPasswordCommand command \u003d prepareCommand(\"wrongpw\", \"hello\");"},{"lineNumber":65,"author":{"gitID":"592363789"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"        assertEquals(SetPasswordCommand.MESSAGE_WRONG_PASSWORD, result.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"592363789"},"content":""},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":"        SetPasswordCommand setPasswordCommand \u003d new SetPasswordCommand(\"testing\", \"newkey\");"},{"lineNumber":72,"author":{"gitID":"592363789"},"content":""},{"lineNumber":73,"author":{"gitID":"592363789"},"content":"        SetPasswordCommand thesameCommand \u003d new SetPasswordCommand(\"testing\", \"newkey\");"},{"lineNumber":74,"author":{"gitID":"592363789"},"content":""},{"lineNumber":75,"author":{"gitID":"592363789"},"content":"        // same value -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"        assertTrue(setPasswordCommand.equals(thesameCommand));"},{"lineNumber":77,"author":{"gitID":"592363789"},"content":""},{"lineNumber":78,"author":{"gitID":"592363789"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"592363789"},"content":"        assertTrue(setPasswordCommand.equals(setPasswordCommand));"},{"lineNumber":80,"author":{"gitID":"592363789"},"content":""},{"lineNumber":81,"author":{"gitID":"592363789"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"592363789"},"content":"        assertFalse(setPasswordCommand.equals(null));"},{"lineNumber":83,"author":{"gitID":"592363789"},"content":""},{"lineNumber":84,"author":{"gitID":"592363789"},"content":"        // different commandtypes -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"592363789"},"content":"        assertFalse(setPasswordCommand.equals(new ClearCommand()));"},{"lineNumber":86,"author":{"gitID":"592363789"},"content":""},{"lineNumber":87,"author":{"gitID":"592363789"},"content":"        // different types -\u003e return false"},{"lineNumber":88,"author":{"gitID":"592363789"},"content":"        assertFalse(setPasswordCommand.equals(0));"},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":""},{"lineNumber":91,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"592363789"},"content":"     * Returns an {@code SetPasswordCommand} with the parameter {@code oldPw} and {@code newPw}."},{"lineNumber":93,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"592363789"},"content":"    private SetPasswordCommand prepareCommand(String oldPw, String newPw) {"},{"lineNumber":95,"author":{"gitID":"592363789"},"content":"        SetPasswordCommand setPasswordCommand \u003d new SetPasswordCommand(oldPw, newPw);"},{"lineNumber":96,"author":{"gitID":"592363789"},"content":"        setPasswordCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":97,"author":{"gitID":"592363789"},"content":"        return setPasswordCommand;"},{"lineNumber":98,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"592363789"},"content":""},{"lineNumber":100,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"takuyakanbr":7,"592363789":78,"-":15}},{"path":"src/test/java/seedu/address/logic/commands/AddAliasCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.UNREAD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.getTypicalAliasList;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":" * {@code AddAliasCommand}."},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"public class AddAliasCommandTest {"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    private Model model;"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        model \u003d new ModelManager(new BookShelf(), new UserPrefs(), new BookShelf(), getTypicalAliasList());"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public void constructor_nullAlias_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        new AddAliasCommand(null);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_nonExistingAlias_aliasAdded() {"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        Alias alias \u003d new Alias(\"test\", \"test\", \"e/test f/test\");"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        AddAliasCommand command \u003d prepareCommand(alias);"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        ModelManager expectedModel \u003d new ModelManager(new BookShelf(),"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"                new UserPrefs(), new BookShelf(), getTypicalAliasList());"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.addAlias(alias);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(command, model, String.format(AddAliasCommand.MESSAGE_NEW, alias), expectedModel);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    public void execute_existingAlias_aliasUpdated() {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        Alias alias \u003d new Alias(UNREAD.getName(), UNREAD.getPrefix(), \"e/test f/test\");"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        AddAliasCommand command \u003d prepareCommand(alias);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        ModelManager expectedModel \u003d new ModelManager(new BookShelf(),"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"                new UserPrefs(), new BookShelf(), getTypicalAliasList());"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        expectedModel.addAlias(alias);"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        assertCommandSuccess(command, model, String.format(AddAliasCommand.MESSAGE_UPDATE, alias), expectedModel);"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddAliasCommand command \u003d prepareCommand(new Alias(\"1\", \"1\", \"1\"));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same alias -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddAliasCommand commandCopy \u003d prepareCommand(new Alias(\"1\", \"1\", \"1\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(command.equals(commandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(command.equals(\"123\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different alias -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddAliasCommand differentCommand \u003d prepareCommand(new Alias(\"1\", \"1\", \"123\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(command.equals(differentCommand));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns an {@code AddAliasCommand} with the parameter {@code alias}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private AddAliasCommand prepareCommand(Alias alias) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddAliasCommand command \u003d new AddAliasCommand(alias);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":51,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/LockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":3,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"592363789"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"592363789"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"592363789"},"content":""},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"import org.junit.After;"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":""},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"import seedu.address.network.Network;"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":""},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"public class LockCommandTest {"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":""},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":""},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":""},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"    @After"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    public void tearDown() {"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":""},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"        LockCommand lockCommand \u003d new LockCommand();"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":""},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"        // same object -\u003e returns true"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        assertTrue(lockCommand.equals(lockCommand));"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":""},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"        // null -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"        assertFalse(lockCommand.equals(null));"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":""},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"        // different commandtypes -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"        assertFalse(lockCommand.equals(new ClearCommand()));"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":""},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"        // different types -\u003e return false"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"        assertFalse(lockCommand.equals(0));"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":""},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":"    public void execute_success() {"},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"        LockCommand lockCommand \u003d new LockCommand();"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"        lockCommand.setData(model, mock(Network.class), new CommandHistory(), new UndoStack());"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"        CommandResult result \u003d lockCommand.execute();"},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"        assertEquals(LockCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        assertTrue(LockManager.getInstance().isLocked());"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":59,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ReviewsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowBookReviewsRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":" * Contains integration tests (interaction with the Model) for {@code ReviewsCommand}."},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"public class ReviewsCommandTest {"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    private Model model;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        new ReviewsCommand(null);"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexBookShelf_success() {"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(reviewsCommand, model,"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"                prepareExpectedMessage(model.getDisplayBookList(), INDEX_FIRST_BOOK), expectedModel);"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowBookReviewsRequestEvent);"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexBookShelf_failure() {"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d prepareCommand(Index.fromOneBased(model.getDisplayBookList().size() + 1));"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(reviewsCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexSearchResults_success() {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(model);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(expectedModel);"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(reviewsCommand, model,"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"                prepareExpectedMessage(model.getSearchResultsList(), INDEX_FIRST_BOOK), expectedModel);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowBookReviewsRequestEvent);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexSearchResults_failure() {"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareSearchResultListInModel(model);"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d prepareCommand(Index.fromOneBased(model.getSearchResultsList().size() + 1));"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(reviewsCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexRecentBooks_success() {"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareRecentBooksListInModel(model);"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareRecentBooksListInModel(expectedModel);"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(reviewsCommand, model,"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"                prepareExpectedMessage(model.getRecentBooksList(), INDEX_FIRST_BOOK), expectedModel);"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowBookReviewsRequestEvent);"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexRecentBooks_failure() {"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        TestUtil.prepareRecentBooksListInModel(model);"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d prepareCommand(Index.fromOneBased(model.getRecentBooksList().size() + 1));"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(reviewsCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"    public void equals() {"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsFirstCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsSecondCommand \u003d prepareCommand(INDEX_SECOND_BOOK);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        // same object -\u003e returns true"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(reviewsFirstCommand.equals(reviewsFirstCommand));"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        // same values -\u003e returns true"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(reviewsFirstCommand.equals(reviewsFirstCommandCopy));"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        // different types -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(reviewsFirstCommand.equals(1));"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        // null -\u003e returns false"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(reviewsFirstCommand.equals(null));"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"        // different book -\u003e returns false"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(reviewsFirstCommand.equals(reviewsSecondCommand));"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a {@code ReviewsCommand} with parameters {@code index}."},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"    private ReviewsCommand prepareCommand(Index index) {"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        ReviewsCommand reviewsCommand \u003d new ReviewsCommand(index);"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        reviewsCommand.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"        return reviewsCommand;"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the expected loading message of the book at {@code index} of {@code list}."},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"    private String prepareExpectedMessage(List\u003cBook\u003e list, Index index) {"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"        return String.format(ReviewsCommand.MESSAGE_SUCCESS, list.get(index.getZeroBased()));"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":132,"takuyakanbr":3,"-":18}},{"path":"src/test/java/seedu/address/storage/XmlBookShelfStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.After;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"public class XmlBookShelfStorageTest {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlBookShelfStorageTest/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    public void readBookShelf_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        readBookShelf(null);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    private java.util.Optional\u003cReadOnlyBookShelf\u003e readBookShelf(String filePath) throws Exception {"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        return new XmlBookShelfStorage(filePath).readBookShelf(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(readBookShelf(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        readBookShelf(\"NotXmlFormatBookShelf.xml\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    public void readBookShelf_invalidBookBookShelf_throwDataConversionException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        readBookShelf(\"invalidBookBookShelf.xml\");"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    public void readBookShelf_invalidAndValidBookBookShelf_throwDataConversionException() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        readBookShelf(\"invalidAndValidBookBookShelf.xml\");"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    public void readAndSaveBookShelf_allInOrder_success() throws Exception {"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + File.separator"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"                + StringUtil.generateRandomPrefix() + \"temp.xml\";"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf original \u003d getTypicalBookShelf();"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        XmlBookShelfStorage xmlBookShelfStorage \u003d new XmlBookShelfStorage(filePath);"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        //Save in new file and read back"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        xmlBookShelfStorage.saveBookShelf(original, filePath);"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf readBack \u003d xmlBookShelfStorage.readBookShelf(filePath).get();"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        original.removeBook(ARTEMIS);"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        original.addBook(ARTEMIS);"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        original.removeBook(BABYLON_ASHES);"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        xmlBookShelfStorage.saveBookShelf(original, filePath);"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        readBack \u003d xmlBookShelfStorage.readBookShelf(filePath).get();"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        //Save and read without specifying file path"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        original.addBook(BABYLON_ASHES);"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        xmlBookShelfStorage.saveBookShelf(original); //file path not specified"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        readBack \u003d xmlBookShelfStorage.readBookShelf().get(); //file path not specified"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"    public void readAndSaveBookShelf_withPassword_success() throws Exception {"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + File.separator"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"                + StringUtil.generateRandomPrefix() + \"temp.xml\";"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf original \u003d getTypicalBookShelf();"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"        XmlBookShelfStorage xmlBookShelfStorage \u003d new XmlBookShelfStorage(filePath);"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().setPassword(LockManager.NO_PASSWORD, \"newpw\");"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        //Save in new file and read back"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        xmlBookShelfStorage.saveBookShelf(original, filePath);"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf readBack \u003d xmlBookShelfStorage.readBookShelf(filePath).get();"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    public void readBookShelf_differentPassword_throwDataConversionException() throws Exception {"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().setPassword(LockManager.NO_PASSWORD, \"newpw\");"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + File.separator"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"                + StringUtil.generateRandomPrefix() + \"temp.xml\";"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf original \u003d getTypicalBookShelf();"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        XmlBookShelfStorage xmlBookShelfStorage \u003d new XmlBookShelfStorage(filePath);"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        xmlBookShelfStorage.saveBookShelf(original, filePath);"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"        LockManager.getInstance().setPassword(\"newpw\", \"hunter2\");"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"        File tempFile \u003d new File(filePath);"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"            thrown.expect(DataConversionException.class);"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"            new XmlBookShelfStorage(\"TempBookShelf.xml\").readBookShelf(filePath);"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        } finally {"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"            tempFile.delete();"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"    public void saveBookShelf_nullBookShelf_throwsNullPointerException() {"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"        saveBookShelf(null, \"SomeFile.xml\");"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":154,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"takuyakanbr"},"content":"     * Saves {@code bookShelf} at the specified {@code filePath}."},{"lineNumber":156,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"takuyakanbr"},"content":"    private void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) {"},{"lineNumber":158,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"takuyakanbr"},"content":"            new XmlBookShelfStorage(filePath).saveBookShelf(bookShelf, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"    public void saveBookShelf_nullFilePath_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":168,"author":{"gitID":"takuyakanbr"},"content":"        saveBookShelf(new BookShelf(), null);"},{"lineNumber":169,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":171,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":34,"takuyakanbr":81,"-":56}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.storage.XmlAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Gid;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.PublicationDate;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Publisher;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"public class XmlAdaptedBookTest {"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_TITLE \u003d ARTEMIS.getTitle().toString();"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private static final String VALID_DESCRIPTION \u003d ARTEMIS.getDescription().toString();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private static final List\u003cXmlAdaptedAuthor\u003e VALID_AUTHORS \u003d ARTEMIS.getAuthors().stream()"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"            .map(XmlAdaptedAuthor::new).collect(Collectors.toList());"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    private static final List\u003cXmlAdaptedCategory\u003e VALID_CATEGORIES \u003d ARTEMIS.getCategories().stream()"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"            .map(XmlAdaptedCategory::new).collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Status VALID_STATUS \u003d Status.DEFAULT_STATUS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Priority VALID_PRIORITY \u003d Priority.DEFAULT_PRIORITY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final int VALID_RATING \u003d Rating.DEFAULT_RATING;"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_GID \u003d ARTEMIS.getGid().toString();"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_ISBN \u003d ARTEMIS.getIsbn().toString();"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_PUBLISHER \u003d ARTEMIS.getPublisher().toString();"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    private static final String VALID_PUBLICATION_DATE \u003d ARTEMIS.getPublicationDate().toString();"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    public void toModelType_validBookDetails_returnsBook() throws Exception {"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(ARTEMIS);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(ARTEMIS, book.toModelType());"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, null, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, null, VALID_AUTHORS,"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, null, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void toModelType_nullPriority_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, null, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void toModelType_nullRating_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, null, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    public void toModelType_nullGid_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(null, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gid.class.getSimpleName());"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    public void toModelType_nullIsbn_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, null, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Isbn.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    public void toModelType_nullPublisher_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, null, VALID_PUBLICATION_DATE);"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Publisher.class.getSimpleName());"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    public void toModelType_nullPublicationDate_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlAdaptedBook book \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, null);"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PublicationDate.class.getSimpleName());"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        XmlAdaptedBook xmlAdaptedBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_AUTHORS, VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // same object -\u003e return true"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(xmlAdaptedBook.equals(xmlAdaptedBook));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // same values -\u003e return true"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlAdaptedBook xmlAdaptedBookCopy \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_AUTHORS, VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(xmlAdaptedBook.equals(xmlAdaptedBookCopy));"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(\"string\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(null));"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // different gid -\u003e return false"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlAdaptedBook differentBook \u003d new XmlAdaptedBook(\"xx\", VALID_ISBN, VALID_TITLE,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_AUTHORS, VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // different isbn -\u003e return false"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, \"xx\", VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // different title -\u003e return false"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, \"xx\", VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // different description -\u003e return false"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, \"xx\", VALID_AUTHORS,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // different authors -\u003e return false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, new ArrayList\u003c\u003e(),"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // different categories -\u003e return false"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                new ArrayList\u003c\u003e(), VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different status -\u003e return false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, Status.READ, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // different priority -\u003e return false"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, Priority.HIGH, VALID_RATING, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // different rating -\u003e return false"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, 5, VALID_PUBLISHER, VALID_PUBLICATION_DATE);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // different publisher -\u003e return false"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, \"xx\", VALID_PUBLICATION_DATE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // different publication date -\u003e return false"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        differentBook \u003d new XmlAdaptedBook(VALID_GID, VALID_ISBN, VALID_TITLE, VALID_DESCRIPTION, VALID_AUTHORS,"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                VALID_CATEGORIES, VALID_STATUS, VALID_PRIORITY, VALID_RATING, VALID_PUBLISHER, \"2000-01-01\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(xmlAdaptedBook.equals(differentBook));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":17,"takuyakanbr":59,"-":122}},{"path":"src/test/java/seedu/address/storage/XmlSerializableBookShelfTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"public class XmlSerializableBookShelfTest {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableBookShelfTest/\");"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    private static final File TYPICAL_BOOKS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalBooksBookShelf.xml\");"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private static final File INVALID_BOOK_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidBookBookShelf.xml\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    public void toModelType_typicalBooksFile_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        XmlSerializableBookShelf dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_BOOKS_FILE,"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"                XmlSerializableBookShelf.class);"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf typicalBookShelf \u003d TypicalBooks.getTypicalBookShelf();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(addressBookFromFile, typicalBookShelf);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        XmlSerializableBookShelf dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_BOOK_FILE,"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"                XmlSerializableBookShelf.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlSerializableBookShelf xmlBookShelf \u003d new XmlSerializableBookShelf(TypicalBooks.getTypicalBookShelf());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same object -\u003e return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(xmlBookShelf.equals(xmlBookShelf));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same books -\u003e return true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        XmlSerializableBookShelf xmlBookShelfCopy \u003d new XmlSerializableBookShelf(TypicalBooks.getTypicalBookShelf());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(xmlBookShelf.equals(xmlBookShelfCopy));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(xmlBookShelf.equals(\"string\"));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(xmlBookShelf.equals(null));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different books -\u003e return false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlSerializableBookShelf differentXmlBookShelf \u003d new XmlSerializableBookShelf(bookShelf);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertFalse(xmlBookShelf.equals(differentXmlBookShelf));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":22,"-":47}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        userPrefs.setBookShelfFilePath(\"bookshelf.xml\");"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        userPrefs.setBookShelfName(\"TypicalBookShelfName\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"-":133}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.getTypicalAliasList;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AliasListChangedEvent;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.model.BookShelfChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        XmlBookShelfStorage bookShelfStorage \u003d new XmlBookShelfStorage(getTempFilePath(\"biblio\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        XmlRecentBooksStorage recentBooksStorage \u003d new XmlRecentBooksStorage(getTempFilePath(\"recent\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlAliasListStorage aliasListStorage \u003d new XmlAliasListStorage(getTempFilePath(\"alias\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(bookShelfStorage, userPrefsStorage, recentBooksStorage, aliasListStorage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":54,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"    public void bookShelfReadSave() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"         * {@link XmlBookShelfStorage} class."},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"         * More extensive testing of BookShelf saving/reading is done in {@link XmlBookShelfStorageTest} class."},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf original \u003d getTypicalBookShelf();"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        storageManager.saveBookShelf(original);"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf retrieved \u003d storageManager.readBookShelf().get();"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(original, new BookShelf(retrieved));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"    public void getBookShelfFilePath() {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        assertNotNull(storageManager.getBookShelfFilePath());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    public void handleBookShelfChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                new XmlBookShelfStorageExceptionThrowingStub(\"dummy\"), new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                new XmlRecentBooksStorage(\"dummy\"), new XmlAliasListStorage(\"dummy\"));"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        storage.handleBookShelfChangedEvent(new BookShelfChangedEvent(new BookShelf()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    public void recentBooksReadSave() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"         * {@link XmlRecentBooksStorage} class."},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"         * More extensive testing of recent books saving/reading is done in"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"         * {@link XmlRecentBooksStorageTest} class."},{"lineNumber":97,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf original \u003d getTypicalBookShelf();"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        storageManager.saveRecentBooksList(original);"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        ReadOnlyBookShelf retrieved \u003d storageManager.readRecentBooksList().get();"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(original, new BookShelf(retrieved));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void aliasListReadSave() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * XmlAliasListStorage class."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * More extensive testing of alias list saving/reading is done in XmlAliasListStorageTest class."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        UniqueAliasList original \u003d getTypicalAliasList();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        storageManager.saveAliasList(original);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ReadOnlyAliasList retrieved \u003d storageManager.readAliasList().get();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"    public void getRecentBooksFilePath() {"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"        assertNotNull(storageManager.getRecentBooksFilePath());"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void handleAliasListChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // create a StorageManager while injecting a stub that throws an exception when the save method is called"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlBookShelfStorage(\"dummy\"), new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                new XmlRecentBooksStorage(\"dummy\"), new XmlAliasListStorageExceptionThrowingStub(\"dummy\"));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        storage.handleAliasListChangedEvent(new AliasListChangedEvent(new UniqueAliasList()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private static class XmlBookShelfStorageExceptionThrowingStub extends XmlBookShelfStorage {"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private XmlBookShelfStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        public void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) throws IOException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private static class XmlAliasListStorageExceptionThrowingStub extends XmlAliasListStorage {"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private XmlAliasListStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void saveAliasList(ReadOnlyAliasList aliasList) throws IOException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":13,"takuyakanbr":18,"-":130}},{"path":"src/test/java/seedu/address/storage/XmlAliasListStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.SEARCH;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.UNREAD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.getTypicalAliasList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAliasListStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAliasListStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAliasList_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAliasList(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAliasList\u003e readAliasList(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAliasListStorage(filePath).readAliasList(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAliasList(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        readAliasList(\"NotXmlFormatAliasList.xml\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void readAliasList_invalidAliasAliasList_throwDataConversionException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        readAliasList(\"invalidAliasAliasList.xml\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void readAliasList_invalidAndValidAliasAliasList_throwDataConversionException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        readAliasList(\"invalidAndValidAliasAliasList.xml\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void readAndSaveAliasList_allInOrder_success() throws Exception {"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + File.separator + \"TempAliasList.xml\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UniqueAliasList original \u003d getTypicalAliasList();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlAliasListStorage xmlAliasListStorage \u003d new XmlAliasListStorage(filePath);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // save in new file and read back"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        xmlAliasListStorage.saveAliasList(original, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ReadOnlyAliasList readBack \u003d xmlAliasListStorage.readAliasList(filePath).get();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(original, new UniqueAliasList(readBack));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // modify data, overwrite exiting file, and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        original.remove(UNREAD.getName());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        original.add(UNREAD);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        original.remove(SEARCH.getName());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        xmlAliasListStorage.saveAliasList(original, filePath);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAliasListStorage.readAliasList(filePath).get();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(original, new UniqueAliasList(readBack));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // save and read without specifying file path"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        original.add(SEARCH);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        xmlAliasListStorage.saveAliasList(original); // file path not specified"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAliasListStorage.readAliasList().get(); // file path not specified"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(original, new UniqueAliasList(readBack));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveAliasList_nullAliasList_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveAliasList(null, \"SomeFile.xml\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code aliasList} at the specified {@code filePath}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveAliasList(ReadOnlyAliasList aliasList, String filePath) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new XmlAliasListStorage(filePath).saveAliasList(aliasList, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveAliasList_nullFilePath_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        saveAliasList(new UniqueAliasList(), null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"-":116}},{"path":"src/test/java/seedu/address/model/alias/UniqueAliasListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public class UniqueAliasListTest {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        new UniqueAliasList(null);"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    public void constructor_emptyList_newEmptyList() {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasList \u003d new UniqueAliasList();"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasListCopy \u003d new UniqueAliasList(aliasList);"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(0, aliasListCopy.size());"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        // check that the copied list is independent of the existing list"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"3\", \"3\", \"3\"));"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(0, aliasListCopy.size());"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public void constructor_nonEmptyList_aliasesCopied() {"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasList \u003d new UniqueAliasList();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"1\", \"1\", \"1\"));"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"2\", \"2\", \"2\"));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasListCopy \u003d new UniqueAliasList(aliasList);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(2, aliasListCopy.size());"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(aliasList.getAliasByName(\"1\").isPresent());"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(aliasList.getAliasByName(\"2\").isPresent());"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        // check that the copied list is independent of the existing list"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"3\", \"3\", \"3\"));"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(2, aliasListCopy.size());"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    public void add_existingAliasName_aliasReplaced() {"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasList \u003d new UniqueAliasList();"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"1\", \"1\", \"1\"));"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"1\", \"updated\", \"updated\"));"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(1, aliasList.size());"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        Alias updatedAlias \u003d aliasList.getAliasByName(\"1\").get();"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"updated\", updatedAlias.getPrefix());"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(\"updated\", updatedAlias.getNamedArgs());"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    public void remove_validAlias_success() {"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasList \u003d new UniqueAliasList();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"11\", \"11\", \"11\"));"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"22\", \"22\", \"22\"));"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.remove(\"11\");"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(1, aliasList.size());"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(aliasList.getAliasByName(\"11\").isPresent());"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        assertTrue(aliasList.getAliasByName(\"22\").isPresent());"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    public void remove_invalidAlias_doesNothing() {"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        UniqueAliasList aliasList \u003d new UniqueAliasList();"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.add(new Alias(\"x\", \"x\", \"x\"));"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        aliasList.remove(\"y\");"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(1, aliasList.size());"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":67,"-":10}},{"path":"src/test/java/seedu/address/model/alias/AliasTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class AliasTest {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Alias(null, \"test\", \"test\"));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Alias(\"test\", null, \"test\"));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Alias(\"test\", \"test\", null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Alias alias \u003d new Alias(\"name\", \"prefix\", \"args\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e return true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(alias.equals(alias));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e return true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Alias aliasCopy \u003d new Alias(\"name\", \"prefix\", \"args\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(alias.equals(aliasCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(alias.equals(\"string\"));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(alias.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different name -\u003e return false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Alias differentAlias \u003d new Alias(\"newname\", \"prefix\", \"args\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(alias.equals(differentAlias));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different prefix -\u003e return false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        differentAlias \u003d new Alias(\"name\", \"newprefix\", \"args\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(alias.equals(differentAlias));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // different arguments -\u003e return false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        differentAlias \u003d new Alias(\"name\", \"prefix\", \"newargs\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(alias.equals(differentAlias));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void hashCode_sameData_equals() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Alias alias \u003d new Alias(\"name\", \"prefix\", \"args\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Alias aliasCopy \u003d new Alias(\"name\", \"prefix\", \"args\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(alias.hashCode(), alias.hashCode());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(alias.hashCode(), aliasCopy.hashCode());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":2,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/LibraryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code LibraryCommand}."},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"public class LibraryCommandTest {"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    private Model model;"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"     * Default active list is book shelf."},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    @Before"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"    public void setUp() {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        model \u003d new ModelManager(TypicalBooks.getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        model.updateSearchResults(TypicalBooks.getTypicalBookShelf());"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        model.addRecentBook(TypicalBooks.ARTEMIS);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        new LibraryCommand(null);"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexBookShelf_success() {"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK, model.getDisplayBookList().get(0), model);"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexBookShelf_failure() {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand libraryCommand \u003d prepareCommand(Index.fromOneBased(model.getDisplayBookList().size() + 1));"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(libraryCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexSearchResults_success() {"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK, model.getSearchResultsList().get(0), model);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexSearchResults_failure() {"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand libraryCommand \u003d prepareCommand(Index.fromOneBased(model.getSearchResultsList().size() + 1));"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(libraryCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_validIndexRecentBooks_success() {"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        assertExecutionSuccess(INDEX_FIRST_BOOK, model.getRecentBooksList().get(0), model);"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_invalidIndexRecentBooks_failure() {"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand libraryCommand \u003d prepareCommand(Index.fromOneBased(model.getRecentBooksList().size() + 1));"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandFailure(libraryCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    public void execute_networkError_raisesExpectedEvent() throws CommandException {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand command \u003d new LibraryCommand(INDEX_FIRST_BOOK);"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        when(networkManagerMock.searchLibraryForBook("},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"                model.getDisplayBookList().get(INDEX_FIRST_BOOK.getZeroBased())))"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(TestUtil.getFailedFuture());"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        command.setData(model, networkManagerMock, new CommandHistory(), new UndoStack());"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        command.execute();"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        NewResultAvailableEvent resultEvent \u003d (NewResultAvailableEvent)"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent(NewResultAvailableEvent.class);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(LibraryCommand.MESSAGE_FAIL, resultEvent.message);"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"    public void equals() {"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand libraryFirstCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand librarySecondCommand \u003d prepareCommand(INDEX_SECOND_BOOK);"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        // same object -\u003e returns true"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(libraryFirstCommand.equals(libraryFirstCommand));"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        // same values -\u003e returns true"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand libraryFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(libraryFirstCommand.equals(libraryFirstCommandCopy));"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        // different types -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(libraryFirstCommand.equals(1));"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"        // null -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(libraryFirstCommand.equals(null));"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"        // different book -\u003e returns false"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(libraryFirstCommand.equals(librarySecondCommand));"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"     * Executes a {@code LibraryCommand} with the given {@code index}, and checks that"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"     * {@code network.searchLibraryForBook(book)} is being called with the correct book."},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"    private void assertExecutionSuccess(Index index, Book expectedBook, Model expectedModel) {"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand libraryCommand \u003d new LibraryCommand(index);"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"        NetworkManager networkManagerMock \u003d mock(NetworkManager.class);"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"        when(networkManagerMock.searchLibraryForBook(expectedBook))"},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"                .thenReturn(CompletableFuture.completedFuture(expectedBook.toString()));"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"        libraryCommand.setData(model, networkManagerMock, new CommandHistory(), new UndoStack());"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        assertCommandSuccess(libraryCommand, model, LibraryCommand.MESSAGE_SEARCHING, expectedModel);"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        verify(networkManagerMock).searchLibraryForBook(expectedBook);"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a {@code LibraryCommand} with the parameter {@code index}."},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"    private LibraryCommand prepareCommand(Index index) {"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"        LibraryCommand command \u003d new LibraryCommand(index);"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":"        command.setData(model, mock(NetworkManager.class), new CommandHistory(), new UndoStack());"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"        return command;"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":141,"takuyakanbr":3,"-":26}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.BookShelfBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(LockManager.NO_PASSWORD);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor_isPasswordProtected_hideAllBooks() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(\"invalid$11$11$invalid$invalid\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(0, modelManager.getDisplayBookList().size());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void getDisplayBookList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        modelManager.getDisplayBookList().remove(0);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    public void getRecentBooksList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        modelManager.getRecentBooksList().remove(0);"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getDisplayAliasList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        modelManager.getDisplayAliasList().remove(0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf bookShelf \u003d new BookShelfBuilder().withBook(ARTEMIS).withBook(BABYLON_ASHES).build();"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf differentBookShelf \u003d new BookShelf();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager modelManager \u003d new ModelManager(bookShelf, userPrefs);"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(bookShelf, userPrefs);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        modelManager.updateSearchResults(bookShelf);"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        modelManagerCopy.updateSearchResults(bookShelf);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        modelManager.addRecentBook(ARTEMIS);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        modelManagerCopy.addRecentBook(ARTEMIS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        // different bookShelf -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentBookShelf, userPrefs)));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        // different searchResults -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        assertFalse(modelManager.equals(new ModelManager(bookShelf, userPrefs)));"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        // different recentBooks -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"        modelManagerCopy.addRecentBook(BABYLON_ASHES);"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(modelManager.equals(modelManagerCopy));"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // different alias list -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        modelManagerCopy \u003d new ModelManager(bookShelf, userPrefs);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        modelManagerCopy.addAlias(new Alias(\"1\", \"1\", \"1\"));"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(modelManager.equals(modelManagerCopy));"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        modelManager.updateBookListFilter(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        differentUserPrefs.setBookShelfName(\"differentName\");"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        ModelManager modelManagerDiffPrefs \u003d new ModelManager(bookShelf, differentUserPrefs);"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        assertTrue(modelManagerDiffPrefs.equals(new ModelManager(bookShelf, new UserPrefs())));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":25,"takuyakanbr":6,"-":80}},{"path":"src/test/java/seedu/address/model/book/RatingTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":3,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"592363789"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"592363789"},"content":""},{"lineNumber":7,"author":{"gitID":"592363789"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"592363789"},"content":""},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":""},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"public class RatingTest {"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":""},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"    public void constructor_validRating_success() {"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"        assertEquals(-1, new Rating(-1).rating);"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"        assertEquals(5, new Rating(5).rating);"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":""},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"    public void constructor_invalidRating_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(-2));"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(6));"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":""},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"        assertEquals(new Rating(-1).hashCode(), new Rating(-1).hashCode());"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"        assertEquals(new Rating(0).hashCode(), new Rating(0).hashCode());"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":""},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"    public void isValidRating() {"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        assertTrue(Rating.isValidRating(-1));"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"        assertTrue(Rating.isValidRating(5));"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"        assertFalse(Rating.isValidRating(-2));"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"        assertFalse(Rating.isValidRating(6));"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":37,"-":1}},{"path":"src/test/java/seedu/address/model/book/AuthorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class AuthorTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Author(null));"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Author(\"Author 1\").hashCode(), new Author(\"Author 1\").hashCode());"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Author(\"Author x\").hashCode(), new Author(\"Author x\").hashCode());"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":14,"-":7}},{"path":"src/test/java/seedu/address/storage/XmlRecentBooksStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"public class XmlRecentBooksStorageTest {"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"            FileUtil.getPath(\"./src/test/data/XmlBookShelfStorageTest/\");"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    public void readRecentBooksList_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        readRecentBooksList(null);"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    private java.util.Optional\u003cReadOnlyBookShelf\u003e readRecentBooksList(String filePath) throws Exception {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        return new XmlRecentBooksStorage(filePath).readRecentBooksList(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        return prefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER + prefsFileInTestDataFolder : null;"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        assertFalse(readRecentBooksList(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        readRecentBooksList(\"NotXmlFormatBookShelf.xml\");"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    public void readRecentBooksList_invalidBookBookShelf_throwDataConversionException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        readRecentBooksList(\"invalidBookBookShelf.xml\");"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    public void readRecentBooksList_invalidAndValidBookBookShelf_throwDataConversionException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        readRecentBooksList(\"invalidAndValidBookBookShelf.xml\");"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    public void readAndSaveRecentBooksList_allInOrder_success() throws Exception {"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + File.separator + \"TempRecentBooksData.xml\";"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf original \u003d getTypicalBookShelf();"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        XmlRecentBooksStorage xmlRecentBooksStorage \u003d new XmlRecentBooksStorage(filePath);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        //Save in new file and read back"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        xmlRecentBooksStorage.saveRecentBooksList(original, filePath);"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        ReadOnlyBookShelf readBack \u003d xmlRecentBooksStorage.readRecentBooksList(filePath).get();"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        original.removeBook(ARTEMIS);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        original.addBook(ARTEMIS);"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        original.removeBook(BABYLON_ASHES);"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        xmlRecentBooksStorage.saveRecentBooksList(original, filePath);"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        readBack \u003d xmlRecentBooksStorage.readRecentBooksList(filePath).get();"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        //Save and read without specifying file path"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        original.addBook(BABYLON_ASHES);"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        xmlRecentBooksStorage.saveRecentBooksList(original); //file path not specified"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        readBack \u003d xmlRecentBooksStorage.readRecentBooksList().get(); //file path not specified"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(original, new BookShelf(readBack));"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    public void saveRecentBooksList_nullBookShelf_throwsNullPointerException() {"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        saveRecentBooksList(null, \"SomeFile.xml\");"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"     * Saves {@code recentBooksData} at the specified {@code filePath}."},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    private void saveRecentBooksList(ReadOnlyBookShelf recentBooksData, String filePath) {"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"            new XmlRecentBooksStorage(filePath).saveRecentBooksList(recentBooksData,"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"                    addToTestDataPathIfNotNull(filePath));"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"        } catch (IOException ioe) {"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"    public void saveRecentBooksList_nullFilePath_throwsNullPointerException() {"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        saveRecentBooksList(new BookShelf(), null);"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":101,"takuyakanbr":7,"-":13}},{"path":"src/test/java/seedu/address/model/book/BookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class BookTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(null, null,"},{"lineNumber":14,"author":{"gitID":"-"},"content":"                null, null, null, null, null, null, null, null, null));"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(null, new Isbn(\"\"),"},{"lineNumber":17,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(),"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), null,"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(),"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                null, new Title(\"\"), Collections.emptyList(),"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                Collections.emptyList(), null, Collections.emptyList(),"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), null,"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(),"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"                null, new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(), new Description(\"\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                null, Priority.LOW, new Rating(-1), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(), new Description(\"\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                Status.READ, null, new Rating(-1), new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(), new Description(\"\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                Status.READ, Priority.LOW, null, new Publisher(\"\"), new PublicationDate(\"\")));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(),"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), null, new PublicationDate(\"\")));"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Book(new Gid(\"\"), new Isbn(\"\"),"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                Collections.emptyList(), new Title(\"\"), Collections.emptyList(),"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"                new Description(\"\"), new Publisher(\"\"), null));"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":30,"takuyakanbr":7,"-":24}},{"path":"src/test/java/seedu/address/model/UniqueListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"public class UniqueListTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    public void add_validItem_success() throws Exception {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 2\"));"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 3\"));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(3, uniqueList.toList().size());"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public void add_duplicateItem_throwsDuplicateDataException() throws Exception {"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 2\"));"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(DuplicateDataException.class);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public void add_null_throwsNullPointerException() throws Exception {"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(null);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void addAllIgnoresDuplicates_validItems_success() {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ArrayList\u003cCategory\u003e toAdd \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 1\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 2\"));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        uniqueList.addAllIgnoresDuplicates(toAdd);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(2, uniqueList.toList().size());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void addAllIgnoresDuplicates_duplicateItems_success() {"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ArrayList\u003cCategory\u003e toAdd \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 1\"));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 2\"));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 2\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 3\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        toAdd.add(new Category(\"Cat 1\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        uniqueList.addAllIgnoresDuplicates(toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(3, uniqueList.toList().size());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void addAllIgnoresDuplicates_null_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        uniqueList.addAllIgnoresDuplicates(null);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"    public void toSet_modifyList_doesNotMutateList() throws Exception {"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        List\u003cCategory\u003e set \u003d uniqueList.toList();"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        set.add(new Category(\"Cat 2\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(1, uniqueList.toList().size());"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        set.remove(new Category(\"Cat 1\"));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(1, uniqueList.toList().size());"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    public void setItems_modifyList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e replacement \u003d new UniqueList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        replacement.add(new Category(\"Cat 2\"));"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        replacement.add(new Category(\"Cat 3\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        uniqueList.setItems(replacement.toList());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(2, uniqueList.toList().size());"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, uniqueList.contains(new Category(\"Cat 2\")));"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(false, uniqueList.contains(new Category(\"Cat 1\")));"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void setItems_null_throwsNullPointerException() throws Exception {"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.setItems(null);"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"    public void mergeFrom_modifyList_success() throws Exception {"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e toMerge \u003d new UniqueList\u003c\u003e();"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        toMerge.add(new Category(\"Cat 2\"));"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        toMerge.add(new Category(\"Cat 3\"));"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.mergeFrom(toMerge);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(3, uniqueList.toList().size());"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, uniqueList.contains(new Category(\"Cat 2\")));"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, uniqueList.contains(new Category(\"Cat 1\")));"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"    public void mergeFrom_null_throwsNullPointerException() {"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.mergeFrom(null);"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.asObservableList().remove(0);"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"    public void equals_sameContent_returnsTrue() throws Exception {"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList2 \u003d new UniqueList\u003c\u003e();"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList2.add(new Category(\"Cat 1\"));"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, uniqueList.equals(uniqueList2));"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() throws Exception {"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList \u003d new UniqueList\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList.add(new Category(\"Cat 1\"));"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"        UniqueList\u003cCategory\u003e uniqueList2 \u003d new UniqueList\u003c\u003e();"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"        uniqueList2.add(new Category(\"Cat 1\"));"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(uniqueList.hashCode(), uniqueList2.hashCode());"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":105,"-":45}},{"path":"src/test/java/seedu/address/model/book/DescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class DescriptionTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Description(\"Desc 1\").hashCode(), new Description(\"Desc 1\").hashCode());"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Description(\"Desc x\").hashCode(), new Description(\"Desc x\").hashCode());"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":14,"-":7}},{"path":"src/test/java/seedu/address/model/book/PublicationDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class PublicationDateTest {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PublicationDate(null));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        PublicationDate publicationDate \u003d new PublicationDate(\"2000-01-01\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same object -\u003e return true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(publicationDate.equals(publicationDate));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same values -\u003e return true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        PublicationDate publicationDateCopy \u003d new PublicationDate(\"2000-01-01\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(publicationDate.equals(publicationDateCopy));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(publicationDate.equals(\"string\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(publicationDate.equals(null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e return false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        PublicationDate differentPublicationDate \u003d new PublicationDate(\"2018-01-01\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(publicationDate.equals(differentPublicationDate));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(new PublicationDate(\"2000-01-01\").hashCode(), new PublicationDate(\"2000-01-01\").hashCode());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(new PublicationDate(\"\").hashCode(), new PublicationDate(\"\").hashCode());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":9,"-":36}},{"path":"src/test/java/seedu/address/model/book/CategoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class CategoryTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Category(null));"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Category(\"Category 1\").hashCode(), new Category(\"Category 1\").hashCode());"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Category(\"Category x\").hashCode(), new Category(\"Category x\").hashCode());"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":14,"-":7}},{"path":"src/test/java/seedu/address/model/book/UniqueBookListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"public class UniqueBookListTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    public void setBook_validTargetAndReplacement_success() throws Exception {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.setBook(TypicalBooks.ARTEMIS, TypicalBooks.BABYLON_ASHES);"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(false, uniqueBookList.contains(TypicalBooks.ARTEMIS));"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, uniqueBookList.contains(TypicalBooks.BABYLON_ASHES));"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    public void setBook_nonMatchingTarget_throwsBookNotFoundException() throws Exception {"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(BookNotFoundException.class);"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.setBook(TypicalBooks.BABYLON_ASHES, TypicalBooks.WAKING_GODS);"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    public void setBook_nullTarget_throwsBookNotFoundException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(BookNotFoundException.class);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.setBook(null, TypicalBooks.WAKING_GODS);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    public void setBook_nullReplacement_throwsNullPointerException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.setBook(TypicalBooks.ARTEMIS, null);"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    public void setBook_duplicateReplacement_throwsDuplicateBookException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(DuplicateBookException.class);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.setBook(TypicalBooks.BABYLON_ASHES, TypicalBooks.ARTEMIS);"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    public void remove_validBook_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.remove(TypicalBooks.ARTEMIS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(0, uniqueBookList.toList().size());"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    public void remove_nonMatchingBook_throwsBookNotFoundException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(BookNotFoundException.class);"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.remove(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.asObservableList().remove(0);"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    public void equals_sameContent_returnsTrue() throws Exception {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList \u003d new UniqueBookList();"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.ARTEMIS);"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList.add(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        UniqueBookList uniqueBookList2 \u003d new UniqueBookList();"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList2.add(TypicalBooks.ARTEMIS);"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        uniqueBookList2.add(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, uniqueBookList.equals(uniqueBookList2));"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":83,"-":10}},{"path":"src/test/java/seedu/address/model/book/GidTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class GidTest {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Gid(null));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Gid gid \u003d new Gid(\"1\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same object -\u003e return true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(gid.equals(gid));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same values -\u003e return true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Gid gidCopy \u003d new Gid(\"1\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(gid.equals(gidCopy));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(gid.equals(\"string\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(gid.equals(null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e return false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Gid differentGid \u003d new Gid(\"x\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(gid.equals(differentGid));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(new Gid(\"1234567\").hashCode(), new Gid(\"1234567\").hashCode());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(new Gid(\"\").hashCode(), new Gid(\"\").hashCode());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":9,"-":36}},{"path":"src/test/java/seedu/address/model/book/TitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class TitleTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Title(\"Title 1\").hashCode(), new Title(\"Title 1\").hashCode());"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(new Title(\"Title x\").hashCode(), new Title(\"Title x\").hashCode());"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":14,"-":7}},{"path":"src/test/java/seedu/address/model/book/UniqueBookCircularListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.testutil.TypicalBooks;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class UniqueBookCircularListTest {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront_null_failure() throws Exception {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(null);"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront_validBook_success() throws Exception {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList();"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(true, uniqueBookCircularList.asObservableList().contains(TypicalBooks.ARTEMIS));"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront_repeatedBook_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        ObservableList\u003cBook\u003e list \u003d uniqueBookCircularList.asObservableList();"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(true, list.contains(TypicalBooks.ARTEMIS));"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(1, list.size());"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront_latestBookAtFront_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        ObservableList\u003cBook\u003e list \u003d uniqueBookCircularList.asObservableList();"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(TypicalBooks.BABYLON_ASHES, list.get(0));"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront_repeatedBookBroughtToFront_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        ObservableList\u003cBook\u003e list \u003d uniqueBookCircularList.asObservableList();"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(2, list.size());"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(TypicalBooks.ARTEMIS, list.get(0));"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(TypicalBooks.BABYLON_ASHES, list.get(1));"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront_tooManyBooks_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(2);"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.COLLAPSING_EMPIRE);"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        ObservableList\u003cBook\u003e list \u003d uniqueBookCircularList.asObservableList();"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(2, list.size()); // max size 2"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(false, list.contains(TypicalBooks.ARTEMIS)); // replaced"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(true, list.contains(TypicalBooks.BABYLON_ASHES));"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(true, list.contains(TypicalBooks.COLLAPSING_EMPIRE));"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.asObservableList().remove(0);"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"    public void equals_sameObject_returnsTrue() throws Exception {"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(true, uniqueBookCircularList.equals(uniqueBookCircularList));"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"    public void equals_sameContentSameOrder_returnsTrue() throws Exception {"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList2 \u003d new UniqueBookCircularList(5);"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList2.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList2.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(true, uniqueBookCircularList.equals(uniqueBookCircularList2));"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    public void equals_sameContentDifferentOrder_returnsFalse() throws Exception {"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList \u003d new UniqueBookCircularList(5);"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"        UniqueBookCircularList uniqueBookCircularList2 \u003d new UniqueBookCircularList(5);"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList2.addToFront(TypicalBooks.BABYLON_ASHES);"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"        uniqueBookCircularList2.addToFront(TypicalBooks.ARTEMIS);"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(false, uniqueBookCircularList.equals(uniqueBookCircularList2));"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":108,"takuyakanbr":5,"-":3}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/BookShelfBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" * A utility class to help with building BookShelf objects."},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":" *     {@code BookShelf bs \u003d new BookShelfBuilder().withBook(new Book(...)).build();}"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"public class BookShelfBuilder {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    private BookShelf bookShelf;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    public BookShelfBuilder() {"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"        bookShelf \u003d new BookShelf();"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    public BookShelfBuilder(BookShelf bookShelf) {"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        this.bookShelf \u003d bookShelf;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"     * Adds a new {@code Book} to the {@code BookShelf} that we are building."},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public BookShelfBuilder withBook(Book book) {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"            bookShelf.addBook(book);"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        } catch (DuplicateBookException dpe) {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"            throw new IllegalArgumentException(\"book is expected to be unique.\");"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        return this;"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    public BookShelf build() {"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        return bookShelf;"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":34,"takuyakanbr":5}},{"path":"src/test/java/seedu/address/testutil/BookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Gid;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.PublicationDate;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Publisher;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.util.BookDataUtil;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":" * A utility class to help with building Book objects."},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"public class BookBuilder {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_AUTHOR \u003d \"Andy Weir\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_TITLE \u003d \"Artemis\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_CATEGORY \u003d \"Science Fiction\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_DESCRIPTION \u003d \"This is a description for Artemis.\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_ID \u003d \"ry3GjwEACAAJ\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_ISBN \u003d \"9780525572664\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_PUBLISHER \u003d \"Someone\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_PUBLICATION_DATE \u003d \"2017-11-14\";"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private List\u003cAuthor\u003e authors;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    private Title title;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private List\u003cCategory\u003e categories;"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    private Description description;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Priority priority;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Rating rating;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    private Gid gid;"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    private Isbn isbn;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    private PublicationDate publicationDate;"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    private Publisher publisher;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    public BookBuilder() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        authors \u003d Collections.singletonList(new Author(DEFAULT_AUTHOR));"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        title \u003d new Title(DEFAULT_TITLE);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        categories \u003d Collections.singletonList(new Category(DEFAULT_CATEGORY));"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        status \u003d Status.DEFAULT_STATUS;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        priority \u003d Priority.DEFAULT_PRIORITY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        rating \u003d new Rating();"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        gid \u003d new Gid(DEFAULT_ID);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        isbn \u003d new Isbn(DEFAULT_ISBN);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        publicationDate \u003d new PublicationDate(DEFAULT_PUBLICATION_DATE);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        publisher \u003d new Publisher(DEFAULT_PUBLISHER);"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public BookBuilder(Book book) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        authors \u003d book.getAuthors();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        title \u003d book.getTitle();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        categories \u003d book.getCategories();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        description \u003d book.getDescription();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        status \u003d book.getStatus();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        priority \u003d book.getPriority();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        rating \u003d book.getRating();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        gid \u003d book.getGid();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        isbn \u003d book.getIsbn();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        publicationDate \u003d book.getPublicationDate();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        publisher \u003d book.getPublisher();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"     * Parses the {@code authors} into a {@code Set\u003cAuthor\u003e} and set it to the {@code Book} that we are building."},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    public BookBuilder withAuthors(String... authors) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.authors \u003d BookDataUtil.getAuthorList(authors);"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"     * Sets the {@code Title} of the {@code Book} that we are building."},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    public BookBuilder withTitle(String title) {"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        this.title \u003d new Title(title);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Book} that we are building."},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    public BookBuilder withCategories(String... categories) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.categories \u003d BookDataUtil.getCategoryList(categories);"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"     * Sets the {@code Description} of the {@code Book} that we are building."},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    public BookBuilder withDescription(String description) {"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Sets the {@code Status} of the {@code Book} that we are building."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public BookBuilder withStatus(Status status) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Sets the {@code Priority} of the {@code Book} that we are building."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public BookBuilder withPriority(Priority priority) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Sets the {@code Rating} of the {@code Book} that we are building."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public BookBuilder withRating(int rating) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"     * Sets the {@code Gid} of the {@code Book} that we are building."},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"    public BookBuilder withGid(String gid) {"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"        this.gid \u003d new Gid(gid);"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        return this;"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"     * Sets the {@code Isbn} of the {@code Book} that we are building."},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"    public BookBuilder withIsbn(String isbn) {"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        this.isbn \u003d new Isbn(isbn);"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        return this;"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"     * Sets the {@code Publisher} of the {@code Book} that we are building."},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"    public BookBuilder withPublisher(String publisher) {"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"        this.publisher \u003d new Publisher(publisher);"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"        return this;"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":"     * Sets the {@code PublicationDate} of the {@code Book} that we are building."},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"    public BookBuilder withPublicationDate(String date) {"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        this.publicationDate \u003d new PublicationDate(date);"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        return this;"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a new {@code Book} object."},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"takuyakanbr"},"content":"    public Book build() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return new Book(gid, isbn, authors, title, categories, description,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                status, priority, rating, publisher, publicationDate);"},{"lineNumber":168,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":170,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":47,"takuyakanbr":59,"-":64}},{"path":"src/test/java/seedu/address/model/book/PublisherTest.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class PublisherTest {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Publisher(null));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Publisher publisher \u003d new Publisher(\"1\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same object -\u003e return true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(publisher.equals(publisher));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same values -\u003e return true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Publisher publisherCopy \u003d new Publisher(\"1\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(publisher.equals(publisherCopy));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(publisher.equals(\"string\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(publisher.equals(null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e return false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Publisher differentPublisher \u003d new Publisher(\"x\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(publisher.equals(differentPublisher));"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public void hashCode_sameContent_returnsSameValue() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(new Publisher(\"Publisher 1\").hashCode(), new Publisher(\"Publisher 1\").hashCode());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(new Publisher(\"\").hashCode(), new Publisher(\"\").hashCode());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":9,"-":36}},{"path":"src/test/java/seedu/address/testutil/SearchDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand.SearchDescriptor;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":" * A utility class to help with building SearchDescriptor objects."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"public class SearchDescriptorBuilder {"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"    private SearchDescriptor descriptor;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptorBuilder() {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"        descriptor \u003d new SearchDescriptor();"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptorBuilder(SearchDescriptor descriptor) {"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"        this.descriptor \u003d new SearchDescriptor(descriptor);"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Sets the {@code keyWords} of the {@code SearchDescriptor} that we are building."},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public SearchDescriptorBuilder withKeyWords(String keyWords) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor.setKeyWords(keyWords);"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     * Sets the {@code isbn} of the {@code SearchDescriptor} that we are building."},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptorBuilder withIsbn(String isbn) {"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        descriptor.setIsbn(isbn);"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"     * Sets the {@code title} of the {@code SearchDescriptor} that we are building."},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptorBuilder withTitle(String title) {"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        descriptor.setTitle(title);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     * Sets the {@code author} of the {@code SearchDescriptor} that we are building."},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptorBuilder withAuthor(String author) {"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        descriptor.setAuthor(author);"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"     * Sets the {@code category} of the {@code SearchDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptorBuilder withCategory(String category) {"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        descriptor.setCategory(category);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    public SearchDescriptor build() {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        return descriptor;"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":59,"-":3}},{"path":"src/test/java/seedu/address/testutil/TypicalBooks.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":" * A utility class containing a list of {@code Book} objects to be used in tests."},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"public class TypicalBooks {"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    public static final Book ARTEMIS \u003d new BookBuilder().withAuthors(\"Andy Weir\").withTitle(\"Artemis\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            .withCategories(\"Fiction\").withDescription(\"This is Artemis.\")"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            .withStatus(Status.READ).withPriority(Priority.LOW).withRating(5).withGid(\"ry3GjwEACAAJ\")"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"            .withIsbn(\"9780525572664\").withPublisher(\"\").withPublicationDate(\"2017-11-14\").build();"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    public static final Book BABYLON_ASHES \u003d new BookBuilder().withAuthors(\"James S. A. Corey\")"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            .withTitle(\"Babylon\u0027s Ashes\").withCategories(\"Fiction\").withDescription(\"This is Babylon\u0027s Ashes.\")"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            .withStatus(Status.READING).withPriority(Priority.HIGH).withRating(4).withGid(\"3jsYCwAAQBAJ\")"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            .withIsbn(\"9780316217637\").withPublisher(\"Orbit\").withPublicationDate(\"2016-12-06\").build();"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    public static final Book COLLAPSING_EMPIRE \u003d new BookBuilder().withAuthors(\"John Scalzi\")"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            .withTitle(\"The Collapsing Empire\").withCategories(\"Fiction\").withDescription(\"This is Collapsing Empire.\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withStatus(Status.READING).withPriority(Priority.LOW).withRating(-1).withGid(\"2SoaDAAAQBAJ\")"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"            .withIsbn(\"9780765388896\").withPublisher(\"Tor Books\").withPublicationDate(\"2017-03-21\").build();"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    public static final Book CONSIDER_PHLEBAS \u003d new BookBuilder().withAuthors(\"Iain M. Banks\")"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"            .withTitle(\"Consider Phlebas\").withCategories(\"Fiction\", \"Science Fiction\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withDescription(\"This is Consider Phlebas.\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withStatus(Status.UNREAD).withPriority(Priority.NONE).withRating(-1).withGid(\"3_bJKlAOecEC\")"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"            .withIsbn(\"9780316095839\").withPublicationDate(\"2009-12-01\").withPublisher(\"Orbit\").build();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    public static final Book WAKING_GODS \u003d new BookBuilder().withAuthors(\"Sylvain Neuvel\").withTitle(\"Waking Gods\")"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"            .withCategories(\"Fiction\", \"Science Fiction\").withDescription(\"This is Waking Gods.\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withStatus(Status.UNREAD).withPriority(Priority.NONE).withRating(-1).withGid(\"CIj1DAAAQBAJ\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withIsbn(\"9781405921909\").withPublisher(\"Penguin UK\").withPublicationDate(\"2017-04-06\").build();"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    private TypicalBooks() {} // prevents instantiation"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     * Returns an {@code BookShelf} with all the typical books."},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public static BookShelf getTypicalBookShelf() {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            bookShelf.setBooks(getTypicalBooks());"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected DuplicateBookException.\");"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        return bookShelf;"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    public static List\u003cBook\u003e getTypicalBooks() {"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ARTEMIS, BABYLON_ASHES,"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"                COLLAPSING_EMPIRE, CONSIDER_PHLEBAS, WAKING_GODS));"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":5,"takuyakanbr":36,"-":18}},{"path":"src/test/java/seedu/address/testutil/TypicalAliases.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Alias} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class TypicalAliases {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Alias REMOVE \u003d new Alias(\"rm\", \"delete\", \"\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Alias SEARCH \u003d new Alias(\"s\", \"search\", \"\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Alias UNREAD \u003d new Alias(\"urd\", \"list\", \"s/unread\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private TypicalAliases() {}"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static UniqueAliasList getTypicalAliasList() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        UniqueAliasList aliasList \u003d new UniqueAliasList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        getTypicalAliases().forEach(aliasList::add);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return aliasList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static List\u003cAlias\u003e getTypicalAliases() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(REMOVE, SEARCH, UNREAD));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":2,"-":28}},{"path":"src/test/java/seedu/address/testutil/EditDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditDescriptor;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class to help with building EditDescriptor objects."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EditDescriptorBuilder {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private EditDescriptor descriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public EditDescriptorBuilder() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditDescriptor();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public EditDescriptorBuilder(EditDescriptor descriptor) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditDescriptor(descriptor);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an {@code EditDescriptor} with fields containing {@code book}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EditDescriptorBuilder(Book book) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditCommand.EditDescriptor();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        descriptor.setStatus(book.getStatus());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        descriptor.setPriority(book.getPriority());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setRating(book.getRating());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Sets the {@code Status} of the {@code EditDescriptor} that we are building."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public EditDescriptorBuilder withStatus(Status status) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setStatus(status);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Sets the {@code Priority} of the {@code EditDescriptor} that we are building."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public EditDescriptorBuilder withPriority(Priority priority) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        descriptor.setPriority(priority);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Sets the {@code Rating} of the {@code EditDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public EditDescriptorBuilder withRating(Rating rating) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        descriptor.setRating(rating);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditDescriptor build() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"-":61}},{"path":"src/test/java/seedu/address/model/BookShelfTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.ARTEMIS;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.BABYLON_ASHES;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.WAKING_GODS;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"public class BookShelfTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    private BookShelf bookShelf;"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf \u003d new BookShelf();"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(Collections.emptyList(), bookShelf.getBookList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.resetData(null);"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    public void resetData_withValidReadOnlyBookShelf_replacesData() {"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        ReadOnlyBookShelf newData \u003d getTypicalBookShelf();"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(newData, bookShelf);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        // Repeat ARTEMIS twice"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        List\u003cBook\u003e newBooks \u003d Arrays.asList(ARTEMIS, ARTEMIS);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        BookShelfStub newData \u003d new BookShelfStub(newBooks);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getBookByIsbn_matchingIsbn_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        bookShelf.addBook(BABYLON_ASHES);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(BABYLON_ASHES, bookShelf.getBookByIsbn(BABYLON_ASHES.getIsbn()).get());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getBookByIsbn_nonMatchingIsbn_returnsEmptyOptional() throws Exception {"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(bookShelf.getBookByIsbn(BABYLON_ASHES.getIsbn()).isPresent());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    public void updateBook_validTargetAndReplacement_success() throws Exception {"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.updateBook(ARTEMIS, BABYLON_ASHES);"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(false, bookShelf.getBookList().contains(ARTEMIS));"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        assertEquals(true, bookShelf.getBookList().contains(BABYLON_ASHES));"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    public void updateBook_nonMatchingTarget_throwsBookNotFoundException() throws Exception {"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(BookNotFoundException.class);"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.updateBook(BABYLON_ASHES, WAKING_GODS);"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    public void updateBook_nullTarget_throwsBookNotFoundException() throws Exception {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(BookNotFoundException.class);"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.updateBook(null, WAKING_GODS);"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"    public void updateBook_nullReplacement_throwsNullPointerException() throws Exception {"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.updateBook(ARTEMIS, null);"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    public void removeBook_validBook_success() throws Exception {"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.removeBook(ARTEMIS);"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"        assertEquals(0, bookShelf.size());"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"    public void removeBook_nonMatchingBook_throwsBookNotFoundException() throws Exception {"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        thrown.expect(BookNotFoundException.class);"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.removeBook(BABYLON_ASHES);"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"    public void getBookList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.getBookList().remove(0);"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void hashCode_sameContent_returnsSameValue() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(ARTEMIS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        bookShelf.addBook(BABYLON_ASHES);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        BookShelf bookShelfCopy \u003d new BookShelf();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        bookShelfCopy.addBook(ARTEMIS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        bookShelfCopy.addBook(BABYLON_ASHES);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(bookShelf.hashCode(), bookShelf.hashCode());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(bookShelf.hashCode(), bookShelfCopy.hashCode());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"     * A stub ReadOnlyBookShelf whose book list can violate interface constraints."},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"    private static class BookShelfStub implements ReadOnlyBookShelf {"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"        BookShelfStub(Collection\u003cBook\u003e books) {"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"            this.books.setAll(books);"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public Optional\u003cBook\u003e getBookByIsbn(Isbn isbn) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"takuyakanbr"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"takuyakanbr"},"content":"        public ObservableList\u003cBook\u003e getBookList() {"},{"lineNumber":158,"author":{"gitID":"takuyakanbr"},"content":"            return books;"},{"lineNumber":159,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public int size() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return books.size();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":167,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":104,"-":62}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StylesheetNotFoundException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final Scene scene;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    private final BookListPanelHandle bookListPanel;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final WelcomePanelHandle welcomePanel;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    private final BookDetailsPanelHandle bookDetailsPanel;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private final BookReviewsPanelHandle bookReviewsPanel;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    private final BookInLibraryPanelHandle bookInLibraryPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final AliasListPanelHandle aliasListPanel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        scene \u003d stage.getScene();"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        bookListPanel \u003d new BookListPanelHandle(getChildNode(BookListPanelHandle.BOOK_LIST_VIEW_ID));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        welcomePanel \u003d new WelcomePanelHandle(getChildNode(WelcomePanelHandle.WELCOME_PANEL_ID));"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        bookDetailsPanel \u003d new BookDetailsPanelHandle(getChildNode(BookDetailsPanelHandle.BOOK_DETAILS_PANE_ID));"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        bookReviewsPanel \u003d new BookReviewsPanelHandle(getChildNode(BookReviewsPanelHandle.BOOK_REVIEWS_PANE_ID));"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        bookInLibraryPanel \u003d"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"                new BookInLibraryPanelHandle(getChildNode(BookInLibraryPanelHandle.BOOK_IN_LIBRARY_PANEL_ID));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        aliasListPanel \u003d new AliasListPanelHandle(getChildNode(AliasListPanelHandle.ALIAS_LIST_PANEL_ID));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    public BookListPanelHandle getBookListPanel() {"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        return bookListPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public WelcomePanelHandle getWelcomePanel() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return welcomePanel;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    public BookDetailsPanelHandle getBookDetailsPanel() {"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        return bookDetailsPanel;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    public BookReviewsPanelHandle getBookReviewsPanel() {"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        return bookReviewsPanel;"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"    public BookInLibraryPanelHandle getBookInLibraryPanel() {"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        return bookInLibraryPanel;"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public AliasListPanelHandle getAliasListPanel() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return aliasListPanel;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String getActiveStylesheet() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (scene.getStylesheets().size() \u003d\u003d 0) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new StylesheetNotFoundException();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return scene.getStylesheets().get(0);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":16,"takuyakanbr":5,"-":66}},{"path":"src/test/java/guitests/guihandles/BookInLibraryPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.ui.WebViewManager;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":" * Provides a handle for the {@code BookInLibraryPanel} of the UI."},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"public class BookInLibraryPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    public static final String BOOK_IN_LIBRARY_PANEL_ID \u003d \"#bookInLibraryPanel\";"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    public BookInLibraryPanelHandle(Node bookInLibraryPanelNode) {"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"        super(bookInLibraryPanelNode);"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    public boolean isVisible() {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        return getRootNode().isVisible();"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        return WebViewUtil.getLoadedUrl(WebViewManager.getInstance().getWebView());"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":30}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./build/tmp/sandbox/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String PREFIX_SEPARATOR \u003d \"_\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        String randomizedFileName \u003d StringUtil.generateRandomPrefix() + PREFIX_SEPARATOR + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + randomizedFileName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns the middle index of the book in the {@code model}\u0027s display book list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getDisplayBookList().size() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the last index of the book in the {@code model}\u0027s display book list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getDisplayBookList().size());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns the book in the {@code model}\u0027s display book list at {@code index}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    public static Book getBook(Model model, Index index) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return model.getDisplayBookList().get(index.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    //@@author takuyakanbr"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"     * Returns a {@link CompletableFuture} that has already completed exceptionally"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"     * with an {@code IOException}."},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    public static \u003cT\u003e CompletableFuture\u003cT\u003e getFailedFuture() {"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        return CompletableFuture.completedFuture(null).thenApply(obj -\u003e {"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"            throw new CompletionException(new IOException());"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    //@@author qiu-siqi"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"     * Sets up {@code model} with a non-empty search result list and"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"     * switches active list to search results list."},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    public static void prepareSearchResultListInModel(Model model) {"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf bookShelf \u003d getTypicalBookShelf();"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        model.updateSearchResults(bookShelf);"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"     * Sets up {@code model} with a non-empty recently selected books list and"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"     * switches active list to recent books list."},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    public static void prepareRecentBooksListInModel(Model model) {"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf bookShelf \u003d getTypicalBookShelf();"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        bookShelf.getBookList().forEach(model::addRecentBook);"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":23,"takuyakanbr":19,"-":53}},{"path":"src/test/java/guitests/guihandles/AliasListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code AliasListPanel} containing the list of aliases."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class AliasListPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String ALIAS_LIST_PANEL_ID \u003d \"#aliasListPanel\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String LIST_VIEW_FIELD_ID \u003d \"#aliasListView\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String CARD_PANE_ID \u003d \"#aliasCardPane\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final ListView\u003cAlias\u003e aliasListView;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public AliasListPanelHandle(Node aliasListPanelNode) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        super(aliasListPanelNode);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        aliasListView \u003d getChildNode(LIST_VIEW_FIELD_ID);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Navigates the listview to display and select {@code alias}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void navigateToCard(Alias alias) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (!aliasListView.getItems().contains(alias)) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Alias does not exist.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e aliasListView.scrollTo(alias));"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"     * Navigates the listview to {@code index}."},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    public void navigateToCard(int index) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (index \u003c 0 || index \u003e\u003d aliasListView.getItems().size()) {"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"            throw new IllegalArgumentException(\"Index is out of bounds.\");"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e aliasListView.scrollTo(index));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the alias card handle of an alias associated with the {@code index} in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Optional\u003cAliasCardHandle\u003e getAliasCardHandle(int index) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return getAllCardNodes().stream()"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .map(AliasCardHandle::new)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .filter(handle -\u003e handle.equals(getAlias(index)))"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Alias getAlias(int index) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return aliasListView.getItems().get(index);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"     * Returns all card nodes in the scene graph."},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"     * visible in the listview may also be in the scene graph."},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    private Set\u003cNode\u003e getAllCardNodes() {"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        return guiRobot.lookup(CARD_PANE_ID).queryAll();"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean isVisible() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return getRootNode().isVisible();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":15,"takuyakanbr":11,"-":51}},{"path":"src/test/java/guitests/guihandles/WelcomePanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code WelcomePanel}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class WelcomePanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String WELCOME_PANEL_ID \u003d \"#welcomePanel\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public WelcomePanelHandle(Node welcomePanelNode) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        super(welcomePanelNode);"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    public boolean isVisible() {"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"        return getRootNode().isVisible();"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":6,"-":14}},{"path":"src/test/java/guitests/guihandles/AliasCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Provides a handle to an alias card in the alias list panel."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AliasCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String PREFIX_FIELD_ID \u003d \"#prefix\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String NAMED_ARGS_FIELD_ID \u003d \"#namedArgs\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Label prefixLabel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label namedArgsLabel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public AliasCardHandle(Node cardNode) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.prefixLabel \u003d getChildNode(PREFIX_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.namedArgsLabel \u003d getChildNode(NAMED_ARGS_FIELD_ID);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String getName() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getPrefix() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return prefixLabel.getText();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String getNamedArgs() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return namedArgsLabel.getText();"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"     * Returns true if all the fields of this handle are the same as {@code otherHandle}."},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(AliasCardHandle otherHandle) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return getId().equals(otherHandle.getId())"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 getName().equals(otherHandle.getName())"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 getPrefix().equals(otherHandle.getPrefix())"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                \u0026\u0026 getNamedArgs().equals(otherHandle.getNamedArgs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns true if this handle contains {@code alias}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Alias alias) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return getName().equals(alias.getName())"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 getPrefix().equals(alias.getPrefix())"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                \u0026\u0026 getNamedArgs().equals(alias.getNamedArgs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":5,"-":59}},{"path":"src/test/java/guitests/guihandles/BookDescriptionViewHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.ExecutionException;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import java.util.concurrent.FutureTask;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * Provides a handle for {@code BookDescriptionView}."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class BookDescriptionViewHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    public static final String BOOK_DESCRIPTION_VIEW_ID \u003d \"#bookDescriptionView\";"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private final WebView descriptionView;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    public BookDescriptionViewHandle(Node bookDescriptionNode) {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        super(bookDescriptionNode);"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        this.descriptionView \u003d getChildNode(DESCRIPTION_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public String getContent() {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        final FutureTask\u003cString\u003e query \u003d new FutureTask\u003c\u003e(() -\u003e (String) descriptionView.getEngine()"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"                .executeScript(\"document.getElementById(\u0027description\u0027).innerHTML\"));"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        guiRobot.interact(query);"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"            return query.get();"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        } catch (InterruptedException | ExecutionException e) {"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"            LogsCenter.getLogger(this.getClass()).warning(\"Failed to fetch book description.\");"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"            return \"\";"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":37,"-":1}},{"path":"src/test/java/guitests/guihandles/BookCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.ui.BookCard;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"public class BookCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TITLE_FIELD_ID \u003d \"#title\";"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private static final String AUTHORS_FIELD_ID \u003d \"#authors\";"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    private static final String CATEGORIES_FIELD_ID \u003d \"#categories\";"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#status\";"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private static final String PRIORITY_FIELD_ID \u003d \"#priority\";"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    private static final String RATING_FIELD_ID \u003d \"#rating\";"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private final Label idLabel;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private final Label titleLabel;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private final List\u003cLabel\u003e authorsLabel;"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    private final List\u003cLabel\u003e categoriesLabel;"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private final Label statusLabel;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    private final Label priorityLabel;"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    private final Label ratingLabel;"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    public BookCardHandle(Node cardNode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        this.titleLabel \u003d getChildNode(TITLE_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        Region authorsContainer \u003d getChildNode(AUTHORS_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        this.authorsLabel \u003d authorsContainer"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        Region categoriesContainer \u003d getChildNode(CATEGORIES_FIELD_ID);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        this.categoriesLabel \u003d categoriesContainer"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        this.statusLabel \u003d getChildNode(STATUS_FIELD_ID);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        this.priorityLabel \u003d getChildNode(PRIORITY_FIELD_ID);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        this.ratingLabel \u003d getChildNode(RATING_FIELD_ID);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    public String getId() {"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        return idLabel.getText();"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    private String getTitle() {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        return titleLabel.getText();"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"    private List\u003cString\u003e getAuthors() {"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        return authorsLabel"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    private List\u003cString\u003e getCategories() {"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        return categoriesLabel"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"    private String getStatus() {"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        return statusLabel.getText();"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    private String getPriority() {"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        return priorityLabel.getText();"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    private String getRating() {"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        return ratingLabel.getText();"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"     * Returns true if all the fields of this handle are the same as {@code otherHandle}."},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"    public boolean equals(BookCardHandle otherHandle) {"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        return getId().equals(otherHandle.getId())"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getTitle().equals(otherHandle.getTitle())"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getAuthors().equals(otherHandle.getAuthors())"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getCategories().equals(otherHandle.getCategories())"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getStatus().equals(otherHandle.getStatus())"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getPriority().equals(otherHandle.getPriority())"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getRating().equals(otherHandle.getRating());"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"     * Returns true if this handle contains {@code book}."},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"    public boolean equals(Book book) {"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"        return getTitle().equals(book.getTitle().title)"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 new HashSet\u003c\u003e(getAuthors())"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                    .equals(book.getAuthors().stream().map(Author::getDisplayText).collect(Collectors.toSet()))"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 new HashSet\u003c\u003e(getCategories())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                    .equals(book.getCategories().stream().limit(BookCard.DISPLAYED_CATEGORY_LIMIT)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                            .map(Category::getDisplayText).collect(Collectors.toSet()))"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getStatus().equals(book.getStatus().getDisplayText())"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getPriority().equals(book.getPriority().getDisplayText())"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 getRating().equals(book.getRating().getDisplayText());"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":88,"-":33}},{"path":"src/test/java/guitests/guihandles/BookReviewsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.ui.WebViewManager;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":" * Provides a handle for the {@code BookReviewsPanel} of the UI."},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"public class BookReviewsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    public static final String BOOK_REVIEWS_PANE_ID \u003d \"#bookReviewsPane\";"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    public BookReviewsPanelHandle(Node bookReviewsPanelNode) {"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"        super(bookReviewsPanelNode);"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    public boolean isVisible() {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        return getRootNode().isVisible();"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        return WebViewUtil.getLoadedUrl(WebViewManager.getInstance().getWebView());"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":25,"-":4}},{"path":"src/test/java/guitests/guihandles/BookListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * Provides a handle for {@code BookListPanel} containing the list of {@code Book}."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class BookListPanelHandle extends NodeHandle\u003cListView\u003cBook\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    public static final String BOOK_LIST_VIEW_ID \u003d \"#bookListView\";"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    private static final String CARD_PANE_ID \u003d \"#cardPane\";"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private Optional\u003cBook\u003e lastRememberedSelectedBookCard;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    public BookListPanelHandle(ListView\u003cBook\u003e bookListPanelNode) {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        super(bookListPanelNode);"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a handle to the selected {@code BookCardHandle}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    public BookCardHandle getHandleToSelectedCard() {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        List\u003cBook\u003e bookList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        if (bookList.size() !\u003d 1) {"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"            throw new AssertionError(\"Book list size expected 1.\");"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        return getAllCardNodes().stream()"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"                .map(BookCardHandle::new)"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"                .filter(handle -\u003e handle.equals(bookList.get(0)))"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"                .findFirst()"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"                .orElseThrow(IllegalStateException::new);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        List\u003cBook\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"     * Navigates the listview to display and select {@code book}."},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    public void navigateToCard(Book book) {"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        if (!getRootNode().getItems().contains(book)) {"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"            throw new IllegalArgumentException(\"Book does not exist.\");"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().scrollTo(book));"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"     * Navigates the listview to {@code index}."},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"    public void navigateToCard(int index) {"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"            throw new IllegalArgumentException(\"Index is out of bounds.\");"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().scrollTo(index));"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"     * Selects the {@code BookCard} at {@code index} in the list."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the book card handle of a book associated with the {@code index} in the list."},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Optional\u003cBookCardHandle\u003e getBookCardHandle(int index) {"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        return getAllCardNodes().stream()"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"                .map(BookCardHandle::new)"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"                .filter(handle -\u003e handle.equals(getBook(index)))"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"    private Book getBook(int index) {"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        return getRootNode().getItems().get(index);"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"     * Returns all card nodes in the scene graph."},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"     * visible in the listview may also be in the scene graph."},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    private Set\u003cNode\u003e getAllCardNodes() {"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        return guiRobot.lookup(CARD_PANE_ID).queryAll();"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean isVisible() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return getRootNode().getParent().isVisible();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"     * Remembers the selected {@code Book} in the list."},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"    public void rememberSelectedBookCard() {"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"            lastRememberedSelectedBookCard \u003d Optional.empty();"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"        } else {"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"            lastRememberedSelectedBookCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"     * Returns true if the selected {@code Book} is different from the value remembered by the most recent"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"     * {@code rememberSelectedBookCard()} call."},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"    public boolean isSelectedBookCardChanged() {"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"            return lastRememberedSelectedBookCard.isPresent();"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"        } else {"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"            return !lastRememberedSelectedBookCard.isPresent()"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"                    || !lastRememberedSelectedBookCard.get().equals(selectedItems.get(0));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":103,"-":53}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.DisableCommandBoxRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.EnableCommandBoxRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.TextUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String DISABLED_STYLE_CLASS \u003d \"command-box-disabled\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StackPane commandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private HBox commandBoxItems;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final CommandBoxHints commandBoxHints;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        commandBox.widthProperty().addListener((ob, o, n) -\u003e resizeCommandTextField());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((ob, o, n) -\u003e resizeCommandTextField());"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        commandBoxHints \u003d new CommandBoxHints(logic, commandTextField);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        commandBoxItems.getChildren().add(commandBoxHints.getRoot());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        HBox.setHgrow(commandBoxHints.getRoot(), Priority.ALWAYS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((observable, oldInput, newInput) -\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                setStyleByValidityOfInput(newInput));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((observable, oldInput, newInput) -\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                commandBoxHints.updateHint(newInput));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!commandTextField.isEditable()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /** Resizes the command text field based on the width of its containing text. */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void resizeCommandTextField() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        double width \u003d TextUtil.computeTextWidth(commandTextField,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                commandTextField.getText(), 0.0D) + 3;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        double halfWindowWidth \u003d (getRoot().getParent() \u003d\u003d null)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                ? 250 : ((Region) getRoot().getParent()).getWidth() / 2;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        width \u003d Math.max(1, width);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        width \u003d (width \u003e halfWindowWidth) ? halfWindowWidth : width;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        commandTextField.setPrefWidth(width);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        commandTextField.setMinWidth(width);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!commandTextField.isEditable()) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"            if (CommandResult.isEmptyResult(commandResult)) {"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"                return;"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":176,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Sets the command box style to match validity of the input. (valid -\u003e default, invalid -\u003e failed)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void setStyleByValidityOfInput(String input) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        if (input.equals(\"\")) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        if (!logic.isValidCommand(input)) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        setStyleToDefault();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void handleDisableCommandBoxRequestEvent(DisableCommandBoxRequestEvent event) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        commandTextField.setEditable(false);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        commandTextField.setFocusTraversable(false);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        commandBoxHints.hide();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        commandBox.getStyleClass().add(DISABLED_STYLE_CLASS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private void handleEnableCommandBoxRequestEvent(EnableCommandBoxRequestEvent event) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        commandTextField.setEditable(true);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        commandTextField.setFocusTraversable(true);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        commandBoxHints.show();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        commandBox.getStyleClass().remove(DISABLED_STYLE_CLASS);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":226}},{"path":"src/main/java/seedu/address/ui/BookReviewsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import javafx.event.Event;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowBookReviewsRequestEvent;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":" * The panel showing book reviews."},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"public class BookReviewsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    protected static final String SEARCH_PAGE_URL \u003d \"https://www.goodreads.com/search?q\u003d%isbn#other_reviews\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final URL BOOK_REVIEWS_SCRIPT_FILE \u003d MainApp.class.getResource(\"/view/bookReviewsScript.js\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final URL CLEAR_PAGE_SCRIPT_FILE \u003d MainApp.class.getResource(\"/view/clearPageScript.js\");"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private static final String FXML \u003d \"BookReviewsPanel.fxml\";"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final String bookReviewsScript;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final String clearPageScript;"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public BookReviewsPanel() {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        getRoot().setVisible(false);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            bookReviewsScript \u003d Resources.toString(BOOK_REVIEWS_SCRIPT_FILE, Charsets.UTF_8);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            clearPageScript \u003d Resources.toString(CLEAR_PAGE_SCRIPT_FILE, Charsets.UTF_8);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Missing script file: \" + e.getMessage());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager webViewManager \u003d WebViewManager.getInstance();"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        webViewManager.onLoadSuccess(getRoot(), () -\u003e webViewManager.executeScript(bookReviewsScript));"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected void loadPageForBook(Book book) {"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        loadPage(SEARCH_PAGE_URL.replace(\"%isbn\", book.getIsbn().isbn));"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"    private void loadPage(String url) {"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager.getInstance().load(browserPlaceholder, url);"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    private void clearPage() {"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager.getInstance().executeScript(clearPageScript);"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    protected void hide() {"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setVisible(false);"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"    protected void show() {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setVisible(true);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    private void handleShowBookReviewsRequestEvent(ShowBookReviewsRequestEvent event) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        clearPage();"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        show();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        loadPageForBook(event.getBook());"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":58,"takuyakanbr":2,"-":24}},{"path":"src/main/java/seedu/address/ui/BookDescriptionView.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import com.sun.javafx.webkit.Accessor;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":" * The Region showing description of books."},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"public class BookDescriptionView extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private static final int HEIGHT_PAD \u003d 20;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private static final String FXML \u003d \"BookDescriptionView.fxml\";"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private WebView description;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private final WebEngine webEngine;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    public BookDescriptionView() {"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        webEngine \u003d description.getEngine();"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        // disable interaction with web view"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        description.setDisable(true);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        description.getEngine().getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"            if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"                adjustHeight();"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        });"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"     * Loads the description of {@code book}."},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    protected void loadContent(Book book) {"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        description.getEngine().loadContent(getHtml(book.getDescription().toString()));"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        // set transparent background for web view"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        Accessor.getPageFor(webEngine).setBackgroundColor(0);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    // Reused from http://tech.chitgoks.com/2014/09/13/how-to-fit-webview-height-based-on-its-content-in-java-fx-2-2/"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"     * Fit height of {@code WebView} according to height of content."},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"    private void adjustHeight() {"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"            Object result \u003d webEngine.executeScript(\"document.getElementById(\u0027description\u0027).offsetHeight\");"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"            if (result instanceof Integer) {"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"                Integer height \u003d (Integer) result;"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"                description.setPrefHeight(height + HEIGHT_PAD);"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    // Reused from http://tech.chitgoks.com/2014/09/13/how-to-fit-webview-height-based-on-its-content-in-java-fx-2-2/"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    private String getHtml(String content) {"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        return \"\u003chtml\u003e\u003cbody\u003e\u003cdiv id\u003d\\\"description\\\"\u003e\" + content + \"\u003c/div\u003e\u003c/body\u003e\u003c/html\u003e\";"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    protected void setStyleSheet(String styleSheet) {"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        description.getEngine().setUserStyleSheetLocation(getClass().getClassLoader()"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"                .getResource(styleSheet).toExternalForm());"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":72,"-":3}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.WindowSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/book_flat_32.png\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        WindowSettings windowSettings \u003d mainWindow.getCurrentGuiSetting();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (windowSettings.getWindowCoordinates().getX() \u003e\u003d 0 || windowSettings.getWindowCoordinates().getY() \u003e\u003d 0) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            prefs.updateLastUsedGuiSetting(windowSettings);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"-":122}},{"path":"src/main/java/seedu/address/ui/WelcomePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Random;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The Welcome Panel of the App."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class WelcomePanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"WelcomePanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final URL QUOTES_FILE \u003d MainApp.class.getResource(\"/text/quotes.txt\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Label qotd;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public WelcomePanel() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            qotd.setText(getRandomQuote());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Failed to load random quote.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"fishTT"},"content":"    //@@author fishTT"},{"lineNumber":38,"author":{"gitID":"fishTT"},"content":"    private String getRandomQuote() throws IOException {"},{"lineNumber":39,"author":{"gitID":"fishTT"},"content":"        List\u003cString\u003e lines \u003d Resources.readLines(QUOTES_FILE, Charsets.UTF_8);"},{"lineNumber":40,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":41,"author":{"gitID":"fishTT"},"content":"        // choose a random one from the list"},{"lineNumber":42,"author":{"gitID":"fishTT"},"content":"        Random r \u003d new Random();"},{"lineNumber":43,"author":{"gitID":"fishTT"},"content":"        String randomQuote \u003d lines.get(r.nextInt(lines.size()));"},{"lineNumber":44,"author":{"gitID":"fishTT"},"content":"        return \"\\\"\" + randomQuote + \"\\\"\";"},{"lineNumber":45,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":47,"author":{"gitID":"fishTT"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected void hide() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        getRoot().setVisible(false);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void show() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        getRoot().setVisible(true);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fishTT":11,"qiu-siqi":2,"-":43}},{"path":"src/test/java/guitests/guihandles/BookDetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" * Provides a handle for the {@code BookDetailsPanel} of the UI."},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"public class BookDetailsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    protected static final String BOOK_DETAILS_PANE_ID \u003d \"#bookDetailsPane\";"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    private static final String TITLE_FIELD_ID \u003d \"#title\";"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    private static final String ISBN_FIELD_ID \u003d \"#isbn\";"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    private static final String PUBLISHER_FIELD_ID \u003d \"#publisher\";"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    private static final String PUBLICATION_DATE_FIELD_ID \u003d \"#publicationDate\";"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    private static final String AUTHORS_FIELD_ID \u003d \"#authors\";"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private static final String CATEGORIES_FIELD_ID \u003d \"#categories\";"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    private final Label titleLabel;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private final Label isbnLabel;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    private final Label publisherLabel;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private final Label publicationDateLabel;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private final BookDescriptionViewHandle bookDescriptionViewHandle;"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private List\u003cLabel\u003e authorsLabel;"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private List\u003cLabel\u003e categoriesLabel;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private String lastRememberedIsbn;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    private boolean lastRememberedVisibility;"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public BookDetailsPanelHandle(Node bookDetailsPanelNode) {"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        super(bookDetailsPanelNode);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        this.titleLabel \u003d getChildNode(TITLE_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        this.isbnLabel \u003d getChildNode(ISBN_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        this.publisherLabel \u003d getChildNode(PUBLISHER_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        this.publicationDateLabel \u003d getChildNode(PUBLICATION_DATE_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        this.bookDescriptionViewHandle \u003d"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"                new BookDescriptionViewHandle(getChildNode(BookDescriptionViewHandle.BOOK_DESCRIPTION_VIEW_ID));"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        updateAuthorsLabel();"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        updateCategoriesLabel();"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    public String getIsbn() {"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        return isbnLabel.getText();"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    public String getTitle() {"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        return titleLabel.getText();"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    public String getPublisher() {"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        return publisherLabel.getText();"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    public String getPublicationDate() {"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        return publicationDateLabel.getText();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    public String getDescription() {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        return bookDescriptionViewHandle.getContent();"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    public List\u003cString\u003e getAuthors() {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        updateAuthorsLabel();"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        return authorsLabel"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    public List\u003cString\u003e getCategories() {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        updateCategoriesLabel();"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        return categoriesLabel"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    public boolean isVisible() {"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        return getRootNode().isVisible();"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"    public void rememberVisibility() {"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        lastRememberedVisibility \u003d isVisible();"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    public boolean isVisibilityChanged() {"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        return !lastRememberedVisibility \u003d\u003d isVisible();"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    public void rememberIsbn() {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        lastRememberedIsbn \u003d getIsbn();"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    public boolean isIsbnChanged() {"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        return !lastRememberedIsbn.equals(getIsbn());"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"    /** Update the list of authors labels. */"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    private void updateAuthorsLabel() {"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        Region authorsContainer \u003d getChildNode(AUTHORS_FIELD_ID);"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        this.authorsLabel \u003d authorsContainer"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"    /** Update the list of categories labels. */"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"    private void updateCategoriesLabel() {"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        Region categoriesContainer \u003d getChildNode(CATEGORIES_FIELD_ID);"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        this.categoriesLabel \u003d categoriesContainer"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":32,"takuyakanbr":64,"-":27}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.WindowSettings;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.BookListSelectionChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ClearMainContentRequestEvent;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.DeselectBookRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ReselectBookRequestEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowAliasListRequestEvent;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowBookReviewsRequestEvent;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowLibraryResultRequestEvent;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private WelcomePanel welcomePanel;"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    private BookDetailsPanel bookDetailsPanel;"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    private BookReviewsPanel bookReviewsPanel;"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    private BookInLibraryPanel bookInLibraryPanel;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AliasListPanel aliasListPanel;"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    private BookListPanel bookListPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Scene scene;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    private StackPane mainContentPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    private StackPane bookListPanelPlaceholder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        updateStylesheet(prefs);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":115,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":121,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        welcomePanel \u003d new WelcomePanel();"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"        bookDetailsPanel \u003d new BookDetailsPanel();"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"        bookReviewsPanel \u003d new BookReviewsPanel();"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"        bookInLibraryPanel \u003d new BookInLibraryPanel();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        aliasListPanel \u003d new AliasListPanel(logic.getDisplayAliasList());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        mainContentPlaceholder.getChildren().add(welcomePanel.getRoot());"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"        mainContentPlaceholder.getChildren().add(bookDetailsPanel.getRoot());"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"        mainContentPlaceholder.getChildren().add(bookReviewsPanel.getRoot());"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        mainContentPlaceholder.getChildren().add(bookInLibraryPanel.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        mainContentPlaceholder.getChildren().add(aliasListPanel.getRoot());"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        bookReviewsPanel.hide();"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"        bookInLibraryPanel.hide();"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"        bookDetailsPanel.setStyleSheet(prefs.getAppTheme().getCssFile());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"        bookListPanel \u003d new BookListPanel(logic.getActiveList());"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getBookShelfFilePath());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getWindowSettings().getWindowHeight());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getWindowSettings().getWindowWidth());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        if (prefs.getWindowSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getWindowSettings().getWindowCoordinates().getX());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getWindowSettings().getWindowCoordinates().getY());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /** Updates the stylesheet used based on user preferences. */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void updateStylesheet(UserPrefs prefs) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        scene.getStylesheets().setAll(prefs.getAppTheme().getCssFile());"},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":"        if (bookDetailsPanel !\u003d null) {"},{"lineNumber":189,"author":{"gitID":"qiu-siqi"},"content":"            bookDetailsPanel.setStyleSheet(prefs.getAppTheme().getCssFile());"},{"lineNumber":190,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    WindowSettings getCurrentGuiSetting() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return new WindowSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        if (helpWindow \u003d\u003d null) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            helpWindow \u003d new HelpWindow();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"qiu-siqi"},"content":"     * Hides all panels in the main content."},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":"    private void hideMainContent() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        welcomePanel.hide();"},{"lineNumber":221,"author":{"gitID":"qiu-siqi"},"content":"        bookDetailsPanel.hide();"},{"lineNumber":222,"author":{"gitID":"qiu-siqi"},"content":"        bookReviewsPanel.hide();"},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":"        bookInLibraryPanel.hide();"},{"lineNumber":224,"author":{"gitID":"qiu-siqi"},"content":"        aliasListPanel.hide();"},{"lineNumber":225,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":227,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"qiu-siqi"},"content":"     * Clears book list selection and hides all panels in the main content."},{"lineNumber":229,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"qiu-siqi"},"content":"    private void clearSelectionAndHideMainContent() {"},{"lineNumber":231,"author":{"gitID":"qiu-siqi"},"content":"        bookListPanel.clearSelection();"},{"lineNumber":232,"author":{"gitID":"qiu-siqi"},"content":"        hideMainContent();"},{"lineNumber":233,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":235,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"qiu-siqi"},"content":"     * Clears book list selection, hides all panels in the main content and shows the welcome panel."},{"lineNumber":237,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"qiu-siqi"},"content":"    private void showWelcomePanel() {"},{"lineNumber":239,"author":{"gitID":"qiu-siqi"},"content":"        clearSelectionAndHideMainContent();"},{"lineNumber":240,"author":{"gitID":"qiu-siqi"},"content":"        welcomePanel.show();"},{"lineNumber":241,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void handleChangeThemeRequestEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        prefs.setAppTheme(event.newTheme);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        updateStylesheet(prefs);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":259,"author":{"gitID":"takuyakanbr"},"content":"    private void handleShowHelpRequestEvent(ShowHelpRequestEvent event) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":264,"author":{"gitID":"takuyakanbr"},"content":"    @Subscribe"},{"lineNumber":265,"author":{"gitID":"qiu-siqi"},"content":"    private void handleActiveListChangedEvent(ActiveListChangedEvent event) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":267,"author":{"gitID":"qiu-siqi"},"content":"        showWelcomePanel();"},{"lineNumber":268,"author":{"gitID":"qiu-siqi"},"content":"        bookListPanel.setBookList(logic.getActiveList());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        bookListPanel.scrollToTop();"},{"lineNumber":270,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":272,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":273,"author":{"gitID":"qiu-siqi"},"content":"    private void handleClearMainContentRequestEvent(ClearMainContentRequestEvent event) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":275,"author":{"gitID":"qiu-siqi"},"content":"        showWelcomePanel();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"takuyakanbr"},"content":"    @Subscribe"},{"lineNumber":279,"author":{"gitID":"takuyakanbr"},"content":"    private void handleBookListSelectionChangedEvent(BookListSelectionChangedEvent event) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":281,"author":{"gitID":"qiu-siqi"},"content":"        hideMainContent();"},{"lineNumber":282,"author":{"gitID":"qiu-siqi"},"content":"        bookDetailsPanel.show();"},{"lineNumber":283,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":285,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":286,"author":{"gitID":"qiu-siqi"},"content":"    private void handleShowBookReviewsRequestEvent(ShowBookReviewsRequestEvent event) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":288,"author":{"gitID":"qiu-siqi"},"content":"        clearSelectionAndHideMainContent();"},{"lineNumber":289,"author":{"gitID":"qiu-siqi"},"content":"        bookReviewsPanel.show();"},{"lineNumber":290,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":292,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":293,"author":{"gitID":"qiu-siqi"},"content":"    private void handleShowBookInLibraryRequestEvent(ShowLibraryResultRequestEvent event) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":295,"author":{"gitID":"qiu-siqi"},"content":"        clearSelectionAndHideMainContent();"},{"lineNumber":296,"author":{"gitID":"qiu-siqi"},"content":"        bookInLibraryPanel.show();"},{"lineNumber":297,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    private void handleShowAliasListRequestEvent(ShowAliasListRequestEvent event) {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":302,"author":{"gitID":"qiu-siqi"},"content":"        clearSelectionAndHideMainContent();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        aliasListPanel.show();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":306,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":307,"author":{"gitID":"qiu-siqi"},"content":"    private void handleDeselectBookRequestEvent(DeselectBookRequestEvent event) {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":309,"author":{"gitID":"qiu-siqi"},"content":"        if (bookListPanel.deselectBook()) {"},{"lineNumber":310,"author":{"gitID":"qiu-siqi"},"content":"            hideMainContent();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            welcomePanel.show();"},{"lineNumber":312,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":315,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":316,"author":{"gitID":"qiu-siqi"},"content":"    private void handleReselectBookRequestEvent(ReselectBookRequestEvent event) {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":318,"author":{"gitID":"qiu-siqi"},"content":"        if (bookListPanel.reselectBook()) {"},{"lineNumber":319,"author":{"gitID":"qiu-siqi"},"content":"            hideMainContent();"},{"lineNumber":320,"author":{"gitID":"qiu-siqi"},"content":"            bookDetailsPanel.show();"},{"lineNumber":321,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":87,"takuyakanbr":12,"-":224}},{"path":"src/main/java/seedu/address/ui/BookCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":" * An UI component that displays information of a {@code Book}."},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"public class BookCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final int DISPLAYED_CATEGORY_LIMIT \u003d 4;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    private static final String FXML \u003d \"BookListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_LABEL_STYLE_CLASS \u003d \"label\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    public final Book book;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private Label title;"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private Label id;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    private FlowPane authors;"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    private FlowPane categories;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label status;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label priority;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label rating;"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    public BookCard(Book book, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        this.book \u003d book;"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        title.setText(book.getTitle().title);"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        book.getAuthors().forEach(author -\u003e authors.getChildren()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .add(new Label(author.getDisplayText())));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        book.getCategories().stream().limit(DISPLAYED_CATEGORY_LIMIT).forEach(category -\u003e categories.getChildren()"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .add(new Label(category.getDisplayText())));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        status.setText(book.getStatus().getDisplayText());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        status.getStyleClass().setAll(DEFAULT_LABEL_STYLE_CLASS, book.getStatus().getStyleClass());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        priority.setText(book.getPriority().getDisplayText());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        priority.getStyleClass().setAll(DEFAULT_LABEL_STYLE_CLASS, book.getPriority().getStyleClass());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        rating.setText(book.getRating().getDisplayText());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        rating.getStyleClass().setAll(DEFAULT_LABEL_STYLE_CLASS, book.getRating().getStyleClass());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        if (!(other instanceof BookCard)) {"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"        // state check"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        BookCard card \u003d (BookCard) other;"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 book.equals(card.book);"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":36,"-":41}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.model.BookShelfChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    public void handleBookShelfChangedEvent(BookShelfChangedEvent bsce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(bsce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"-":78}},{"path":"src/main/java/seedu/address/ui/WebViewManager.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.Pane;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":" * Exposes required functionalities of {@link WebView}."},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":" *"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":" * There can only be one instance of {@code WebViewManager}, allowing the internal limiting"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":" * of number of WebViews used."},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"public class WebViewManager {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private static WebViewManager webViewManager;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    private WebView browser;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private WebEngine engine;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private List\u003cChangeListener\u003c? super Number\u003e\u003e loadProgressListeners;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private List\u003cChangeListener\u003c? super Worker.State\u003e\u003e loadSuccessListeners;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    private WebViewManager() {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        browser \u003d new WebView();"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        engine \u003d browser.getEngine();"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        loadProgressListeners \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        loadSuccessListeners \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the instance of {@code WebViewManager}."},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    public static WebViewManager getInstance() {"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        if (webViewManager \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"            webViewManager \u003d new WebViewManager();"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"        return webViewManager;"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"     * Loads {@code WebView} with the given content and shows it in {@code container}."},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"     * @param container Parent to contain the loaded {@code WebView}."},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"     * @param toLoad content to load in {@code WebView}."},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    protected void load(Pane container, String toLoad) {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        addBrowserToPane(container);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        loadBasedOnContent(toLoad);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"     * Adds {@code WebView} as a child of {@code container}, if it is not already."},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"     * @param container Parent to contain the {@code WebView}."},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    private void addBrowserToPane(Pane container) {"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        if (!container.getChildren().contains(browser)) {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"            container.getChildren().add(browser);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"     * Loads {@code WebView} with content depending on type of {@code toLoad}."},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"     * @param toLoad content to load in {@code WebView}."},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"    private void loadBasedOnContent(String toLoad) {"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        if (StringUtil.isValidUrl(toLoad)) {"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"            engine.load(toLoad);"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        } else {"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"            engine.loadContent(toLoad);"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"     * Executes a script in the context of the current page in the {@code WebView}."},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"     * @param scriptPath Path of the script to be called."},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"    protected void executeScript(String scriptPath) {"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"        engine.executeScript(scriptPath);"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"     * Specifies an action to be performed upon successfully loading any page, given that"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"     * {@code root} is visible."},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"     * This method should only be called once for each action, during initialization"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"     * of a class that will use a {@code WebView}."},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"     * @param root Node which visibility determines whether to perform this action."},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"     * @param runnable Action to perform upon successfully loading a page."},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"    protected void onLoadSuccess(Node root, Runnable runnable) {"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        ChangeListener\u003c? super Worker.State\u003e newListener \u003d (obs, oldState, newState) -\u003e {"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"            if (root.isVisible() \u0026\u0026 newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"                runnable.run();"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        };"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        engine.getLoadWorker().stateProperty().addListener(newListener);"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        loadSuccessListeners.add(newListener);"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"     * Specifies an action to be performed if the loading of a page exceeds a given percentage, given that"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"     * {@code root} is visible. This action is performed multiple times until loading is completed."},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     * This method should only be called once for each action, during initialization"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"     * of a class that will use a {@code WebView}."},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"     * @param root Node which visibility determines whether to perform this action."},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"     * @param progress Percentage of the page loaded, from 0 to 1."},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"     * @param runnable Action to perform upon successfully loading a page."},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    protected void onLoadProgress(Node root, double progress, Runnable runnable) {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        ChangeListener\u003c? super Number\u003e newListener \u003d (obs, oldNum, newNum) -\u003e {"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"            if (root.isVisible() \u0026\u0026 engine.getLoadWorker().getProgress() \u003e progress) {"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"                runnable.run();"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        };"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        engine.getLoadWorker().progressProperty().addListener(newListener);"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"        loadProgressListeners.add(newListener);"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the {@code WebView}, for testing purposes. It is not recommended to interact directly with"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"     * the {@code WebView} contained in this class."},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"    public WebView getWebView() {"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        return browser;"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"     * Free up unneeded resources."},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"    public void cleanUp() {"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        webViewManager \u003d null;"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"            loadProgressListeners.forEach(engine.getLoadWorker().progressProperty()::removeListener);"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"            loadSuccessListeners.forEach(engine.getLoadWorker().stateProperty()::removeListener);"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        });"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":144,"-":4}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_CORRECTED_COMMAND \u003d \"Did you mean: %s?\\nPress Enter to accept the suggestion.\";"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_APP_LOCKED \u003d \"The app is locked, please unlock it first!\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_STATUS \u003d \"Invalid status entered. \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"Allowed values are: READ, R, UNREAD, U, READING, and RD.\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Invalid priority entered. \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Allowed values are: NONE, N, LOW, L, MEDIUM, M, HIGH, and H.\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_RATING \u003d \"Invalid rating entered. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Please enter a valid integer between -1 and 5 (both inclusive).\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_SORT_BY \u003d \"Invalid sorting mode entered. \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"Allowed values are: TITLE, T, STATUS, S, PRIORITY, P, RATING, and R. \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Append a \u0027D\u0027 to sort in descending order.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":3,"-":20}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    private String appTitle \u003d \"Bibliotek\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":1,"-":69}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    private static final String LOG_FILE \u003d \"bibliotek.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"-":129}},{"path":"src/main/java/seedu/address/ui/BookListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.BookListSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.JumpToBookListIndexRequestEvent;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":" * Panel containing the list of books."},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"public class BookListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    private static final String FXML \u003d \"BookListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private ListView\u003cBook\u003e bookListView;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private Book deselectedBook;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        setConnections(bookList);"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"     * Set the currently displayed book list to {@code bookList}."},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    protected void setBookList(ObservableList\u003cBook\u003e bookList) {"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        bookListView.setItems(bookList);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    private void setConnections(ObservableList\u003cBook\u003e bookList) {"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        setBookList(bookList);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        bookListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"                        logger.fine(\"Selection in book list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"                        raise(new BookListSelectionChangedEvent(newValue));"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"                    }"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"                });"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected void clearSelection() {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        bookListView.getSelectionModel().clearSelection();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"     * Clears selection and remembers the previous selection, if any."},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"     * @return whether there was any selected book to clear."},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    protected boolean deselectBook() {"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        deselectedBook \u003d bookListView.getSelectionModel().getSelectedItem();"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        clearSelection();"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        return deselectedBook !\u003d null;"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    protected void scrollToTop() {"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        bookListView.scrollTo(0);"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"     * Scrolls to the {@code Book} at the {@code index} and selects it."},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    private void scrollTo(int index) {"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        bookListView.scrollTo(index);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        bookListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"     * Reselects the book that was previously deselected by {@code deselectBook()}, if any."},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"     * The book also needs to be in the display book list."},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"     * @return whether the previous book selection is reselected."},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    protected boolean reselectBook() {"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        if (deselectedBook \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        int index \u003d bookListView.getItems().indexOf(deselectedBook);"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        deselectedBook \u003d null;"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        scrollTo(index);"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        return true;"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"    @Subscribe"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"    private void handleJumpToBookListRequestEvent(JumpToBookListIndexRequestEvent event) {"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Book}."},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    class BookListViewCell extends ListCell\u003cBook\u003e {"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        protected void updateItem(Book book, boolean empty) {"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"            super.updateItem(book, empty);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"            if (empty || book \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"                setGraphic(null);"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"                setText(null);"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"            } else {"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":103,"takuyakanbr":9,"-":18}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import java.net.URLEncoder;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Base64;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Random;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    private static final int RANDOM_BYTE_LENGTH \u003d 9;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"     * Returns the URL encoded form of the string {@code s}, or any empty string"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"     * if UTF-8 encoding is not supported."},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    public static String urlEncode(String s) {"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(s);"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"            return URLEncoder.encode(s, \"UTF-8\");"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        } catch (UnsupportedEncodingException e) {"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"            return \"\";"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    // Reused from http://www.extensionmethod.net/1555/csharp/string/isvalidurl"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"     * Checks whether the string {@code s} denotes a valid URL."},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"    public static boolean isValidUrl(String s) {"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(s);"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        return s.matches(\"http(s)?://([\\\\w-]+\\\\.)+[\\\\w-]+(/[\\\\w- ./?%\u0026\u003d,\u0027#]*)?\");"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"     * Replaces the {@code index} index of {@code target} with {@code replacement}."},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"     * @throws IndexOutOfBoundsException if {@code index} is invalid."},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"    public static String replace(String target, char replacement, int index) {"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        return target.substring(0, index) + replacement + target.substring(index + 1, target.length());"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"     * Adds {@code toAdd} behind the {@code index} index of {@code target}."},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"     * @throws IndexOutOfBoundsException if {@code index} is invalid."},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    public static String addAfter(String target, char toAdd, int index) {"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"        return target.substring(0, index + 1) + toAdd + target.substring(index + 1, target.length());"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"     * Removes the character at {@code index} index of {@code target}."},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"     * @throws IndexOutOfBoundsException if {@code index} is invalid."},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    public static String removeAt(String target, int index) {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        return target.substring(0, index) + target.substring(index + 1, target.length());"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns a string with the leading whitespace removed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String leftTrim(String s) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        int index \u003d 0;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        while (index \u003c s.length() \u0026\u0026 s.charAt(index) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            ++index;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return s.substring(index);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"    //@@author takuyakanbr"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"     * Returns a random 8 character string to be used as a prefix to a filename."},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"    public static String generateRandomPrefix() {"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"        byte[] randomBytes \u003d new byte[RANDOM_BYTE_LENGTH];"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        new Random().nextBytes(randomBytes);"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        byte[] encodedBytes \u003d Base64.getEncoder().encode(randomBytes);"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        return new String(encodedBytes).replace(\"/\", \"-\");"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":36,"takuyakanbr":26,"-":83}},{"path":"src/main/java/seedu/address/commons/core/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.InvalidThemeException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":" * Represents an application theme."},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"public enum Theme {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    WHITE(\"view/WhiteTheme.css\"),"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    LIGHT(\"view/LightTheme.css\"),"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    DARK(\"view/DarkTheme.css\");"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    public static final Theme DEFAULT_THEME \u003d WHITE;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    private final String cssFile;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    Theme(String cssFile) {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        this.cssFile \u003d cssFile;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public String getThemeName() {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        return name().toLowerCase();"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    public String getCssFile() {"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        return cssFile;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        return super.toString();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"     * Returns the theme with a theme name that matches the specified {@code themeName}."},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"     * @throws InvalidThemeException if no matching theme can be found."},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public static Theme getThemeByName(String themeName) throws InvalidThemeException {"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(themeName);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        for (Theme theme : values()) {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"            if (themeName.equalsIgnoreCase(theme.getThemeName())) {"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"                return theme;"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        throw new InvalidThemeException(\"Invalid theme name: \" + themeName);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":48,"-":6}},{"path":"src/main/java/seedu/address/commons/core/WindowSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the window settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class WindowSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    private static final double DEFAULT_WIDTH \u003d 800;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Double windowWidth;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final Double windowHeight;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public WindowSettings() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public WindowSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!(other instanceof WindowSettings)) { //this handles null as well."},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        WindowSettings o \u003d (WindowSettings) other;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \").append(windowWidth);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nHeight : \").append(windowHeight);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPosition : \").append(windowCoordinates);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":2,"-":70}},{"path":"src/main/java/seedu/address/commons/util/CollectionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CollectionUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns true if every element in a collection are unique by {@link Object#equals(Object)}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        for (Object item : items) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            if (itemAlreadyExists) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns a new {@link List} containing all the specified items."},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    @SafeVarargs"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e List\u003cT\u003e toList(T... items) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ArrayList\u003cT\u003e set \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        Collections.addAll(set, items);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        return set;"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":8,"-":56}},{"path":"src/main/java/seedu/address/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import java.nio.file.StandardCopyOption;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Copies the content of {@code source} into {@code dest}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"    public static void copyFile(File source, File dest) throws IOException {"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        Files.copy(source.toPath(), dest.toPath(), StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":96}},{"path":"src/main/java/seedu/address/commons/util/TextUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.text.Text;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Helper functions for handling text in JavaFX TextFields."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"fishTT"},"content":"//@@author fishTT"},{"lineNumber":10,"author":{"gitID":"fishTT"},"content":"public class TextUtil {"},{"lineNumber":11,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":12,"author":{"gitID":"fishTT"},"content":"    private static final Text HELPER;"},{"lineNumber":13,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":14,"author":{"gitID":"fishTT"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"fishTT"},"content":"     * Return\u0027s Text Width based on {@code TextField textField, String text}."},{"lineNumber":16,"author":{"gitID":"fishTT"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"fishTT"},"content":"    public static double computeTextWidth(TextField textField, String text, double maxWidth) {"},{"lineNumber":18,"author":{"gitID":"fishTT"},"content":"        HELPER.setText(text);"},{"lineNumber":19,"author":{"gitID":"fishTT"},"content":"        HELPER.setFont(textField.getFont());"},{"lineNumber":20,"author":{"gitID":"fishTT"},"content":"        HELPER.setStyle(textField.getStyle());"},{"lineNumber":21,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":22,"author":{"gitID":"fishTT"},"content":"        HELPER.setWrappingWidth(0.0D);"},{"lineNumber":23,"author":{"gitID":"fishTT"},"content":"        HELPER.setLineSpacing(0.0D);"},{"lineNumber":24,"author":{"gitID":"fishTT"},"content":"        double d \u003d Math.min(HELPER.prefWidth(-1.0D), maxWidth);"},{"lineNumber":25,"author":{"gitID":"fishTT"},"content":"        HELPER.setWrappingWidth((int) Math.ceil(d));"},{"lineNumber":26,"author":{"gitID":"fishTT"},"content":"        return Math.ceil(HELPER.getLayoutBounds().getWidth());"},{"lineNumber":27,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":29,"author":{"gitID":"fishTT"},"content":"    static {"},{"lineNumber":30,"author":{"gitID":"fishTT"},"content":"        HELPER \u003d new Text();"},{"lineNumber":31,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"fishTT"},"content":"}"}],"authorContributionMap":{"fishTT":24,"-":8}},{"path":"src/main/java/seedu/address/commons/events/ui/BookListSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" * Represents a selection change in the Book List Panel"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class BookListSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    private final Book newSelection;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    public BookListSelectionChangedEvent(Book newSelection) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public Book getNewSelection() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        return newSelection;"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":13,"takuyakanbr":1,"-":11}},{"path":"src/main/java/seedu/address/ui/BookDetailsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.BookListSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":" * The Book Details Panel of the App."},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"public class BookDetailsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private static final String FXML \u003d \"BookDetailsPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_LABEL_STYLE_CLASS \u003d \"label\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String URL_BOOK_FRONT_COVER \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            \"https://books.google.com/books/content?id\u003d%s\u0026printsec\u003dfrontcover\u0026img\u003d1\u0026zoom\u003d1\";"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private BookDescriptionView bookDescriptionView;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ImageView frontCover;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    private Label title;"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    private Label isbn;"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    private FlowPane authors;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    private FlowPane categories;"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    private Label publisher;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    private Label publicationDate;"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Label status;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Label priority;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private Label rating;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"    private StackPane descriptionPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    public BookDetailsPanel() {"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        getRoot().setVisible(false);"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        bookDescriptionView \u003d new BookDescriptionView();"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        descriptionPlaceholder.getChildren().add(bookDescriptionView.getRoot());"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    private void scrollToTop() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        scrollPane.setVvalue(0);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    /** Update this panel to show details about the specified book. */"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    private void showBook(Book book) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        frontCover.setImage(new Image(String.format(URL_BOOK_FRONT_COVER, book.getGid().gid), true));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        title.setText(book.getTitle().toString());"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        isbn.setText(book.getIsbn().toString());"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        publisher.setText(book.getPublisher().toString());"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        publicationDate.setText(book.getPublicationDate().toString());"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        bookDescriptionView.loadContent(book);"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        status.setText(book.getStatus().getDisplayText());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        status.getStyleClass().setAll(DEFAULT_LABEL_STYLE_CLASS, book.getStatus().getStyleClass());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        priority.setText(book.getPriority().getDisplayText());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        priority.getStyleClass().setAll(DEFAULT_LABEL_STYLE_CLASS, book.getPriority().getStyleClass());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        rating.setText(book.getRating().getDisplayText());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        rating.getStyleClass().setAll(DEFAULT_LABEL_STYLE_CLASS, book.getRating().getStyleClass());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        authors.getChildren().clear();"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        categories.getChildren().clear();"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        book.getAuthors().forEach(author -\u003e authors.getChildren()"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .add(new Label(author.getDisplayText())));"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        book.getCategories().forEach(category -\u003e categories.getChildren()"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .add(new Label(category.getDisplayText())));"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        scrollToTop();"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        getRoot().setVisible(true);"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"    protected void setStyleSheet(String styleSheet) {"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        bookDescriptionView.setStyleSheet(styleSheet);"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"    protected void hide() {"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        getRoot().setVisible(false);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    protected void show() {"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        getRoot().setVisible(true);"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"    @Subscribe"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    private void handleBookListSelectionChangedEvent(BookListSelectionChangedEvent event) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"        showBook(event.getNewSelection());"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":25,"takuyakanbr":48,"-":43}},{"path":"src/main/java/seedu/address/commons/util/CommandUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * Utility methods used by Commands."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class CommandUtil {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CommandException} if there isn\u0027t a book displayed at {@code targetIndex}."},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    public static void checkValidIndex(Model model, Index targetIndex) throws CommandException {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, targetIndex);"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d model.getActiveList().size()) {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"     * Precondition: {@code targetIndex} is a valid index. @see CommandUtil#checkValidIndex(Model, Index). \u003cbr\u003e"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the book at the given index in the shown list."},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    public static Book getBook(Model model, Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        assert targetIndex.getZeroBased() \u003c model.getActiveList().size();"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        return model.getActiveList().get(targetIndex.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":28,"takuyakanbr":1,"-":7}},{"path":"src/main/java/seedu/address/ui/BookInLibraryPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import javafx.event.Event;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowLibraryResultRequestEvent;"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":" * The region showing availability of the book in NLB."},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"public class BookInLibraryPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private static final String FXML \u003d \"BookInLibraryPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private static final URL NLB_RESULT_SCRIPT_FILE \u003d MainApp.class.getResource(\"/view/nlbResultScript.js\");"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private static final URL CLEAR_PAGE_SCRIPT_FILE \u003d MainApp.class.getResource(\"/view/clearPageScript.js\");"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private final String nlbResultScript;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    private final String clearPageScript;"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public BookInLibraryPanel() {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setVisible(false);"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"            nlbResultScript \u003d Resources.toString(NLB_RESULT_SCRIPT_FILE, Charsets.UTF_8);"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"            clearPageScript \u003d Resources.toString(CLEAR_PAGE_SCRIPT_FILE, Charsets.UTF_8);"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"            throw new AssertionError(\"Missing script file: \" + e.getMessage());"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager webViewManager \u003d WebViewManager.getInstance();"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        webViewManager.onLoadProgress(getRoot(), 0.59, () -\u003e {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"            webViewManager.executeScript(nlbResultScript);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"            getRoot().setDisable(false);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        });"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    private void loadPageWithResult(String result) {"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager.getInstance().load(browserPlaceholder, result);"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    private void clearPage() {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        WebViewManager.getInstance().executeScript(clearPageScript);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"    protected void hide() {"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setVisible(false);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    protected void show() {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        getRoot().setVisible(true);"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"    private void handleShowBookInLibraryRequestEvent(ShowLibraryResultRequestEvent event) {"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"            clearPage();"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"            // Prevent browser from getting focus"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"            getRoot().setDisable(true);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"            show();"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"            loadPageWithResult(event.getResult());"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":80,"-":7}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowLibraryResultRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * An event requesting to view the result showing the availability of some book in the library."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"public class ShowLibraryResultRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"    private final String result;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"    public ShowLibraryResultRequestEvent(String result) {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"        this.result \u003d result;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    public String getResult() {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        return result;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":13,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowBookReviewsRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" * An event requesting to view the reviews of a book."},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"public class ShowBookReviewsRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    private final Book book;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    public ShowBookReviewsRequestEvent(Book book) {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"        this.book \u003d book;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public Book getBook() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        return book;"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":16,"-":9}},{"path":"src/main/java/seedu/address/commons/events/ui/ReselectBookRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Indicates a request to reselect the book that was previously deselected using {@link DeselectBookRequestEvent}."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"public class ReselectBookRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToBookListIndexRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" * Indicates a request to jump to a particular index in the list of books."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class JumpToBookListIndexRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    public JumpToBookListIndexRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":3,"-":19}},{"path":"src/main/java/seedu/address/commons/events/ui/DeselectBookRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Indicates a request to deselect the current book selection."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"public class DeselectBookRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/ClearMainContentRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Indicates a request to clear the main content panel."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"public class ClearMainContentRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":10}},{"path":"src/main/java/seedu/address/commons/events/ui/ActiveListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Represents a change in the active list type."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"public class ActiveListChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":2,"-":10}},{"path":"src/main/java/seedu/address/commons/events/model/BookShelfChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"/** Indicates the BookShelf in the model has changed */"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"public class BookShelfChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"    public final ReadOnlyBookShelf data;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"    public BookShelfChangedEvent(ReadOnlyBookShelf data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"        return \"number of books \" + data.size();"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":10,"-":8}},{"path":"src/main/java/seedu/address/network/Network.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" * The API of the Network component."},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public interface Network {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     * Searches for books on Google Books that matches a set of parameters."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     * @param parameters search parameters."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"     * @return a CompletableFuture that resolves to a ReadOnlyBookShelf."},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    CompletableFuture\u003cReadOnlyBookShelf\u003e searchBooks(String parameters);"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"     * Retrieves the details of a single book on Google Books."},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"     * @param bookId the ID of the book on Google Books."},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"     * @return a CompletableFuture that resolves to a Book."},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    CompletableFuture\u003cBook\u003e getBookDetails(String bookId);"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"     * Searches for a book in the library."},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"     * @param book book to search for."},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"     * @return CompletableFuture that resolves to a String with the search results."},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    CompletableFuture\u003cString\u003e searchLibraryForBook(Book book);"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"     * Stops the Network component."},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    void stop();"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":39,"-":2}},{"path":"src/main/java/seedu/address/commons/events/model/PasswordChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":3,"author":{"gitID":"592363789"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"592363789"},"content":""},{"lineNumber":5,"author":{"gitID":"592363789"},"content":"/** Indicates a change in the password */"},{"lineNumber":6,"author":{"gitID":"592363789"},"content":"public class PasswordChangedEvent extends BaseEvent {"},{"lineNumber":7,"author":{"gitID":"592363789"},"content":""},{"lineNumber":8,"author":{"gitID":"592363789"},"content":"    public final String oldPassword;"},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"    public final String newPassword;"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":""},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"    public PasswordChangedEvent(String oldPassword, String newPassword) {"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":"        this.oldPassword \u003d oldPassword;"},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"        this.newPassword \u003d newPassword;"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"    //@@author"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"592363789":14,"-":6}},{"path":"src/main/java/seedu/address/network/library/NlbResultHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.network.library;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":" * Provides utilities to manage result from NLB catalogue search."},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"public class NlbResultHelper {"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    protected static final String URL_FULL_DISPLAY \u003d \"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/\""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"            + \"ENQ/EXPNOS/BIBENQ?ENTRY\u003d%s\u0026ENTRY_NAME\u003dBS\u0026ENTRY_TYPE\u003dK\u0026GQ\u003d%s\u0026SORTS\u003dSQL_REL_TITLE\";"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    protected static final String NO_RESULTS_FOUND \u003d \"No results found.\";"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    private static final String FULL_DISPLAY_STRING \u003d \"\u003cspan\u003eFull Display\u003c/span\u003e\";"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    private static final String SEARCH_STRING \u003d \"/cgi-bin/spydus.exe/FULL/EXPNOS/BIBENQ/\";"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    private static final String URL_PREFIX \u003d \"https://catalogue.nlb.gov.sg\";"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains a URL linking to the display of a single book, if search only found that single book."},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the URL of the top search result, if {@code result} contains a list of search results."},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a custom String if the list is empty."},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"     * @param result result from querying NLB catalogue."},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"     * @param book book that was queried for."},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"     * @return String containing the single book page as HTML content."},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    protected static String getUrl(String result, Book book) {"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(result, book);"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        if (!isFullDisplay(result)) {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"            return getTopResultUrl(result);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        String searchTerms \u003d book.getTitle().toString() + \" \" + book.getAuthorsAsString();"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        return String.format(URL_FULL_DISPLAY, searchTerms, searchTerms);"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"     * Checks whether {@code result} is the full display result page of a single book."},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    private static boolean isFullDisplay(String result) {"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        return result.contains(FULL_DISPLAY_STRING);"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"     * Assumes: {@code result} is not the full display result page."},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the URL of the top search result, if any."},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    private static String getTopResultUrl(String result) {"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        assert !isFullDisplay(result);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        int index \u003d result.indexOf(SEARCH_STRING);"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"            return NO_RESULTS_FOUND;"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        return getUrlFromIndex(result, index);"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"     * Assumes: {@code index} is valid."},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the URL which is given starting at {@code index} in {@code result}."},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    private static String getUrlFromIndex(String result, int index) {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        int len \u003d result.length();"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        assert index \u003e\u003d 0;"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        assert index \u003c len;"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        builder.append(URL_PREFIX);"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        for (int i \u003d index;; i++) {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"            if (i \u003e\u003d len || result.charAt(i) \u003d\u003d \u0027\\\"\u0027) {"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"                break;"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"            builder.append(result.charAt(i));"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        return builder.toString();"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":80,"-":2}},{"path":"src/main/java/seedu/address/network/api/google/JsonDeserializer.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network.api.google;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.InvalidBookException;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":" * Provides utilities to deserialize JSON responses."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"public class JsonDeserializer {"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonDeserializer.class);"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    private final ObjectMapper mapper;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    JsonDeserializer() {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        mapper \u003d new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     * Converts the JSON string from Google Books API into a book."},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public Book convertJsonStringToBook(String json) {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"            JsonBookDetails jsonBookDetails \u003d mapper.readValue(json, JsonBookDetails.class);"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"            return jsonBookDetails.toModelType();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        } catch (IOException | InvalidBookException e) {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"            logger.warning(\"Failed to convert JSON to book.\");"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"            throw new CompletionException(e);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     * Converts the JSON string from Google Books API into a book shelf,"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     * with the specified limit on the number of books to populate the book shelf with."},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    public ReadOnlyBookShelf convertJsonStringToBookShelf(String json, int maxBookCount) {"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        assert maxBookCount \u003e\u003d 0;"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"            JsonSearchResults jsonSearchResults \u003d mapper.readValue(json, JsonSearchResults.class);"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"            return jsonSearchResults.toModelType(maxBookCount);"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"            logger.warning(\"Failed to convert JSON to book shelf.\");"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"            throw new CompletionException(e);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":53,"-":2}},{"path":"src/main/java/seedu/address/network/NetworkManager.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.api.google.GoogleBooksApi;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.network.library.NlbCatalogueApi;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":" * Provides networking functionality (making web API calls)."},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":" *"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":" * The methods on this class (except {@code stop()}) are asynchronous, and returns a"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":" * {@code CompletableFuture} that will resolve to the desired object or data."},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"public class NetworkManager extends ComponentManager implements Network {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(NetworkManager.class);"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private final HttpClient httpClient;"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private final GoogleBooksApi googleBooksApi;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private final NlbCatalogueApi nlbCatalogueApi;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public NetworkManager() {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        super();"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        httpClient \u003d new HttpClient();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        googleBooksApi \u003d new GoogleBooksApi(httpClient);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        nlbCatalogueApi \u003d new NlbCatalogueApi(httpClient);"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    protected NetworkManager(HttpClient httpClient, GoogleBooksApi googleBooksApi, NlbCatalogueApi nlbCatalogueApi) {"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        super();"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(httpClient, googleBooksApi, nlbCatalogueApi);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        this.httpClient \u003d httpClient;"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        this.googleBooksApi \u003d googleBooksApi;"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        this.nlbCatalogueApi \u003d nlbCatalogueApi;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    public CompletableFuture\u003cReadOnlyBookShelf\u003e searchBooks(String parameters) {"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        return googleBooksApi.searchBooks(parameters)"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(bookShelf -\u003e {"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"                    logger.info(\"Search books succeeded: \" + parameters);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"                    return bookShelf;"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"                })"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"                .exceptionally(e -\u003e {"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"                    logger.warning(\"Search books failed: \" + StringUtil.getDetails(e));"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"                    throw new CompletionException(e);"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"                });"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    public CompletableFuture\u003cBook\u003e getBookDetails(String bookId) {"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        return googleBooksApi.getBookDetails(bookId)"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(book -\u003e {"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"                    logger.info(\"Get book details succeeded: \" + bookId);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"                    return book;"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"                })"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"                .exceptionally(e -\u003e {"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"                    logger.warning(\"Get book details failed: \" + StringUtil.getDetails(e));"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"                    throw new CompletionException(e);"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"                });"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    public CompletableFuture\u003cString\u003e searchLibraryForBook(Book book) {"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        return nlbCatalogueApi.searchForBook(book)"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(result -\u003e {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"                    logger.info(\"Search books in library succeeded: \" + book);"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"                    return result;"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"                })"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"                .exceptionally(e -\u003e {"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"                    logger.warning(\"Search books in library failed: \" + StringUtil.getDetails(e));"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"                    throw new CompletionException(e);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"                });"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    public void stop() {"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        httpClient.close();"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":86,"-":3}},{"path":"src/main/java/seedu/address/network/library/NlbCatalogueApi.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.network.library;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpClient;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpResponse;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":" * Provides access to the NLB catalogue."},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"public class NlbCatalogueApi {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private static final String SEARCH_URL \u003d"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"            \"https://catalogue.nlb.gov.sg/cgi-bin/spydus.exe/ENQ/EXPNOS/BIBENQ?ENTRY\u003d%t %a\u0026ENTRY_NAME\u003dBS\""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"                    + \"\u0026ENTRY_TYPE\u003dK\u0026GQ\u003d%t %a\u0026SORTS\u003dSQL_REL_TITLE\";"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    private static final String CONTENT_TYPE_HTML \u003d \"text/html\";"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    private static final int HTTP_STATUS_OK \u003d 200;"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    private final HttpClient httpClient;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public NlbCatalogueApi(HttpClient httpClient) {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(httpClient);"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        this.httpClient \u003d httpClient;"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"     * Searches for a book in NLB catalogue."},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"     * @param book book to search for."},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"     * @return CompleteableFuture which resolves to a single book page."},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    public CompletableFuture\u003cString\u003e searchForBook(Book book) {"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(book);"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        return execute(makeSearchUrl(book), book);"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the search URL for a particular {@code book} to search for."},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    protected static String makeSearchUrl(Book book) {"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(book);"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        return SEARCH_URL.replace(\"%t\", book.getTitle().toString()).replace(\"%a\", book.getAuthorsAsString());"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     * Asynchronously executes a HTTP GET request to the specified url to find the specified book."},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"     * @param url the url used for the GET request."},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"     * @param book the book to search for."},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"     * @return CompleteableFuture which resolves to a single book page."},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    private CompletableFuture\u003cString\u003e execute(String url, Book book) {"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        return httpClient"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"                .makeGetRequest(url)"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(NlbCatalogueApi::requireHtmlContentType)"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(NlbCatalogueApi::requireHttpStatusOk)"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(HttpResponse::getResponseBody)"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"                .thenApply(result -\u003e NlbResultHelper.getUrl(result, book));"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CompletionException} if the content type of the response is not HTML."},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    private static HttpResponse requireHtmlContentType(HttpResponse response) {"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"        if (!response.getContentType().startsWith(CONTENT_TYPE_HTML)) {"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"            throw new CompletionException("},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"                    new IOException(\"Unexpected content type \" + response.getContentType()));"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        return response;"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CompletionException} if the HTTP status code of the response is not {@code 200: OK}."},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    private static HttpResponse requireHttpStatusOk(HttpResponse response) {"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        if (response.getStatusCode() !\u003d HTTP_STATUS_OK) {"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"            throw new CompletionException("},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"                    new IOException(\"Get request failed with status code \" + response.getStatusCode()));"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        return response;"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":78,"takuyakanbr":8,"-":2}},{"path":"src/main/java/seedu/address/network/api/google/GoogleBooksApi.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network.api.google;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.util.function.Function;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.HttpClient;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.network.HttpResponse;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":" * Provides access to the Google Books API."},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"public class GoogleBooksApi {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    protected static final String URL_SEARCH_BOOKS \u003d"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"            \"https://www.googleapis.com/books/v1/volumes?maxResults\u003d40\u0026printType\u003dbooks\u0026q\u003d%s\";"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    protected static final String URL_BOOK_DETAILS \u003d \"https://www.googleapis.com/books/v1/volumes/%s\";"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    private static final String CONTENT_TYPE_JSON \u003d \"application/json\";"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final int HTTP_STATUS_OK \u003d 200;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    private static final int MAX_SEARCH_RESULTS_COUNT \u003d 30;"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private final HttpClient httpClient;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private final JsonDeserializer deserializer;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public GoogleBooksApi(HttpClient httpClient) {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(httpClient);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        this.httpClient \u003d httpClient;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        this.deserializer \u003d new JsonDeserializer();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"     * Searches for books on Google Books that matches a set of parameters."},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"     * @param parameters search parameters."},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"     * @return a CompletableFuture that resolves to a ReadOnlyBookShelf."},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    public CompletableFuture\u003cReadOnlyBookShelf\u003e searchBooks(String parameters) {"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        String requestUrl \u003d String.format(URL_SEARCH_BOOKS, StringUtil.urlEncode(parameters));"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        return executeGetAndApply(requestUrl, json -\u003e"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"                deserializer.convertJsonStringToBookShelf(json, MAX_SEARCH_RESULTS_COUNT));"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"     * Retrieves the details of a single book on Google Books."},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"     * @param bookId the ID of the book on Google Books."},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"     * @return a CompletableFuture that resolves to a Book."},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    public CompletableFuture\u003cBook\u003e getBookDetails(String bookId) {"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        String requestUrl \u003d String.format(URL_BOOK_DETAILS, StringUtil.urlEncode(bookId));"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        return executeGetAndApply(requestUrl, deserializer::convertJsonStringToBook);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"     * Asynchronously executes a HTTP GET request to the specified url and"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"     * applies the specified function to transform the resulting response body."},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"     * @param url the url used for the GET request."},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"     * @param fn the function that will be applied on the response body of the GET request."},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"     * @param \u003cT\u003e the return type of the function to be applied."},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"     * @return a CompleteableFuture that resolves to the result of the given function."},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    private \u003cT\u003e CompletableFuture\u003cT\u003e executeGetAndApply(String url, Function\u003cString, ? extends T\u003e fn) {"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        return httpClient"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"                .makeGetRequest(url)"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(GoogleBooksApi::requireJsonContentType)"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(GoogleBooksApi::requireHttpStatusOk)"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(HttpResponse::getResponseBody)"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(fn);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"     * Throws a {@link CompletionException} if the content type of the response is not JSON."},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    private static HttpResponse requireJsonContentType(HttpResponse response) {"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        if (!response.getContentType().startsWith(CONTENT_TYPE_JSON)) {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"            throw new CompletionException("},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"                    new IOException(\"Unexpected content type \" + response.getContentType()));"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        return response;"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"     * Throws a {@link CompletionException} if the HTTP status code of the response is not {@code 200: OK}."},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    private static HttpResponse requireHttpStatusOk(HttpResponse response) {"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        if (response.getStatusCode() !\u003d HTTP_STATUS_OK) {"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"            throw new CompletionException("},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"                    new IOException(\"Get request failed with status code \" + response.getStatusCode()));"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        return response;"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":97,"-":3}},{"path":"src/main/java/seedu/address/network/HttpResponse.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import org.asynchttpclient.Response;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":" * A wrapper around the {@link Response} class from async-http-client."},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"public class HttpResponse {"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    private final int statusCode;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    private final String contentType;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    private final String responseBody;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public HttpResponse(int statusCode, String contentType, String responseBody) {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(contentType, responseBody);"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        this.statusCode \u003d statusCode;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        this.contentType \u003d contentType;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        this.responseBody \u003d responseBody;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public HttpResponse(Response response) {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        this(response.getStatusCode(), response.getContentType(), response.getResponseBody());"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public int getStatusCode() {"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        return statusCode;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public String getContentType() {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        return contentType;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    public String getResponseBody() {"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        return responseBody;"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":38,"-":2}},{"path":"src/main/java/seedu/address/logic/UndoStack.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Maintains the undo-stack (the stack of commands that can be undone)."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"public class UndoStack {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e undoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    public UndoStack() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"     * Pushes {@code command} onto the undo-stack if it is of type {@code UndoableCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void push(Command command) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoableCommand)) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        undoStack.add((UndoableCommand) command);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be undone in the stack."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public UndoableCommand popUndo() {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"        return undoStack.pop();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be undone."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return !undoStack.empty();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        if (!(other instanceof UndoStack)) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        UndoStack stack \u003d (UndoStack) other;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        return undoStack.equals(stack.undoStack);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":7,"-":53}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns true if the entered text can be parsed to a valid command."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    boolean isValidCommand(String commandText);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses {@code String userInput} and returns an array of {commandWord, arguments} if valid."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    String[] parse(String commandText) throws ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    /** Returns an unmodifiable view of the list that is currently active. */"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    ObservableList\u003cBook\u003e getActiveList();"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the list of aliases. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    ObservableList\u003cAlias\u003e getDisplayAliasList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"-":38}},{"path":"src/main/java/seedu/address/network/api/google/JsonBookDetails.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network.api.google;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Gid;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.PublicationDate;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Publisher;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.InvalidBookException;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.util.BookDataUtil;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":" * A temporary data holder used for deserialization of the JSON response"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":" * from the book details endpoint of Google Books API."},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"public class JsonBookDetails {"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private int error \u003d 0;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    private String id \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private JsonVolumeInfo volumeInfo \u003d new JsonVolumeInfo();"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    // This should fail if the API returns an error, due to incompatible types."},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public void setError(int error) {"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        assert false;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public void setId(String id) {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        this.id \u003d id;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    public void setVolumeInfo(JsonVolumeInfo volumeInfo) {"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        this.volumeInfo \u003d volumeInfo;"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"     * Converts this data holder object into the model\u0027s Book object."},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    public Book toModelType() throws InvalidBookException {"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        Isbn isbn \u003d getIsbnFromIndustryIdentifiers(volumeInfo.industryIdentifiers);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        if (isbn \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"            throw new InvalidBookException(\"No ISBN is found for the book.\");"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        return new Book(new Gid(id), isbn,"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"                BookDataUtil.getAuthorList(volumeInfo.authors), new Title(volumeInfo.title),"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"                getCategoryList(volumeInfo.categories), new Description(volumeInfo.description),"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"                new Publisher(volumeInfo.publisher),"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"                new PublicationDate(volumeInfo.publishedDate));"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    private static Isbn getIsbnFromIndustryIdentifiers(JsonIndustryIdentifiers[] iiArray) {"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        return Stream.of(iiArray)"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"                .filter(ii -\u003e ii.type.equals(\"ISBN_13\"))"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"                .findFirst()"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"                .map(ii -\u003e new Isbn(ii.identifier))"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"                .orElse(null);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    private static List\u003cCategory\u003e getCategoryList(String[] categories) {"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        return Stream.of(categories)"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"                .flatMap(category -\u003e Stream.of(category.split(\"/\")))"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"                .map(token -\u003e new Category(token.trim()))"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    /** Temporary data holder used for deserialization. */"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    private static class JsonVolumeInfo {"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        private String title \u003d \"\";"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        private String[] authors \u003d new String[0];"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        private String publisher \u003d \"\";"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        private String publishedDate \u003d \"\";"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        private String description \u003d \"\";"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        private JsonIndustryIdentifiers[] industryIdentifiers \u003d new JsonIndustryIdentifiers[0];"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        private String[] categories \u003d new String[0];"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        //@@author"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        public void setIndustryIdentifiers(JsonIndustryIdentifiers[] industryIdentifiers) {"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"            this.industryIdentifiers \u003d industryIdentifiers;"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        public void setTitle(String title) {"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"            this.title \u003d title;"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        public void setAuthors(String[] authors) {"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"            this.authors \u003d authors;"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        public void setPublisher(String publisher) {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"            this.publisher \u003d publisher;"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        public void setPublishedDate(String publishedDate) {"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"            this.publishedDate \u003d publishedDate;"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        public void setDescription(String description) {"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"            this.description \u003d description;"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        public void setCategories(String[] categories) {"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"            this.categories \u003d categories;"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"    /** Temporary data holder used for deserialization. */"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    private static class JsonIndustryIdentifiers {"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        private String type;"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        private String identifier;"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        public void setIdentifier(String identifier) {"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"            this.identifier \u003d identifier;"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"        public void setType(String type) {"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"            this.type \u003d type;"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":22,"takuyakanbr":101,"-":3}},{"path":"src/main/java/seedu/address/network/api/google/JsonSearchResults.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network.api.google;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Gid;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.PublicationDate;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Publisher;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.InvalidBookException;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.util.BookDataUtil;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":" * A temporary data holder used for deserialization of the JSON response"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":" * from the book searching endpoint of Google Books API."},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"public class JsonSearchResults {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonSearchResults.class);"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    private int error \u003d 0;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    private int totalItems \u003d 0;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    private JsonVolume[] items \u003d new JsonVolume[0];"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    // This should fail if the API returns an error, due to incompatible types."},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public void setError(int error) {"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        assert false;"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public void setTotalItems(int totalItems) {"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        this.totalItems \u003d totalItems;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public void setItems(JsonVolume[] items) {"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        this.items \u003d items;"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"     * Converts this data holder object into the model\u0027s BookShelf object,"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"     * with the specified limit on the number of books to populate the book shelf with."},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    public ReadOnlyBookShelf toModelType(int maxBookCount) {"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        int bookCount \u003d 0;"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        for (JsonVolume volume : items) {"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"                Book book \u003d convertToBook(volume);"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"                bookShelf.addBook(book);"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"                ++bookCount;"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"                if (bookCount \u003e\u003d maxBookCount) {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"                    break;"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"                }"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"            } catch (InvalidBookException | DuplicateBookException e) {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"                logger.warning(e.getMessage());"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        return bookShelf;"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"     * Converts a JsonVolume into a Book."},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    private static Book convertToBook(JsonVolume volume) throws InvalidBookException {"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        JsonVolumeInfo volumeInfo \u003d volume.volumeInfo;"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        Isbn isbn \u003d getIsbnFromIndustryIdentifiers(volumeInfo.industryIdentifiers);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        if (isbn \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"            throw new InvalidBookException(\"Found book without ISBN\");"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        return new Book(new Gid(volume.id), isbn,"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"                BookDataUtil.getAuthorList(volumeInfo.authors), new Title(volumeInfo.title),"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"                BookDataUtil.getCategoryList(volumeInfo.categories), new Description(volumeInfo.description),"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"                new Publisher(volumeInfo.publisher), new PublicationDate(volumeInfo.publishedDate));"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    private static Isbn getIsbnFromIndustryIdentifiers(JsonIndustryIdentifiers[] iiArray) {"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        return Stream.of(iiArray)"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"                .filter(ii -\u003e ii.type.equals(\"ISBN_13\"))"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"                .findFirst()"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"                .map(ii -\u003e new Isbn(ii.identifier))"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"                .orElse(null);"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    /** Temporary data holder used for deserialization. */"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    private static class JsonVolume {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        private String id \u003d \"\";"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        private JsonVolumeInfo volumeInfo \u003d new JsonVolumeInfo();"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        //@@author"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"        public void setId(String id) {"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"            this.id \u003d id;"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        public void setVolumeInfo(JsonVolumeInfo volumeInfo) {"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"            this.volumeInfo \u003d volumeInfo;"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    //@@author takuyakanbr"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"    /** Temporary data holder used for deserialization. */"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    private static class JsonVolumeInfo {"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"        private String title \u003d \"\";"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"        private String[] authors \u003d new String[0];"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"        private String publisher \u003d \"\";"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        private String publishedDate \u003d \"\";"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        private String description \u003d \"\";"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        private JsonIndustryIdentifiers[] industryIdentifiers \u003d new JsonIndustryIdentifiers[0];"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        private String[] categories \u003d new String[0];"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        //@@author"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"        public void setIndustryIdentifiers(JsonIndustryIdentifiers[] industryIdentifiers) {"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"            this.industryIdentifiers \u003d industryIdentifiers;"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        public void setTitle(String title) {"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"            this.title \u003d title;"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"        public void setAuthors(String[] authors) {"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"            this.authors \u003d authors;"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        public void setPublisher(String publisher) {"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"            this.publisher \u003d publisher;"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"        public void setPublishedDate(String publishedDate) {"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"            this.publishedDate \u003d publishedDate;"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        public void setDescription(String description) {"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"            this.description \u003d description;"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"        public void setCategories(String[] categories) {"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"            this.categories \u003d categories;"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"    /** Temporary data holder used for deserialization. */"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"    private static class JsonIndustryIdentifiers {"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"        private String type;"},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"        private String identifier;"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"        public void setIdentifier(String identifier) {"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"            this.identifier \u003d identifier;"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"        public void setType(String type) {"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":"            this.type \u003d type;"},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":22,"takuyakanbr":141,"-":1}},{"path":"src/main/java/seedu/address/network/HttpClient.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.network;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.concurrent.CompletionException;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import org.asynchttpclient.AsyncHttpClient;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.asynchttpclient.Dsl;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":" * A wrapper around the {@link AsyncHttpClient} class from async-http-client."},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"public class HttpClient {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HttpClient.class);"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    private static final int CONNECTION_TIMEOUT_MILLIS \u003d 1000 * 10; // 10 seconds"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private static final int READ_TIMEOUT_MILLIS \u003d 1000 * 10; // 10 seconds"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    private static final int REQUEST_TIMEOUT_MILLIS \u003d 1000 * 10; // 10 seconds"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private static final long DELAY_ON_EXCEPTION \u003d 300L;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    private final AsyncHttpClient asyncHttpClient;"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    protected HttpClient() {"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        this.asyncHttpClient \u003d Dsl.asyncHttpClient(Dsl.config()"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"                .setConnectTimeout(CONNECTION_TIMEOUT_MILLIS)"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"                .setReadTimeout(READ_TIMEOUT_MILLIS)"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"                .setRequestTimeout(REQUEST_TIMEOUT_MILLIS));"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    protected HttpClient(AsyncHttpClient asyncHttpClient) {"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(asyncHttpClient);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        this.asyncHttpClient \u003d asyncHttpClient;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     * Asynchronously executes a HTTP GET request to the specified url."},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public CompletableFuture\u003cHttpResponse\u003e makeGetRequest(String url) {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        return asyncHttpClient"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"                .prepareGet(url)"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"                .execute()"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"                .toCompletableFuture()"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"                .thenApply(HttpResponse::new)"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"                .handleAsync(HttpClient::waitOnException);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"     * Waits for a short period of time in the event of exception."},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"     * Prevents API methods from completing before necessary pre-processing is completed."},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    private static \u003cT\u003e T waitOnException(T result, Throwable error) {"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        if (error !\u003d null) {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"                Thread.sleep(DELAY_ON_EXCEPTION);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"            } catch (InterruptedException ie) {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"                logger.warning(StringUtil.getDetails(ie));"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"            throw new CompletionException(error);"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        return result;"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"     * Stops and closes the underlying {@link AsyncHttpClient}."},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    public void close() {"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"            if (!asyncHttpClient.isClosed()) {"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"                asyncHttpClient.close();"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        } catch (IOException e) {"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"            logger.warning(\"Failed to shut down AsyncHttpClient.\");"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":77,"-":5}},{"path":"src/main/java/seedu/address/logic/LockManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":4,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"592363789"},"content":" * Manages the locked/unlocked state of the app and the password."},{"lineNumber":6,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":7,"author":{"gitID":"592363789"},"content":"public class LockManager {"},{"lineNumber":8,"author":{"gitID":"592363789"},"content":""},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"    public static final String NO_PASSWORD \u003d \"\";"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":""},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"    private static LockManager lockManager;"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":""},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"    private String password \u003d NO_PASSWORD;"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"    private String passwordHash \u003d NO_PASSWORD;"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"    private boolean isLocked \u003d false;"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"    private boolean hasLoggedIn \u003d false;"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":""},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"    private LockManager() { }"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":""},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"    public static LockManager getInstance() {"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"        if (lockManager \u003d\u003d null) {"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"            lockManager \u003d new LockManager();"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"        return lockManager;"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":""},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"     * Sets up the {@code LockManager}. The state is set to locked if"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"     * there is a non-empty and valid {@code passwordHash}."},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    public void initialize(String passwordHash) {"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"        if (passwordHash.trim().length() \u003e 0 \u0026\u0026 CipherEngine.isValidPasswordHash(passwordHash.trim())) {"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"            this.passwordHash \u003d passwordHash;"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"        } else {"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"            this.passwordHash \u003d NO_PASSWORD;"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"            this.password \u003d NO_PASSWORD;"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"        isLocked \u003d !this.passwordHash.isEmpty();"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"        hasLoggedIn \u003d !isLocked;"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":""},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"    public boolean hasLoggedIn() {"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"        return hasLoggedIn;"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":""},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"     * Changes the password to {@code newPassword} if {@code oldPassword} matches the old password."},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"     * @return whether the password is changed."},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"    public boolean setPassword(String oldPassword, String newPassword) {"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"        if (!checkPassword(oldPassword)) {"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"592363789"},"content":""},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"        String newPasswordHash;"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"            newPasswordHash \u003d newPassword.isEmpty() ? \"\" : CipherEngine.hashPassword(newPassword);"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        } catch (Exception e) {"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"592363789"},"content":""},{"lineNumber":62,"author":{"gitID":"592363789"},"content":"        password \u003d newPassword;"},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"        passwordHash \u003d newPasswordHash;"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":"        return true;"},{"lineNumber":65,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"592363789"},"content":""},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"592363789"},"content":"     * Locks the app."},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"    public void lock() {"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":"        isLocked \u003d true;"},{"lineNumber":72,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"592363789"},"content":""},{"lineNumber":74,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"592363789"},"content":"     * Unlocks the app if {@code password} matches the current password."},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"     * @return whether the app is unlocked."},{"lineNumber":77,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"592363789"},"content":"    public boolean unlock(String password) {"},{"lineNumber":79,"author":{"gitID":"592363789"},"content":"        if (!isLocked() || !checkPassword(password)) {"},{"lineNumber":80,"author":{"gitID":"592363789"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"592363789"},"content":""},{"lineNumber":83,"author":{"gitID":"592363789"},"content":"        isLocked \u003d false;"},{"lineNumber":84,"author":{"gitID":"592363789"},"content":"        hasLoggedIn \u003d true;"},{"lineNumber":85,"author":{"gitID":"592363789"},"content":"        this.password \u003d password;"},{"lineNumber":86,"author":{"gitID":"592363789"},"content":"        return true;"},{"lineNumber":87,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"592363789"},"content":""},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"    public String getPassword() {"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":"        return password;"},{"lineNumber":91,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"592363789"},"content":""},{"lineNumber":93,"author":{"gitID":"592363789"},"content":"    public boolean isLocked() {"},{"lineNumber":94,"author":{"gitID":"592363789"},"content":"        return isLocked;"},{"lineNumber":95,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"592363789"},"content":""},{"lineNumber":97,"author":{"gitID":"592363789"},"content":"    public boolean isPasswordProtected() {"},{"lineNumber":98,"author":{"gitID":"592363789"},"content":"        return !passwordHash.isEmpty();"},{"lineNumber":99,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"592363789"},"content":""},{"lineNumber":101,"author":{"gitID":"592363789"},"content":"    //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /** Returns true if the given {@code password} matches the current password. */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private boolean checkPassword(String password) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!isPasswordProtected() \u0026\u0026 password.isEmpty()) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return CipherEngine.checkPassword(password, passwordHash);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"592363789":99,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * Parses input arguments and creates a new AddCommand object."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"            return new AddCommand(index);"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":23,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/ReviewsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * Parses input arguments and creates a new ReviewsCommand object."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class ReviewsCommandParser implements Parser\u003cReviewsCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     * Parses the given {@code String} of arguments in the context of the ReviewsCommand"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"     * and returns an ReviewsCommand object for execution."},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    public ReviewsCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"            return new ReviewsCommand(index);"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewsCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":23,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/LibraryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LibraryCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" * Parses input arguments and creates a new LibraryCommand object."},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class LibraryCommandParser implements Parser\u003cLibraryCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     * Parses the given {@code String} of arguments in the context of the LibraryCommand"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     * and returns an LibraryCommand object for execution."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    public LibraryCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            return new LibraryCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LibraryCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":18,"takuyakanbr":2,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    // Prefix String Definitions"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_AUTHOR_STRING \u003d \"a/\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_CATEGORY_STRING \u003d \"c/\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_ISBN_STRING \u003d \"i/\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_TITLE_STRING \u003d \"t/\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_STATUS_STRING \u003d \"s/\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_PRIORITY_STRING \u003d \"p/\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_RATING_STRING \u003d \"r/\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_SORT_BY_STRING \u003d \"by/\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_OLD_STRING \u003d \"old/\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_NEW_STRING \u003d \"new/\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_COMMAND_STRING \u003d \"cmd/\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    // Prefix definitions"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(PREFIX_AUTHOR_STRING);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(PREFIX_CATEGORY_STRING);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ISBN \u003d new Prefix(PREFIX_ISBN_STRING);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(PREFIX_TITLE_STRING);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(PREFIX_STATUS_STRING);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(PREFIX_PRIORITY_STRING);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(PREFIX_RATING_STRING);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_SORT_BY \u003d new Prefix(PREFIX_SORT_BY_STRING);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_OLD \u003d new Prefix(PREFIX_OLD_STRING);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NEW \u003d new Prefix(PREFIX_NEW_STRING);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_COMMAND \u003d new Prefix(PREFIX_COMMAND_STRING);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/BookShelfParser.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasesCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteAliasCommand;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LibraryCommand;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":" * Parses user input."},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"public class BookShelfParser {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    //@@author takuyakanbr"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"     * Used for pre-processing the user input, before the application of a command alias."},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    private static final Pattern ALIASED_COMMAND_FORMAT \u003d"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"            Pattern.compile(\" *(?\u003caliasName\u003e\\\\S+)(?\u003cunnamedArgs\u003e((?! [\\\\w]+\\\\/.*)[\\\\S ])*)(?\u003cnamedArgs\u003e.*)\");"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    private final ReadOnlyAliasList aliases;"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    public BookShelfParser(ReadOnlyAliasList aliases) {"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(aliases);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        this.aliases \u003d aliases;"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"     * Applies a command alias (if any) to the user input, and returns the result."},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"     * If no command alias can be applied, the user input will be returned unchanged."},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"     * @param userInput full user input string."},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"     * @return the processed input after the application of command alias."},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    public String applyCommandAlias(String userInput) throws ParseException {"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        final Matcher matcher \u003d getMatcherForPattern(userInput, ALIASED_COMMAND_FORMAT);"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        final String aliasName \u003d matcher.group(\"aliasName\");"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        if (!aliases.getAliasByName(aliasName).isPresent()) {"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"            return userInput;"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        return buildCommand(aliases.getAliasByName(aliasName).get(),"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"                matcher.group(\"unnamedArgs\"), matcher.group(\"namedArgs\"));"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"     * Builds and returns a command string from the given alias, unnamed arguments, and named arguments."},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    private static String buildCommand(Alias alias, String unnamedArgs, String namedArgs) {"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        return Stream.of(alias.getPrefix(), unnamedArgs, alias.getNamedArgs(), namedArgs)"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"                // keep trailing spaces as they may affect the command hint shown to user"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"                .map(StringUtil::leftTrim)"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"                .filter(str -\u003e !str.trim().isEmpty())"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"                .reduce(\"\", (a, b) -\u003e StringUtil.leftTrim(a + \" \" + b));"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a command string into a command for execution."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param commandText the command string."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @return the resulting command based on the command string."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws ParseException if the command string does not conform the expected format."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public Command parseCommand(String commandText) throws ParseException {"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        final Matcher matcher \u003d getMatcherForPattern(commandText, BASIC_COMMAND_FORMAT);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        return getCommand(commandWord, arguments);"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the command given {@code commandWord} and {@code arguments}."},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException if the commandWord is not a valid command."},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    private Command getCommand(String commandWord, String arguments) throws ParseException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        switch (commandWord.toLowerCase()) {"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case AddAliasCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new AddAliasCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        case AliasesCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new AliasesCommand();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        case DeleteAliasCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return new DeleteAliasCommand(arguments);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"        case LibraryCommand.COMMAND_WORD:"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"            return new LibraryCommandParser().parse(arguments);"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return new LockCommand();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"        case RecentCommand.COMMAND_WORD:"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"            return new RecentCommand();"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        case ReviewsCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"            return new ReviewsCommandParser().parse(arguments);"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":162,"author":{"gitID":"takuyakanbr"},"content":"        case SearchCommand.COMMAND_WORD:"},{"lineNumber":163,"author":{"gitID":"takuyakanbr"},"content":"            return new SearchCommandParser().parse(arguments);"},{"lineNumber":164,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":165,"author":{"gitID":"takuyakanbr"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":166,"author":{"gitID":"takuyakanbr"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":167,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        case SetPasswordCommand.COMMAND_WORD:"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return new SetPasswordCommandParser().parse(arguments);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return new UnlockCommand(arguments);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains a matcher given {@code commandText} which is to be matched to {@code commandFormat}."},{"lineNumber":187,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException if {@code commandText} does not match {@code commandFormat}."},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"qiu-siqi"},"content":"    private Matcher getMatcherForPattern(String commandText, Pattern commandFormat) throws ParseException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d commandFormat.matcher(commandText);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"qiu-siqi"},"content":"        return matcher;"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":44,"takuyakanbr":60,"-":93}},{"path":"src/main/java/seedu/address/logic/parser/AddAliasCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":" * Parses input arguments and creates a new {@code AddAliasCommand} object."},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"public class AddAliasCommandParser implements Parser\u003cAddAliasCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    private static final Pattern ALIAS_FORMAT \u003d Pattern.compile(\"^\\\\S+$\");"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cprefix\u003e((?! \\\\w+\\\\/.*)[\\\\S ])+)(?\u003cnamedArgs\u003e.*)\");"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public AddAliasCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        ArgumentMultimap argMultimap \u003d createArgumentMultimap(args);"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        String aliasName \u003d getAliasName(argMultimap);"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        Matcher matcher \u003d createCommandMatcher(argMultimap);"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        return new AddAliasCommand(createAlias(aliasName, matcher));"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"     * Tokenizes the given {@code args} and returns an {@code ArgumentMultimap} containing the results."},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if {@code PREFIX_COMMAND} cannot be found."},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    private static ArgumentMultimap createArgumentMultimap(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_COMMAND);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        checkCommandFormat(argMultimap.getValue(PREFIX_COMMAND).isPresent());"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        return argMultimap;"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"     * Gets and returns the alias name from the {@code argMultimap}."},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the alias name is not in the expected format."},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    private static String getAliasName(ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        String aliasName \u003d argMultimap.getPreamble().trim();"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        checkCommandFormat(ALIAS_FORMAT.matcher(aliasName).matches());"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        return aliasName;"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"     * Creates and returns a {@code Matcher} containing information about the command to be aliased."},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the command is not in the expected format."},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    private static Matcher createCommandMatcher(ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        Matcher matcher \u003d COMMAND_FORMAT.matcher(argMultimap.getValue(PREFIX_COMMAND).get());"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        checkCommandFormat(matcher.matches());"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        return matcher;"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    private static Alias createAlias(String aliasName, Matcher commandMatcher) {"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        return new Alias(aliasName, commandMatcher.group(\"prefix\"), commandMatcher.group(\"namedArgs\"));"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    private static void checkCommandFormat(boolean condition) throws ParseException {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        if (!condition) {"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":60,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new ListCommand object."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_AUTHOR,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                PREFIX_CATEGORY, PREFIX_STATUS, PREFIX_PRIORITY, PREFIX_RATING, PREFIX_SORT_BY);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ListCommand.FilterDescriptor filterDescriptor \u003d new ListCommand.FilterDescriptor();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        argMultimap.getValue(PREFIX_TITLE).ifPresent(filterDescriptor::addTitleFilter);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        argMultimap.getValue(PREFIX_AUTHOR).ifPresent(filterDescriptor::addAuthorFilter);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        argMultimap.getValue(PREFIX_CATEGORY).ifPresent(filterDescriptor::addCategoryFilter);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            filterDescriptor.addStatusFilter(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            filterDescriptor.addPriorityFilter(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            filterDescriptor.addRatingFilter(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Comparator\u003cBook\u003e comparator \u003d Model.DEFAULT_BOOK_COMPARATOR;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (argMultimap.getValue(PREFIX_SORT_BY).isPresent()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            SortMode sortMode \u003d SortMode.findSortMode(argMultimap.getValue(PREFIX_SORT_BY).get());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            if (sortMode \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                throw new ParseException(Messages.MESSAGE_INVALID_SORT_BY);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            comparator \u003d sortMode.comparator;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new ListCommand(filterDescriptor, comparator);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Represents a sorting mode, which specifies the comparator used to sort the display book list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public enum SortMode {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        TITLE(Comparator.comparing(Book::getTitle), \"t\", \"titlea\", \"ta\"),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        TITLED((book1, book2) -\u003e book2.getTitle().compareTo(book1.getTitle()), \"td\"),"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        STATUS(Comparator.comparing(Book::getStatus), \"s\", \"statusa\", \"sa\"),"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        STATUSD((book1, book2) -\u003e book2.getStatus().compareTo(book1.getStatus()), \"sd\"),"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        PRIORITY(Comparator.comparing(Book::getPriority), \"p\", \"prioritya\", \"pa\"),"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        PRIORITYD((book1, book2) -\u003e book2.getPriority().compareTo(book1.getPriority()), \"pd\"),"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        RATING(Comparator.comparing(Book::getRating), \"r\", \"ratinga\", \"ra\"),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        RATINGD((book1, book2) -\u003e book2.getRating().compareTo(book1.getRating()), \"rd\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        private final Comparator\u003cBook\u003e comparator;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final String[] aliases;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SortMode(Comparator\u003cBook\u003e comparator, String... aliases) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            this.comparator \u003d comparator;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.aliases \u003d aliases;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        public Comparator\u003cBook\u003e getComparator() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return comparator;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"         * Returns the {@code SortMode} with a name or alias that matches the specified {@code searchTerm}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        private static SortMode findSortMode(String searchTerm) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            for (SortMode sortMode : values()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                if (Stream.of(sortMode.aliases).anyMatch(searchTerm::equalsIgnoreCase)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                        || searchTerm.equalsIgnoreCase(sortMode.toString())) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                    return sortMode;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"takuyakanbr":3,"-":96}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"     * Parses a {@code String title} into a {@code Title}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected static Title parseTitle(String title) {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(title);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cTitle\u003e} if {@code title} is present."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected static Optional\u003cTitle\u003e parseTitle(Optional\u003cString\u003e title) {"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(title);"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"     * Parses a {@code String author} into a {@code Author}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    protected static Author parseAuthor(String author) {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(author);"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        String trimmedAuthor \u003d author.trim();"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"        return new Author(trimmedAuthor);"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"     * Parses {@code Collection\u003cString\u003e authors} into a {@code Set\u003cAuthor\u003e}."},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    protected static Set\u003cAuthor\u003e parseAuthors(Collection\u003cString\u003e authors) {"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(authors);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        final Set\u003cAuthor\u003e authorSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        for (String author : authors) {"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"            authorSet.add(parseAuthor(author));"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        return authorSet;"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"     * Parses a {@code String category} into a {@code Category}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    protected static Category parseCategory(String category) {"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(category);"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        String trimmedCategory \u003d category.trim();"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    protected static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) {"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(categories);"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        for (String category : categories) {"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"            categorySet.add(parseCategory(category));"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"        return categorySet;"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    protected static Description parseDescription(String description) {"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(description);"},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"     * Parses a {@code Optional\u003cString\u003e description} into an {@code Optional\u003cDescription\u003e}"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"     * if {@code description} is present."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) {"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(description);"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Parses the given {@code statusString} and returns a {@code Status}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @throws ParseException if the string does not represent a valid status."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected static Status parseStatus(String statusString) throws ParseException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Status status \u003d Status.findStatus(statusString);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (status \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_STATUS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return status;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Parses the given {@code priorityString} and returns a {@code Priority}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * @throws ParseException if the string does not represent a valid priority."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected static Priority parsePriority(String priorityString) throws ParseException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Priority priority \u003d Priority.findPriority(priorityString);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (priority \u003d\u003d null) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return priority;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses the given {@code ratingString} and returns a {@code Rating}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @throws ParseException if the string does not represent a valid rating."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected static Rating parseRating(String ratingString) throws ParseException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return new Rating(Integer.parseInt(ratingString));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_RATING);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":71,"-":99}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Theme;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.InvalidThemeException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new ThemeCommand object."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the ThemeCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns a ThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String themeName \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (themeName.length() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            Theme newTheme \u003d Theme.getThemeByName(themeName);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            return new ThemeCommand(newTheme);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        } catch (InvalidThemeException e) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(ThemeCommand.MESSAGE_INVALID_THEME, themeName));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":3,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/SearchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SearchCommand.SearchDescriptor;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":" * Parses input arguments and creates a new SearchCommand object."},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"     * Parses the given {@code String} of arguments in the context of the SearchCommand"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"     * and returns a SearchCommand object for execution."},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public SearchCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ISBN, PREFIX_TITLE, PREFIX_AUTHOR, PREFIX_CATEGORY);"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        SearchDescriptor searchDescriptor \u003d new SearchDescriptor();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        String keyWords \u003d argMultimap.getPreamble();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        if (keyWords.trim().length() \u003e 0) {"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"            searchDescriptor.setKeyWords(keyWords);"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        argMultimap.getValue(PREFIX_ISBN).ifPresent(searchDescriptor::setIsbn);"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        argMultimap.getValue(PREFIX_TITLE).ifPresent(searchDescriptor::setTitle);"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        argMultimap.getValue(PREFIX_AUTHOR).ifPresent(searchDescriptor::setAuthor);"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        argMultimap.getValue(PREFIX_CATEGORY).ifPresent(searchDescriptor::setCategory);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        if (!searchDescriptor.isValid()) {"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"            throw new ParseException(SearchCommand.MESSAGE_EMPTY_QUERY);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        return new SearchCommand(searchDescriptor);"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":4,"takuyakanbr":38,"-":4}},{"path":"src/main/java/seedu/address/logic/CipherEngine.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileInputStream;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.OutputStream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.security.SecureRandom;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.security.spec.KeySpec;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Base64;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javax.crypto.Cipher;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javax.crypto.SecretKey;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javax.crypto.SecretKeyFactory;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import javax.crypto.spec.IvParameterSpec;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javax.crypto.spec.PBEKeySpec;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import javax.crypto.spec.SecretKeySpec;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":" *  Class for encrypt and decrypt file and key."},{"lineNumber":31,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"public class CipherEngine {"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CipherEngine.class);"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":""},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"    private static final String PBKDF_ALGORITHM \u003d \"PBKDF2WithHmacSHA256\";"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"    private static final String AES_ALGORITHM \u003d \"AES/CBC/PKCS5Padding\";"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"    private static final int PBKDF_ITERATION_COUNT \u003d 22000;"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"    private static final int PBKDF_KEY_LENGTH \u003d 256;"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"    private static final int SALT_BYTE_LENGTH \u003d 64;"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"    private static final int IV_BYTE_LENGTH \u003d 16;"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"    private static final SecureRandom RANDOM \u003d new SecureRandom();"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":""},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"     *  Encrypts file at {@code fileName} using {@code password}."},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"    public static void encryptFile(String fileName, String password) {"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"        String tempFileName \u003d StringUtil.generateRandomPrefix() + \"_temp.enc\";"},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"        FileInputStream fis \u003d null;"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"        FileOutputStream fos \u003d null;"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"            fis \u003d new FileInputStream(fileName);"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"            fos \u003d new FileOutputStream(tempFileName);"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":"            encryptStream(password, fis, fos);"},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"            logger.warning(\"Could not encrypt file \" + fileName);"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"            logger.warning(StringUtil.getDetails(e));"},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"        } finally {"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"            closeStreams(fis, fos);"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":""},{"lineNumber":61,"author":{"gitID":"592363789"},"content":"        replaceFile(fileName, tempFileName);"},{"lineNumber":62,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"592363789"},"content":""},{"lineNumber":64,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"592363789"},"content":"     *  Decrypts file at {@code fileName} using {@code password}."},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"    public static void decryptFile(String fileName, String password) {"},{"lineNumber":68,"author":{"gitID":"592363789"},"content":"        String tempFileName \u003d StringUtil.generateRandomPrefix() + \"_temp.enc\";"},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"        FileInputStream fis \u003d null;"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"        FileOutputStream fos \u003d null;"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"592363789"},"content":"            fis \u003d new FileInputStream(fileName);"},{"lineNumber":73,"author":{"gitID":"592363789"},"content":"            fos \u003d new FileOutputStream(tempFileName);"},{"lineNumber":74,"author":{"gitID":"592363789"},"content":"            decryptStream(password, fis, fos);"},{"lineNumber":75,"author":{"gitID":"592363789"},"content":"        } catch (Exception e) {"},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"            logger.warning(\"Could not decrypt file \" + fileName);"},{"lineNumber":77,"author":{"gitID":"592363789"},"content":"            logger.warning(StringUtil.getDetails(e));"},{"lineNumber":78,"author":{"gitID":"592363789"},"content":"        } finally {"},{"lineNumber":79,"author":{"gitID":"592363789"},"content":"            closeStreams(fis, fos);"},{"lineNumber":80,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"592363789"},"content":""},{"lineNumber":82,"author":{"gitID":"592363789"},"content":"        replaceFile(fileName, tempFileName);"},{"lineNumber":83,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"592363789"},"content":""},{"lineNumber":85,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"592363789"},"content":"     * Replaces the file at {@code toReplace} with the file at {@code replacement}."},{"lineNumber":87,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"592363789"},"content":"    private static void replaceFile(String toReplace, String replacement) {"},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"        File dest \u003d new File(toReplace);"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":"        File src \u003d new File(replacement);"},{"lineNumber":91,"author":{"gitID":"592363789"},"content":""},{"lineNumber":92,"author":{"gitID":"592363789"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"592363789"},"content":"            FileUtil.copyFile(src, dest);"},{"lineNumber":94,"author":{"gitID":"592363789"},"content":"            src.delete();"},{"lineNumber":95,"author":{"gitID":"592363789"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"592363789"},"content":"            logger.warning(\"Could not replace file \" + toReplace + \" with \" + replacement);"},{"lineNumber":97,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"592363789"},"content":""},{"lineNumber":100,"author":{"gitID":"592363789"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns a salted and hashed password to be used for storage."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static String hashPassword(String password) throws Exception {"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        DerivedKey derivedKey \u003d deriveKey(password, null, PBKDF_ITERATION_COUNT, PBKDF_KEY_LENGTH);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Base64.Encoder enc \u003d Base64.getEncoder();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return PBKDF_ALGORITHM + \"$\" + PBKDF_ITERATION_COUNT + \"$\" + PBKDF_KEY_LENGTH + \"$\""},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"                + enc.encodeToString(derivedKey.hash) + \"$\" + enc.encodeToString(derivedKey.salt);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns true if the given {@code password} matches the {@code passwordHash}, or false if otherwise."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    protected static boolean checkPassword(String password, String passwordHash) throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String[] split \u003d passwordHash.split(\"\\\\$\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (split.length !\u003d 5) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid hash.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int iterationCount \u003d Integer.parseInt(split[1]);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        int keyLength \u003d Integer.parseInt(split[2]);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Base64.Decoder dec \u003d Base64.getDecoder();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        DerivedKey derivedKey \u003d deriveKey(password, dec.decode(split[4]), iterationCount, keyLength);"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"        return Arrays.equals(dec.decode(split[3]), derivedKey.hash);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns true if the given {@code hash} is a valid password hash, or false if otherwise."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    protected static boolean isValidPasswordHash(String hash) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String[] split \u003d hash.split(\"\\\\$\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (split.length !\u003d 5) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return split[1].matches(\"\\\\d+\") \u0026\u0026 split[2].matches(\"\\\\d+\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"    // Reused from http://www.novixys.com/blog/aes-encryption-decryption-password-java/"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"     * Encrypts the input stream using the given password, writing the results to the output stream."},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"    private static void encryptStream(String password, InputStream input, OutputStream output) throws Exception {"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"        DerivedKey derivedKey \u003d deriveKey(password, null, PBKDF_ITERATION_COUNT, PBKDF_KEY_LENGTH);"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"        SecretKeySpec skey \u003d new SecretKeySpec(derivedKey.hash, \"AES\");"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"        byte[] iv \u003d new byte[IV_BYTE_LENGTH];"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        RANDOM.nextBytes(iv);"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"        IvParameterSpec ivspec \u003d new IvParameterSpec(iv);"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"        output.write(derivedKey.salt);"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"        output.write(iv);"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"        Cipher ci \u003d Cipher.getInstance(AES_ALGORITHM);"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":"        ci.init(Cipher.ENCRYPT_MODE, skey, ivspec);"},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"        processFile(ci, input, output);"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"    // Reused from http://www.novixys.com/blog/aes-encryption-decryption-password-java/"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"     * Decrypts the input stream using the given password, writing the results to the output stream."},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"    private static void decryptStream(String password, InputStream input, OutputStream output) throws Exception {"},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"        byte[] salt \u003d new byte[SALT_BYTE_LENGTH];"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"        byte[] iv \u003d new byte[IV_BYTE_LENGTH];"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":"        input.read(salt);"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"        input.read(iv);"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":"        DerivedKey derivedKey \u003d deriveKey(password, salt, PBKDF_ITERATION_COUNT, PBKDF_KEY_LENGTH);"},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"        SecretKeySpec skey \u003d new SecretKeySpec(derivedKey.hash, \"AES\");"},{"lineNumber":172,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":"        Cipher ci \u003d Cipher.getInstance(AES_ALGORITHM);"},{"lineNumber":174,"author":{"gitID":"qiu-siqi"},"content":"        ci.init(Cipher.DECRYPT_MODE, skey, new IvParameterSpec(iv));"},{"lineNumber":175,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":"        processFile(ci, input, output);"},{"lineNumber":177,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":179,"author":{"gitID":"qiu-siqi"},"content":"    // Reused from http://www.novixys.com/blog/aes-encryption-decryption-password-java/"},{"lineNumber":180,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"qiu-siqi"},"content":"     * Uses the given cipher to process the input stream, writing the results to the output stream."},{"lineNumber":182,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"qiu-siqi"},"content":"    private static void processFile(Cipher cipher, InputStream input, OutputStream output)"},{"lineNumber":184,"author":{"gitID":"qiu-siqi"},"content":"            throws BadPaddingException, IllegalBlockSizeException, IOException {"},{"lineNumber":185,"author":{"gitID":"qiu-siqi"},"content":"        byte[] ibuf \u003d new byte[1024];"},{"lineNumber":186,"author":{"gitID":"qiu-siqi"},"content":"        int len;"},{"lineNumber":187,"author":{"gitID":"qiu-siqi"},"content":"        while ((len \u003d input.read(ibuf)) !\u003d -1) {"},{"lineNumber":188,"author":{"gitID":"qiu-siqi"},"content":"            byte[] obuf \u003d cipher.update(ibuf, 0, len);"},{"lineNumber":189,"author":{"gitID":"qiu-siqi"},"content":"            if (obuf !\u003d null) {"},{"lineNumber":190,"author":{"gitID":"qiu-siqi"},"content":"                output.write(obuf);"},{"lineNumber":191,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"qiu-siqi"},"content":"        byte[] obuf \u003d cipher.doFinal();"},{"lineNumber":194,"author":{"gitID":"qiu-siqi"},"content":"        if (obuf !\u003d null) {"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":"            output.write(obuf);"},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"qiu-siqi"},"content":"     * Flushes and closes the given streams."},{"lineNumber":201,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"qiu-siqi"},"content":"    private static void closeStreams(InputStream input, OutputStream output) {"},{"lineNumber":203,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"qiu-siqi"},"content":"            input.close();"},{"lineNumber":205,"author":{"gitID":"qiu-siqi"},"content":"            output.flush();"},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":"            output.close();"},{"lineNumber":207,"author":{"gitID":"qiu-siqi"},"content":"        } catch (Exception e) {"},{"lineNumber":208,"author":{"gitID":"qiu-siqi"},"content":"            logger.warning(e.getMessage());"},{"lineNumber":209,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"qiu-siqi"},"content":"     * Derives a key from the given {@code password}. The {@code salt} used for the encryption"},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":"     * can optionally be specified. If {@code salt} is {@code null}, a new salt will be generated."},{"lineNumber":215,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":"    private static DerivedKey deriveKey(String password, byte[] salt,"},{"lineNumber":217,"author":{"gitID":"qiu-siqi"},"content":"                                        int iterationCount, int keyLength) throws Exception {"},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"        if (salt \u003d\u003d null) {"},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":"            salt \u003d new byte[SALT_BYTE_LENGTH];"},{"lineNumber":220,"author":{"gitID":"qiu-siqi"},"content":"            RANDOM.nextBytes(salt);"},{"lineNumber":221,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"qiu-siqi"},"content":"        KeySpec spec \u003d new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);"},{"lineNumber":223,"author":{"gitID":"qiu-siqi"},"content":"        SecretKey key \u003d SecretKeyFactory.getInstance(PBKDF_ALGORITHM).generateSecret(spec);"},{"lineNumber":224,"author":{"gitID":"qiu-siqi"},"content":"        return new DerivedKey(salt, key.getEncoded());"},{"lineNumber":225,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":227,"author":{"gitID":"qiu-siqi"},"content":"    /** Represents the results of a key derivation function. Contains the salt and hash. */"},{"lineNumber":228,"author":{"gitID":"qiu-siqi"},"content":"    private static class DerivedKey {"},{"lineNumber":229,"author":{"gitID":"qiu-siqi"},"content":"        private final byte[] salt;"},{"lineNumber":230,"author":{"gitID":"qiu-siqi"},"content":"        private final byte[] hash;"},{"lineNumber":231,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":232,"author":{"gitID":"qiu-siqi"},"content":"        private DerivedKey(byte[] salt, byte[] hash) {"},{"lineNumber":233,"author":{"gitID":"qiu-siqi"},"content":"            this.salt \u003d salt;"},{"lineNumber":234,"author":{"gitID":"qiu-siqi"},"content":"            this.hash \u003d hash;"},{"lineNumber":235,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":108,"592363789":73,"-":56}},{"path":"src/main/java/seedu/address/logic/parser/SetPasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":" * Parses input arguments and creates a new SetPasswordCommand object."},{"lineNumber":16,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":"public class SetPasswordCommandParser implements Parser\u003cSetPasswordCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":""},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"     * Parses the given {@code String} of arguments in the context of the SetPasswordCommand."},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"     * and returns an SetPasswordCommand object for execution."},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    public SetPasswordCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_OLD, PREFIX_NEW);"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":""},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"        String oldKey \u003d LockManager.NO_PASSWORD;"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"        if (argMultimap.getValue(PREFIX_OLD).isPresent()) {"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"            oldKey \u003d String.valueOf(argMultimap.getValue(PREFIX_OLD).get().trim());"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":""},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        String newKey \u003d LockManager.NO_PASSWORD;"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"        if (argMultimap.getValue(PREFIX_NEW).isPresent()) {"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"            newKey \u003d String.valueOf(argMultimap.getValue(PREFIX_NEW).get().trim());"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":""},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"        boolean isValid \u003d CollectionUtil.isAnyNonNull(oldKey) || CollectionUtil.isAnyNonNull(newKey);"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":""},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        if (args.trim().isEmpty() || !isValid) {"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":""},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"        return new SetPasswordCommand(oldKey, newKey);"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"592363789":34,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ClearMainContentRequestEvent;"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":" * Lists all books in the book shelf to the user."},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"public class ListCommand extends Command {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"            + \": Shows a listing of your books, with optional filtering and sorting.\\n\""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"            + \"Parameters: \""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_STATUS + \"STATUS]\""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY]\""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_RATING + \"RATING]\""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_SORT_BY + \"SORT_BY]\\n\""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"            + PREFIX_STATUS + \" reading \""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"            + PREFIX_SORT_BY + \"priority\";"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed %s books.\";"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    private final FilterDescriptor filterDescriptor;"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    private final Comparator\u003cBook\u003e bookComparator;"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"     * Creates a ListCommand to show a listing of books."},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"     * @param filterDescriptor the filters used for filtering the books to be displayed."},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"     * @param bookComparator the comparator used for sorting the books to be displayed."},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"    public ListCommand(FilterDescriptor filterDescriptor, Comparator\u003cBook\u003e bookComparator) {"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(filterDescriptor, bookComparator);"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        this.filterDescriptor \u003d filterDescriptor;"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        this.bookComparator \u003d bookComparator;"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    public CommandResult execute() {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        // Clear to prevent invalid selections due to changes in observed list"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new ClearMainContentRequestEvent());"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        model.updateBookListSorter(bookComparator);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        model.updateBookListFilter(filterDescriptor.buildCombinedFilter());"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.BOOK_SHELF);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getDisplayBookList().size()));"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof ListCommand // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.filterDescriptor.equals(((ListCommand) other).filterDescriptor) // state check"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.bookComparator.equals(((ListCommand) other).bookComparator));"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"     * Stores the filters used for filtering the books to be displayed."},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    public static class FilterDescriptor {"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        private final List\u003cPredicate\u003cBook\u003e\u003e filters;"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        private Set\u003cString\u003e filterCodes; // used internally for equality testing"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        public FilterDescriptor() {"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"            filters \u003d new LinkedList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes \u003d new HashSet\u003c\u003e();"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        public FilterDescriptor(FilterDescriptor descriptor) {"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"            filters \u003d new LinkedList\u003c\u003e(descriptor.filters);"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes \u003d new HashSet\u003c\u003e(descriptor.filterCodes);"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        /** Adds a filter that selects books with titles containing the given {@code title}. */"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"        public void addTitleFilter(String title) {"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"            filters.add(book -\u003e book.getTitle().title.toLowerCase().contains(title.toLowerCase()));"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes.add(\"t[\" + title.toLowerCase() + \"]\");"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        /** Adds a filter that selects books with authors containing the given {@code author}. */"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        public void addAuthorFilter(String author) {"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"            filters.add(book -\u003e book.getAuthors().stream()"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"                    .anyMatch(bookAuthor -\u003e bookAuthor.fullName.toLowerCase().contains(author.toLowerCase())));"},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes.add(\"a[\" + author.toLowerCase() + \"]\");"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        /** Adds a filter that selects books with categories containing the given {@code category}. */"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"        public void addCategoryFilter(String category) {"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"            filters.add(book -\u003e book.getCategories().stream()"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"                    .anyMatch(bookCategory -\u003e bookCategory.category.toLowerCase().contains(category.toLowerCase())));"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes.add(\"c[\" + category.toLowerCase() + \"]\");"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"        /** Adds a filter that selects books with status matching the given {@code status}. */"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":"        public void addStatusFilter(Status status) {"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"            filters.add(book -\u003e status.equals(book.getStatus()));"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes.add(\"s[\" + status + \"]\");"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"        /** Adds a filter that selects books with priority matching the given {@code priority}. */"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"        public void addPriorityFilter(Priority priority) {"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"            filters.add(book -\u003e priority.equals(book.getPriority()));"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes.add(\"p[\" + priority + \"]\");"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        /** Adds a filter that selects books with ratings matching the given {@code rating}. */"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"        public void addRatingFilter(Rating rating) {"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"            filters.add(book -\u003e rating.equals(book.getRating()));"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"            filterCodes.add(\"r[\" + rating + \"]\");"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        protected Predicate\u003cBook\u003e buildCombinedFilter() {"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"            List\u003cPredicate\u003cBook\u003e\u003e partialFilters \u003d new LinkedList\u003c\u003e(filters);"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"            return book -\u003e partialFilters.stream().allMatch(filter -\u003e filter.test(book));"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"        public boolean equals(Object other) {"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"            return other \u003d\u003d this // short circuit if same object"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"                    || (other instanceof FilterDescriptor // instanceof handles nulls"},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"                    \u0026\u0026 this.filterCodes.equals(((FilterDescriptor) other).filterCodes)); // state check"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":6,"takuyakanbr":129,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.DeselectBookRequestEvent;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ReselectBookRequestEvent;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.CommandUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":" * Deletes a book identified using it\u0027s last displayed index from the book shelf."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"            + \": Deletes the book identified by the index number used in the current book listing.\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_WRONG_ACTIVE_LIST \u003d \"Items from the current list cannot be deleted.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    public static final String UNDO_SUCCESS \u003d \"Successfully undone deleting of %s.\";"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    public static final String UNDO_FAILURE \u003d \"Failed to undo deleting of %s.\";"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    private Book bookToDelete;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, bookToDelete);"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"            EventsCenter.getInstance().post(new DeselectBookRequestEvent());"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"            model.deleteBook(bookToDelete);"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"            EventsCenter.getInstance().post(new ReselectBookRequestEvent());"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"            throw new AssertionError(\"The target book cannot be missing\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        checkActiveListType();"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        CommandUtil.checkValidIndex(model, targetIndex);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"        bookToDelete \u003d CommandUtil.getBook(model, targetIndex);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CommandException} if the active list type is not supported by this command."},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    private void checkActiveListType() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        if (model.getActiveListType() !\u003d ActiveListType.BOOK_SHELF) {"},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"            throw new CommandException(MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"    protected String undo() {"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, bookToDelete);"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"            model.addBook(bookToDelete);"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"            return String.format(UNDO_SUCCESS, bookToDelete);"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"            // Should never end up here"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"            return String.format(UNDO_FAILURE, bookToDelete);"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(this.bookToDelete, ((DeleteCommand) other).bookToDelete));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":43,"takuyakanbr":8,"-":49}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":3,"author":{"gitID":"592363789"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"592363789"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitID":"592363789"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":8,"author":{"gitID":"592363789"},"content":""},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.commands.EditCommand.EditDescriptor;"},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":""},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":" * Parses input arguments and creates a new {@code EditCommand} object."},{"lineNumber":17,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code EditCommand}"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"     * and returns a {@code EditCommand} object for execution."},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"                PREFIX_RATING, PREFIX_PRIORITY, PREFIX_STATUS);"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":""},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"        Index index;"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":""},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"        EditDescriptor editDescriptor \u003d new EditDescriptor();"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":""},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"            editDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":""},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"            editDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":""},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"            editDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":""},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"        if (!editDescriptor.isValid()) {"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"            throw new ParseException(EditCommand.MESSAGE_NO_PARAMETERS);"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":""},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"        return new EditCommand(index, editDescriptor);"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":55,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Theme;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" * Changes the application theme."},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"            + \": Changes the theme used by the application.\\n\""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"            + \"Parameters: THEME_NAME\\n\""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\";"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Application theme changed to: %1$s\";"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"Invalid application theme: %1$s\";"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    private final Theme newTheme;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    public ThemeCommand(Theme newTheme) {"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(newTheme);"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        this.newTheme \u003d newTheme;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(newTheme));"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, newTheme.getThemeName()));"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.newTheme.equals(((ThemeCommand) other).newTheme)); // state check"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":30,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ClearMainContentRequestEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":" * Clears the book shelf."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Book shelf has been cleared!\";"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_WRONG_ACTIVE_LIST \u003d \"Items from the current list cannot be cleared.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public static final String UNDO_SUCCESS \u003d \"Successfully undone clearing of book shelf.\";"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    private ReadOnlyBookShelf previousBookShelf;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    protected void saveSnapshot() {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        previousBookShelf \u003d new BookShelf(model.getBookShelf());"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        checkActiveListType();"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        model.resetData(new BookShelf());"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new ClearMainContentRequestEvent());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CommandException} if the active list type is not supported by this command."},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    private void checkActiveListType() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        if (model.getActiveListType() !\u003d ActiveListType.BOOK_SHELF) {"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"            throw new CommandException(MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    protected String undo() {"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, previousBookShelf);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"        model.resetData(previousBookShelf);"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        return UNDO_SUCCESS;"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":31,"takuyakanbr":6,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.network.Network;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Network network;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    protected UndoStack undoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setData(Model model, Network network, CommandHistory history, UndoStack undoStack) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.network \u003d network;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ClearMainContentRequestEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":" * Encrypts the book shelf."},{"lineNumber":13,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"public class LockCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":""},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":""},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"            + \": Lock the app.\\n\";"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":""},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully locked the app.\";"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":""},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"     * Executes the command and returns the result message."},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"     * @return feedback message of the operation result for display."},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"        model.updateBookListFilter(Model.PREDICATE_HIDE_ALL_BOOKS);"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"        model.setActiveListType(ActiveListType.BOOK_SHELF);"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"        EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"        EventsCenter.getInstance().post(new ClearMainContentRequestEvent());"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"        LockManager.getInstance().lock();"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"592363789":28,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/SetPasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.PasswordChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":10,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"592363789"},"content":" * Changes the password for the app."},{"lineNumber":12,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"public class SetPasswordCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":""},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"    public static final String COMMAND_WORD \u003d \"setpw\";"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":""},{"lineNumber":17,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully changed your password.\";"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change your password.\\n\""},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"            + \"Parameters: [old/OLD_PASSWORD] [new/NEW_PASSWORD]\\n\""},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"            + \"Example: \" + COMMAND_WORD + \" old/123456 new/abcde \";"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Incorrect old password. Please try again.\";"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":""},{"lineNumber":23,"author":{"gitID":"592363789"},"content":"    private String oldPassword;"},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    private String newPassword;"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":""},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    public SetPasswordCommand(String oldPassword, String newPassword) {"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"        requireAllNonNull(oldPassword, newPassword);"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":""},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"        this.oldPassword \u003d oldPassword;"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"        this.newPassword \u003d newPassword;"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":""},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"     * Executes the command and returns the result message."},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"    public CommandResult execute() {"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        requireAllNonNull(oldPassword, newPassword);"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":""},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"        if (LockManager.getInstance().setPassword(oldPassword, newPassword)) {"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"            EventsCenter.getInstance().post(new PasswordChangedEvent(oldPassword, newPassword));"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"            return new CommandResult(MESSAGE_WRONG_PASSWORD);"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":""},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":""},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"        if (!(other instanceof SetPasswordCommand)) {"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"592363789"},"content":""},{"lineNumber":62,"author":{"gitID":"592363789"},"content":"        // state check"},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"        SetPasswordCommand e \u003d (SetPasswordCommand) other;"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":"        return oldPassword.equals(e.oldPassword) \u0026\u0026 newPassword.equals(e.newPassword);"},{"lineNumber":65,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":58,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAliasCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" * Deletes the alias identified by the alias name from the alias list."},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"public class DeleteAliasCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    public static final String COMMAND_WORD \u003d \"deletealias\";"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the alias identified by the alias name.\\n\""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"            + \"Parameters: ALIAS_NAME\\n\""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"            + \"Example: \" + COMMAND_WORD + \"urd\";"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted alias: %1$s.\";"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_NOT_FOUND \u003d \"Alias does not exist: %1$s.\";"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private final String toDelete;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"     * Creates an {@code DeleteAliasCommand}."},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     * @param toDelete the name of the alias to be deleted."},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public DeleteAliasCommand(String toDelete) {"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toDelete);"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        this.toDelete \u003d toDelete.trim().toLowerCase();"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    public CommandResult execute() {"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        Optional\u003cAlias\u003e alias \u003d model.getAlias(toDelete);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        if (!alias.isPresent()) {"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"            return new CommandResult(String.format(MESSAGE_NOT_FOUND, toDelete));"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        model.removeAlias(toDelete);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, alias.get()));"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteAliasCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.toDelete.equals(((DeleteAliasCommand) other).toDelete)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":39,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.DisableCommandBoxRequestEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.EnableCommandBoxRequestEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.CommandUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":" * Adds a book to the book shelf."},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"            + \": Adds the book identified by the index number used in the current search result.\\n\""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_ADDING \u003d \"Adding the book into your book shelf...\";"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_ADD_FAIL \u003d \"Failed to add book into your book shelf. \""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"            + \"Make sure you are connected to the Internet.\";"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the book shelf\";"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_WRONG_ACTIVE_LIST \u003d \"Items from the current list cannot be added.\";"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    public static final String UNDO_SUCCESS \u003d \"Successfully undone adding of %s.\";"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    public static final String UNDO_FAILURE \u003d \"Failed to undo adding of %s.\";"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    private final Index targetIndex;"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    private Book toAdd;"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    private final boolean useJavafxThread;"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    public AddCommand(Index targetIndex) {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        this(targetIndex, true);"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"     * Creates a {@code AddCommand} that can choose not use the JavaFX thread to update the model and UI."},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"     * This constructor is provided for unit-testing purposes."},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    protected AddCommand(Index targetIndex, boolean useJavafxThread) {"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"        this.useJavafxThread \u003d useJavafxThread;"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new DisableCommandBoxRequestEvent());"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        makeAsyncBookDetailsRequest();"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(MESSAGE_ADDING);"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"     * Makes an asynchronous request to retrieve book details."},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    private void makeAsyncBookDetailsRequest() {"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"        network.getBookDetails(toAdd.getGid().gid)"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"                .thenAccept(this::onSuccessfulRequest)"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"                .exceptionally(e -\u003e {"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"                    EventsCenter.getInstance().post(new NewResultAvailableEvent(AddCommand.MESSAGE_ADD_FAIL));"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"                    EventsCenter.getInstance().post(new EnableCommandBoxRequestEvent());"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"                    return null;"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"                });"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"     * Handles the result of a successful request for book details."},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":"    private void onSuccessfulRequest(Book book) {"},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"        if (useJavafxThread) {"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"            Platform.runLater(() -\u003e addBook(book));"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        } else {"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"            addBook(book);"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"     * Adds the given book to the book shelf and posts events to update the UI."},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"    protected void addBook(Book book) {"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"            model.addBook(book);"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"                    String.format(AddCommand.MESSAGE_SUCCESS, book)));"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"            // Should never end up here"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent(AddCommand.MESSAGE_DUPLICATE_BOOK));"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new EnableCommandBoxRequestEvent());"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        checkActiveListType();"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        CommandUtil.checkValidIndex(model, targetIndex);"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        toAdd \u003d CommandUtil.getBook(model, targetIndex);"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"        checkDuplicate();"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CommandException} if the active list type is not supported by this command."},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"    private void checkActiveListType() throws CommandException {"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        if (model.getActiveListType() \u003d\u003d ActiveListType.BOOK_SHELF) {"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"            throw new CommandException(MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"     * Throws a {@link CommandException} if the book to be added exists in the book shelf."},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"    private void checkDuplicate() throws CommandException {"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, toAdd);"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":139,"author":{"gitID":"qiu-siqi"},"content":"        if (model.getBookShelf().getBookByIsbn(toAdd.getIsbn()).isPresent()) {"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"            throw new CommandException(AddCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":"    protected String undo() {"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, toAdd);"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"            model.deleteBook(toAdd);"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":"            return String.format(UNDO_SUCCESS, toAdd);"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"        } catch (BookNotFoundException e) {"},{"lineNumber":152,"author":{"gitID":"qiu-siqi"},"content":"            // AddCommand failed due to network error -\u003e Nothing to undo"},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"            return String.format(UNDO_FAILURE, toAdd);"},{"lineNumber":154,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":160,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.targetIndex.equals(((AddCommand) other).targetIndex)"},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(this.toAdd, ((AddCommand) other).toAdd));"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":151,"takuyakanbr":1,"-":12}},{"path":"src/main/java/seedu/address/logic/CommandAutocorrection.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * Class that is responsible for giving command correction suggestion based on user\u0027s invalid command."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class CommandAutocorrection {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    private static final int MAX_COMMAND_WORD_LENGTH \u003d 12;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"     * Assumes: {@code commandText} represents an invalid command."},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"     * Checks: command word in {@code commandText} is within the length of possible commands."},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"     * Attempts to find a closely matching command that the user might have meant to type."},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"     * @param logic for checking validity of command."},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"     * @param commandText Text as entered by the user."},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"     * @return String representation of the closely matching command."},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException If auto correction failed to find any closely matching command."},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public static String attemptCommandAutoCorrection(Logic logic, String commandText) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        String[] command \u003d logic.parse(commandText);"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        String commandWord \u003d command[0];"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        String arguments \u003d command[1];"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        if (commandWord.length() \u003e MAX_COMMAND_WORD_LENGTH) {"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        return attemptCommandAutoCorrection(logic, commandWord, arguments);"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"     * Attempts to find a closely matching command that the user might have meant to type."},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"     * @param logic for checking validity of command."},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"     * @param commandWord command word."},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"     * @param arguments other parameters for the command."},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"     * @return String representation of the closely matching command."},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException If auto correction failed to find any closely matching command."},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    private static String attemptCommandAutoCorrection(Logic logic, String commandWord, String arguments)"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"            throws ParseException {"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        Optional\u003cString\u003e result \u003d testAddToFront(logic, commandWord, arguments);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        result \u003d result.isPresent() ? result : testAtAllIndexes(logic, commandWord, arguments);"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        if (result.isPresent()) {"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"            return result.get();"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"     * Tests all possible single point mutations to {@code commandWord} and checks whether any of them"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"     * gives a valid command."},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"     * @return corrected command, if any."},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"    private static Optional\u003cString\u003e testAtAllIndexes(Logic logic, String commandWord, String arguments) {"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        for (int i \u003d 0; i \u003c commandWord.length(); i++) {"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"            Optional\u003cString\u003e result \u003d testAtIndex(logic, commandWord, arguments, i);"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"            if (result.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"                return result;"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"        return Optional.empty();"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"     * Tests all possible mutations at {@code index} and checks whether any of them gives a valid command."},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"     * @return corrected command, if any."},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    private static Optional\u003cString\u003e testAtIndex(Logic logic, String commandWord, String arguments, int index) {"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"        char[] alphabets \u003d \"abcdefghijklmnopqrstuvwxyz\".toCharArray();"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        Optional\u003cString\u003e result;"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        for (char character : alphabets) {"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"            result \u003d testAtIndexWithChar(logic, commandWord, arguments, index, character);"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"            if (result.isPresent()) {"},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"                return result;"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        return Optional.empty();"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":89,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"     * Tests all possibilities given an index {@code index} and {@code character}: removing at index {@code index},"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"     * replacing with {@code character} at index {@code index}, and adding {@code character} after index {@code index}."},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"     * Checks whether any of them give a valid command."},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"     * @return valid command, if any."},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"    private static Optional\u003cString\u003e testAtIndexWithChar(Logic logic, String commandWord, String arguments,"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"                                                 int index, char character) {"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"        Optional\u003cString\u003e result \u003d testCommand(logic, StringUtil.removeAt(commandWord, index), arguments);"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        if (result.isPresent()) {"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"            return result;"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        result \u003d testCommand(logic, StringUtil.replace(commandWord, character, index), arguments);"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"        if (result.isPresent()) {"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"            return result;"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        result \u003d testCommand(logic, StringUtil.addAfter(commandWord, character, index), arguments);"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":"        return result;"},{"lineNumber":109,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"     * Tests whether adding any character at the front of {@code commandWord} gives a valid command."},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     * @return valid command, if any."},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    private static Optional\u003cString\u003e testAddToFront(Logic logic, String commandWord, String arguments) {"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"        char[] alphabets \u003d \"abcdefghijklmnopqrstuvwxyz\".toCharArray();"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"        for (char character : alphabets) {"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"            Optional\u003cString\u003e result \u003d testCommand(logic, StringUtil.addAfter(commandWord, character, -1), arguments);"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"            if (result.isPresent()) {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"                return result;"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        return Optional.empty();"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"     * Tests whether {@code commandWord} and {@code arguments} form a valid command."},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"     * @return the command if it is valid."},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"    private static Optional\u003cString\u003e testCommand(Logic logic, String commandWord, String arguments) {"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        String command \u003d (commandWord.trim() + \" \" + arguments.trim()).trim();"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"        return logic.isValidCommand(command) ? Optional.of(command) : Optional.empty();"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":132,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/AliasesCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowAliasListRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" * Shows a list of all command aliases."},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"public class AliasesCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    public static final String COMMAND_WORD \u003d \"aliases\";"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a listing of your command aliases.\\n\""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed %s aliases.\";"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new ShowAliasListRequestEvent());"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getAliasList().size()));"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":19,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Represents a command which can be undone."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"     * Store what is required of the current state of {@code model#bookShelf}."},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"     * {@code UndoableCommand}s that needs to save some data should override this method."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    protected void saveSnapshot() {}"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"     * Revert the state of {@code model#bookShelf} back to before this command was executed."},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"     * @return success or failure message."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    protected abstract String undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        saveSnapshot();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":8,"-":28}},{"path":"src/main/java/seedu/address/logic/commands/LibraryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowLibraryResultRequestEvent;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.CommandUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":" * Searches for a book in the library."},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"public class LibraryCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    public static final String COMMAND_WORD \u003d \"library\";"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            + \": Views the availability of the book identified by the index number in the library.\\n\""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Showing availability of book: %1$s.\";"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_FAIL \u003d \"Failed to search for book in library. \""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"            + \"Make sure you are connected to the Internet.\";"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SEARCHING \u003d \"Searching for the book in the library...\";"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_WRONG_ACTIVE_LIST \u003d \"Cannot view availability of books \""},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"            + \"in the current list.\";"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    public LibraryCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, targetIndex);"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        CommandUtil.checkValidIndex(model, targetIndex);"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        makeAsyncBookInLibraryRequest(CommandUtil.getBook(model, targetIndex));"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(MESSAGE_SEARCHING);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"     * Makes an asynchronous request to search for {@code book} in library."},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"    private void makeAsyncBookInLibraryRequest(Book book) {"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        network.searchLibraryForBook(book)"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":"                .thenAccept(result -\u003e onSuccessfulRequest(result, book))"},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"                .exceptionally(e -\u003e {"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"                    EventsCenter.getInstance().post(new NewResultAvailableEvent(MESSAGE_FAIL));"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":"                    return null;"},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"                });"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"     * Handles the result of a successful search for the book in library."},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    private void onSuccessfulRequest(String result, Book book) {"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new ShowLibraryResultRequestEvent(result));"},{"lineNumber":68,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent(String.format(MESSAGE_SUCCESS, book)));"},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof LibraryCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.targetIndex.equals(((LibraryCommand) other).targetIndex));"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":69,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.network.Network;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, Network network, CommandHistory history, UndoStack undoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/RecentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" * Lists all recently selected books to the user."},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"public class RecentCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    public static final String COMMAND_WORD \u003d \"recent\";"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed %s recently selected books.\";"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        model.setActiveListType(ActiveListType.RECENT_BOOKS);"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getActiveList().size()));"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":21,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.JumpToBookListIndexRequestEvent;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.CommandUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" * Selects a book identified using it\u0027s last displayed index from the book shelf."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"            + \": Selects the book identified by the index number in the current book listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SELECT_BOOK_SUCCESS \u003d \"Selected Book: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        CommandUtil.checkValidIndex(model, targetIndex);"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        updateRecentBooksList();"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new JumpToBookListIndexRequestEvent(targetIndex));"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_BOOK_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    private void updateRecentBooksList() {"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"        if (model.getActiveListType() !\u003d ActiveListType.RECENT_BOOKS) {"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"            model.addRecentBook(model.getActiveList().get(targetIndex.getZeroBased()));"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":16,"takuyakanbr":3,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.UndoStack;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.network.Network;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, undoStack);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"        if (!undoStack.canUndo()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        String message \u003d undoStack.popUndo().undo();"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        model.updateBookListFilter(Model.PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.BOOK_SHELF);"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(message);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setData(Model model, Network network, CommandHistory commandHistory, UndoStack undoStack) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        this.undoStack \u003d undoStack;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":10,"takuyakanbr":1,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/AddAliasCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" * Adds a command alias to the alias list."},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public class AddAliasCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    public static final String COMMAND_WORD \u003d \"addalias\";"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new alias for a command.\\n\""},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"            + \"Parameters: ALIAS_NAME \""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"            + PREFIX_COMMAND + \"COMMAND\\n\""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"            + \"Example: \" + COMMAND_WORD + \"urd \""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"            + PREFIX_COMMAND + \"list s/unread\";"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_NEW \u003d \"Added a new alias: %1$s.\";"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_UPDATE \u003d \"Updated an existing alias: %1$s.\";"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    private final Alias toAdd;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     * Creates an {@code AddAliasCommand}."},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     * @param toAdd the alias to be added."},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public AddAliasCommand(Alias toAdd) {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toAdd);"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        this.toAdd \u003d toAdd;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public CommandResult execute() {"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        boolean isUpdating \u003d model.getAlias(toAdd.getName()).isPresent();"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        model.addAlias(toAdd);"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        String message \u003d isUpdating ? MESSAGE_UPDATE : MESSAGE_NEW;"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        return new CommandResult(String.format(message, toAdd));"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof AddAliasCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.toAdd.equals(((AddAliasCommand) other).toAdd)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":39,"-":14}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Bibliotek as requested ...\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"    private static final CommandResult emptyResult \u003d new CommandResult(\"\");"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public final String feedbackToUser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public static CommandResult emptyResult() {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        return emptyResult;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public static boolean isEmptyResult(CommandResult commandResult) {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        return commandResult.equals(emptyResult);"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":10,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/SearchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.DisableCommandBoxRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.EnableCommandBoxRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":" * Searches for books on Google Books that matches a set of parameters."},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"public class SearchCommand extends Command {"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    public static final String COMMAND_WORD \u003d \"search\";"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches for books online.\\n\""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"            + \"Parameters: [KEY_WORDS] \""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_ISBN + \"ISBN] \""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\\n\""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"            + PREFIX_TITLE + \" Artemis \""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"            + PREFIX_AUTHOR + \"Andy Weir\";"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SEARCHING \u003d \"Searching for matching books...\";"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_EMPTY_QUERY \u003d \"No search parameter specified.\";"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SEARCH_FAIL \u003d \"Failed to retrieve information from online service.\";"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public static final String MESSAGE_SEARCH_SUCCESS \u003d \"Found %s matching books.\";"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    private final SearchDescriptor searchDescriptor;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    private final boolean useJavafxThread;"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"     * Creates a SearchCommand to search for matching books."},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"     * @param searchDescriptor parameters to search with."},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    public SearchCommand(SearchDescriptor searchDescriptor) {"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        this(searchDescriptor, true);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"     * Creates a {@code SearchCommand} that can choose not use the JavaFX thread to update the model and UI."},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     * This constructor is provided for unit-testing purposes."},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    protected SearchCommand(SearchDescriptor searchDescriptor, boolean useJavafxThread) {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(searchDescriptor);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        assert searchDescriptor.isValid();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        this.searchDescriptor \u003d new SearchDescriptor(searchDescriptor);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        this.useJavafxThread \u003d useJavafxThread;"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    public CommandResult execute() {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new DisableCommandBoxRequestEvent());"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        makeAsyncSearchRequest();"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        return new CommandResult(MESSAGE_SEARCHING);"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"     * Makes an asynchronous request to search for books."},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"    private void makeAsyncSearchRequest() {"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"        String searchString \u003d searchDescriptor.toSearchString();"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"        assert !searchString.trim().isEmpty();"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"        network.searchBooks(searchString)"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"                .thenAccept(this::onSuccessfulRequest)"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"                .exceptionally(e -\u003e {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"                    EventsCenter.getInstance().post(new NewResultAvailableEvent(SearchCommand.MESSAGE_SEARCH_FAIL));"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"                    EventsCenter.getInstance().post(new EnableCommandBoxRequestEvent());"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"                    return null;"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"                });"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"     * Handles the result of a successful request to search for books."},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    private void onSuccessfulRequest(ReadOnlyBookShelf bookShelf) {"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(bookShelf);"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        if (useJavafxThread) {"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"            Platform.runLater(() -\u003e displaySearchResults(bookShelf));"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        } else {"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"            displaySearchResults(bookShelf);"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"     * Updates the model with the given search results and posts events to update the UI."},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    private void displaySearchResults(ReadOnlyBookShelf bookShelf) {"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"        model.updateSearchResults(bookShelf);"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"        model.setActiveListType(ActiveListType.SEARCH_RESULTS);"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"                String.format(SearchCommand.MESSAGE_SEARCH_SUCCESS, bookShelf.size())));"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        EventsCenter.getInstance().post(new EnableCommandBoxRequestEvent());"},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"        if (!(other instanceof SearchCommand)) {"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        // state check"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        SearchCommand e \u003d (SearchCommand) other;"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        return searchDescriptor.equals(e.searchDescriptor);"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"     * Stores the parameters to search with."},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"    public static class SearchDescriptor {"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        private String keyWords;"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"        private String isbn;"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":"        private String title;"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"        private String author;"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"        private String category;"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        public SearchDescriptor() {}"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        /**"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"         * Copy constructor."},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"         */"},{"lineNumber":146,"author":{"gitID":"takuyakanbr"},"content":"        public SearchDescriptor(SearchDescriptor toCopy) {"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"            this.keyWords \u003d toCopy.keyWords;"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"            this.isbn \u003d toCopy.isbn;"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"            this.title \u003d toCopy.title;"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"            this.author \u003d toCopy.author;"},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"            this.category \u003d toCopy.category;"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":154,"author":{"gitID":"takuyakanbr"},"content":"        /**"},{"lineNumber":155,"author":{"gitID":"takuyakanbr"},"content":"         * Returns true if at least one field is not empty."},{"lineNumber":156,"author":{"gitID":"takuyakanbr"},"content":"         */"},{"lineNumber":157,"author":{"gitID":"takuyakanbr"},"content":"        public boolean isValid() {"},{"lineNumber":158,"author":{"gitID":"takuyakanbr"},"content":"            return CollectionUtil.isAnyNonNull(keyWords, isbn, title, author, category);"},{"lineNumber":159,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":161,"author":{"gitID":"takuyakanbr"},"content":"        public Optional\u003cString\u003e getKeyWords() {"},{"lineNumber":162,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.ofNullable(keyWords);"},{"lineNumber":163,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":165,"author":{"gitID":"takuyakanbr"},"content":"        public void setKeyWords(String keyWords) {"},{"lineNumber":166,"author":{"gitID":"takuyakanbr"},"content":"            this.keyWords \u003d keyWords;"},{"lineNumber":167,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":169,"author":{"gitID":"takuyakanbr"},"content":"        public Optional\u003cString\u003e getIsbn() {"},{"lineNumber":170,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.ofNullable(isbn);"},{"lineNumber":171,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":173,"author":{"gitID":"takuyakanbr"},"content":"        public void setIsbn(String isbn) {"},{"lineNumber":174,"author":{"gitID":"takuyakanbr"},"content":"            this.isbn \u003d isbn;"},{"lineNumber":175,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":177,"author":{"gitID":"takuyakanbr"},"content":"        public Optional\u003cString\u003e getTitle() {"},{"lineNumber":178,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.ofNullable(title);"},{"lineNumber":179,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":181,"author":{"gitID":"takuyakanbr"},"content":"        public void setTitle(String title) {"},{"lineNumber":182,"author":{"gitID":"takuyakanbr"},"content":"            this.title \u003d title;"},{"lineNumber":183,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":185,"author":{"gitID":"takuyakanbr"},"content":"        public Optional\u003cString\u003e getAuthor() {"},{"lineNumber":186,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.ofNullable(author);"},{"lineNumber":187,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":189,"author":{"gitID":"takuyakanbr"},"content":"        public void setAuthor(String author) {"},{"lineNumber":190,"author":{"gitID":"takuyakanbr"},"content":"            this.author \u003d author;"},{"lineNumber":191,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":193,"author":{"gitID":"takuyakanbr"},"content":"        public Optional\u003cString\u003e getCategory() {"},{"lineNumber":194,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.ofNullable(category);"},{"lineNumber":195,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":197,"author":{"gitID":"takuyakanbr"},"content":"        public void setCategory(String category) {"},{"lineNumber":198,"author":{"gitID":"takuyakanbr"},"content":"            this.category \u003d category;"},{"lineNumber":199,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":201,"author":{"gitID":"takuyakanbr"},"content":"        /** Returns the search string to be used as part of the API url. */"},{"lineNumber":202,"author":{"gitID":"takuyakanbr"},"content":"        public String toSearchString() {"},{"lineNumber":203,"author":{"gitID":"takuyakanbr"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":204,"author":{"gitID":"takuyakanbr"},"content":"            getKeyWords().ifPresent(searchTerm -\u003e builder.append(searchTerm).append(\" \"));"},{"lineNumber":205,"author":{"gitID":"takuyakanbr"},"content":"            getIsbn().ifPresent(isbn -\u003e builder.append(\"isbn:\").append(isbn).append(\" \"));"},{"lineNumber":206,"author":{"gitID":"takuyakanbr"},"content":"            getTitle().ifPresent(title -\u003e builder.append(\"intitle:\").append(title).append(\" \"));"},{"lineNumber":207,"author":{"gitID":"takuyakanbr"},"content":"            getAuthor().ifPresent(author -\u003e builder.append(\"inauthor:\").append(author).append(\" \"));"},{"lineNumber":208,"author":{"gitID":"takuyakanbr"},"content":"            getCategory().ifPresent(category -\u003e builder.append(\"subject:\").append(category));"},{"lineNumber":209,"author":{"gitID":"takuyakanbr"},"content":"            return builder.toString().trim();"},{"lineNumber":210,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":212,"author":{"gitID":"takuyakanbr"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"takuyakanbr"},"content":"        public String toString() {"},{"lineNumber":214,"author":{"gitID":"takuyakanbr"},"content":"            return toSearchString();"},{"lineNumber":215,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":217,"author":{"gitID":"takuyakanbr"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"takuyakanbr"},"content":"        public boolean equals(Object other) {"},{"lineNumber":219,"author":{"gitID":"takuyakanbr"},"content":"            // short circuit if same object"},{"lineNumber":220,"author":{"gitID":"takuyakanbr"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":221,"author":{"gitID":"takuyakanbr"},"content":"                return true;"},{"lineNumber":222,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":223,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":224,"author":{"gitID":"takuyakanbr"},"content":"            // instanceof handles nulls"},{"lineNumber":225,"author":{"gitID":"takuyakanbr"},"content":"            if (!(other instanceof SearchDescriptor)) {"},{"lineNumber":226,"author":{"gitID":"takuyakanbr"},"content":"                return false;"},{"lineNumber":227,"author":{"gitID":"takuyakanbr"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":229,"author":{"gitID":"takuyakanbr"},"content":"            // state check"},{"lineNumber":230,"author":{"gitID":"takuyakanbr"},"content":"            SearchDescriptor e \u003d (SearchDescriptor) other;"},{"lineNumber":231,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":232,"author":{"gitID":"takuyakanbr"},"content":"            return getKeyWords().equals(e.getKeyWords())"},{"lineNumber":233,"author":{"gitID":"takuyakanbr"},"content":"                    \u0026\u0026 getIsbn().equals(e.getIsbn())"},{"lineNumber":234,"author":{"gitID":"takuyakanbr"},"content":"                    \u0026\u0026 getTitle().equals(e.getTitle())"},{"lineNumber":235,"author":{"gitID":"takuyakanbr"},"content":"                    \u0026\u0026 getAuthor().equals(e.getAuthor())"},{"lineNumber":236,"author":{"gitID":"takuyakanbr"},"content":"                    \u0026\u0026 getCategory().equals(e.getCategory());"},{"lineNumber":237,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":5,"takuyakanbr":225,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/HintParser.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR_STRING;"},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY_STRING;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND_STRING;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN_STRING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_STRING;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_STRING;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY_STRING;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING_STRING;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_BY_STRING;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS_STRING;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE_STRING;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAliasCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasesCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteAliasCommand;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.LibraryCommand;"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.RecentCommand;"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.logic.commands.ReviewsCommand;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"fishTT"},"content":"//@@author fishTT"},{"lineNumber":54,"author":{"gitID":"fishTT"},"content":"/**"},{"lineNumber":55,"author":{"gitID":"fishTT"},"content":" * Class that is responsible for generating hints based on user input."},{"lineNumber":56,"author":{"gitID":"fishTT"},"content":" * Contains one public method generateHint which returns an appropriate hint based on input."},{"lineNumber":57,"author":{"gitID":"fishTT"},"content":" */"},{"lineNumber":58,"author":{"gitID":"fishTT"},"content":"public class HintParser {"},{"lineNumber":59,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":60,"author":{"gitID":"fishTT"},"content":"    private final Logic logic;"},{"lineNumber":61,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":62,"author":{"gitID":"fishTT"},"content":"    public HintParser(Logic logic) {"},{"lineNumber":63,"author":{"gitID":"fishTT"},"content":"        this.logic \u003d logic;"},{"lineNumber":64,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":66,"author":{"gitID":"fishTT"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"fishTT"},"content":"     * Parses {@code String input} and returns an appropriate hint."},{"lineNumber":68,"author":{"gitID":"fishTT"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"fishTT"},"content":"    public String generateHint(String input) {"},{"lineNumber":70,"author":{"gitID":"fishTT"},"content":"        String[] command;"},{"lineNumber":71,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":72,"author":{"gitID":"fishTT"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"fishTT"},"content":"            command \u003d logic.parse(input);"},{"lineNumber":74,"author":{"gitID":"fishTT"},"content":"        } catch (ParseException e) {"},{"lineNumber":75,"author":{"gitID":"fishTT"},"content":"            return \"\";"},{"lineNumber":76,"author":{"gitID":"fishTT"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":78,"author":{"gitID":"fishTT"},"content":"        return generateHintContent(command[0], command[1]);"},{"lineNumber":79,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":81,"author":{"gitID":"fishTT"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"fishTT"},"content":"     * Returns an appropriate hint based on commandWord and arguments."},{"lineNumber":83,"author":{"gitID":"fishTT"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"fishTT"},"content":"    private static String generateHintContent(String commandWord, String arguments) {"},{"lineNumber":85,"author":{"gitID":"fishTT"},"content":"        switch (commandWord) {"},{"lineNumber":86,"author":{"gitID":"fishTT"},"content":"        case AddAliasCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"fishTT"},"content":"            return generateAddAliasHint(arguments);"},{"lineNumber":88,"author":{"gitID":"fishTT"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"fishTT"},"content":"            return generateHintForIndexedCommand(arguments, \" add a book\");"},{"lineNumber":90,"author":{"gitID":"fishTT"},"content":"        case AliasesCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"fishTT"},"content":"            return \" list all command aliases\";"},{"lineNumber":92,"author":{"gitID":"fishTT"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"fishTT"},"content":"            return \" clear book shelf\";"},{"lineNumber":94,"author":{"gitID":"fishTT"},"content":"        case DeleteAliasCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"fishTT"},"content":"            return generateDeleteAliasHint(arguments);"},{"lineNumber":96,"author":{"gitID":"fishTT"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"fishTT"},"content":"            return generateHintForIndexedCommand(arguments, \" delete a book\");"},{"lineNumber":98,"author":{"gitID":"fishTT"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"fishTT"},"content":"            return generateEditHint(arguments);"},{"lineNumber":100,"author":{"gitID":"fishTT"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"fishTT"},"content":"            return \" exit the app\";"},{"lineNumber":102,"author":{"gitID":"fishTT"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"fishTT"},"content":"            return \" show user guide\";"},{"lineNumber":104,"author":{"gitID":"fishTT"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"fishTT"},"content":"            return \" show command history\";"},{"lineNumber":106,"author":{"gitID":"fishTT"},"content":"        case LibraryCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"fishTT"},"content":"            return generateHintForIndexedCommand(arguments, \" find book in library\");"},{"lineNumber":108,"author":{"gitID":"fishTT"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"fishTT"},"content":"            return generateListHint(arguments);"},{"lineNumber":110,"author":{"gitID":"fishTT"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"fishTT"},"content":"            return \" lock the app\";"},{"lineNumber":112,"author":{"gitID":"fishTT"},"content":"        case RecentCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"fishTT"},"content":"            return \" view recently selected books\";"},{"lineNumber":114,"author":{"gitID":"fishTT"},"content":"        case ReviewsCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"fishTT"},"content":"            return generateHintForIndexedCommand(arguments, \" view book review\");"},{"lineNumber":116,"author":{"gitID":"fishTT"},"content":"        case SearchCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"fishTT"},"content":"            return generateSearchHint(arguments);"},{"lineNumber":118,"author":{"gitID":"fishTT"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"fishTT"},"content":"            return generateHintForIndexedCommand(arguments, \" select a book\");"},{"lineNumber":120,"author":{"gitID":"fishTT"},"content":"        case SetPasswordCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"fishTT"},"content":"            return generateSetPasswordHint(arguments);"},{"lineNumber":122,"author":{"gitID":"fishTT"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"fishTT"},"content":"            return generateThemeHint(arguments);"},{"lineNumber":124,"author":{"gitID":"fishTT"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"fishTT"},"content":"            return \" undo last modification\";"},{"lineNumber":126,"author":{"gitID":"fishTT"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"fishTT"},"content":"            return generateUnlockHint(arguments);"},{"lineNumber":128,"author":{"gitID":"fishTT"},"content":"        default:"},{"lineNumber":129,"author":{"gitID":"fishTT"},"content":"            return \"\";"},{"lineNumber":130,"author":{"gitID":"fishTT"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":133,"author":{"gitID":"fishTT"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Parses the end of arguments to check if user is currently typing a prefix that is in prefixes."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns hint if user is typing a prefix."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Returns empty Optional if user is not typing a prefix."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private static Optional\u003cString\u003e generatePrefixHintBasedOnEndArgs(String arguments, Prefix... prefixes) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        for (Prefix p : prefixes) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            String prefixString \u003d p.getPrefix();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            String parameter \u003d prefixIntoParameter(p);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            for (int i \u003d 1; i \u003c\u003d prefixString.length(); ++i) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                if (arguments.endsWith(\" \" + prefixString.substring(0, i))) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                    return Optional.of(prefixString.substring(i, prefixString.length()) + parameter);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return Optional.empty();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Parses arguments to check for all optional parameters that have not been used,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * from among the optional parameters as specified by {@code prefixes}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @return a hint showing all the parameters that are not present,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *         or {@code defaultHint} if all parameters are present."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private static String showUnusedParameters(String arguments, String defaultHint,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                                               String preamble, Prefix... prefixes) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(arguments, prefixes);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        boolean hasPrefixes \u003d false;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        for (Prefix p : prefixes) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e parameterOptional \u003d argumentMultimap.getValue(p);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            if (parameterOptional.isPresent()) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                hasPrefixes \u003d true;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                continue;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            if (sb.length() \u003e 0) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                sb.append(\" \");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            sb.append(\"[\").append(p.getPrefix()).append(prefixIntoParameter(p)).append(\"]\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!hasPrefixes \u0026\u0026 preamble !\u003d null \u0026\u0026 argumentMultimap.getPreamble().trim().isEmpty()) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            sb.insert(0, \"[\" + preamble + \"] \");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        if (sb.length() \u003d\u003d 0) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return defaultHint;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return getHintPadding(arguments) + sb.toString();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"fishTT"},"content":"    //@@author fishTT"},{"lineNumber":187,"author":{"gitID":"fishTT"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"fishTT"},"content":"     * Parses arguments to check for the next required parameter that has not been used,"},{"lineNumber":189,"author":{"gitID":"fishTT"},"content":"     * from among the required parameters as specified by {@code prefixes}."},{"lineNumber":190,"author":{"gitID":"fishTT"},"content":"     * @return a hint for the parameter that is not present, or {@code defaultHint} if all parameters are present."},{"lineNumber":191,"author":{"gitID":"fishTT"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"fishTT"},"content":"    private static String showNextParameter(String arguments, String defaultHint, Prefix... prefixes) {"},{"lineNumber":193,"author":{"gitID":"fishTT"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(arguments, prefixes);"},{"lineNumber":194,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":195,"author":{"gitID":"fishTT"},"content":"        for (Prefix p : prefixes) {"},{"lineNumber":196,"author":{"gitID":"fishTT"},"content":"            Optional\u003cString\u003e parameterOptional \u003d argumentMultimap.getValue(p);"},{"lineNumber":197,"author":{"gitID":"fishTT"},"content":"            if (!parameterOptional.isPresent()) {"},{"lineNumber":198,"author":{"gitID":"fishTT"},"content":"                return getHintPadding(arguments) + p.getPrefix() + prefixIntoParameter(p);"},{"lineNumber":199,"author":{"gitID":"fishTT"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"fishTT"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"fishTT"},"content":"        return defaultHint;"},{"lineNumber":202,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":204,"author":{"gitID":"fishTT"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"fishTT"},"content":"     * Returns a parameter based on {@code prefix}."},{"lineNumber":206,"author":{"gitID":"fishTT"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"fishTT"},"content":"    private static String prefixIntoParameter(Prefix prefix) {"},{"lineNumber":208,"author":{"gitID":"fishTT"},"content":"        switch (prefix.toString()) {"},{"lineNumber":209,"author":{"gitID":"fishTT"},"content":"        case PREFIX_AUTHOR_STRING:"},{"lineNumber":210,"author":{"gitID":"fishTT"},"content":"            return \"AUTHOR\";"},{"lineNumber":211,"author":{"gitID":"fishTT"},"content":"        case PREFIX_CATEGORY_STRING:"},{"lineNumber":212,"author":{"gitID":"fishTT"},"content":"            return \"CATEGORY\";"},{"lineNumber":213,"author":{"gitID":"fishTT"},"content":"        case PREFIX_ISBN_STRING:"},{"lineNumber":214,"author":{"gitID":"fishTT"},"content":"            return \"ISBN\";"},{"lineNumber":215,"author":{"gitID":"fishTT"},"content":"        case PREFIX_TITLE_STRING:"},{"lineNumber":216,"author":{"gitID":"fishTT"},"content":"            return \"TITLE\";"},{"lineNumber":217,"author":{"gitID":"fishTT"},"content":"        case PREFIX_STATUS_STRING:"},{"lineNumber":218,"author":{"gitID":"fishTT"},"content":"            return \"STATUS\";"},{"lineNumber":219,"author":{"gitID":"fishTT"},"content":"        case PREFIX_PRIORITY_STRING:"},{"lineNumber":220,"author":{"gitID":"fishTT"},"content":"            return \"PRIORITY\";"},{"lineNumber":221,"author":{"gitID":"fishTT"},"content":"        case PREFIX_RATING_STRING:"},{"lineNumber":222,"author":{"gitID":"fishTT"},"content":"            return \"RATING\";"},{"lineNumber":223,"author":{"gitID":"fishTT"},"content":"        case PREFIX_SORT_BY_STRING:"},{"lineNumber":224,"author":{"gitID":"fishTT"},"content":"            return \"SORT_BY\";"},{"lineNumber":225,"author":{"gitID":"fishTT"},"content":"        case PREFIX_OLD_STRING:"},{"lineNumber":226,"author":{"gitID":"fishTT"},"content":"            return \"OLD_PASSWORD\";"},{"lineNumber":227,"author":{"gitID":"fishTT"},"content":"        case PREFIX_NEW_STRING:"},{"lineNumber":228,"author":{"gitID":"fishTT"},"content":"            return \"NEW_PASSWORD\";"},{"lineNumber":229,"author":{"gitID":"fishTT"},"content":"        case PREFIX_COMMAND_STRING:"},{"lineNumber":230,"author":{"gitID":"fishTT"},"content":"            return \"COMMAND\";"},{"lineNumber":231,"author":{"gitID":"fishTT"},"content":"        default:"},{"lineNumber":232,"author":{"gitID":"fishTT"},"content":"            return \"KEYWORD\";"},{"lineNumber":233,"author":{"gitID":"fishTT"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":236,"author":{"gitID":"fishTT"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"fishTT"},"content":"     * Parses arguments to check if index is present."},{"lineNumber":238,"author":{"gitID":"fishTT"},"content":"     * Checks on userInput to handle whitespace."},{"lineNumber":239,"author":{"gitID":"fishTT"},"content":"     * Returns \"index\" if index is not present, else returns an empty Optional."},{"lineNumber":240,"author":{"gitID":"fishTT"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"fishTT"},"content":"    private static Optional\u003cString\u003e generateIndexHint(String arguments) {"},{"lineNumber":242,"author":{"gitID":"fishTT"},"content":"        try {"},{"lineNumber":243,"author":{"gitID":"fishTT"},"content":"            ParserUtil.parseIndex(arguments);"},{"lineNumber":244,"author":{"gitID":"fishTT"},"content":"            return Optional.empty();"},{"lineNumber":245,"author":{"gitID":"fishTT"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":246,"author":{"gitID":"fishTT"},"content":"            if (arguments.matches(\".*\\\\s\\\\d+\\\\s.*\")) {"},{"lineNumber":247,"author":{"gitID":"fishTT"},"content":"                return Optional.empty();"},{"lineNumber":248,"author":{"gitID":"fishTT"},"content":"            }"},{"lineNumber":249,"author":{"gitID":"fishTT"},"content":"            return Optional.of(getHintPadding(arguments) + \"INDEX\");"},{"lineNumber":250,"author":{"gitID":"fishTT"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"fishTT"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"fishTT"},"content":""},{"lineNumber":253,"author":{"gitID":"fishTT"},"content":"    //@@author"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Parses arguments to check if a preamble is present."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Returns {@code parameterName} if preamble is not present, else returns an empty Optional."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    private static Optional\u003cString\u003e generatePreambleHint(String arguments, String parameterName) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        if (arguments.matches(\"\\\\s+\\\\S+.*\")) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        return Optional.of(getHintPadding(arguments) + parameterName);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Returns an empty string if {@code arguments} starts with a space,"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * or a string containing a single space if not."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private static String getHintPadding(String arguments) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        return arguments.endsWith(\" \") ? \"\" : \" \";"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    /** Returns a hint for commands that accepts only an index. */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private static String generateHintForIndexedCommand(String arguments, String defaultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        return generateIndexHint(arguments).orElse(defaultMessage);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the addalias command. */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private static String generateAddAliasHint(String arguments) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e preambleHintOptional \u003d generatePreambleHint(arguments, \"ALIAS_NAME\");"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        if (preambleHintOptional.isPresent()) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            return preambleHintOptional.get();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e endHintOptional \u003d generatePrefixHintBasedOnEndArgs(arguments, PREFIX_COMMAND);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        return endHintOptional.orElseGet(() -\u003e showNextParameter(arguments, \" add a command alias\", PREFIX_COMMAND));"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the deletealias command. */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    private static String generateDeleteAliasHint(String arguments) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return generatePreambleHint(arguments, \"ALIAS_NAME\").orElse(\" delete a command alias\");"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**Returns a hint specific to the edit command. */"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    private static String generateEditHint(String arguments) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e indexHintOptional \u003d generateIndexHint(arguments);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        if (indexHintOptional.isPresent()) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            return indexHintOptional.get();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        Prefix[] prefixes \u003d new Prefix[]{PREFIX_STATUS, PREFIX_PRIORITY, PREFIX_RATING};"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e endHintOptional \u003d generatePrefixHintBasedOnEndArgs(arguments, prefixes);"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        return endHintOptional.orElseGet(() -\u003e showUnusedParameters(arguments, \" edit a book\", null, prefixes));"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the list command. */"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    private static String generateListHint(String arguments) {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        Prefix[] prefixes \u003d new Prefix[]{PREFIX_TITLE, PREFIX_AUTHOR, PREFIX_CATEGORY, PREFIX_STATUS,"},{"lineNumber":308,"author":{"gitID":"-"},"content":"            PREFIX_PRIORITY, PREFIX_RATING, PREFIX_SORT_BY};"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e endHintOptional \u003d generatePrefixHintBasedOnEndArgs(arguments, prefixes);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        return endHintOptional.orElseGet(() -\u003e showUnusedParameters(arguments,"},{"lineNumber":311,"author":{"gitID":"-"},"content":"                \" list, filter, and sort books\", null, prefixes));"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the search command. */"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    private static String generateSearchHint(String arguments) {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        Prefix[] prefixes \u003d new Prefix[]{PREFIX_ISBN, PREFIX_TITLE, PREFIX_AUTHOR, PREFIX_CATEGORY};"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e endHintOptional \u003d generatePrefixHintBasedOnEndArgs(arguments, prefixes);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return endHintOptional.orElseGet(() -\u003e showUnusedParameters(arguments,"},{"lineNumber":319,"author":{"gitID":"-"},"content":"                \" search for books\", \"KEY_WORDS\", prefixes));"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the setpw command. */"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    private static String generateSetPasswordHint(String arguments) {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        Prefix[] prefixes \u003d new Prefix[]{PREFIX_OLD, PREFIX_NEW};"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        Optional\u003cString\u003e endHintOptional \u003d generatePrefixHintBasedOnEndArgs(arguments, prefixes);"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        return endHintOptional.orElseGet(() -\u003e showUnusedParameters(arguments,"},{"lineNumber":327,"author":{"gitID":"-"},"content":"                \" change the password\", null, prefixes));"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the theme command. */"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    private static String generateThemeHint(String arguments) {"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        return generatePreambleHint(arguments, \"THEME\").orElse(\" change app theme\");"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"    /** Returns a hint specific to the unlock command. */"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    private static String generateUnlockHint(String arguments) {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        return generatePreambleHint(arguments, \"PASSWORD\").orElse(\" unlock the app\");"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fishTT":149,"qiu-siqi":7,"takuyakanbr":5,"-":178}},{"path":"src/main/java/seedu/address/logic/commands/ReviewsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ShowBookReviewsRequestEvent;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.CommandUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":" * Shows reviews for a specified book."},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"public class ReviewsCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public static final String COMMAND_WORD \u003d \"reviews\";"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"            + \": Loads reviews of the book identified by the index number used in the current list.\\n\""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Showing reviews for book: %1$s.\";"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    public ReviewsCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        CommandUtil.checkValidIndex(model, targetIndex);"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        Book toLoad \u003d CommandUtil.getBook(model, targetIndex);"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"        EventsCenter.getInstance().post(new ShowBookReviewsRequestEvent(toLoad));"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toLoad));"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof ReviewsCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.targetIndex.equals(((ReviewsCommand) other).targetIndex));"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":45,"-":6}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AliasListChangedEvent;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.model.BookShelfChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Storage extends AliasListStorage, BookShelfStorage, UserPrefsStorage, RecentBooksStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    boolean isBookShelfLoaded();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    String getBookShelfFilePath();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    Optional\u003cReadOnlyBookShelf\u003e readRecentBooksList() throws DataConversionException, IOException;"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    void saveRecentBooksList(ReadOnlyBookShelf recentBooksList) throws IOException;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAliasList\u003e readAliasList() throws DataConversionException, IOException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void saveAliasList(ReadOnlyAliasList aliasList) throws IOException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"     * Saves the current version of the Book Shelf to the hard disk. Creates a new file if it is missing."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    void handleBookShelfChangedEvent(BookShelfChangedEvent bsce);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Saves the current version of the alias list to the hard disk. Creates a new file if it is missing."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void handleAliasListChangedEvent(AliasListChangedEvent bsce);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":6,"takuyakanbr":15,"-":39}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_APP_LOCKED;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.ui.BookListSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.logic.parser.BookShelfParser;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.network.Network;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Network network;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    private final BookShelfParser bookShelfParser;"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    private final UndoStack undoStack;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    private String correctedCommand;"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public LogicManager(Model model, Network network) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.network \u003d network;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        bookShelfParser \u003d new BookShelfParser(model.getAliasList());"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        undoStack \u003d new UndoStack();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean isValidCommand(String commandText) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            String processedText \u003d bookShelfParser.applyCommandAlias(commandText);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            bookShelfParser.parseCommand(processedText);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"        } catch (ParseException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String[] parse(String commandText) throws ParseException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String processedText \u003d bookShelfParser.applyCommandAlias(commandText);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BookShelfParser.BASIC_COMMAND_FORMAT.matcher(processedText);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return new String[] {commandWord, arguments};"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        if (correctedCommand \u003d\u003d null \u0026\u0026 commandText.equals(\"\")) {"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"            return CommandResult.emptyResult();"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        boolean addToHistory \u003d true;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":"            Command command \u003d getCommand(commandText);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"            if (LockManager.getInstance().isLocked()"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                    \u0026\u0026 !(command instanceof HelpCommand || command instanceof UnlockCommand)) {"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"                return new CommandResult(MESSAGE_APP_LOCKED);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"            if (command instanceof UnlockCommand || command instanceof SetPasswordCommand) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                addToHistory \u003d false;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"            command.setData(model, network, history, undoStack);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"            undoStack.push(command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        } catch (ParseException e) {"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"            return attemptCommandAutoCorrection(commandText, e);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            if (addToHistory) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                history.add(commandText);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"     * Attempts command auto-correction if {@code e} is a {@code ParseException} due to the user input"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"     * being unable to be matched to any valid command word."},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"     * @param processedText The command as entered by the user, after accounting for aliases."},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"     * @param e The exception thrown by {@link BookShelfParser}."},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"     * @return message asking user whether he meant the corrected command."},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException If auto correction failed to find any closely related command."},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    private CommandResult attemptCommandAutoCorrection(String processedText, ParseException e) throws ParseException {"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        if (!e.getMessage().equals(Messages.MESSAGE_UNKNOWN_COMMAND)) {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"            throw e;"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"        correctedCommand \u003d CommandAutocorrection.attemptCommandAutoCorrection(this, processedText);"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_CORRECTED_COMMAND, correctedCommand));"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"     * Obtains the command represented by {@code processedText}. If user presses enter (empty String) following a"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"     * command correction, that corrected command will be returned."},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"     * @return the command obtained."},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"     * @throws ParseException If {@code processedText} cannot be parsed."},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":"    private Command getCommand(String commandText) throws ParseException {"},{"lineNumber":135,"author":{"gitID":"qiu-siqi"},"content":"        Command command;"},{"lineNumber":136,"author":{"gitID":"qiu-siqi"},"content":"        if (correctedCommand !\u003d null \u0026\u0026 commandText.equals(\"\")) {"},{"lineNumber":137,"author":{"gitID":"qiu-siqi"},"content":"            command \u003d bookShelfParser.parseCommand(correctedCommand);"},{"lineNumber":138,"author":{"gitID":"qiu-siqi"},"content":"        } else {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            String processedText \u003d bookShelfParser.applyCommandAlias(commandText);"},{"lineNumber":140,"author":{"gitID":"qiu-siqi"},"content":"            command \u003d bookShelfParser.parseCommand(processedText);"},{"lineNumber":141,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"qiu-siqi"},"content":"        correctedCommand \u003d null;"},{"lineNumber":143,"author":{"gitID":"qiu-siqi"},"content":"        return command;"},{"lineNumber":144,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"qiu-siqi"},"content":"    public ObservableList\u003cBook\u003e getActiveList() {"},{"lineNumber":148,"author":{"gitID":"qiu-siqi"},"content":"        return model.getActiveList();"},{"lineNumber":149,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAlias\u003e getDisplayAliasList() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return model.getDisplayAliasList();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":161,"author":{"gitID":"takuyakanbr"},"content":"    @Subscribe"},{"lineNumber":162,"author":{"gitID":"takuyakanbr"},"content":"    private void handleBookListSelectionChangedEvent(BookListSelectionChangedEvent event) {"},{"lineNumber":163,"author":{"gitID":"takuyakanbr"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":"        if (model.getActiveListType() !\u003d ActiveListType.RECENT_BOOKS) {"},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"            model.addRecentBook(event.getNewSelection());"},{"lineNumber":166,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":62,"takuyakanbr":10,"-":96}},{"path":"src/main/java/seedu/address/storage/BookShelfStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" * Represents a storage for {@link seedu.address.model.BookShelf}."},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public interface BookShelfStorage {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"    String getBookShelfFilePath();"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"     * Returns BookShelf data as a {@link ReadOnlyBookShelf}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"    Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     * @see #getBookShelfFilePath()"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    Optional\u003cReadOnlyBookShelf\u003e readBookShelf(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"     * Saves the given {@link ReadOnlyBookShelf} to the storage."},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"     * @param bookShelf cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"     * @see #saveBookShelf(ReadOnlyBookShelf)"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":32,"-":12}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAuthor.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" * JAXB-friendly adapted version of the Author."},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"public class XmlAdaptedAuthor {"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    @XmlValue"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    private String authorName;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs an XmlAdaptedAuthor."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedAuthor() {}"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs a {@code XmlAdaptedAuthor} with the given {@code authorName}."},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedAuthor(String authorName) {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        this.authorName \u003d authorName;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     * Converts a given Author into this class for JAXB use."},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"     * @param source future changes to this will not affect the created."},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedAuthor(Author source) {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        authorName \u003d source.fullName;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"     * Converts this jaxb-friendly adapted author object into the model\u0027s Author object."},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public Author toModelType() {"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        return new Author(authorName);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        if (!(other instanceof XmlAdaptedAuthor)) {"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        return authorName.equals(((XmlAdaptedAuthor) other).authorName);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":42,"-":14}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AliasListChangedEvent;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.model.BookShelfChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Manages storage of Bibliotek data in local storage."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final BookShelfStorage bookShelfStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UserPrefsStorage userPrefsStorage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final RecentBooksStorage recentBooksStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AliasListStorage aliasListStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private boolean isBookShelfLoaded \u003d false;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    public StorageManager(BookShelfStorage bookShelfStorage, UserPrefsStorage userPrefsStorage,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                          RecentBooksStorage recentBooksStorage, AliasListStorage aliasListStorage) {"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        this.bookShelfStorage \u003d bookShelfStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        this.recentBooksStorage \u003d recentBooksStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.aliasListStorage \u003d aliasListStorage;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookShelf methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean isBookShelfLoaded() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return isBookShelfLoaded;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    public String getBookShelfFilePath() {"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        return bookShelfStorage.getBookShelfFilePath();"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // don\u0027t attempt loading if we don\u0027t have the user\u0027s password yet"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        LockManager lockManager \u003d LockManager.getInstance();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (lockManager.isPasswordProtected() \u0026\u0026 !lockManager.hasLoggedIn()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.of(new BookShelf());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        isBookShelfLoaded \u003d true;"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"        return readBookShelf(bookShelfStorage.getBookShelfFilePath());"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf(String filePath) throws DataConversionException, IOException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        return bookShelfStorage.readBookShelf(filePath);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    public void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"        saveBookShelf(bookShelf, bookShelfStorage.getBookShelfFilePath());"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    public void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"        bookShelfStorage.saveBookShelf(bookShelf, filePath);"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    @Subscribe"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"    public void handleBookShelfChangedEvent(BookShelfChangedEvent event) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Book shelf changed; saving to file\"));"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"            saveBookShelf(event.data);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"qiu-siqi"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecentBooks methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"    public String getRecentBooksFilePath() {"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        return recentBooksStorage.getRecentBooksFilePath();"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":118,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    public Optional\u003cReadOnlyBookShelf\u003e readRecentBooksList() throws DataConversionException, IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // don\u0027t attempt loading if we don\u0027t have the user\u0027s password yet"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        LockManager lockManager \u003d LockManager.getInstance();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (lockManager.isPasswordProtected() \u0026\u0026 !lockManager.hasLoggedIn()) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return Optional.of(new BookShelf());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        return recentBooksStorage.readRecentBooksList();"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"    public void saveRecentBooksList(ReadOnlyBookShelf recentBooksList) throws IOException {"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        recentBooksStorage.saveRecentBooksList(recentBooksList);"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AliasList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAliasList\u003e readAliasList() throws DataConversionException, IOException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return aliasListStorage.readAliasList();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void saveAliasList(ReadOnlyAliasList aliasList) throws IOException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        aliasListStorage.saveAliasList(aliasList);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void handleAliasListChangedEvent(AliasListChangedEvent event) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Alias list changed; saving to file\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            saveAliasList(event.data);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":18,"takuyakanbr":37,"-":102}},{"path":"src/main/java/seedu/address/logic/commands/UnlockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AppUnlockedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ActiveListChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":" * Unlocks the app."},{"lineNumber":15,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"public class UnlockCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":""},{"lineNumber":18,"author":{"gitID":"592363789"},"content":"    public static final String COMMAND_WORD \u003d \"unlock\";"},{"lineNumber":19,"author":{"gitID":"592363789"},"content":""},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD  + \": Unlock the app.\\n\""},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"            + \"Parameters: PASSWORD\\n\""},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"            + \"Example: \" + COMMAND_WORD + \" 123456\";"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":""},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully unlocked the app.\";"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":"    protected static final String MESSAGE_NOT_LOCKED \u003d \"The app is not locked.\";"},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    protected static final String MESSAGE_WRONG_PASSWORD \u003d \"Incorrect password. Please try again.\";"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":""},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"    private String password;"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":""},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"    public UnlockCommand(String password) {"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"        this.password \u003d password.trim();"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"592363789"},"content":""},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"        requireAllNonNull(model, password);"},{"lineNumber":37,"author":{"gitID":"592363789"},"content":""},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"        if (!LockManager.getInstance().isLocked()) {"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"            return new CommandResult(MESSAGE_NOT_LOCKED);"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":""},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"        if (LockManager.getInstance().unlock(password)) {"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"            EventsCenter.getInstance().post(new AppUnlockedEvent());"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":"            model.updateBookListFilter(Model.PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":45,"author":{"gitID":"592363789"},"content":""},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"            model.setActiveListType(ActiveListType.BOOK_SHELF);"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":"            EventsCenter.getInstance().post(new ActiveListChangedEvent());"},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"        } else {"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":"            return new CommandResult(MESSAGE_WRONG_PASSWORD);"},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":""},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"                || (other instanceof UnlockCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"                \u0026\u0026 this.password.equals(((UnlockCommand) other).password)); // state check"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":49,"-":11}},{"path":"src/main/java/seedu/address/storage/XmlBookShelfStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CipherEngine;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":" * A class to access BookShelf data stored as an xml file on the hard disk."},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"public class XmlBookShelfStorage implements BookShelfStorage {"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlBookShelfStorage.class);"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    private String filePath;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    public XmlBookShelfStorage(String filePath) {"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    public String getBookShelfFilePath() {"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException {"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"        return readBookShelf(filePath);"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"     * Similar to {@link #readBookShelf()}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf(String filePath) throws DataConversionException,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                                                                             FileNotFoundException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        File bookShelfFile \u003d new File(filePath);"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        if (!bookShelfFile.exists()) {"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"            logger.info(\"BookShelf file \"  + bookShelfFile + \" not found\");"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.empty();"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlSerializableBookShelf xmlBookShelf \u003d getXmlSerializableBookShelf(filePath);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"            return Optional.of(xmlBookShelf.toModelType());"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"            logger.info(\"Illegal values found in \" + bookShelfFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Obtains {@link XmlSerializableBookShelf} from {@code filePath}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private XmlSerializableBookShelf getXmlSerializableBookShelf(String filePath)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throws DataConversionException, FileNotFoundException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        LockManager lockManager \u003d LockManager.getInstance();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (lockManager.isPasswordProtected()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            CipherEngine.decryptFile(filePath, lockManager.getPassword());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableBookShelf xmlBookShelf \u003d XmlFileStorage.loadBookShelfDataFromFile(new File(filePath));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (lockManager.isPasswordProtected()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            CipherEngine.encryptFile(filePath, lockManager.getPassword());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return xmlBookShelf;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    public void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        saveBookShelf(bookShelf, filePath);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"     * Similar to {@link #saveBookShelf(ReadOnlyBookShelf)}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    public void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) throws IOException {"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(bookShelf);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveBookShelfDataToFile(file, new XmlSerializableBookShelf(bookShelf));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (LockManager.getInstance().isPasswordProtected()) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            CipherEngine.encryptFile(filePath, LockManager.getInstance().getPassword());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":54,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.DeselectBookRequestEvent;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.events.ui.ReselectBookRequestEvent;"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.util.CommandUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ActiveListType;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":" * Edits the status, priority, and rating of an existing book."},{"lineNumber":30,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":""},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":""},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the rating, status, and priority\""},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"            + \" of the book identified by the index number.\\n\""},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"            + \"Parameters: INDEX [s/STATUS] [p/PRIORITY] [r/RATING] \""},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"            + PREFIX_RATING + \"-1 \" + PREFIX_PRIORITY + \"low \" + PREFIX_STATUS + \"unread\";"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":""},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Edited Book: %1$s\";"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_NO_PARAMETERS \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"    public static final String MESSAGE_WRONG_ACTIVE_LIST \u003d \"Items from the current list cannot be edited.\";"},{"lineNumber":44,"author":{"gitID":"592363789"},"content":""},{"lineNumber":45,"author":{"gitID":"592363789"},"content":"    public static final String UNDO_SUCCESS \u003d \"Successfully undone editing of %s.\";"},{"lineNumber":46,"author":{"gitID":"592363789"},"content":"    public static final String UNDO_FAILURE \u003d \"Failed to undo editing of %s.\";"},{"lineNumber":47,"author":{"gitID":"592363789"},"content":""},{"lineNumber":48,"author":{"gitID":"592363789"},"content":"    private final Index index;"},{"lineNumber":49,"author":{"gitID":"592363789"},"content":"    private final EditDescriptor editDescriptor;"},{"lineNumber":50,"author":{"gitID":"592363789"},"content":""},{"lineNumber":51,"author":{"gitID":"592363789"},"content":"    private Book bookToEdit;"},{"lineNumber":52,"author":{"gitID":"592363789"},"content":"    private Book editedBook;"},{"lineNumber":53,"author":{"gitID":"592363789"},"content":""},{"lineNumber":54,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"592363789"},"content":"     * @param index of the book in the filtered book list to edit the rating."},{"lineNumber":56,"author":{"gitID":"592363789"},"content":"     * @param editDescriptor details to edit the book with."},{"lineNumber":57,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"592363789"},"content":"    public EditCommand(Index index, EditDescriptor editDescriptor) {"},{"lineNumber":59,"author":{"gitID":"592363789"},"content":"        requireAllNonNull(index, editDescriptor);"},{"lineNumber":60,"author":{"gitID":"592363789"},"content":""},{"lineNumber":61,"author":{"gitID":"592363789"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"592363789"},"content":"        this.editDescriptor \u003d editDescriptor;"},{"lineNumber":63,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"592363789"},"content":""},{"lineNumber":65,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"592363789"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":67,"author":{"gitID":"592363789"},"content":"        requireAllNonNull(bookToEdit, editedBook);"},{"lineNumber":68,"author":{"gitID":"592363789"},"content":""},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"            EventsCenter.getInstance().post(new DeselectBookRequestEvent());"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":"            model.updateBook(bookToEdit, editedBook);"},{"lineNumber":72,"author":{"gitID":"592363789"},"content":"            EventsCenter.getInstance().post(new ReselectBookRequestEvent());"},{"lineNumber":73,"author":{"gitID":"592363789"},"content":"        } catch (DuplicateBookException dpe) {"},{"lineNumber":74,"author":{"gitID":"592363789"},"content":"            throw new AssertionError(\"Editing target book should not result in a duplicate\");"},{"lineNumber":75,"author":{"gitID":"592363789"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"            throw new AssertionError(\"The target book should not be missing\");"},{"lineNumber":77,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"592363789"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedBook));"},{"lineNumber":79,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"592363789"},"content":""},{"lineNumber":81,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"592363789"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"592363789"},"content":"        requireNonNull(model);"},{"lineNumber":84,"author":{"gitID":"592363789"},"content":""},{"lineNumber":85,"author":{"gitID":"592363789"},"content":"        checkActiveListType();"},{"lineNumber":86,"author":{"gitID":"592363789"},"content":"        CommandUtil.checkValidIndex(model, index);"},{"lineNumber":87,"author":{"gitID":"592363789"},"content":""},{"lineNumber":88,"author":{"gitID":"592363789"},"content":"        bookToEdit \u003d CommandUtil.getBook(model, index);"},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"        editedBook \u003d createEditedBook(bookToEdit, editDescriptor);"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"592363789"},"content":""},{"lineNumber":92,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"592363789"},"content":"     * Throws a {@link CommandException} if the active list type is not supported by this command."},{"lineNumber":94,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"592363789"},"content":"    private void checkActiveListType() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"592363789"},"content":"        if (model.getActiveListType() !\u003d ActiveListType.BOOK_SHELF) {"},{"lineNumber":97,"author":{"gitID":"592363789"},"content":"            throw new CommandException(MESSAGE_WRONG_ACTIVE_LIST);"},{"lineNumber":98,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"592363789"},"content":""},{"lineNumber":101,"author":{"gitID":"592363789"},"content":"    //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * edited with {@code editDescriptor}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private static Book createEditedBook(Book bookToEdit, EditDescriptor editDescriptor) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireAllNonNull(bookToEdit, editDescriptor);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d editDescriptor.getStatus().orElse(bookToEdit.getStatus());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d editDescriptor.getPriority().orElse(bookToEdit.getPriority());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Rating updatedRating \u003d editDescriptor.getRating().orElse(bookToEdit.getRating());"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Book(bookToEdit.getGid(), bookToEdit.getIsbn(), bookToEdit.getAuthors(),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                bookToEdit.getTitle(), bookToEdit.getCategories(), bookToEdit.getDescription(),"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                updatedStatus, updatedPriority, updatedRating,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                bookToEdit.getPublisher(), bookToEdit.getPublicationDate());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"    protected String undo() {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(model, editedBook, bookToEdit);"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"            model.updateBook(editedBook, bookToEdit);"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"            return String.format(UNDO_SUCCESS, editedBook);"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"        } catch (DuplicateBookException | BookNotFoundException e) {"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"            // Should never end up here"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"            return String.format(UNDO_FAILURE, editedBook);"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 editDescriptor.equals(e.editDescriptor)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(bookToEdit, e.bookToEdit);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"592363789"},"content":"    //@@author 592363789"},{"lineNumber":151,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"592363789"},"content":"     * Stores the details to edit the book with. Each non-empty field value will replace the"},{"lineNumber":153,"author":{"gitID":"592363789"},"content":"     * corresponding field value of the book."},{"lineNumber":154,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"592363789"},"content":"    public static class EditDescriptor {"},{"lineNumber":156,"author":{"gitID":"592363789"},"content":"        private Status status;"},{"lineNumber":157,"author":{"gitID":"592363789"},"content":"        private Priority priority;"},{"lineNumber":158,"author":{"gitID":"592363789"},"content":"        private Rating rating;"},{"lineNumber":159,"author":{"gitID":"592363789"},"content":""},{"lineNumber":160,"author":{"gitID":"592363789"},"content":"        public EditDescriptor() {}"},{"lineNumber":161,"author":{"gitID":"592363789"},"content":""},{"lineNumber":162,"author":{"gitID":"592363789"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"592363789"},"content":"         * Copy constructor."},{"lineNumber":164,"author":{"gitID":"592363789"},"content":"         */"},{"lineNumber":165,"author":{"gitID":"592363789"},"content":"        public EditDescriptor(EditDescriptor toCopy) {"},{"lineNumber":166,"author":{"gitID":"592363789"},"content":"            setStatus(toCopy.status);"},{"lineNumber":167,"author":{"gitID":"592363789"},"content":"            setPriority(toCopy.priority);"},{"lineNumber":168,"author":{"gitID":"592363789"},"content":"            setRating(toCopy.rating);"},{"lineNumber":169,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"592363789"},"content":""},{"lineNumber":171,"author":{"gitID":"592363789"},"content":"        /**"},{"lineNumber":172,"author":{"gitID":"592363789"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":173,"author":{"gitID":"592363789"},"content":"         */"},{"lineNumber":174,"author":{"gitID":"592363789"},"content":"        public boolean isValid() {"},{"lineNumber":175,"author":{"gitID":"592363789"},"content":"            return CollectionUtil.isAnyNonNull(this.status, this.priority, this.rating);"},{"lineNumber":176,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"592363789"},"content":""},{"lineNumber":178,"author":{"gitID":"592363789"},"content":"        public void setStatus(Status status) {"},{"lineNumber":179,"author":{"gitID":"592363789"},"content":"            this.status \u003d status;"},{"lineNumber":180,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"592363789"},"content":""},{"lineNumber":182,"author":{"gitID":"592363789"},"content":"        public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":183,"author":{"gitID":"592363789"},"content":"            return Optional.ofNullable(status);"},{"lineNumber":184,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"592363789"},"content":""},{"lineNumber":186,"author":{"gitID":"592363789"},"content":"        public void setPriority(Priority priority) {"},{"lineNumber":187,"author":{"gitID":"592363789"},"content":"            this.priority \u003d priority;"},{"lineNumber":188,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"592363789"},"content":""},{"lineNumber":190,"author":{"gitID":"592363789"},"content":"        public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":191,"author":{"gitID":"592363789"},"content":"            return Optional.ofNullable(priority);"},{"lineNumber":192,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"592363789"},"content":""},{"lineNumber":194,"author":{"gitID":"592363789"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":195,"author":{"gitID":"592363789"},"content":"            this.rating \u003d rating;"},{"lineNumber":196,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"592363789"},"content":""},{"lineNumber":198,"author":{"gitID":"592363789"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":199,"author":{"gitID":"592363789"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":200,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"592363789"},"content":""},{"lineNumber":202,"author":{"gitID":"592363789"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"592363789"},"content":"        public boolean equals(Object other) {"},{"lineNumber":204,"author":{"gitID":"592363789"},"content":"            // short circuit if same object"},{"lineNumber":205,"author":{"gitID":"592363789"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":206,"author":{"gitID":"592363789"},"content":"                return true;"},{"lineNumber":207,"author":{"gitID":"592363789"},"content":"            }"},{"lineNumber":208,"author":{"gitID":"592363789"},"content":""},{"lineNumber":209,"author":{"gitID":"592363789"},"content":"            // instanceof handles nulls"},{"lineNumber":210,"author":{"gitID":"592363789"},"content":"            if (!(other instanceof EditDescriptor)) {"},{"lineNumber":211,"author":{"gitID":"592363789"},"content":"                return false;"},{"lineNumber":212,"author":{"gitID":"592363789"},"content":"            }"},{"lineNumber":213,"author":{"gitID":"592363789"},"content":""},{"lineNumber":214,"author":{"gitID":"592363789"},"content":"            // state check"},{"lineNumber":215,"author":{"gitID":"592363789"},"content":"            EditDescriptor e \u003d (EditDescriptor) other;"},{"lineNumber":216,"author":{"gitID":"592363789"},"content":""},{"lineNumber":217,"author":{"gitID":"592363789"},"content":"            return getStatus().equals(e.getStatus())"},{"lineNumber":218,"author":{"gitID":"592363789"},"content":"                    \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":219,"author":{"gitID":"592363789"},"content":"                    \u0026\u0026 getRating().equals(e.getRating());"},{"lineNumber":220,"author":{"gitID":"592363789"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"592363789"},"content":""},{"lineNumber":223,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"qiu-siqi":17,"takuyakanbr":7,"592363789":149,"-":50}},{"path":"src/main/java/seedu/address/storage/XmlSerializableBookShelf.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":" * An Immutable BookShelf that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"@XmlRootElement(name \u003d \"bookshelf\")"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"public class XmlSerializableBookShelf {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    private List\u003cXmlAdaptedBook\u003e books;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"     * Creates an empty XmlSerializableBookShelf."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"    public XmlSerializableBookShelf() {"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        books \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"     * Converts a given BookShelf into this class for JAXB use."},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    public XmlSerializableBookShelf(ReadOnlyBookShelf src) {"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        this();"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"        books.addAll(src.getBookList().stream().map(XmlAdaptedBook::new).collect(Collectors.toList()));"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"     * Converts this bookshelf into the model\u0027s {@code BookShelf} object."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     * {@code XmlAdaptedBook}."},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public BookShelf toModelType() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        for (XmlAdaptedBook b : books) {"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"            bookShelf.addBook(b.toModelType());"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        return bookShelf;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        if (!(other instanceof XmlSerializableBookShelf)) {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"        XmlSerializableBookShelf otherBookShelf \u003d (XmlSerializableBookShelf) other;"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        return books.equals(otherBookShelf.books);"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":44,"-":22}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCategory.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" * JAXB-friendly adapted version of the Category."},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"public class XmlAdaptedCategory {"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    @XmlValue"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    private String category;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs an XmlAdaptedCategory."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedCategory() {}"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs a {@code XmlAdaptedCategory} with the given {@code category}."},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedCategory(String category) {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        this.category \u003d category;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     * Converts a given Category into this class for JAXB use."},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"     * @param source future changes to this will not affect the created."},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedCategory(Category source) {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"        category \u003d source.category;"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"     * Converts this jaxb-friendly adapted category object into the model\u0027s Category object."},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public Category toModelType() {"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        return new Category(category);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        if (!(other instanceof XmlAdaptedCategory)) {"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"        return category.equals(((XmlAdaptedCategory) other).category);"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":42,"-":14}},{"path":"src/main/java/seedu/address/storage/JsonUserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public JsonUserPrefsStorage(String filePath) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(String prefsFilePath) throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"-":44}},{"path":"src/main/java/seedu/address/storage/RecentBooksStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":" * Represents a storage for recently selected books."},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":"public interface RecentBooksStorage {"},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"    String getRecentBooksFilePath();"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"     * Returns recently selected books data from storage as a {@link ReadOnlyBookShelf}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    Optional\u003cReadOnlyBookShelf\u003e readRecentBooksList() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"     * Saves the given recently selected books represented as {@link ReadOnlyBookShelf}"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"     * to the storage."},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"     * @param recentBooksList cannot be null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    void saveRecentBooksList(ReadOnlyBookShelf recentBooksList) throws IOException;"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":19,"takuyakanbr":3,"-":12}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores bookshelf and alias list data in XML files."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     * Saves the given bookshelf data to the specified file."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected static void saveBookShelfDataToFile(File file, XmlSerializableBookShelf bookShelf)"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"            XmlUtil.saveDataToFile(file, bookShelf);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     * Returns book shelf in the file or an empty book shelf."},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected static XmlSerializableBookShelf loadBookShelfDataFromFile(File file) throws DataConversionException,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            FileNotFoundException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableBookShelf.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Saves the given alias list data to the specified file."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    protected static void saveAliasListDataToFile(File file, XmlSerializableAliasList aliasList)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, aliasList);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns alias list in the file or an empty alias list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected static XmlSerializableAliasList loadAliasListDataFromFile(File file) throws DataConversionException,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            FileNotFoundException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAliasList.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":8,"-":56}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AppUnlockedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.PasswordChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CipherEngine;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.BookShelf;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.Network;"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.network.NetworkManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.AliasListStorage;"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.storage.BookShelfStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.storage.RecentBooksStorage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAliasListStorage;"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.storage.XmlBookShelfStorage;"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.storage.XmlRecentBooksStorage;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":52,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":53,"author":{"gitID":"-"},"content":" */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, false);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    protected Network network;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Bibliotek ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        initLockManager(userPrefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        BookShelfStorage bookShelfStorage \u003d new XmlBookShelfStorage(userPrefs.getBookShelfFilePath());"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        RecentBooksStorage recentBooksStorage \u003d new XmlRecentBooksStorage(userPrefs.getRecentBooksFilePath());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AliasListStorage aliasListStorage \u003d new XmlAliasListStorage(userPrefs.getAliasListFilePath());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage, recentBooksStorage, aliasListStorage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"        network \u003d new NetworkManager();"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model, network);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s book shelf and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"     * The data from the sample book shelf will be used instead if {@code storage}\u0027s book shelf is not found,"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"     * or an empty book shelf will be used instead if errors occur when reading {@code storage}\u0027s book shelf."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ReadOnlyBookShelf initialData \u003d new BookShelf();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ReadOnlyBookShelf recentBooksData \u003d new BookShelf();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ReadOnlyAliasList aliasListData \u003d new UniqueAliasList();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            Optional\u003cReadOnlyBookShelf\u003e bookShelfOptional \u003d storage.readBookShelf();"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":"            if (!bookShelfOptional.isPresent()) {"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"                logger.info(\"Data file not found. Will be starting with a sample BookShelf\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"qiu-siqi"},"content":"            initialData \u003d bookShelfOptional.orElseGet(SampleDataUtil::getSampleBookShelf);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookShelf\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookShelf\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"            Optional\u003cReadOnlyBookShelf\u003e recentBooksOptional \u003d storage.readRecentBooksList();"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":"            recentBooksData \u003d recentBooksOptional.orElse(new BookShelf());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty recent list\");"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"        } catch (IOException e) {"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty recent list\");"},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            Optional\u003cReadOnlyAliasList\u003e aliasListOptional \u003d storage.readAliasList();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            aliasListData \u003d aliasListOptional.orElse(new UniqueAliasList());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty alias list\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty alias list\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs, recentBooksData, aliasListData);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":172,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":200,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Initialize {@link LockManager} based on the password hash in {@code userPrefs}."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private void initLockManager(UserPrefs userPrefs) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        LockManager.getInstance().initialize(userPrefs.getPasswordHash());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":230,"author":{"gitID":"takuyakanbr"},"content":"        logger.info(\"Starting Bibliotek \" + MainApp.VERSION);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        if (LockManager.getInstance().isPasswordProtected()) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent(\"Unlock the app using the unlock command.\"));"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":240,"author":{"gitID":"qiu-siqi"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Bibliotek ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":241,"author":{"gitID":"takuyakanbr"},"content":"        network.stop();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":245,"author":{"gitID":"qiu-siqi"},"content":"            storage.saveRecentBooksList(model.getRecentBooksListAsBookShelf());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public void handleAppUnlockedEvent(AppUnlockedEvent event) throws Exception {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        if (!storage.isBookShelfLoaded()) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            storage.readBookShelf().ifPresent(bookShelf -\u003e model.resetData(bookShelf));"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            storage.readRecentBooksList().ifPresent(bookShelf -\u003e model.resetRecentBooks(bookShelf));"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public void handlePasswordChangedEvent(PasswordChangedEvent event) throws Exception {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        userPrefs.setPasswordHash(CipherEngine.hashPassword(event.newPassword));"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            if (event.oldPassword.length() \u003e 0) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                CipherEngine.decryptFile(storage.getBookShelfFilePath(), event.oldPassword);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                CipherEngine.decryptFile(storage.getRecentBooksFilePath(), event.oldPassword);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            if (event.newPassword.length() \u003e 0) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                CipherEngine.encryptFile(storage.getBookShelfFilePath(), event.newPassword);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                CipherEngine.encryptFile(storage.getRecentBooksFilePath(), event.newPassword);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":26,"takuyakanbr":8,"-":256}},{"path":"src/main/java/seedu/address/model/alias/ReadOnlyAliasList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an alias list."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface ReadOnlyAliasList {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Returns an {@code Optional} containing the alias that matches the specified {@code name}."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an empty {@code Optional} if no matching alias was found."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Optional\u003cAlias\u003e getAliasByName(String name);"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the alias list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObservableList\u003cAlias\u003e getAliasList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns the number of aliases contained in this alias list."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    int size();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":2,"-":25}},{"path":"src/main/java/seedu/address/storage/XmlRecentBooksStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * A class to access recently selected books data stored as an xml file on the hard disk."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"public class XmlRecentBooksStorage implements RecentBooksStorage {"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"    private XmlBookShelfStorage xmlBookShelfStorage;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public XmlRecentBooksStorage(String filePath) {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        xmlBookShelfStorage \u003d new XmlBookShelfStorage(filePath);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"    public String getRecentBooksFilePath() {"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"        return xmlBookShelfStorage.getBookShelfFilePath();"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    public Optional\u003cReadOnlyBookShelf\u003e readRecentBooksList() throws DataConversionException, IOException {"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"        return xmlBookShelfStorage.readBookShelf();"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"     * Similar to {@link #readRecentBooksList()}"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    protected Optional\u003cReadOnlyBookShelf\u003e readRecentBooksList(String filePath) throws DataConversionException,"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"            FileNotFoundException {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        return xmlBookShelfStorage.readBookShelf(filePath);"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    public void saveRecentBooksList(ReadOnlyBookShelf recentBooksList) throws IOException {"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"        xmlBookShelfStorage.saveBookShelf(recentBooksList);"},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"     * Similar to {@link #saveRecentBooksList(ReadOnlyBookShelf)}"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"    protected void saveRecentBooksList(ReadOnlyBookShelf recentBooksList, String filePath) throws IOException {"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        xmlBookShelfStorage.saveBookShelf(recentBooksList, filePath);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":48,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAlias.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the {@code Alias}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class XmlAdaptedAlias {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Alias\u0027 %s field is missing!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected static final String NAME_FIELD \u003d \"name\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected static final String PREFIX_FIELD \u003d \"prefix\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected static final String NAMED_ARGS_FIELD \u003d \"namedArgs\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String prefix;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String namedArgs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedAlias}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlAdaptedAlias() {}"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedAlias} with the given alias details."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public XmlAdaptedAlias(String name, String prefix, String namedArgs) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.namedArgs \u003d namedArgs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Converts a given {@code Alias} into an {@code XmlAdaptedAlias} for JAXB use."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedAlias(Alias alias) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(alias);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.name \u003d alias.getName();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.prefix \u003d alias.getPrefix();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.namedArgs \u003d alias.getNamedArgs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted alias object into the model\u0027s {@code Alias} object."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted {@code Alias}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Alias toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, NAME_FIELD));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (prefix \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PREFIX_FIELD));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (namedArgs \u003d\u003d null) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, NAMED_ARGS_FIELD));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new Alias(name, prefix, namedArgs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedAlias)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedAlias otherAlias \u003d (XmlAdaptedAlias) other;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherAlias.name)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(prefix, otherAlias.prefix)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(namedArgs, otherAlias.namedArgs);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":1,"-":87}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Description;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Gid;"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Priority;"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.PublicationDate;"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Publisher;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Rating;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Status;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":" * JAXB-friendly version of the Book."},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"public class XmlAdaptedBook {"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    private String gid;"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    private String isbn;"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    private String title;"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    private String description;"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Priority priority;"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Integer rating;"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    private String publisher;"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    private String publicationDate;"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    private List\u003cXmlAdaptedAuthor\u003e authors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    @XmlElement"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    private List\u003cXmlAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs an XmlAdaptedBook."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedBook() {}"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs an {@code XmlAdaptedBook} with the given book details."},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"    public XmlAdaptedBook(String gid, String isbn, String title, String description,"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"                          List\u003cXmlAdaptedAuthor\u003e authors, List\u003cXmlAdaptedCategory\u003e categories,"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                          Status status, Priority priority, Integer rating,"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"                          String publisher, String publicationDate) {"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"        this.title \u003d title;"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"        this.description \u003d description;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.rating \u003d -1;"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        if (authors !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"            this.authors \u003d new ArrayList\u003c\u003e(authors);"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        if (categories !\u003d null) {"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"            this.categories \u003d new ArrayList\u003c\u003e(categories);"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        this.gid \u003d gid;"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        this.isbn \u003d isbn;"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":"        this.publicationDate \u003d publicationDate;"},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        this.publisher \u003d publisher;"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"     * Converts a given Book into this class for JAXB use."},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedBook."},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"    public XmlAdaptedBook(Book source) {"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"        gid \u003d source.getGid().gid;"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        isbn \u003d source.getIsbn().isbn;"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"        title \u003d source.getTitle().title;"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"        description \u003d source.getDescription().description;"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"        authors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        for (Author author : source.getAuthors()) {"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"            authors.add(new XmlAdaptedAuthor(author));"},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"        categories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"        for (Category category : source.getCategories()) {"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"            categories.add(new XmlAdaptedCategory(category));"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        status \u003d source.getStatus();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        priority \u003d source.getPriority();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        rating \u003d source.getRating().rating;"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        publisher \u003d source.getPublisher().publisher;"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"        publicationDate \u003d source.getPublicationDate().date;"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"     * Converts this jaxb-friendly adapted book object into the model\u0027s Book object."},{"lineNumber":112,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":113,"author":{"gitID":"takuyakanbr"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted book."},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"    public Book toModelType() throws IllegalValueException {"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        final List\u003cAuthor\u003e bookAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"        for (XmlAdaptedAuthor author : authors) {"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":"            bookAuthors.add(author.toModelType());"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"        final List\u003cCategory\u003e bookCategories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        for (XmlAdaptedCategory category : categories) {"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"            bookCategories.add(category.toModelType());"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"                    Title.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":"        final Title title \u003d new Title(this.title);"},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                    Status.class.getSimpleName()));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (this.priority \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                    Priority.class.getSimpleName()));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                    Rating.class.getSimpleName()));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"qiu-siqi"},"content":"        if (this.gid \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":155,"author":{"gitID":"qiu-siqi"},"content":"                    Gid.class.getSimpleName()));"},{"lineNumber":156,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"qiu-siqi"},"content":"        final Gid gid \u003d new Gid(this.gid);"},{"lineNumber":158,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":159,"author":{"gitID":"qiu-siqi"},"content":"        if (this.isbn \u003d\u003d null) {"},{"lineNumber":160,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":161,"author":{"gitID":"qiu-siqi"},"content":"                    Isbn.class.getSimpleName()));"},{"lineNumber":162,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"qiu-siqi"},"content":"        final Isbn isbn \u003d new Isbn(this.isbn);"},{"lineNumber":164,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":165,"author":{"gitID":"qiu-siqi"},"content":"        if (this.publisher \u003d\u003d null) {"},{"lineNumber":166,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":167,"author":{"gitID":"qiu-siqi"},"content":"                    Publisher.class.getSimpleName()));"},{"lineNumber":168,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"qiu-siqi"},"content":"        final Publisher publisher \u003d new Publisher(this.publisher);"},{"lineNumber":170,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":171,"author":{"gitID":"qiu-siqi"},"content":"        if (this.publicationDate \u003d\u003d null) {"},{"lineNumber":172,"author":{"gitID":"takuyakanbr"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":173,"author":{"gitID":"qiu-siqi"},"content":"                    PublicationDate.class.getSimpleName()));"},{"lineNumber":174,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"qiu-siqi"},"content":"        final PublicationDate publicationDate \u003d new PublicationDate(this.publicationDate);"},{"lineNumber":176,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return new Book(gid, isbn, bookAuthors, title, bookCategories,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                description, status, priority, rating, publisher, publicationDate);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"takuyakanbr"},"content":"        if (!(other instanceof XmlAdaptedBook)) {"},{"lineNumber":188,"author":{"gitID":"takuyakanbr"},"content":"            return false;"},{"lineNumber":189,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":191,"author":{"gitID":"takuyakanbr"},"content":"        XmlAdaptedBook otherBook \u003d (XmlAdaptedBook) other;"},{"lineNumber":192,"author":{"gitID":"takuyakanbr"},"content":"        return Objects.equals(title, otherBook.title)"},{"lineNumber":193,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 Objects.equals(description, otherBook.description)"},{"lineNumber":194,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 authors.equals(otherBook.authors)"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 categories.equals(otherBook.categories)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(status, otherBook.status)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(priority, otherBook.priority)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(rating, otherBook.rating)"},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(gid, otherBook.gid)"},{"lineNumber":200,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(isbn, otherBook.isbn)"},{"lineNumber":201,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(publisher, otherBook.publisher)"},{"lineNumber":202,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(publicationDate, otherBook.publicationDate);"},{"lineNumber":203,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":46,"takuyakanbr":109,"-":49}},{"path":"src/main/java/seedu/address/model/util/BookDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.Category;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" * Contains utility methods for manipulating book data."},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public class BookDataUtil {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an author list containing the list of strings given."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static List\u003cAuthor\u003e getAuthorList(String... strings) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        ArrayList\u003cAuthor\u003e authors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        for (String s : strings) {"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"            authors.add(new Author(s));"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        return authors;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a category list containing the list of strings given."},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static List\u003cCategory\u003e getCategoryList(String... strings) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ArrayList\u003cCategory\u003e categories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        for (String s : strings) {"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"            categories.add(new Category(s));"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"        return categories;"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":2,"takuyakanbr":28,"-":8}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.ReadOnlyBookShelf;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableBookShelf;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" * Contains utility methods for populating {@code BookShelf} with sample data."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public final class SampleDataUtil {"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final URL SAMPLE_BOOK_SHELF \u003d MainApp.class.getResource(\"/data/sampleBookShelf.xml\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private SampleDataUtil() {} // prevents instantiation"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    public static ReadOnlyBookShelf getSampleBookShelf() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlSerializableBookShelf data \u003d XmlUtil.getDataFromUrl(SAMPLE_BOOK_SHELF, XmlSerializableBookShelf.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            return data.toModelType();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Cannot load sample book shelf data.\");"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":7,"-":21}},{"path":"src/main/java/seedu/address/model/alias/Alias.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":" * Contains data about a single alias."},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" * Guarantees: immutable."},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public class Alias {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"     * A {@code Comparator} for aliases that sorts by name, in alphabetical order."},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"    public static final Comparator\u003cAlias\u003e ALIAS_NAME_COMPARATOR \u003d Comparator.comparing(Alias::getName);"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    private final String name;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    private final String prefix;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    private final String namedArgs;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"     * Creates an {@code Alias} with the specified {@code name}, {@code prefix}, and {@code namedArgs}."},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"     * All fields must be non-null."},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    public Alias(String name, String prefix, String namedArgs) {"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(name, prefix, namedArgs);"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        this.name \u003d name.trim().toLowerCase();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        this.prefix \u003d prefix.trim();"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        this.namedArgs \u003d namedArgs.trim();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String getPrefix() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return prefix;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getNamedArgs() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return namedArgs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name + \" - \" + prefix + \" \" + namedArgs;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                || (other instanceof Alias // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.name.equals(((Alias) other).name)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.prefix.equals(((Alias) other).prefix)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.namedArgs.equals(((Alias) other).namedArgs)); // state check"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return name.hashCode();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":26,"-":38}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Theme;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.WindowSettings;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private WindowSettings windowSettings;"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"    private String bookShelfFilePath \u003d \"data/bookshelf.xml\";"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"    private String recentBooksFilePath \u003d \"data/recentbooks.xml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String aliasListFilePath \u003d \"data/aliaslist.xml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private String passwordHash \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    private String bookShelfName \u003d \"MyBookShelf\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private Theme appTheme \u003d Theme.DEFAULT_THEME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        windowSettings \u003d new WindowSettings();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public WindowSettings getWindowSettings() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return windowSettings \u003d\u003d null ? new WindowSettings() : windowSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(WindowSettings windowSettings) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.windowSettings \u003d windowSettings;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        windowSettings \u003d new WindowSettings(width, height, x, y);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public String getBookShelfFilePath() {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        return bookShelfFilePath;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    public void setBookShelfFilePath(String bookShelfFilePath) {"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"        this.bookShelfFilePath \u003d bookShelfFilePath;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"    public String getRecentBooksFilePath() {"},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"        return recentBooksFilePath;"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    public void setRecentBooksFilePath(String recentBooksFilePath) {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"        this.recentBooksFilePath \u003d recentBooksFilePath;"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAliasListFilePath() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return aliasListFilePath;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void setAliasListFilePath(String aliasListFilePath) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.aliasListFilePath \u003d aliasListFilePath;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getPasswordHash() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return passwordHash;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setPasswordHash(String passwordHash) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.passwordHash \u003d passwordHash;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"qiu-siqi"},"content":"    public String getBookShelfName() {"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"        return bookShelfName;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"qiu-siqi"},"content":"    public void setBookShelfName(String bookShelfName) {"},{"lineNumber":74,"author":{"gitID":"qiu-siqi"},"content":"        this.bookShelfName \u003d bookShelfName;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Theme getAppTheme() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return appTheme;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setAppTheme(Theme appTheme) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.appTheme \u003d appTheme;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return Objects.equals(windowSettings, o.windowSettings)"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(bookShelfFilePath, o.bookShelfFilePath)"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 Objects.equals(recentBooksFilePath, o.recentBooksFilePath)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(aliasListFilePath, o.aliasListFilePath)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(bookShelfName, o.bookShelfName)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(appTheme, o.appTheme);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"        return Objects.hash(windowSettings, bookShelfFilePath, recentBooksFilePath,"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"                aliasListFilePath, bookShelfName, appTheme);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        sb.append(\"Window Settings : \").append(windowSettings.toString());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        sb.append(\"\\nBook shelf file location : \").append(bookShelfFilePath);"},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"        sb.append(\"\\nRecent books file Location : \").append(recentBooksFilePath);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAlias list file location: \").append(aliasListFilePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        sb.append(\"\\nBookShelf name : \").append(bookShelfName);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        sb.append(\"\\nTheme : \").append(appTheme);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":24,"-":98}},{"path":"src/main/java/seedu/address/model/ReadOnlyBookShelf.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":" * Unmodifiable view of a book shelf"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"public interface ReadOnlyBookShelf {"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an {@code Optional} containing the book that matches the given {@code isbn}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns an empty {@code Optional} if there is no matching book."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cBook\u003e getBookByIsbn(Isbn isbn);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"     * Returns an unmodifiable view of the book list."},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"     * This list will not contain any duplicate books."},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    ObservableList\u003cBook\u003e getBookList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the number of books contained in this book shelf."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    int size();"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":16,"-":14}},{"path":"src/main/java/seedu/address/model/ActiveListType.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":" * Represents the type of list that is currently active (i.e. being displayed)."},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"public enum ActiveListType {"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"    BOOK_SHELF, SEARCH_RESULTS, RECENT_BOOKS"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":7}},{"path":"src/main/java/seedu/address/model/alias/UniqueAliasList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.UniqueList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"//@@author takuyakanbr"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":" * Represents a unique collection of aliases. Does not allow nulls."},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":" *"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":" * Supports a minimal set of list operations."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"public class UniqueAliasList extends UniqueList\u003cAlias\u003e implements ReadOnlyAliasList {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"     * Creates an empty {@code UniqueAliasList}."},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    public UniqueAliasList() {"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"        super();"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"     * Creates a {@code UniqueAliasList} using the aliases in the {@code toBeCopied}."},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public UniqueAliasList(ReadOnlyAliasList toBeCopied) {"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"        super();"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toBeCopied);"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"        toBeCopied.getAliasList().forEach(this::add);"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"     * Adds an alias to this list. If there is an existing alias"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"     * with the same name, that alias will be replaced."},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    public void add(Alias toAdd) {"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        getAliasByName(toAdd.getName()).ifPresent(internalList::remove);"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        internalList.add(toAdd);"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"     * Removes the alias with the specified {@code name}."},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"     * Does nothing if no matching alias was found."},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    public void remove(String name) {"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(name);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"        getAliasByName(name).ifPresent(internalList::remove);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    public Optional\u003cAlias\u003e getAliasByName(String name) {"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        return internalList.stream()"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"                .filter(alias -\u003e name.trim().equalsIgnoreCase(alias.getName()))"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"                .findFirst();"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    public ObservableList\u003cAlias\u003e getAliasList() {"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"        return asObservableList();"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"    public int size() {"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        return internalList.size();"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":64,"-":9}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.alias.Alias.ALIAS_NAME_COMPARATOR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AliasListChangedEvent;"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.commons.events.model.BookShelfChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.LockManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.book.UniqueBookCircularList;"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":" * Represents the in-memory model of the book shelf data."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    private ActiveListType activeListType;"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"    private final BookShelf bookShelf;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cBook\u003e filteredBookList;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final SortedList\u003cBook\u003e sortedBookList;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cBook\u003e displayBookList;"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    private final BookShelf searchResults;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private UniqueBookCircularList recentBooks;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final UniqueAliasList aliases;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cAlias\u003e displayAliasList;"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given bookShelf, userPrefs, recentBooksList, and aliasList."},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"    public ModelManager(ReadOnlyBookShelf bookShelf, UserPrefs userPrefs,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        ReadOnlyBookShelf recentBooksList, ReadOnlyAliasList aliasList) {"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        super();"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        requireAllNonNull(bookShelf, userPrefs, recentBooksList);"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        logger.fine(\"Initializing with book shelf: \" + bookShelf + \" and user prefs \" + userPrefs"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"                + \" and recent books: \" + recentBooksList);"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"        this.activeListType \u003d ActiveListType.BOOK_SHELF;"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"        this.bookShelf \u003d new BookShelf(bookShelf);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.filteredBookList \u003d new FilteredList\u003c\u003e(this.bookShelf.getBookList(), PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.sortedBookList \u003d new SortedList\u003c\u003e(this.filteredBookList, DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.displayBookList \u003d sortedBookList;"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        this.searchResults \u003d new BookShelf();"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        this.recentBooks \u003d new UniqueBookCircularList(recentBooksList.getBookList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.aliases \u003d new UniqueAliasList(aliasList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.displayAliasList \u003d new SortedList\u003c\u003e(this.aliases.asObservableList(), ALIAS_NAME_COMPARATOR);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"        if (LockManager.getInstance().isPasswordProtected()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            updateBookListFilter(PREDICATE_HIDE_ALL_BOOKS);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":72,"author":{"gitID":"qiu-siqi"},"content":"    public ModelManager(ReadOnlyBookShelf bookShelf, UserPrefs userPrefs) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this(bookShelf, userPrefs, new BookShelf(), new UniqueAliasList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"        this(new BookShelf(), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    public ActiveListType getActiveListType() {"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        return activeListType;"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"    public void setActiveListType(ActiveListType type) {"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"        this.activeListType \u003d type;"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":90,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"qiu-siqi"},"content":"    public ObservableList\u003cBook\u003e getActiveList() {"},{"lineNumber":92,"author":{"gitID":"qiu-siqi"},"content":"        switch (activeListType) {"},{"lineNumber":93,"author":{"gitID":"qiu-siqi"},"content":"        case BOOK_SHELF: {"},{"lineNumber":94,"author":{"gitID":"qiu-siqi"},"content":"            return getDisplayBookList();"},{"lineNumber":95,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"qiu-siqi"},"content":"        case SEARCH_RESULTS: {"},{"lineNumber":97,"author":{"gitID":"qiu-siqi"},"content":"            return getSearchResultsList();"},{"lineNumber":98,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"qiu-siqi"},"content":"        case RECENT_BOOKS: {"},{"lineNumber":100,"author":{"gitID":"qiu-siqi"},"content":"            return getRecentBooksList();"},{"lineNumber":101,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"qiu-siqi"},"content":"        default:"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":"            // Should never end up here"},{"lineNumber":104,"author":{"gitID":"qiu-siqi"},"content":"            return getDisplayBookList();"},{"lineNumber":105,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"    public void resetData(ReadOnlyBookShelf newData) {"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.resetData(newData);"},{"lineNumber":111,"author":{"gitID":"takuyakanbr"},"content":"        indicateBookShelfChanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"takuyakanbr"},"content":"    public ReadOnlyBookShelf getBookShelf() {"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"        return bookShelf;"},{"lineNumber":117,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the book shelf has changed */"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"    private void indicateBookShelfChanged() {"},{"lineNumber":121,"author":{"gitID":"takuyakanbr"},"content":"        raise(new BookShelfChangedEvent(bookShelf));"},{"lineNumber":122,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":124,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":"    public void deleteBook(Book target) throws BookNotFoundException {"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.removeBook(target);"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"        indicateBookShelfChanged();"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":130,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"takuyakanbr"},"content":"    public void addBook(Book book) throws DuplicateBookException {"},{"lineNumber":132,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.addBook(book);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        updateBookListFilter(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        updateBookListSorter(DEFAULT_BOOK_COMPARATOR);"},{"lineNumber":135,"author":{"gitID":"takuyakanbr"},"content":"        indicateBookShelfChanged();"},{"lineNumber":136,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":138,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"takuyakanbr"},"content":"    public void updateBook(Book target, Book editedBook) throws BookNotFoundException, DuplicateBookException {"},{"lineNumber":140,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(target, editedBook);"},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"        bookShelf.updateBook(target, editedBook);"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        indicateBookShelfChanged();"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Display Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"     * Returns an unmodifiable view of the list of {@code Book} backed by the internal list of"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * {@code bookShelf}."},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public ObservableList\u003cBook\u003e getDisplayBookList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(displayBookList);"},{"lineNumber":155,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":157,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public Predicate\u003c? super Book\u003e getBookListFilter() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return filteredBookList.getPredicate();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public Comparator\u003c? super Book\u003e getBookListSorter() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return sortedBookList.getComparator();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void updateBookListFilter(Predicate\u003c? super Book\u003e predicate) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        filteredBookList.setPredicate(predicate);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void updateBookListSorter(Comparator\u003c? super Book\u003e comparator) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        requireNonNull(comparator);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        sortedBookList.setComparator(comparator);"},{"lineNumber":177,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":179,"author":{"gitID":"takuyakanbr"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Search Results \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":180,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":181,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"takuyakanbr"},"content":"     * Returns an unmodifable view of the list of {@code Book} backed by the internal list of {@code searchResults}."},{"lineNumber":183,"author":{"gitID":"takuyakanbr"},"content":"     * */"},{"lineNumber":184,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"takuyakanbr"},"content":"    public ObservableList\u003cBook\u003e getSearchResultsList() {"},{"lineNumber":186,"author":{"gitID":"takuyakanbr"},"content":"        return FXCollections.unmodifiableObservableList(searchResults.getBookList());"},{"lineNumber":187,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":189,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"takuyakanbr"},"content":"    public void updateSearchResults(ReadOnlyBookShelf newResults) {"},{"lineNumber":191,"author":{"gitID":"takuyakanbr"},"content":"        searchResults.resetData(newResults);"},{"lineNumber":192,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":194,"author":{"gitID":"qiu-siqi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recent books \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":196,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"qiu-siqi"},"content":"    public ObservableList\u003cBook\u003e getRecentBooksList() {"},{"lineNumber":198,"author":{"gitID":"qiu-siqi"},"content":"        return FXCollections.unmodifiableObservableList(recentBooks.asObservableList());"},{"lineNumber":199,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void resetRecentBooks(ReadOnlyBookShelf newData) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        recentBooks \u003d new UniqueBookCircularList(newData.getBookList());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"qiu-siqi"},"content":"    public ReadOnlyBookShelf getRecentBooksListAsBookShelf() {"},{"lineNumber":207,"author":{"gitID":"qiu-siqi"},"content":"        BookShelf bookShelf \u003d new BookShelf();"},{"lineNumber":208,"author":{"gitID":"qiu-siqi"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"qiu-siqi"},"content":"            bookShelf.setBooks(getRecentBooksList());"},{"lineNumber":210,"author":{"gitID":"qiu-siqi"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":211,"author":{"gitID":"qiu-siqi"},"content":"            logger.warning(\"Should never throw DuplicateBookException\");"},{"lineNumber":212,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"qiu-siqi"},"content":"        return bookShelf;"},{"lineNumber":214,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":216,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"qiu-siqi"},"content":"    public void addRecentBook(Book newBook) {"},{"lineNumber":218,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(newBook);"},{"lineNumber":219,"author":{"gitID":"qiu-siqi"},"content":"        recentBooks.addToFront(newBook);"},{"lineNumber":220,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public ReadOnlyAliasList getAliasList() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return aliases;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAlias\u003e getDisplayAliasList() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(displayAliasList);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void addAlias(Alias alias) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        aliases.add(alias);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        indicateAliasListChanged();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public Optional\u003cAlias\u003e getAlias(String name) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        return aliases.getAliasByName(name);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void removeAlias(String name) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        aliases.remove(name);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        indicateAliasListChanged();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the alias list has changed */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void indicateAliasListChanged() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        raise(new AliasListChangedEvent(aliases));"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":270,"author":{"gitID":"qiu-siqi"},"content":"        return bookShelf.equals(other.bookShelf)"},{"lineNumber":271,"author":{"gitID":"-"},"content":"                \u0026\u0026 displayBookList.equals(other.displayBookList)"},{"lineNumber":272,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 searchResults.equals(other.searchResults)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                \u0026\u0026 recentBooks.equals(other.recentBooks)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                \u0026\u0026 aliases.equals(other.aliases);"},{"lineNumber":275,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":54,"takuyakanbr":90,"-":133}},{"path":"src/main/java/seedu/address/model/book/Title.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":" * Represents a book\u0027s title."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Title implements Comparable\u003cTitle\u003e {"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"    public final String title;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs a {@code Title}."},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     * @param title A book title."},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    public Title(String title) {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(title);"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        this.title \u003d title;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public int compareTo(Title other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return title.compareTo(other.title);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"        return title;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof Title // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.title.equals(((Title) other).title)); // state check"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    public int hashCode() {"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"        return title.hashCode();"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":33,"-":13}},{"path":"src/main/java/seedu/address/model/book/PublicationDate.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Represents a book\u0027s publication date."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"public class PublicationDate {"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    public final String date;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"     * Constructs a {@code Description}."},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     * @param date A book\u0027s publication date."},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public PublicationDate(String date) {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(date);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"        return date;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof PublicationDate // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.date.equals(((PublicationDate) other).date)); // state check"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"        return date.hashCode();"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":31,"takuyakanbr":1,"-":7}},{"path":"src/main/java/seedu/address/model/book/Category.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":" * Represents a single book category."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class Category {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private static final String DISPLAY_PREFIX \u003d \"\\uD83D\\uDD16 \";"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    public final String category;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs a {@code Category}."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     * @param category A book category."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    public Category(String category) {"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(category);"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        this.category \u003d category;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public String getDisplayText() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return DISPLAY_PREFIX + category;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        return category;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof Category // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.category.equals(((Category) other).category)); // state check"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":"    public int hashCode() {"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"        return category.hashCode();"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":1,"takuyakanbr":32,"-":12}},{"path":"src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book.exceptions;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":" * Signals that the operation is unable to find the specified book."},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"public class BookNotFoundException extends Exception {}"}],"authorContributionMap":{"takuyakanbr":6}},{"path":"src/main/java/seedu/address/model/UniqueList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":" * A list of items that enforces no nulls and uniqueness between its elements."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"public class UniqueList\u003cT\u003e implements Iterable\u003cT\u003e {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UniqueList.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    protected final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs empty UniqueList."},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    public UniqueList() {}"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns all items in this list as a list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * This list is mutable and change-insulated against the internal list."},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public List\u003cT\u003e toList() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(internalList);"},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Replaces the items in this list with those in the given collection."},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setItems(Collection\u003cT\u003e items) throws DuplicateDataException {"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(items);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        internalList.clear();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        for (T toAdd : items) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            add(toAdd);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     * Ensures every item in the argument list exists in this object."},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    public void mergeFrom(UniqueList\u003cT\u003e from) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final List\u003cT\u003e alreadyInside \u003d this.toList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"     * Returns true if the list contains an equivalent item as the given argument."},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"    public boolean contains(T toCheck) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"     * Adds an item to the list."},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"     * @throws DuplicateItemException if the item to add is a duplicate of an existing item in the list."},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"    public void add(T toAdd) throws DuplicateDataException {"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toAdd);"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"        if (contains(toAdd)) {"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"            throw new DuplicateItemException();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Adds all items in the given collection into this list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Any duplicates found will be ignored."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void addAllIgnoresDuplicates(Collection\u003cT\u003e items) {"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(items);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        for (T toAdd : items) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                add(toAdd);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            } catch (DuplicateDataException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                logger.fine(\"Duplicate data: \" + toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"    public Iterator\u003cT\u003e iterator() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"takuyakanbr"},"content":"    public ObservableList\u003cT\u003e asObservableList() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof UniqueList // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueList) other).internalList));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"takuyakanbr"},"content":"    public boolean equalsOrderInsensitive(UniqueList\u003cT\u003e other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":"    public static class DuplicateItemException extends DuplicateDataException {"},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"        protected DuplicateItemException() {"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"            super(\"Operation would result in duplicate items\");"},{"lineNumber":151,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":154,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":54,"-":100}},{"path":"src/main/java/seedu/address/model/book/Author.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":" * Represents a single book author."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class Author {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private static final String DISPLAY_PREFIX \u003d \"\\uD83D\\uDC64 \";"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"    public final String fullName;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs a {@code Author}."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     * @param fullName An author name."},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    public Author(String fullName) {"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(fullName);"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"        this.fullName \u003d fullName;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public String getDisplayText() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return DISPLAY_PREFIX + fullName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof Author // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.fullName.equals(((Author) other).fullName)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"takuyakanbr":22,"-":23}},{"path":"src/main/java/seedu/address/model/book/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":" * Represents a book\u0027s description."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"public class Description {"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"    public final String description;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"     * Constructs a {@code Description}."},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"     * @param description A book description."},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":"    public Description(String description) {"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(description);"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        return description;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.description.equals(((Description) other).description)); // state check"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"        return description.hashCode();"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":33,"-":7}},{"path":"src/main/java/seedu/address/model/book/exceptions/InvalidBookException.java","lines":[{"lineNumber":1,"author":{"gitID":"qiu-siqi"},"content":"package seedu.address.model.book.exceptions;"},{"lineNumber":2,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":3,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":" * Signals that the Book object found is invalid."},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":"public class InvalidBookException extends Exception {"},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"    public InvalidBookException(String message) {"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":10}},{"path":"src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book.exceptions;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":" * Signals that the operation will result in duplicate Book objects."},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"public class DuplicateBookException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"    public DuplicateBookException() {"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"        super(\"Operation would result in duplicate books\");"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":11,"-":1}},{"path":"src/main/java/seedu/address/model/BookShelf.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":5,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.UniqueBookList;"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":" * Wraps all data at the book-shelf level"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"public class BookShelf implements ReadOnlyBookShelf {"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    private final UniqueBookList books;"},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public BookShelf() {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        books \u003d new UniqueBookList();"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"     * Creates a BookShelf using the Books in the {@code toBeCopied}"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":"    public BookShelf(ReadOnlyBookShelf toBeCopied) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public void setBooks(Collection\u003cBook\u003e books) throws DuplicateBookException {"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"        this.books.setBooks(books);"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":42,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"takuyakanbr"},"content":"     * Resets the existing data of this {@code BookShelf} with {@code newData}."},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    public void resetData(ReadOnlyBookShelf newData) {"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(newData);"},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"            setBooks(newData.getBookList());"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"            throw new AssertionError(\"BookShelf should not have duplicate books\");"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"    //// book-level operations"},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Optional\u003cBook\u003e getBookByIsbn(Isbn isbn) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (Book book : books) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            if (book.getIsbn().equals(isbn)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                return Optional.of(book);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return Optional.empty();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"     * Adds a book to the book shelf."},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"     * @throws DuplicateBookException if an equivalent book already exists."},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"    public void addBook(Book book) throws DuplicateBookException {"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        books.add(book);"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":76,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"takuyakanbr"},"content":"     * Replaces the given book {@code target} in the list with {@code editedBook}."},{"lineNumber":78,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"takuyakanbr"},"content":"     * @throws BookNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"     * @throws DuplicateBookException if updating the book\u0027s details causes the book to be equivalent to"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"     *                                another existing book in the list."},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":"    public void updateBook(Book target, Book editedBook)"},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"        throws BookNotFoundException, DuplicateBookException {"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(editedBook);"},{"lineNumber":86,"author":{"gitID":"takuyakanbr"},"content":"        books.setBook(target, editedBook);"},{"lineNumber":87,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":"     * Removes {@code key} from this {@code BookShelf}."},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"     * @throws BookNotFoundException if the {@code key} is not in this {@code BookShelf}."},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":"    public boolean removeBook(Book key) throws BookNotFoundException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return books.remove(key);"},{"lineNumber":96,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    //// util methods"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"        return books.asObservableList().size() + \" books\";"},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"        // TODO: refine later"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"takuyakanbr"},"content":"    public ObservableList\u003cBook\u003e getBookList() {"},{"lineNumber":108,"author":{"gitID":"takuyakanbr"},"content":"        return books.asObservableList();"},{"lineNumber":109,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public int size() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return getBookList().size();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":119,"author":{"gitID":"takuyakanbr"},"content":"            || (other instanceof BookShelf // instanceof handles nulls"},{"lineNumber":120,"author":{"gitID":"takuyakanbr"},"content":"            \u0026\u0026 this.books.equalsOrderInsensitive(((BookShelf) other).books));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":126,"author":{"gitID":"takuyakanbr"},"content":"        return Objects.hash(books);"},{"lineNumber":127,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":91,"-":37}},{"path":"src/main/java/seedu/address/model/book/Book.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.UniqueList;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":" * Contains data about a single book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"public class Book {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    private final UniqueList\u003cAuthor\u003e authors;"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"    private final Title title;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"    private final UniqueList\u003cCategory\u003e categories;"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"    private final Description description;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Status status;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Priority priority;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Rating rating;"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"    private final Gid gid;"},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"    private final Isbn isbn;"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    private final PublicationDate publicationDate;"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"    private final Publisher publisher;"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a {@code Book} with the default status, priority, and rating."},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Duplicate authors and categories will be silently ignored."},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Book(Gid gid, Isbn isbn, Collection\u003cAuthor\u003e authors, Title title, Collection\u003cCategory\u003e categories,"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"                Description description, Publisher publisher, PublicationDate publicationDate) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this(gid, isbn, authors, title, categories, description, Status.DEFAULT_STATUS,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Priority.DEFAULT_PRIORITY, new Rating(), publisher, publicationDate);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates a {@code Book}."},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"     * Every field must be present and not null."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Duplicate authors and categories will be silently ignored."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Book(Gid gid, Isbn isbn, Collection\u003cAuthor\u003e authors, Title title, Collection\u003cCategory\u003e categories,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                Description description, Status status, Priority priority, Rating rating,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Publisher publisher, PublicationDate publicationDate) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireAllNonNull(gid, isbn, authors, title, categories, description,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                status, priority, rating, publisher, publicationDate);"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        this.gid \u003d gid;"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"        this.isbn \u003d isbn;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.authors \u003d new UniqueList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.authors.addAllIgnoresDuplicates(authors);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.title \u003d title;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.categories \u003d new UniqueList\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.categories.addAllIgnoresDuplicates(categories);"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"        this.description \u003d description;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.rating \u003d rating;"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"        this.publicationDate \u003d publicationDate;"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"        this.publisher \u003d publisher;"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns an immutable authors list, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public List\u003cAuthor\u003e getAuthors() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableList(authors.toList());"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":75,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"qiu-siqi"},"content":"     * Returns the authors as a comma delimited String."},{"lineNumber":77,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"qiu-siqi"},"content":"    public String getAuthorsAsString() {"},{"lineNumber":79,"author":{"gitID":"qiu-siqi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":80,"author":{"gitID":"qiu-siqi"},"content":"        getAuthors().forEach(author -\u003e builder.append(author).append(\", \"));"},{"lineNumber":81,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":82,"author":{"gitID":"qiu-siqi"},"content":"        // Remove the last \", \""},{"lineNumber":83,"author":{"gitID":"qiu-siqi"},"content":"        if (getAuthors().size() \u003e 0) {"},{"lineNumber":84,"author":{"gitID":"qiu-siqi"},"content":"            builder.deleteCharAt(Index.fromOneBased(builder.length()).getZeroBased());"},{"lineNumber":85,"author":{"gitID":"qiu-siqi"},"content":"            builder.deleteCharAt(Index.fromOneBased(builder.length()).getZeroBased());"},{"lineNumber":86,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":88,"author":{"gitID":"takuyakanbr"},"content":"        return builder.toString();"},{"lineNumber":89,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":91,"author":{"gitID":"takuyakanbr"},"content":"    public Title getTitle() {"},{"lineNumber":92,"author":{"gitID":"takuyakanbr"},"content":"        return title;"},{"lineNumber":93,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns an immutable categories list, which throws {@code UnsupportedOperationException}"},{"lineNumber":97,"author":{"gitID":"takuyakanbr"},"content":"     * if modification is attempted."},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public List\u003cCategory\u003e getCategories() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableList(categories.toList());"},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":103,"author":{"gitID":"takuyakanbr"},"content":"    public Description getDescription() {"},{"lineNumber":104,"author":{"gitID":"takuyakanbr"},"content":"        return description;"},{"lineNumber":105,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public Status getStatus() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return status;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public Priority getPriority() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return priority;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public Rating getRating() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return rating;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"qiu-siqi"},"content":"    public Gid getGid() {"},{"lineNumber":120,"author":{"gitID":"qiu-siqi"},"content":"        return gid;"},{"lineNumber":121,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":123,"author":{"gitID":"qiu-siqi"},"content":"    public Isbn getIsbn() {"},{"lineNumber":124,"author":{"gitID":"qiu-siqi"},"content":"        return isbn;"},{"lineNumber":125,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":127,"author":{"gitID":"qiu-siqi"},"content":"    public PublicationDate getPublicationDate() {"},{"lineNumber":128,"author":{"gitID":"qiu-siqi"},"content":"        return publicationDate;"},{"lineNumber":129,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":131,"author":{"gitID":"qiu-siqi"},"content":"    public Publisher getPublisher() {"},{"lineNumber":132,"author":{"gitID":"qiu-siqi"},"content":"        return publisher;"},{"lineNumber":133,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"takuyakanbr"},"content":"        if (!(other instanceof Book)) {"},{"lineNumber":142,"author":{"gitID":"takuyakanbr"},"content":"            return false;"},{"lineNumber":143,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":145,"author":{"gitID":"takuyakanbr"},"content":"        Book otherBook \u003d (Book) other;"},{"lineNumber":146,"author":{"gitID":"qiu-siqi"},"content":"        return otherBook.getIsbn().equals(this.getIsbn());"},{"lineNumber":147,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":149,"author":{"gitID":"takuyakanbr"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"takuyakanbr"},"content":"    public int hashCode() {"},{"lineNumber":151,"author":{"gitID":"qiu-siqi"},"content":"        return Objects.hash(isbn);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        builder.append(getTitle()).append(\" - Authors: \");"},{"lineNumber":158,"author":{"gitID":"takuyakanbr"},"content":"        getAuthors().forEach(author -\u003e builder.append(\"[\").append(author).append(\"]\"));"},{"lineNumber":159,"author":{"gitID":"takuyakanbr"},"content":"        return builder.toString();"},{"lineNumber":160,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":162,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"qiu-siqi":43,"takuyakanbr":56,"-":63}},{"path":"src/main/java/seedu/address/model/book/UniqueBookCircularList.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":"import seedu.address.model.UniqueList;"},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"//@@author qiu-siqi"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":" * A list of items that enforces no nulls and uniqueness between its elements,"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":" * with maximum of a pre-set number of elements."},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":" * When the limit is reached, the earliest added element is removed to add the new element."},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":" *"},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":" * Supports a minimal set of operations."},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"public class UniqueBookCircularList extends UniqueList\u003cBook\u003e {"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"    private final int size;"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    public UniqueBookCircularList() {"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":"        this.size \u003d 50;"},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"     * Creates a new {@code UniqueBookCircularList} with books from {@code bookList}."},{"lineNumber":27,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"qiu-siqi"},"content":"    public UniqueBookCircularList(List\u003cBook\u003e bookList) {"},{"lineNumber":29,"author":{"gitID":"qiu-siqi"},"content":"        this.size \u003d 50;"},{"lineNumber":30,"author":{"gitID":"qiu-siqi"},"content":"        for (int index \u003d bookList.size() - 1; index \u003e\u003d 0; index--) {"},{"lineNumber":31,"author":{"gitID":"qiu-siqi"},"content":"            addToFront(bookList.get(index));"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"     * Constructs a list where the maximum number of books in the list is {@code size}."},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"    public UniqueBookCircularList(int size) {"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"        this.size \u003d size;"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":"     * Adds a book to the front of the list."},{"lineNumber":44,"author":{"gitID":"qiu-siqi"},"content":"     * Moves the book to the front of the list if it exists in the list."},{"lineNumber":45,"author":{"gitID":"qiu-siqi"},"content":"     * Removes the earliest added book if the list is full before adding the new book."},{"lineNumber":46,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"qiu-siqi"},"content":"    public void addToFront(Book toAdd) {"},{"lineNumber":48,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":49,"author":{"gitID":"qiu-siqi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":50,"author":{"gitID":"qiu-siqi"},"content":"            internalList.remove(toAdd);"},{"lineNumber":51,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"qiu-siqi"},"content":"        if (internalList.size() \u003e\u003d size) {"},{"lineNumber":53,"author":{"gitID":"qiu-siqi"},"content":"            internalList.remove(size - 1);"},{"lineNumber":54,"author":{"gitID":"qiu-siqi"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"qiu-siqi"},"content":"        internalList.add(0, toAdd);"},{"lineNumber":56,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":57,"author":{"gitID":"qiu-siqi"},"content":"        assert internalList.size() \u003c\u003d size;"},{"lineNumber":58,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":60,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"qiu-siqi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"qiu-siqi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof UniqueBookCircularList // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueBookCircularList) other).internalList)"},{"lineNumber":65,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.size \u003d\u003d ((UniqueBookCircularList) other).size);"},{"lineNumber":66,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":64,"takuyakanbr":1,"-":2}},{"path":"src/main/java/seedu/address/model/book/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"592363789"},"content":"//@@author 592363789"},{"lineNumber":7,"author":{"gitID":"592363789"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"592363789"},"content":" * Represents a book\u0027s rating."},{"lineNumber":9,"author":{"gitID":"592363789"},"content":" * Guarantees: immutable."},{"lineNumber":10,"author":{"gitID":"592363789"},"content":" */"},{"lineNumber":11,"author":{"gitID":"592363789"},"content":"public class Rating implements Comparable\u003cRating\u003e {"},{"lineNumber":12,"author":{"gitID":"592363789"},"content":""},{"lineNumber":13,"author":{"gitID":"592363789"},"content":"    private static final String MESSAGE_RATING_CONSTRAINTS \u003d \"Rating must be between -1 and 5 (both inclusive).\";"},{"lineNumber":14,"author":{"gitID":"592363789"},"content":"    private static final int UNRATED_RATING \u003d -1;"},{"lineNumber":15,"author":{"gitID":"592363789"},"content":"    private static final int MIN_RATING \u003d 0;"},{"lineNumber":16,"author":{"gitID":"592363789"},"content":"    private static final int MAX_RATING \u003d 5;"},{"lineNumber":17,"author":{"gitID":"592363789"},"content":"    public static final int DEFAULT_RATING \u003d UNRATED_RATING;"},{"lineNumber":18,"author":{"gitID":"592363789"},"content":""},{"lineNumber":19,"author":{"gitID":"592363789"},"content":"    private static final char STAR \u003d \u0027\\u2B50\u0027;"},{"lineNumber":20,"author":{"gitID":"592363789"},"content":"    private static final String DISPLAY_TEXT_UNRATED \u003d \"\\u2B50 Unrated\";"},{"lineNumber":21,"author":{"gitID":"592363789"},"content":"    private static final String STYLE_CLASS_UNRATED \u003d \"rating-unrated\";"},{"lineNumber":22,"author":{"gitID":"592363789"},"content":"    private static final String STYLE_CLASS_RATED \u003d \"rating-rated\";"},{"lineNumber":23,"author":{"gitID":"592363789"},"content":""},{"lineNumber":24,"author":{"gitID":"592363789"},"content":"    public final int rating;"},{"lineNumber":25,"author":{"gitID":"592363789"},"content":""},{"lineNumber":26,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"592363789"},"content":"     * Constructs a {@code Rating} with the default rating."},{"lineNumber":28,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"592363789"},"content":"    public Rating() {"},{"lineNumber":30,"author":{"gitID":"592363789"},"content":"        this.rating \u003d DEFAULT_RATING;"},{"lineNumber":31,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"592363789"},"content":""},{"lineNumber":33,"author":{"gitID":"592363789"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"592363789"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":35,"author":{"gitID":"592363789"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"592363789"},"content":"     * @param rating A book rating."},{"lineNumber":37,"author":{"gitID":"592363789"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"592363789"},"content":"    public Rating(int rating) {"},{"lineNumber":39,"author":{"gitID":"592363789"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"592363789"},"content":"        this.rating \u003d rating;"},{"lineNumber":41,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"592363789"},"content":""},{"lineNumber":43,"author":{"gitID":"592363789"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if the given integer is a valid rating."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static boolean isValidRating(int rating) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return rating \u003d\u003d UNRATED_RATING || (rating \u003e\u003d MIN_RATING \u0026\u0026 rating \u003c\u003d MAX_RATING);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getDisplayText() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (rating \u003d\u003d UNRATED_RATING) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return DISPLAY_TEXT_UNRATED;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // returns a string with number of stars equal to rating"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        char[] repeat \u003d new char[rating];"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Arrays.fill(repeat, STAR);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new String(repeat);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public String getStyleClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (rating \u003d\u003d UNRATED_RATING) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return STYLE_CLASS_UNRATED;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return STYLE_CLASS_RATED;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"592363789"},"content":"    //@@author 592363789"},{"lineNumber":70,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"592363789"},"content":"    public int compareTo(Rating other) {"},{"lineNumber":72,"author":{"gitID":"592363789"},"content":"        return Integer.compare(rating, other.rating);"},{"lineNumber":73,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"592363789"},"content":""},{"lineNumber":75,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"592363789"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitID":"592363789"},"content":"        return Integer.toString(rating);"},{"lineNumber":78,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"592363789"},"content":""},{"lineNumber":80,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"592363789"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"592363789"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"592363789"},"content":"                || (other instanceof Rating // instanceof handles nulls"},{"lineNumber":84,"author":{"gitID":"592363789"},"content":"                \u0026\u0026 this.rating \u003d\u003d ((Rating) other).rating); // state check"},{"lineNumber":85,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"592363789"},"content":""},{"lineNumber":87,"author":{"gitID":"592363789"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"592363789"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"592363789"},"content":"        return Integer.hashCode(rating);"},{"lineNumber":90,"author":{"gitID":"592363789"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"592363789"},"content":""},{"lineNumber":92,"author":{"gitID":"592363789"},"content":"}"}],"authorContributionMap":{"592363789":62,"-":30}},{"path":"src/main/java/seedu/address/model/book/Isbn.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Represents a book\u0027s ISBN."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"public class Isbn {"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    public final String isbn;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"     * Constructs a {@code Description}."},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     * @param isbn A book\u0027s isbn."},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public Isbn(String isbn) {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(isbn);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        this.isbn \u003d isbn;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        return isbn;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof Isbn // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.isbn.equals(((Isbn) other).isbn)); // state check"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public int hashCode() {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        return isbn.hashCode();"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":32,"takuyakanbr":1,"-":7}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.ReadOnlyAliasList;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Predicate\u003cBook\u003e PREDICATE_HIDE_ALL_BOOKS \u003d unused -\u003e false;"},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Default book {@code Comparator} that sorts by status (in descending order: Reading, Unread, Read),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * priority (High, Medium, Low, None), and finally title."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Comparator\u003cBook\u003e DEFAULT_BOOK_COMPARATOR \u003d (book1, book2) -\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        int statusComparison \u003d book2.getStatus().compareTo(book1.getStatus());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (statusComparison !\u003d 0) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            return statusComparison;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        int priorityComparison \u003d  book2.getPriority().compareTo(book1.getPriority());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (priorityComparison !\u003d 0) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return priorityComparison;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return book1.getTitle().compareTo(book2.getTitle());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    };"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    /** Returns the type of list that is currently active. */"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"    ActiveListType getActiveListType();"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":41,"author":{"gitID":"qiu-siqi"},"content":"    /** Returns an unmodifiable view of the list that is currently active. */"},{"lineNumber":42,"author":{"gitID":"qiu-siqi"},"content":"    ObservableList\u003cBook\u003e getActiveList();"},{"lineNumber":43,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"    /** Sets the type of list that is currently active. */"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"    void setActiveListType(ActiveListType type);"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"    void resetData(ReadOnlyBookShelf newData);"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":"    /** Returns the BookShelf */"},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"    ReadOnlyBookShelf getBookShelf();"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":"    /** Deletes the given book. */"},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    void deleteBook(Book target) throws BookNotFoundException;"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"    /** Adds the given book */"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"    void addBook(Book book) throws DuplicateBookException;"},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"     * Replaces the given book {@code target} with {@code editedBook}."},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"     * @throws BookNotFoundException if {@code target} could not be found in the list."},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"     * @throws DuplicateBookException if updating the book details causes the book to be equivalent to"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"     *      another existing book in the list."},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    void updateBook(Book target, Book editedBook)"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":"            throws BookNotFoundException, DuplicateBookException;"},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Display Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered and sorted book list */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    ObservableList\u003cBook\u003e getDisplayBookList();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the predicate used for filtering the book list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    Predicate\u003c? super Book\u003e getBookListFilter();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns the comparator used for sorting the book list."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    Comparator\u003c? super Book\u003e getBookListSorter();"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"takuyakanbr"},"content":"     * Updates the filter of the filtered book list to filter by the given {@code predicate}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    void updateBookListFilter(Predicate\u003c? super Book\u003e predicate);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Updates the comparator of the sorted book list to sort by the given {@code comparator}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code comparator} is null."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    void updateBookListSorter(Comparator\u003c? super Book\u003e comparator);"},{"lineNumber":95,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Search Results \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"takuyakanbr"},"content":"    /** Returns an unmodifiable view of the search results. */"},{"lineNumber":99,"author":{"gitID":"takuyakanbr"},"content":"    ObservableList\u003cBook\u003e getSearchResultsList();"},{"lineNumber":100,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":101,"author":{"gitID":"takuyakanbr"},"content":"    /** Updates the search results that should be displayed. */"},{"lineNumber":102,"author":{"gitID":"takuyakanbr"},"content":"    void updateSearchResults(ReadOnlyBookShelf newResults);"},{"lineNumber":103,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recent books \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"qiu-siqi"},"content":"    /** Returns an unmodifiable view of the recently selected books. */"},{"lineNumber":107,"author":{"gitID":"qiu-siqi"},"content":"    ObservableList\u003cBook\u003e getRecentBooksList();"},{"lineNumber":108,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /** Resets the recent books list with the given data. */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    void resetRecentBooks(ReadOnlyBookShelf newData);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"qiu-siqi"},"content":"    /** Returns the recently selected books as a ReadOnlyBookShelf*/"},{"lineNumber":113,"author":{"gitID":"qiu-siqi"},"content":"    ReadOnlyBookShelf getRecentBooksListAsBookShelf();"},{"lineNumber":114,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":115,"author":{"gitID":"qiu-siqi"},"content":"    /** Add a recently selected book. */"},{"lineNumber":116,"author":{"gitID":"qiu-siqi"},"content":"    void addRecentBook(Book newBook);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Alias List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /** Returns the alias list. */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    ReadOnlyAliasList getAliasList();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the alias list. */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    ObservableList\u003cAlias\u003e getDisplayAliasList();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /** Adds the specified {@code alias} to the alias list. */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    void addAlias(Alias alias);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns an {@code Optional} containing the alias that matches the specified {@code name}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Returns an empty {@code Optional} if no matching alias was found."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    Optional\u003cAlias\u003e getAlias(String name);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /** Removes the alias that matches the specified {@code name} from the alias list. */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    void removeAlias(String name);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"qiu-siqi":12,"takuyakanbr":41,"-":84}},{"path":"src/main/java/seedu/address/model/book/Gid.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Represents a book\u0027s google ID."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"public class Gid {"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    public final String gid;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"     * Constructs a {@code Gid}."},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     * @param gid A book\u0027s google id."},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public Gid(String gid) {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(gid);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        this.gid \u003d gid;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        return gid;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof Gid // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.gid.equals(((Gid) other).gid)); // state check"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public int hashCode() {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        return gid.hashCode();"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":32,"takuyakanbr":1,"-":7}},{"path":"src/main/java/seedu/address/model/book/UniqueBookList.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"takuyakanbr"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":8,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.UniqueList;"},{"lineNumber":9,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":10,"author":{"gitID":"takuyakanbr"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":11,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":12,"author":{"gitID":"takuyakanbr"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"takuyakanbr"},"content":" * Represents a unique collection of books. Does not allow nulls."},{"lineNumber":14,"author":{"gitID":"takuyakanbr"},"content":" *"},{"lineNumber":15,"author":{"gitID":"takuyakanbr"},"content":" * Supports a minimal set of list operations."},{"lineNumber":16,"author":{"gitID":"takuyakanbr"},"content":" */"},{"lineNumber":17,"author":{"gitID":"takuyakanbr"},"content":"public class UniqueBookList extends UniqueList\u003cBook\u003e {"},{"lineNumber":18,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":19,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"takuyakanbr"},"content":"     * Adds a book to the list."},{"lineNumber":21,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"takuyakanbr"},"content":"     * @throws DuplicateBookException if the book to add is a duplicate of an existing book in the list."},{"lineNumber":23,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"takuyakanbr"},"content":"    public void add(Book toAdd) throws DuplicateBookException {"},{"lineNumber":25,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toAdd);"},{"lineNumber":26,"author":{"gitID":"takuyakanbr"},"content":"        if (contains(toAdd)) {"},{"lineNumber":27,"author":{"gitID":"takuyakanbr"},"content":"            throw new DuplicateBookException();"},{"lineNumber":28,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"takuyakanbr"},"content":"        internalList.add(toAdd);"},{"lineNumber":30,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":32,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"takuyakanbr"},"content":"     * Replaces the book {@code target} in the list with {@code editedBook}."},{"lineNumber":34,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"takuyakanbr"},"content":"     * @throws BookNotFoundException if {@code target} could not be found in the list."},{"lineNumber":36,"author":{"gitID":"takuyakanbr"},"content":"     * @throws DuplicateBookException if the replacement is equivalent to another existing book in the list."},{"lineNumber":37,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"takuyakanbr"},"content":"    public void setBook(Book target, Book editedBook)"},{"lineNumber":39,"author":{"gitID":"takuyakanbr"},"content":"            throws BookNotFoundException, DuplicateBookException {"},{"lineNumber":40,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(editedBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":44,"author":{"gitID":"takuyakanbr"},"content":"            throw new BookNotFoundException();"},{"lineNumber":45,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":47,"author":{"gitID":"takuyakanbr"},"content":"        if (!target.equals(editedBook) \u0026\u0026 internalList.contains(editedBook)) {"},{"lineNumber":48,"author":{"gitID":"takuyakanbr"},"content":"            throw new DuplicateBookException();"},{"lineNumber":49,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":51,"author":{"gitID":"takuyakanbr"},"content":"        internalList.set(index, editedBook);"},{"lineNumber":52,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":54,"author":{"gitID":"takuyakanbr"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"takuyakanbr"},"content":"     * Removes the equivalent book from the list."},{"lineNumber":56,"author":{"gitID":"takuyakanbr"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"takuyakanbr"},"content":"     * @throws BookNotFoundException if no such book could be found in the list."},{"lineNumber":58,"author":{"gitID":"takuyakanbr"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"takuyakanbr"},"content":"    public boolean remove(Book toRemove) throws BookNotFoundException {"},{"lineNumber":60,"author":{"gitID":"takuyakanbr"},"content":"        requireNonNull(toRemove);"},{"lineNumber":61,"author":{"gitID":"takuyakanbr"},"content":"        final boolean bookFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":62,"author":{"gitID":"takuyakanbr"},"content":"        if (!bookFoundAndDeleted) {"},{"lineNumber":63,"author":{"gitID":"takuyakanbr"},"content":"            throw new BookNotFoundException();"},{"lineNumber":64,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"takuyakanbr"},"content":"        return bookFoundAndDeleted;"},{"lineNumber":66,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":68,"author":{"gitID":"takuyakanbr"},"content":"    public void setBooks(Collection\u003cBook\u003e books) throws DuplicateBookException {"},{"lineNumber":69,"author":{"gitID":"takuyakanbr"},"content":"        requireAllNonNull(books);"},{"lineNumber":70,"author":{"gitID":"takuyakanbr"},"content":"        final UniqueBookList replacement \u003d new UniqueBookList();"},{"lineNumber":71,"author":{"gitID":"takuyakanbr"},"content":"        for (final Book book : books) {"},{"lineNumber":72,"author":{"gitID":"takuyakanbr"},"content":"            replacement.add(book);"},{"lineNumber":73,"author":{"gitID":"takuyakanbr"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"takuyakanbr"},"content":"        internalList.setAll(replacement.asObservableList());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"takuyakanbr"},"content":"                || (other instanceof UniqueBookList // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"takuyakanbr"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueBookList) other).internalList));"},{"lineNumber":82,"author":{"gitID":"takuyakanbr"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"takuyakanbr"},"content":""},{"lineNumber":84,"author":{"gitID":"takuyakanbr"},"content":"}"}],"authorContributionMap":{"takuyakanbr":72,"-":12}},{"path":"src/main/java/seedu/address/model/book/Publisher.java","lines":[{"lineNumber":1,"author":{"gitID":"takuyakanbr"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":5,"author":{"gitID":"qiu-siqi"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qiu-siqi"},"content":" * Represents a book\u0027s publisher."},{"lineNumber":7,"author":{"gitID":"qiu-siqi"},"content":" * Guarantees: immutable."},{"lineNumber":8,"author":{"gitID":"qiu-siqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qiu-siqi"},"content":"public class Publisher {"},{"lineNumber":10,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":11,"author":{"gitID":"qiu-siqi"},"content":"    public final String publisher;"},{"lineNumber":12,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":13,"author":{"gitID":"qiu-siqi"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"qiu-siqi"},"content":"     * Constructs a {@code Publisher}."},{"lineNumber":15,"author":{"gitID":"qiu-siqi"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"qiu-siqi"},"content":"     * @param publisher A book\u0027s publisher."},{"lineNumber":17,"author":{"gitID":"qiu-siqi"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"qiu-siqi"},"content":"    public Publisher(String publisher) {"},{"lineNumber":19,"author":{"gitID":"qiu-siqi"},"content":"        requireNonNull(publisher);"},{"lineNumber":20,"author":{"gitID":"qiu-siqi"},"content":"        this.publisher \u003d publisher;"},{"lineNumber":21,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":23,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":24,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"qiu-siqi"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"qiu-siqi"},"content":"        return publisher;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"qiu-siqi"},"content":"                || (other instanceof Publisher // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"qiu-siqi"},"content":"                \u0026\u0026 this.publisher.equals(((Publisher) other).publisher)); // state check"},{"lineNumber":34,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qiu-siqi"},"content":""},{"lineNumber":36,"author":{"gitID":"qiu-siqi"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"qiu-siqi"},"content":"    public int hashCode() {"},{"lineNumber":38,"author":{"gitID":"qiu-siqi"},"content":"        return publisher.hashCode();"},{"lineNumber":39,"author":{"gitID":"qiu-siqi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qiu-siqi"},"content":"}"}],"authorContributionMap":{"qiu-siqi":32,"takuyakanbr":1,"-":7}}]
