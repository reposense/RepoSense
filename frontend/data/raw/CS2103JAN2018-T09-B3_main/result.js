var resultJson = [{"path":"docs/team/Adityaa1998.adoc","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"\u003d Aditya Agarwal - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: ProgressChecker"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"ProgressChecker is a desktop ProgressChecker application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"This portfolio is to collect and combine my contribution towards the development of ProgressChecker. This portfolio gives a glimpse of the software programming knowledge I have imbibed during the course of CS2103T. In this portfolio I have described few enhancements I have made to the application with the skills learnt in this software engineering course."},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"* *Major enhancement*: added *the ability to track issues on github*"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"** What it does: allows the teammates in a project to track issues on the team repository on github from the ProgressChecker application."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"** Justification: This feature improves the teammate\u0027s efficiency to manage issues on github by giving him the ability to create, edit, close issues with minimal effort and concentrate on bigger problems. This way users can easily manage issues on github with a few key strokes, and without having to go through the complications of using a GUI."},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"** Highlights: This enhancement makes use of the complete software architecture by touching upon all the four design components. This enhancement needed addition of many new commands, some which are : `gitlogin`, `createissue`, `editissue`, `closeissue`."},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"** Credits: Development of this feature made of use of the http://github-api.kohsuke.org/[Github Java API](org.eclipse.egit.github.core)."},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"* *Minor enhancement*: Added a dynamic search feature which dynamically filters the contact list of a user without the user having to press enter every time."},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B3/main/blob/master/collated/functional/adityaa1998.md[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"** Features"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"*** Auto-complete: added functionality for the commands to be autocompleted on `TAB` press. (Pull request https://github.com/CS2103JAN2018-T09-B3/main/pull/108[#108])."},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"** Project management:"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"*** Managed releases `v1.2` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"*** Managed milestones `v1.1` - `v1.5rc` (5 releases) on GitHub"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"** Enhancements to existing features:"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"*** Added alias to the command (Pull request https://github.com/CS2103JAN2018-T09-B3/main/pull/8[#8])"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"** Documentation:"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"*** Made the user guide more user friendly and updated it with the all the relevant features. (Pull requests https://github.com/CS2103JAN2018-T09-B3/main/pull/41[#41], https://github.com/CS2103JAN2018-T09-B3/main/pull/158[#158], https://github.com/CS2103JAN2018-T09-B3/main/pull/176[#176])."},{"lineNumber":38,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-F14-B4/issues/142[#142], https://github.com/CS2103JAN2018-F14-B4/issues/144[#144], https://github.com/CS2103JAN2018-F14-B4/issues/147[#147])"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"*** Integrated a http://github-api.kohsuke.org/[Github Java API](org.eclipse.egit.github.core) to the project https://github.com/CS2103JAN2018-T09-B3/main[ProgressChecker]."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"include::../UserGuide.adoc[tag\u003dissues]"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"include::../DeveloperGuide.adoc[tag\u003dsearch]"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"include::../DeveloperGuide.adoc[tag\u003dgithub]"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":34,"-":30}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"\u003d ProgressChecker - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toclevels: 4"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":important-caption: ‚ùó"},{"lineNumber":13,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":14,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B3/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":":ext-relative: DeveloperGuide.adoc"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"By: `Team T09-B3`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d About the App"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"ProgressChecker is for *students* who *prefer to use a desktop app* to keep track of their learning progress for module CS2103/T."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"In this version, you can add your teammates details into ProgressChecker. You can also create a new task list that syncs with Google Tasks. ProgressChecker displays link:DeveloperGuide.adoc#Learning-Outcomes[Learning Outcomes] and exercises pulled from the https://nus-cs2103-ay1718s2.github.io/website/index.html[CS2103/T module website]. Students can use these information to track their weekly homework and the progress of the project."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"More importantly, ProgressChecker is *optimized for students who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (link:DeveloperGuide.adoc#GUI[GUI])."},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you are reasonably comfortable with using CLI, ProgressChecker can get your learning and project development tracking done faster than traditional GUI apps. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"Interested? Now you are ready to jump to the \u003c\u003cQuick Start,Quick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Icons Meaning"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"You will be seeing these icons throughout the guide. Each icon display specific information."},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"This exclamation mark means you should strictly follow the instruction here to avoid unwanted outcome from ProgressChecker."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"This lightbulb icon means tips that you can try when using ProgressChecker."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":45,"author":{"gitID":"-"},"content":"This info icon means notes that you should pay attention to when using ProgressChecker."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"Getting started with ProgressChecker is as easy as downloading and launching the software in a couple of clicks! Listed below are the important *steps* that you will need to follow to get started:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":".  Please ensure that you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":54,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":56,"author":{"gitID":"-"},"content":"+"},{"lineNumber":57,"author":{"gitID":"-"},"content":".  You can download the latest `progresschecker.jar` link:{repoURL}/releases[here]."},{"lineNumber":58,"author":{"gitID":"-"},"content":".  Next, create a new folder on your Desktop and name it _ProgressChecker_. Then, place the downloaded progresschecker.jar file into the new _ProgressChecker_ folder you\u0027ve just created. +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"Your jar file should now be residing in C:\\Users\\%UserProfile%\\Desktop\\ProgressChecker."},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":"image::download3.png[width\u003d\"790\"]"},{"lineNumber":62,"author":{"gitID":"-"},"content":"+"},{"lineNumber":63,"author":{"gitID":"-"},"content":".  You can double-click the `progresschecker.jar` file to launch ProgressChecker. A GUI as shown below should appear in a few seconds."},{"lineNumber":64,"author":{"gitID":"-"},"content":"+"},{"lineNumber":65,"author":{"gitID":"-"},"content":"image::UI.jpg[width\u003d\"790\"]"},{"lineNumber":66,"author":{"gitID":"-"},"content":"+"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Here are the four tabs(profile, task, exercise and issue) that you can switch in center panel:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"+"},{"lineNumber":69,"author":{"gitID":"-"},"content":"image::profileTab.jpg[width\u003d\"790\"]"},{"lineNumber":70,"author":{"gitID":"-"},"content":"+"},{"lineNumber":71,"author":{"gitID":"-"},"content":"image::exerciseTab.jpg[width\u003d\"790\"]"},{"lineNumber":72,"author":{"gitID":"-"},"content":"+"},{"lineNumber":73,"author":{"gitID":"-"},"content":"image::taskTab.jpg[width\u003d\"790\"]"},{"lineNumber":74,"author":{"gitID":"-"},"content":"+"},{"lineNumber":75,"author":{"gitID":"-"},"content":"image::issueTab.jpg[width\u003d\"790\"]"},{"lineNumber":76,"author":{"gitID":"-"},"content":"+"},{"lineNumber":77,"author":{"gitID":"-"},"content":". You should also notice that the following files shown below will have been automatically generated in the same directory as where your progresschecker.jar file is in upon launch."},{"lineNumber":78,"author":{"gitID":"-"},"content":"+"},{"lineNumber":79,"author":{"gitID":"-"},"content":"image::download2.png[width\u003d\"790\"]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"+"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Now, you are ready to start to explore ProgressChecker!"},{"lineNumber":82,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Please do NOT try other task-related command before you call `newtasklist` command."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"ProgressChecker is filled with lots of functionality that are easy to use. If you\u0027re new to using CLI, our next section will give you a quick start to end process of using CLI with ProgressChecker."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Using CLI with ProgressChecker"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"Let\u0027s start using ProgressChecker. To perform anything using CLI, you will have to type a command in the command box and press the kbd:[Enter] key to execute it. +"},{"lineNumber":93,"author":{"gitID":"-"},"content":"image:CommandBoxIndication.png[width\u003d\"600\"]"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":96,"author":{"gitID":"-"},"content":"You can type a command and press `Tab` to auto bring out all the command parameters."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":". Start by typing the `help` command in the command box and press kbd:[Enter] to open the help window. This window contains the information you will need to learn how to use ProgressChecker."},{"lineNumber":99,"author":{"gitID":"-"},"content":". Next, let\u0027s add a teammate\u0027s details to your contact list. +"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Type **`add`**`n/John Doe p/98765432 e/johnd@example.com m/Computer Science y/2 g/johndoe` +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Teammate John Doe should now be listed in your contact list. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"image:TeammateAddedIndication.png[width\u003d\"300\"]"},{"lineNumber":103,"author":{"gitID":"-"},"content":". After adding all of your teammates\u0027 details into ProgressChecker, you will need to load the tasks you\u0027re required to do into ProgressChecker. +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Type **`nl`** to bring up the Google account authorization page. Select `Allow`. +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"You should see the feedback that a verification code has been received. Return to ProgressChecker. +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"This step in syncing of tasks can take up to 40 seconds. ProgressChecker might be in the state of not responding in the meantime. +"},{"lineNumber":108,"author":{"gitID":"-"},"content":". Once the tasks have been loaded, you can view them. +"},{"lineNumber":109,"author":{"gitID":"-"},"content":"Type **`view task`** then **`vt *`** +"},{"lineNumber":110,"author":{"gitID":"-"},"content":"You should now be on the Task tab and see a list of learning outcomes."},{"lineNumber":111,"author":{"gitID":"-"},"content":". When you have completed a learning outcome, you can mark them as complete. +"},{"lineNumber":112,"author":{"gitID":"-"},"content":"Type **`ct`**`1` to mark your first learning outcome as complete."},{"lineNumber":113,"author":{"gitID":"-"},"content":"You should now see that the status of the learning outcome has turned green with a tick in the checkbox."},{"lineNumber":114,"author":{"gitID":"-"},"content":". Now, let\u0027s try answering an exercise. +"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Type **`view`**`exercise` +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"You should now be on the Exercise tab. You can scroll through and see the list of exercises available for week 11. Let\u0027s answer question index 11.1.1. +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Type **`ans`**`11.1.1 a` +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"You should now see your answer and the suggested answer reflected under question index 11.1.1."},{"lineNumber":119,"author":{"gitID":"-"},"content":"image:ExerciseAnsweredIndication.png[width\u003d\"600\"]"},{"lineNumber":120,"author":{"gitID":"-"},"content":". You can also view exercises from other weeks."},{"lineNumber":121,"author":{"gitID":"-"},"content":"Type **`view`**`exercise 5` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"You should now be seeing week 5\u0027s exercises in the Exercise tab."},{"lineNumber":123,"author":{"gitID":"-"},"content":". After checking your learning progress, you would want to manage your project development. +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Type **`view`**`issues` +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"You should now be on the Issues tab. Now, let\u0027s login into GitHub. +"},{"lineNumber":126,"author":{"gitID":"-"},"content":"Type **`gitlogin`**`gu/YOUR_GITHUB_USERNAME pc/YOUR_GITHUB_PASSWORD r/YOUR_GITHUB_REPO_NAME` +"},{"lineNumber":127,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"Words in `UPPER_CASE` are the parameters to be supplied by you e.g. in `gitlogin gu/YOUR_GITHUB_USERNAME`, `YOUR_GITHUB_USERNAME` is a parameter which can be used as `gitlogin gu/JohnDoe`."},{"lineNumber":129,"author":{"gitID":"-"},"content":"If you have successfully logged in, you should see the opened issues in your specified repository listed in the tab. +"},{"lineNumber":130,"author":{"gitID":"-"},"content":". Next, let\u0027s create a GitHub issue to your repository. +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Type **`+issue`**`ti/Implement remark functionality` +"},{"lineNumber":132,"author":{"gitID":"-"},"content":"You should now see your newly created issue reflected under the Issues tab as well as under the issue tracker section of your specified GitHub repository."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"And that is the general workflow you would have when using ProgressChecker each week! All changes you have made previously have all already been automatically saved. If you wish to close ProgressChecker now, you can type **`exit`** to quit."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"There are more commands available for you to try. Refer to the \u003c\u003cList of All Commands,next section\u003e\u003e for the details of each command."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"* The commands are case-insensitive. However, for simplicity all the examples have the commands in lower case."},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"* You can auto-complete any command by pressing tab key."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* Items with `‚Ä¶` after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List of All Commands"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d General"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Helping user with User Guide : `help` OR `h`"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"You may want to refer to the User Guide when you have a question. You can read it in a separate window. +"},{"lineNumber":154,"author":{"gitID":"-"},"content":"*Format:* `help` OR `h`"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"* `help`"},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `h`"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"// tag::view[]"},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Viewing a different tab : `view` OR `v` `[since v1.5]`"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"You can change the tab view to show either `Profile`, `Task`, `Exercise`, or `Issues`. +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"*Format:* `view TYPE` OR `v TYPE` +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"image:TabView.png[width\u003d\"600\"]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"By default, the exercise tab shows exercises from the latest available school week. You can view the exercises in other weeks as well. +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"*Format:* `view exercise WEEK_NUMBER` OR `v exercise WEEK_NUMBER`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"* `TYPE` refers to the tab names you see in the GUI: `profile`, `task`, `exercise`, or `issues`."},{"lineNumber":174,"author":{"gitID":"-"},"content":"* `WEEK_NUMBER` refers to the school week number and *must be a positive integer* in the *range of 2 to 11* `2, 3, ..., 11`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"* `view task`"},{"lineNumber":179,"author":{"gitID":"-"},"content":"* `view exercise`"},{"lineNumber":180,"author":{"gitID":"-"},"content":"* `view exercise 5`"},{"lineNumber":181,"author":{"gitID":"-"},"content":"// end::view[]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"// tag::theme[]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Toggling theme : `theme` OR `t`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"You can change the style of the app between a light and dark theme according to your preference. +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"*Format:* `theme` OR `t`"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `theme`"},{"lineNumber":192,"author":{"gitID":"-"},"content":"* `t`"},{"lineNumber":193,"author":{"gitID":"-"},"content":"// end::theme[]"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Undoing previous command : `undo` OR `u`"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"You may type some commands wrongly, or some unexpected changes happen. You can restore the ProgressChecker to the state before the previous _undoable_ command is executed. +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"*Format:* `undo` OR `u`"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"* Undoable commands: those commands that modify the ProgressChecker\u0027s content (`add`, `answer`, `delete`, `edit` and `clear`)."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"`u` (reverses the `delete 1` command)"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`u` (reverses the `delete 1` command)"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo` OR `r`"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"You can reverse the most recent `undo` command if you want to go back to the previous state. +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"*Format:* `redo` OR `r`"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command)"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"`r` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`r` (reapplies the `delete 1` command) +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d History viewing the list of entered commands : `history`"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"You can retrace all the commands that you have entered in reverse chronological order. +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"*Format:* `history`"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":250,"author":{"gitID":"-"},"content":"You can press the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows. The previous and next input respectively will display in the command box."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"*Example:*"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `history`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Refreshing the content : `refresh` OR `rf` `[coming in v2.0]`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"You can refresh the program to update it to the latest content. +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"*Format:* `refresh`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"* `refresh`"},{"lineNumber":264,"author":{"gitID":"-"},"content":"* `rf`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Clearing all entries : `clear` OR `c`"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"You can clear all information and data inside the ProgressChecker if you want to restore the app. +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"*Format:* `clear` OR `c`"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"Running `clear` will remove the exercises in the software as well! If this was not your intent after running the command, you can undo the change as this is an undoable command! To find out how you can achieve this, check out the \u003c\u003cundoing-previous-command-code-undo-code-or-code-u-code,undo\u003e\u003e and \u003c\u003credoing-the-previously-undone-command-code-redo-code-or-code-r-code,redo\u003e\u003e commands."},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"* `clear`"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* `c`"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Exiting the program : `exit` OR `e`"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"You can exits the program when you are done with the work. +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"*Format:* `exit` OR `e`"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"* `exit`"},{"lineNumber":287,"author":{"gitID":"-"},"content":"* `e`"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Back/Forward the browser in ProgressChecker `[coming in v2.0]`"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exercise"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"// tag::answer[]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Answering an exercise : `answer` OR `ans` `[since v1.4r]`"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"You can answer an exercise based on the question index. Your answer will be saved automatically upon answering. +"},{"lineNumber":297,"author":{"gitID":"-"},"content":"*Format:* `answer QUESTION_INDEX ANSWER`"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":300,"author":{"gitID":"-"},"content":"If you accidentally overwrite your answer to an exercise, you can undo the change as this is an undoable command! To find out how you can achieve this, check out the example section for this command or look at the \u003c\u003cundoing-previous-command-code-undo-code-or-code-u-code,undo\u003e\u003e and \u003c\u003credoing-the-previously-undone-command-code-redo-code-or-code-r-code,redo\u003e\u003e commands."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"* `QUESTION_INDEX` refers to the question index shown in the GUI and it must be of the format `WEEK_NUMBER`.`SECTION_NUMBER`.`QUESTION_NUMBER`, e.g. 2.1.1, 3.2.5, 6.1.7 +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"image:QuestionIndexFormat.png[width\u003d\"360\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":307,"author":{"gitID":"-"},"content":"You can see if an exercise has been answered by looking at the color of the question index label. The colors are as shown in the image above, where green means it has been answered and red means otherwise."},{"lineNumber":308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"An exercise\u0027s `SECTION_NUMBER` is directly adopted from https://nus-cs2103-ay1718s2.github.io/website/index.html[CS2103/T\u0027s website]."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"* `answer 2.1.1 Procedural languages work at simple data structures and functions level`"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"* `answer 3.5.2 a. Both are UML diagrams.` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"`u` (reverses the `answer 3.5.2 a. Both are UML diagrams.` command)"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"* `answer 3.5.2 a. Both are UML diagrams.` +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"`u` (reverses the `answer 3.5.2 a. Both are UML diagrams.` command) +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"`r` (reapplies the `answer 3.5.2 a. Both are UML diagrams.` command)"},{"lineNumber":321,"author":{"gitID":"-"},"content":"// end::answer[]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Issue Tracker"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"AdityaA1998"},"content":"//tag::issues[]"},{"lineNumber":326,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d\u003d Logging in to Github: `gitlogin` OR `gl`"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"You can login with your Github account and prepare to work with the issues in your team repo. +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"*Format:* `gitlogin gu/USERNAME pc/PASSWORD r/REPO` +"},{"lineNumber":330,"author":{"gitID":"AdityaA1998"},"content":"OR +"},{"lineNumber":331,"author":{"gitID":"AdityaA1998"},"content":"`gl gu/USERNAME pc/PASSWORD r/REPOSITORY`"},{"lineNumber":332,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":333,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":334,"author":{"gitID":"AdityaA1998"},"content":"Your git details are not saved in our app for security reasons. Hence, you will need to login every time you start the software. +"},{"lineNumber":335,"author":{"gitID":"AdityaA1998"},"content":"You need to login and mention the repo where you need to create/edit issues."},{"lineNumber":336,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"AdityaA1998"},"content":"* `gitlogin gu/johndoe pc/dummy123 r/CS2103T/main` +"},{"lineNumber":340,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":341,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command:"},{"lineNumber":342,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":343,"author":{"gitID":"AdityaA1998"},"content":" You have successfully authenticated github!"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Creating an issue on Github: `+issue` OR `ci`"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"AdityaA1998"},"content":"You can create an issue in your team repository on github using this command."},{"lineNumber":348,"author":{"gitID":"-"},"content":"*Format:* `+issue ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...` +"},{"lineNumber":349,"author":{"gitID":"AdityaA1998"},"content":"OR +"},{"lineNumber":350,"author":{"gitID":"AdityaA1998"},"content":"`ci ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...`"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":353,"author":{"gitID":"AdityaA1998"},"content":"An issue has only \u0027title\u0027 field as compulsory. Rest are all optional. +"},{"lineNumber":354,"author":{"gitID":"AdityaA1998"},"content":"An issue can have more than one assignees and labels."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"AdityaA1998"},"content":"* `+issue ti/complete issue a/johndoe ms/v1.1 b/CS2103T is a software engineering module l/type.task l/CS2103T`"},{"lineNumber":359,"author":{"gitID":"AdityaA1998"},"content":"* `+issue ti/TestIssue`"},{"lineNumber":360,"author":{"gitID":"AdityaA1998"},"content":"* `ci ti/Issue with only body b/test body l/type.test`"},{"lineNumber":361,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":362,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command"},{"lineNumber":363,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":364,"author":{"gitID":"AdityaA1998"},"content":" Issue successfully created on Github"},{"lineNumber":365,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":366,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d\u003d Editing an issue on Github: `+issue` OR `ci`"},{"lineNumber":367,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":368,"author":{"gitID":"AdityaA1998"},"content":"You can edit an existing issue in the team repository using this command. +"},{"lineNumber":369,"author":{"gitID":"AdityaA1998"},"content":"*Format:* `editissue INDEX [ti/TITLE] [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...` +"},{"lineNumber":370,"author":{"gitID":"AdityaA1998"},"content":"OR +"},{"lineNumber":371,"author":{"gitID":"AdityaA1998"},"content":"`edi ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...`"},{"lineNumber":372,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":373,"author":{"gitID":"AdityaA1998"},"content":"[TIP]"},{"lineNumber":374,"author":{"gitID":"AdityaA1998"},"content":"If you don\u0027t remember the issue number, you can take a look at the issues by using `listissues` command. +"},{"lineNumber":375,"author":{"gitID":"AdityaA1998"},"content":"An issue can have more than one assignees and labels."},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"AdityaA1998"},"content":"* `editissue 1 ti/Changed title`"},{"lineNumber":380,"author":{"gitID":"AdityaA1998"},"content":"* `editissue ti/changed title b/changed body`"},{"lineNumber":381,"author":{"gitID":"AdityaA1998"},"content":"* `edi l/type.task`"},{"lineNumber":382,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":383,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command"},{"lineNumber":384,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":385,"author":{"gitID":"AdityaA1998"},"content":" Issue successfully edited on Github"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Closing an issue on Github: `-issue` OR `cli`"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"AdityaA1998"},"content":"You can close the specified issue on github after you have resolved it using this command. +"},{"lineNumber":390,"author":{"gitID":"-"},"content":"*Format:* `-issue INDEX` OR `cli INDEX`"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":393,"author":{"gitID":"AdityaA1998"},"content":"If you don\u0027t remember the issue number, you can take a look at the issues by using `listissues` command. +"},{"lineNumber":394,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":395,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":396,"author":{"gitID":"AdityaA1998"},"content":"`INDEX` refers to the #INDEX of an issue on github"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"AdityaA1998"},"content":"* `-issue 17`"},{"lineNumber":401,"author":{"gitID":"AdityaA1998"},"content":"* `cli 17`"},{"lineNumber":402,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":403,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command"},{"lineNumber":404,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":405,"author":{"gitID":"AdityaA1998"},"content":" Issue #17 closed successfully"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reopening an issue on Github: `reopenissue` OR `ri`"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"AdityaA1998"},"content":"You can reopen a certain issue on github using this command. +"},{"lineNumber":410,"author":{"gitID":"-"},"content":"*Format:* `reopenissue INDEX` OR `ri INDEX`"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":413,"author":{"gitID":"AdityaA1998"},"content":"If you don\u0027t remember the issue number, you can take a look at the issues by using `listissues` command. +"},{"lineNumber":414,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":415,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":416,"author":{"gitID":"AdityaA1998"},"content":"`INDEX` refers to the #INDEX of an issue on github"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"AdityaA1998"},"content":"* `reopenissue 17`"},{"lineNumber":421,"author":{"gitID":"AdityaA1998"},"content":"* `reopenissue 17`"},{"lineNumber":422,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":423,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command"},{"lineNumber":424,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":425,"author":{"gitID":"AdityaA1998"},"content":" Issue #17 reopened successfully"},{"lineNumber":426,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":427,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d\u003d Listing github issues: `listissue` OR `lis`"},{"lineNumber":428,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":429,"author":{"gitID":"AdityaA1998"},"content":"You can list the github issues using this command. +"},{"lineNumber":430,"author":{"gitID":"AdityaA1998"},"content":"*Format:* `listissue STATE` OR `lis STATE`"},{"lineNumber":431,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":432,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":433,"author":{"gitID":"AdityaA1998"},"content":"`STATE` refers to the state of the issue, i.e OPEN or CLOSED"},{"lineNumber":434,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":435,"author":{"gitID":"AdityaA1998"},"content":"*Examples:*"},{"lineNumber":436,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":437,"author":{"gitID":"AdityaA1998"},"content":"* `listissue OPEN`"},{"lineNumber":438,"author":{"gitID":"AdityaA1998"},"content":"* `lis CLOSED`"},{"lineNumber":439,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":440,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command"},{"lineNumber":441,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":442,"author":{"gitID":"AdityaA1998"},"content":" All the OPEN issues are being viewed"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Logging out of Github: `gitlogout` OR `glo`"},{"lineNumber":445,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":446,"author":{"gitID":"AdityaA1998"},"content":"You can logout of github after logging in. +"},{"lineNumber":447,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":448,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":449,"author":{"gitID":"AdityaA1998"},"content":"You will get an error message if you try to logout before logging in."},{"lineNumber":450,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":451,"author":{"gitID":"AdityaA1998"},"content":"*Examples:*"},{"lineNumber":452,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":453,"author":{"gitID":"AdityaA1998"},"content":"* `gitlogout`"},{"lineNumber":454,"author":{"gitID":"AdityaA1998"},"content":"* `glo`"},{"lineNumber":455,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":456,"author":{"gitID":"AdityaA1998"},"content":"Given below is the execution outcome of the above command"},{"lineNumber":457,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":458,"author":{"gitID":"AdityaA1998"},"content":" You have successfully logged out of github"},{"lineNumber":459,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":460,"author":{"gitID":"AdityaA1998"},"content":"//end::issues[]"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"// tag::tasks[]"},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Task List"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Add default task list: `newtasklist` OR `nl`"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"You can add the default task list to the ProgressChecker and your Google Tasks to prepare for your work. +"},{"lineNumber":468,"author":{"gitID":"-"},"content":"*Format:* `newtasklist` OR `nl`"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"* This command should be executed before all other task-related commands"},{"lineNumber":473,"author":{"gitID":"-"},"content":"* The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":474,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":475,"author":{"gitID":"-"},"content":"* This command will take a long time (roughly 40s) to load all the tasks. Fortunately, you only need to do this command ONCE in the lifetime of the application."},{"lineNumber":476,"author":{"gitID":"-"},"content":"Please do not interrupt when this command is executing. If the app is hanging (showing no response), it means it is still processing."},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"* `newtasklist`"},{"lineNumber":481,"author":{"gitID":"-"},"content":"* `nl`"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Viewing the default task list: `viewtask` OR `vt`"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"You can view the current default task list in the browser panel in ProgressChecker. There are several FILTER_KEYWORD:"},{"lineNumber":486,"author":{"gitID":"-"},"content":"\"***\" means to show everything, \"sub\" or \"submission\" means to show tasks that need submission, \"com\" or \"compulsory\" means to show compulsory tasks,"},{"lineNumber":487,"author":{"gitID":"-"},"content":"an interger ranging from 1 to 13 means to show tasks in that week. +"},{"lineNumber":488,"author":{"gitID":"-"},"content":"*Format:* `viewtask FILTER_KEYWORD` OR `vt FILTER_KEYWORD`"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":491,"author":{"gitID":"-"},"content":"* You should NOT call this command before calling `newtasklist` command."},{"lineNumber":492,"author":{"gitID":"-"},"content":"* The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":493,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"* `viewtask compulsory`"},{"lineNumber":498,"author":{"gitID":"-"},"content":"* `viewtask 3`"},{"lineNumber":499,"author":{"gitID":"-"},"content":"* `viewtask sub`"},{"lineNumber":500,"author":{"gitID":"-"},"content":"* `vt com`"},{"lineNumber":501,"author":{"gitID":"-"},"content":"* `vt *`"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"The screenshot below shows what you can see with command `vt com`."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":".Result of `vt com` Command"},{"lineNumber":506,"author":{"gitID":"-"},"content":"image::viewTaskResult.png[width\u003d\"800\"]"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Completing a task: `complete` OR `ct`"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"You can mark the task as completed when you finish it. You cannot use undo command to undo it, but can use `reset INDEX` command to obtain the same effect. +"},{"lineNumber":511,"author":{"gitID":"-"},"content":"*Format:* `complete INDEX` OR `ct INDEX`"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"* You can mark the task with index number `INDEX` as completed."},{"lineNumber":516,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":517,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":520,"author":{"gitID":"-"},"content":"* You should NOT call this command before calling `newtasklist` command."},{"lineNumber":521,"author":{"gitID":"-"},"content":"* The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":522,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"* `complete 1`"},{"lineNumber":527,"author":{"gitID":"-"},"content":"* `ct 1`"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"Tasks that have not been completed are in red box while green boxes mean these tasks are already completed. The screenshot below shows what you can see with command `ct 2` on the compulsory list."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":".Result of `ct 2` Command"},{"lineNumber":532,"author":{"gitID":"-"},"content":"image::completeTaskResult.png[width\u003d\"800\"]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Resetting a task as not completed: `reset` OR `rt`"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"You can reset a task as not completed when you marked it as completed by mistake. You cannot use undo command to undo it, but can use `complete INDEX` command to obtain the same effect. +"},{"lineNumber":537,"author":{"gitID":"-"},"content":"*Format:* `reset INDEX` OR `rt INDEX`"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"* You can reset the task with index number `INDEX` as incompleted."},{"lineNumber":542,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":543,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* You should NOT call this command before calling `newtasklist` command."},{"lineNumber":547,"author":{"gitID":"-"},"content":"* The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":548,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":" *Examples:*"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":" * `reset 1`"},{"lineNumber":553,"author":{"gitID":"-"},"content":" * `rt 1`"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Open URL of a task: `goto` OR `go`"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"You can visit the webpage of a task when you want to see details and work on it. +"},{"lineNumber":558,"author":{"gitID":"-"},"content":"*Format:* `goto INDEX` OR `go INDEX`"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"* You can visit URL of the task with index number `INDEX` as incompleted."},{"lineNumber":563,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":564,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":567,"author":{"gitID":"-"},"content":"* You should NOT call this command before calling `newtasklist` command."},{"lineNumber":568,"author":{"gitID":"-"},"content":"* The command requires Internet connection. You may be brought to a login page in your browser. Please do not close the tab without accepting/declining request,"},{"lineNumber":569,"author":{"gitID":"-"},"content":"otherwise the application will hang."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":" *Examples:*"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":" * `goto 1`"},{"lineNumber":574,"author":{"gitID":"-"},"content":" * `go 1`"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"The screenshot below shows what you can see with command `go 2` on the compulsory list."},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":".Result of `ct 2` Command"},{"lineNumber":579,"author":{"gitID":"-"},"content":"image::goToTaskUrlResult.png[width\u003d\"800\"]"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Send reminder email when a deadline is near `[coming in v2.0]`"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d View teammates\u0027 task list and progress `[coming in v2.0]`"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"// end::tasks[]"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Teammate"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Adding a teammate: `add` OR `a`"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"You can add the contact information of a new teammate to the ProgressChecker. +"},{"lineNumber":592,"author":{"gitID":"-"},"content":"*Format:* `add n/NAME p/PHONE_NUMBER e/EMAIL g/GITHUB_USERNAME m/MAJOR y/YEAR [t/TAG]...` +"},{"lineNumber":593,"author":{"gitID":"-"},"content":"OR +"},{"lineNumber":594,"author":{"gitID":"-"},"content":"`a n/NAME p/PHONE_NUMBER e/EMAIL g/GITHUB_USERNAME m/MAJOR y/YEAR [t/TAG]...`"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":597,"author":{"gitID":"-"},"content":"A teammate can have any number of tags (including 0)"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com g/johndoeGithub m/Computer Science y/2`"},{"lineNumber":602,"author":{"gitID":"-"},"content":"* `a n/John Doe p/98765432 e/johnd@example.com g/johndoeGithub m/Computer Science y/2`"},{"lineNumber":603,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com g/betsycroweGithub m/Computer Engineering p/1234567 y/3 t/criminal`"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* `a n/Betsy Crowe t/friend e/betsycrowe@example.com g/betsycroweGithub m/Information Security y/2 p/1234567 t/criminal`"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Editing a teammate : `edit` OR `ed`"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"You can edit the information of the certain existing teammate in the ProgressChecker. +"},{"lineNumber":609,"author":{"gitID":"-"},"content":"*Format:* `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [g/GITHUB_USERNAME] [m/MAJOR] [y/YEAR] [t/TAG]...` +"},{"lineNumber":610,"author":{"gitID":"-"},"content":"OR +"},{"lineNumber":611,"author":{"gitID":"-"},"content":"`ed INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [g/GITHUB_USERNAME] [m/MAJOR] [y/YEAR] [t/TAG]...`"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"* You can edit the information of the teammate at the specified `INDEX`. The index refers to the index number shown in the last teammate listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":616,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":617,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":618,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the teammate will be removed i.e adding of tags is not cumulative."},{"lineNumber":619,"author":{"gitID":"-"},"content":"* You can remove all the teammate\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":624,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st teammate to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":625,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":626,"author":{"gitID":"-"},"content":"Edits the name of the 2nd teammate to be `Betsy Crower` and clears all existing tags."},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"// tag::upload[]"},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Uploading profile photo"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"You can upload a image from your local PC as a profile photo for yourself or your teammates in ProgressChecker. +"},{"lineNumber":632,"author":{"gitID":"-"},"content":"*Format* `upload INDEX PATH` OR `up INDEX PATH`"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"* You can update the profile photo of the teammate at the specified `INDEX`. The index refers to the index number shown in the last teammate listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":637,"author":{"gitID":"-"},"content":"* The extension of the image to upload can only be _\u0027jpg\u0027_, _\u0027jepg\u0027_  or _\u0027png\u0027_."},{"lineNumber":638,"author":{"gitID":"-"},"content":"* The local path cannot have white space inside."},{"lineNumber":639,"author":{"gitID":"-"},"content":"* Image to upload will be copied to the contact folder which is inside resources."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"* `upload 1 C:\\Users\\Livian\\Desktop\\image.png` +"},{"lineNumber":644,"author":{"gitID":"-"},"content":"Uploads the image with local path _\u0027C:\\Users\\Livian\\image.png\u0027_ as the profile photo of the first person."},{"lineNumber":645,"author":{"gitID":"-"},"content":"+"},{"lineNumber":646,"author":{"gitID":"-"},"content":"image::uploadPhoto.jpg[width:790]"},{"lineNumber":647,"author":{"gitID":"-"},"content":"+"},{"lineNumber":648,"author":{"gitID":"-"},"content":"You will see the following changes when you upload the profile photo successfully:"},{"lineNumber":649,"author":{"gitID":"-"},"content":"+"},{"lineNumber":650,"author":{"gitID":"-"},"content":"image::uploadSuccess.jpg[width:790]"},{"lineNumber":651,"author":{"gitID":"-"},"content":"// end::upload[]"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Listing all teammates : `list` OR `l`"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"You can view the list of all your teammates in the ProgressChecker. +"},{"lineNumber":656,"author":{"gitID":"-"},"content":"*Format:* `list` OR `l`"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"* `list`"},{"lineNumber":661,"author":{"gitID":"-"},"content":"* `l`"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"// tag::upload[]"},{"lineNumber":664,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Uploading profile photo"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"You can upload a image from your local PC as a profile photo for yourself or your teammates in ProgressChecker. +"},{"lineNumber":667,"author":{"gitID":"-"},"content":"*Format* `upload INDEX PATH` OR `up INDEX PATH`"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"* You can update the profile photo of the teammate at the specified `INDEX`. The index refers to the index number shown in the last teammate listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":672,"author":{"gitID":"-"},"content":"* The extension of the image to upload can only be _\u0027jpg\u0027_, _\u0027jepg\u0027_  or _\u0027png\u0027_."},{"lineNumber":673,"author":{"gitID":"-"},"content":"* Image to upload will be copied to the contact folder which is inside resources."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"* `upload 1 C:\\Users\\User\\Desktop\\profilePhoto.png` +"},{"lineNumber":678,"author":{"gitID":"-"},"content":"Uploads the image with local path _\u0027C:\\Users\\User\\profilePhoto.png\u0027_ as the profile photo of the first person."},{"lineNumber":679,"author":{"gitID":"-"},"content":"// end::upload[]"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"// tag::sort[]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Sorting all teammates : `sort`"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"You can view the list of all your teammates in the ProgressChecker with their names in alphabetical order. +"},{"lineNumber":685,"author":{"gitID":"-"},"content":"*Format:* `sort`"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"*Example:*"},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"* `sort`"},{"lineNumber":690,"author":{"gitID":"-"},"content":"// end::sort[]"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Finding/Searching teammates by the keywords of name: `find` OR `search`"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"You can find the certain teammates with their names contain any of the given keywords. +"},{"lineNumber":695,"author":{"gitID":"-"},"content":"*Format:* `find KEYWORD [MORE_KEYWORDS] OR search KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":700,"author":{"gitID":"AdityaA1998"},"content":"* The search is dynamic. As the user types alphabets, the results will be shown without the need to press enter key"},{"lineNumber":701,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":702,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":703,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":704,"author":{"gitID":"-"},"content":"* Teammates matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":709,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":710,"author":{"gitID":"-"},"content":"* `search Betsy Tim John` +"},{"lineNumber":711,"author":{"gitID":"-"},"content":"Returns any teammate having names `Betsy`, `Tim`, or `John`"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Selecting a teammate : `select` OR `s`"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"You can select the teammate identified by the index number used in the last teammate listing. +"},{"lineNumber":716,"author":{"gitID":"-"},"content":"*Format:* `select INDEX` OR `s INDEX`"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"* You can select the teammate and loads the Google search page the teammate at the specified `INDEX`."},{"lineNumber":721,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":722,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":727,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":728,"author":{"gitID":"-"},"content":"Selects the 2nd teammate in the ProgressChecker."},{"lineNumber":729,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":730,"author":{"gitID":"-"},"content":"`s 1` +"},{"lineNumber":731,"author":{"gitID":"-"},"content":"Selects the 1st teammate in the results of the `find` command."},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Deleting a teammate : `delete` OR `d`"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"You can remove the specified teammate from the ProgressChecker. +"},{"lineNumber":736,"author":{"gitID":"-"},"content":"*Format:* `delete INDEX` OR `d INDEX`"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"*Notes:*"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"* You can remove the teammate at the specified `INDEX`."},{"lineNumber":741,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":742,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":747,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":748,"author":{"gitID":"-"},"content":"Deletes the 2nd teammate in the ProgressChecker."},{"lineNumber":749,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":750,"author":{"gitID":"-"},"content":"`d 1` +"},{"lineNumber":751,"author":{"gitID":"-"},"content":"Deletes the 1st teammate in the results of the `find` command."},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"Progress Checker data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":756,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"You may encounter some questions related to other aspects of ProgressChecker other than what the commands are. This section list some frequently asked questions that you may find useful."},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ProgressChecker folder. +"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"*Q*: Will the command work if I type in capital letters? +"},{"lineNumber":766,"author":{"gitID":"-"},"content":"*A*: Yes. The commands are case-insensitive. +"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"*Q*: Will the changes I made in ProgressChecker still be intact upon closing and reopening the app? +"},{"lineNumber":769,"author":{"gitID":"-"},"content":"*A*: Yes. All changes made are saved automatically into the data folder. As long as you do not directly edit the data file, the content will remain the same when you reopen the app. +"},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"*Q*: How do I close the app? +"},{"lineNumber":772,"author":{"gitID":"-"},"content":"*A*: You can either type the `exit` command or click on the \u0027x\u0027 button in the top right corner of the app."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"If you\u0027re looking for a quick reference list of commands without all the details, the section below summarises all the available commands."},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":779,"author":{"gitID":"-"},"content":"|Function | Command | Example"},{"lineNumber":780,"author":{"gitID":"-"},"content":"|*Add*"},{"lineNumber":781,"author":{"gitID":"-"},"content":"|`add n/NAME p/PHONE_NUMBER e/EMAIL g/USERNAME m/MAJOR y/YEAR [t/TAG]...` +"},{"lineNumber":782,"author":{"gitID":"-"},"content":"OR `a n/NAME p/PHONE_NUMBER e/EMAIL g/USERNAME m/MAJOR y/YEAR [t/TAG]...`"},{"lineNumber":783,"author":{"gitID":"-"},"content":"|add n/James Ho p/22224444 e/jamesho@example.com g/JamesGithub m/Computer Science y/2 t/friend t/colleague"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"|*Answer*"},{"lineNumber":786,"author":{"gitID":"-"},"content":"|`answer INDEX ANSWER`"},{"lineNumber":787,"author":{"gitID":"-"},"content":"|answer 2.1.1 Procedural languages work at simple data structures and functions level"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"|*Clear*"},{"lineNumber":790,"author":{"gitID":"-"},"content":"|`clear` OR `c`"},{"lineNumber":791,"author":{"gitID":"-"},"content":"|"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"|*Close issue*"},{"lineNumber":794,"author":{"gitID":"-"},"content":"|`-issue INDEX` OR `cli INDEX`"},{"lineNumber":795,"author":{"gitID":"-"},"content":"|-issue 3 +"},{"lineNumber":796,"author":{"gitID":"-"},"content":"cli 1"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"|*Create issue*"},{"lineNumber":799,"author":{"gitID":"-"},"content":"|`+issue ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...` +"},{"lineNumber":800,"author":{"gitID":"AdityaA1998"},"content":"                   OR +"},{"lineNumber":801,"author":{"gitID":"AdityaA1998"},"content":"                   `ci ti/TITLE [a/ASSIGNEES]... [ms/MILESTONE] [b/BODY] [l/LABELS]...`"},{"lineNumber":802,"author":{"gitID":"-"},"content":"|+issue ti/complete issue a/johndoe ms/v1.1 b/CS2103T is a software engineering module l/type.task l/CS2103T"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"|*Delete*"},{"lineNumber":805,"author":{"gitID":"-"},"content":"|`delete INDEX` OR `d INDEX`"},{"lineNumber":806,"author":{"gitID":"-"},"content":"|delete 3"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"|*Edit*"},{"lineNumber":809,"author":{"gitID":"-"},"content":"|`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [m/MAJOR] [y/YEAR] [t/TAG]...` +"},{"lineNumber":810,"author":{"gitID":"-"},"content":"OR `ed INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [m/MAJOR] [y/YEAR] [t/TAG]...`"},{"lineNumber":811,"author":{"gitID":"-"},"content":"|edit 2 n/James Lee e/jameslee@example.com"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"AdityaA1998"},"content":"|*Editissue*"},{"lineNumber":814,"author":{"gitID":"AdityaA1998"},"content":"|`editissue INDEX [t/TITLE] [b/BODY] [ms/MILESTONE] [a/ASSIGNEE] ... [l/label]...` +"},{"lineNumber":815,"author":{"gitID":"AdityaA1998"},"content":"OR `edi INDEX [t/TITLE] [b/BODY] [ms/MILESTONE] [a/ASSIGNEE] ... [l/label]...`"},{"lineNumber":816,"author":{"gitID":"AdityaA1998"},"content":"|editissue 2 ti/new title l/bug"},{"lineNumber":817,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"|*Exit*"},{"lineNumber":819,"author":{"gitID":"-"},"content":"|`exit` OR `e`"},{"lineNumber":820,"author":{"gitID":"-"},"content":"|"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"|*Find*"},{"lineNumber":823,"author":{"gitID":"-"},"content":"|`find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":824,"author":{"gitID":"-"},"content":"|find James Jake"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"|*Help*"},{"lineNumber":827,"author":{"gitID":"-"},"content":"|`help` OR `h`"},{"lineNumber":828,"author":{"gitID":"-"},"content":"|"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"|*History*"},{"lineNumber":831,"author":{"gitID":"-"},"content":"|`history`"},{"lineNumber":832,"author":{"gitID":"-"},"content":"|"},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"|*List*"},{"lineNumber":835,"author":{"gitID":"-"},"content":"|`list` Or `l`"},{"lineNumber":836,"author":{"gitID":"-"},"content":"|"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"AdityaA1998"},"content":"|*List issue*"},{"lineNumber":839,"author":{"gitID":"AdityaA1998"},"content":"|`listissue STATE` Or `lis STATE`"},{"lineNumber":840,"author":{"gitID":"AdityaA1998"},"content":"|listissue OPEN"},{"lineNumber":841,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"|*Log in to Github*"},{"lineNumber":843,"author":{"gitID":"-"},"content":"|`gitlogin OR gl`"},{"lineNumber":844,"author":{"gitID":"-"},"content":"|"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"AdityaA1998"},"content":"|*Log out of Github*"},{"lineNumber":847,"author":{"gitID":"AdityaA1998"},"content":"|`gitlogout OR glo`"},{"lineNumber":848,"author":{"gitID":"AdityaA1998"},"content":"|"},{"lineNumber":849,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"|*Add Default Task List*"},{"lineNumber":851,"author":{"gitID":"-"},"content":"|`newtasklist` OR `nl`"},{"lineNumber":852,"author":{"gitID":"-"},"content":"|"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"|*Complete Task*"},{"lineNumber":855,"author":{"gitID":"-"},"content":"|`complete INDEX` OR `ct INDEX`"},{"lineNumber":856,"author":{"gitID":"-"},"content":"|complete 1 +"},{"lineNumber":857,"author":{"gitID":"-"},"content":"ct 1"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"|*Reset Task*"},{"lineNumber":860,"author":{"gitID":"-"},"content":"|`reset INDEX` OR `rt INDEX`"},{"lineNumber":861,"author":{"gitID":"-"},"content":"|reset 1 +"},{"lineNumber":862,"author":{"gitID":"-"},"content":"rt 1"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"|*Open Task URL*"},{"lineNumber":865,"author":{"gitID":"-"},"content":"|`goto INDEX` OR `go INDEX`"},{"lineNumber":866,"author":{"gitID":"-"},"content":"|goto 1 +"},{"lineNumber":867,"author":{"gitID":"-"},"content":"go 1"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"|*View Task List*"},{"lineNumber":870,"author":{"gitID":"-"},"content":"|`viewtask FILTER_KEYWORD` OR `vt FILTER_KEYWORD`"},{"lineNumber":871,"author":{"gitID":"-"},"content":"|viewtask 5 +"},{"lineNumber":872,"author":{"gitID":"-"},"content":"rt 5 +"},{"lineNumber":873,"author":{"gitID":"-"},"content":"viewtask sub +"},{"lineNumber":874,"author":{"gitID":"-"},"content":"vt com"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"|*Redo*"},{"lineNumber":877,"author":{"gitID":"-"},"content":"|`redo` OR `r`"},{"lineNumber":878,"author":{"gitID":"-"},"content":"|"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"|*Refresh*"},{"lineNumber":881,"author":{"gitID":"-"},"content":"|`refresh` OR `rf`"},{"lineNumber":882,"author":{"gitID":"-"},"content":"|"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"|*Reopen issue*"},{"lineNumber":885,"author":{"gitID":"-"},"content":"|`reopenissue INDEX` OR `ri INDEX`"},{"lineNumber":886,"author":{"gitID":"-"},"content":"|reopenissue 3 +"},{"lineNumber":887,"author":{"gitID":"-"},"content":"ri 1"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"|*Reset a task*"},{"lineNumber":890,"author":{"gitID":"-"},"content":"|`reset OR rt`"},{"lineNumber":891,"author":{"gitID":"-"},"content":"|"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"|*Search*"},{"lineNumber":894,"author":{"gitID":"-"},"content":"|`search KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":895,"author":{"gitID":"-"},"content":"|search James Jake"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"|*Select*"},{"lineNumber":898,"author":{"gitID":"-"},"content":"|`select INDEX` OR `s INDEX`"},{"lineNumber":899,"author":{"gitID":"-"},"content":"|select 2"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"|*Sort*"},{"lineNumber":902,"author":{"gitID":"-"},"content":"|`sort`"},{"lineNumber":903,"author":{"gitID":"-"},"content":"|"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"|*Theme*"},{"lineNumber":906,"author":{"gitID":"-"},"content":"|`theme` OR `t`"},{"lineNumber":907,"author":{"gitID":"-"},"content":"|"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"|*Undo*"},{"lineNumber":910,"author":{"gitID":"-"},"content":"|`undo` OR `u`"},{"lineNumber":911,"author":{"gitID":"-"},"content":"|"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"|*Upload*"},{"lineNumber":914,"author":{"gitID":"-"},"content":"|`upload INDEX PATH` OR `up INDEX PATH`"},{"lineNumber":915,"author":{"gitID":"-"},"content":"|upload 1 C:\\Users\\User\\Desktop\\profile_photo.jpg"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"|*View tab*"},{"lineNumber":918,"author":{"gitID":"-"},"content":"|`view TYPE` OR `v TYPE`"},{"lineNumber":919,"author":{"gitID":"-"},"content":"|view task +"},{"lineNumber":920,"author":{"gitID":"-"},"content":"view exercise"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"|*View exercises by week*"},{"lineNumber":923,"author":{"gitID":"-"},"content":"|`view exercise WEEK_NUMBER` OR `v exercise WEEK_NUMBER`"},{"lineNumber":924,"author":{"gitID":"-"},"content":"|view exercise 5"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"|*View task*"},{"lineNumber":927,"author":{"gitID":"-"},"content":"|`viewtask OR vt`"},{"lineNumber":928,"author":{"gitID":"-"},"content":"|"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"Back to the \u003c\u003cIntroduction,TOP\u003e\u003e"}],"authorContributionMap":{"AdityaA1998":119,"-":813}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"\u003d ProgressChecker"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-T09-B3/main[image:https://travis-ci.org/CS2103JAN2018-T09-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-T09-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T09-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"Missed a learning outcome because it was so deeply nested in the pool of information? Can\u0027t find the information you need from just a simple click? We know how that feels. With our Progress Checker, you\u0027ll never experience these issues in CS2103/T again."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* This is a desktop Progress Checker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":18,"author":{"gitID":"-"},"content":"* It is a Java sample application intended for students taking module CS2103/T as a means of tracking both their learning outcomes and practice exercises."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* It is meant to be a helper software used together with the https://nus-cs2103-ay1718s2.github.io/website/index.html[official CS2103/T module website]."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":31,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://developers.google.com/google-apps/tasks[Tasks]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* This project was built off from AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU] initiative."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"AdityaA1998":1,"-":34}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ProgressChecker was developed by the https://github.com/CS2103JAN2018-T09-B3/main[T09-B3] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"ProgressChecker helps to remind students learning outcomes every week. +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"With a simple click, students will never miss their weekly LOs again. +"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"It also keeps track of the progress of each team member. +"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"Thus it is convenient for teammates to compare help each other. +"},{"lineNumber":11,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":12,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Aditya Agarwal"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"image::adityaa1998.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"{empty}[http://github.com/adityaa1998[github]] [\u003c\u003caditya#, portfolio\u003e\u003e]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":23,"author":{"gitID":"-"},"content":"Responsibilities: Integration, code quality"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lai Liwen"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"image::livian1107.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"{empty}[https://github.com/Livian1107[github]] [\u003c\u003cliwen#, portfolio\u003e\u003e]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Responsibilities: UI + Documentation + Testing(helper)"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Koh Yee Ru"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"image::inekox3.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"{empty}[http://github.com/inekox3[github]] [\u003c\u003cyeeru#, portfolio\u003e\u003e]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Responsibilities: Logic + Scheduling \u0026 Tracking + Deliverables \u0026 Deadlines"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"\u003d\u003d\u003d Kang Anmin"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"image::edwardksg.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"{empty}[https://github.com/EdwardKSG[github]] [\u003c\u003canmin#, portfolio\u003e\u003e]"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"Responsibilities: Model + Testing + Scheduling \u0026 Tracking(helper)"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"EdwardKSG":11,"iNekox3":1,"-":40}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty ProgressChecker, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":21,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: undo clearing ProgressChecker -\u003e original ProgressChecker restored */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: redo clearing ProgressChecker -\u003e cleared */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears ProgressChecker -\u003e cleared and no card selected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ProgressChecker"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire ProgressChecker cleared */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ProgressChecker"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: clear empty ProgressChecker -\u003e cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: mixed case command word -\u003e cleared */"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(\"ClEaR\");"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":3,"-":91}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_INDEX_OR_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: delete the middle person in the list, command in mixed casing -\u003e deleted */"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        Model modelBeforeDeletingLastPerson \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        Index lastPersonNewIndex \u003d getLastIndex(modelBeforeDeletingLastPerson);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedNewModel \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        Person deletedNewPerson \u003d removePerson(expectedNewModel, lastPersonNewIndex);"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        String expectedNewResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedNewPerson);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"                \"delETE\" + \" \" + lastPersonNewIndex.getOneBased(), expectedNewModel, expectedNewResultMessage);"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of ProgressChecker and person list -\u003e deleted */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of ProgressChecker but out of bounds of person list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":79,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getProgressChecker().getPersonList().size();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":110,"author":{"gitID":"-"},"content":"                getModel().getProgressChecker().getPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s ProgressChecker."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":147,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":8,"-":190}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.ALICE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.CARL;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.HOON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.IDA;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Major;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Year;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonUtil;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty ProgressChecker, command with leading spaces and trailing"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * spaces"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + USERNAME_DESC_AMY + \"   \" + MAJOR_DESC_AMY + \"   \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + YEAR_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except name -\u003e added */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except phone -\u003e added */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except email -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + USERNAME_DESC_AMY"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: add a person with all fields same as another person in the ProgressChecker except major -\u003e added */"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_AMY)"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add to empty ProgressChecker -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + USERNAME_DESC_BOB;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // ProgressChecker#addPerson(Person)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: missing username -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: missing major -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"                + YEAR_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: missing year -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /*command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));*/"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + USERNAME_DESC_AMY"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: invalid username -\u003e rejected */"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_USERNAME_DESC"},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY;"},{"lineNumber":220,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(command, GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 5. Profile name and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":26,"-":272}},{"path":"src/test/java/systemtests/ProgressCheckerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.TestApp;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.TypicalPersons;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.progresschecker.ui.CommandBox;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * A system test class for ProgressChecker, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public abstract class ProgressCheckerSystemTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected ProgressChecker getInitialData() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalProgressChecker();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Displays all persons in the ProgressChecker."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getProgressChecker().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getProgressChecker().getPersonList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Deletes all persons in the ProgressChecker."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getProgressChecker().getPersonList().size());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getProgressChecker(), testApp.readStorageProgressChecker());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"    protected void assertApplicationDisplaysExpectedForIssue(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"                                                     Model expectedModel) {"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":13,"-":251}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"//import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Major;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"//import seedu.progresschecker.model.person.Year;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonUtil;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":75,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + USERNAME_DESC_BOB + \"  \""},{"lineNumber":76,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + \" \" + YEAR_DESC_BOB + \" \""},{"lineNumber":77,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of ProgressChecker and person list -\u003e edited */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of ProgressChecker but out of bounds of person list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getProgressChecker().getPersonList().size();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + USERNAME_DESC_AMY + MAJOR_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"        /* Case: invalid username -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"                + INVALID_USERNAME_DESC, GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid major -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /*assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_MAJOR_DESC,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                Major.MESSAGE_MAJOR_CONSTRAINTS);*/"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getProgressChecker().getPersonList().contains(BOB));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":236,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":240,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":5,"-":290}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        String commandMixedCase \u003d \"SeLECt\" + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: mixed case command word -\u003e cleared */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(commandMixedCase, middleIndex);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of ProgressChecker but out of bounds of person list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getProgressChecker().getPersonList().size();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of ProgressChecker and person list -\u003e selected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":92,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty ProgressChecker -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":116,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":4,"-":139}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, command with leading spaces and trailing spaces"},{"lineNumber":28,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":36,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":37,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 keywords -\u003e 2 persons found */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in ProgressChecker, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: find same persons in ProgressChecker after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getProgressChecker().getPersonList().contains(BENSON));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find person in ProgressChecker, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: find person in ProgressChecker, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: find person in ProgressChecker, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find person not in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: find progresschecker of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getMajor().value;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: find email of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in ProgressChecker -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find person in empty ProgressChecker -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: mixed case command word -\u003e cleared */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":149,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":173}},{"path":"src/test/java/systemtests/CreateIssueCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.ASSIGNEE_DESC_ANMIN;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.BODY_DESC_ONE;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_ASSIGNEE_DESC;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_BODY_DESC;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_LABEL_DESC;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.LABEL_DEC_TASK;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MILESTONE_DESC_ONE;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TITLE_DESC_ONE;"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIssue.ISSUE_ONE;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIssue.TEST_FIVE;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIssue.TEST_FOUR;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIssue.TEST_SEVEN;"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIssue.TEST_SIX;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssueCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.IssueUtil;"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    private final String gitlogin \u003d \"gl r/AdityaA1998/CS2103TESTING gu/anminkang pc/aditya2018\";"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    private final String gitlogout \u003d \"gitlogout\";"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public void setUpCreateIssue() throws Exception {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        Model model \u003d getModel();"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        model.loginGithub(validDetails);"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    public void add() throws Exception {"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        /* ------------------------------- Perform create issue operations ----------------------------------- */"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        Issue toCreate \u003d ISSUE_ONE;"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        String command \u003d \"   \" + CreateIssueCommand.COMMAND_WORD + \"  \" + TITLE_DESC_ONE"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"                + \"  \" + ASSIGNEE_DESC_ANMIN + \" \""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"                + MILESTONE_DESC_ONE + \"   \""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"                + BODY_DESC_ONE + \"   \""},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"                + LABEL_DEC_TASK + \"   \";"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(command, toCreate);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: create a issue, missing assignee -\u003e created */"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(TEST_FOUR);"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: create a issue, missing body -\u003e created */"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(TEST_FIVE);"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: create a issue, missing milestone -\u003e created */"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(TEST_SIX);"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: create a issue, missing labels -\u003e created */"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(TEST_SEVEN);"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        /* ------------------------------- Perform invalid create issue operations ------------------------------- */"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: Github not authenticated -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CreateIssueCommand.COMMAND_WORD + \"  \" + TITLE_DESC_ONE"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"                + \"  \" + ASSIGNEE_DESC_ANMIN + \" \""},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"                + MILESTONE_DESC_ONE + \"   \""},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"                + BODY_DESC_ONE + \"   \""},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"                + LABEL_DEC_TASK + \"   \";"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailureWithoutAuthentication(command, CreateIssueCommand.MESSAGE_FAILURE);"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: missing title -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CreateIssueCommand.COMMAND_WORD + \"  \""},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"                + \"  \" + ASSIGNEE_DESC_ANMIN + \" \""},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"                + MILESTONE_DESC_ONE + \"   \""},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"                + BODY_DESC_ONE + \"   \""},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"                + LABEL_DEC_TASK + \"   \";"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateIssueCommand.MESSAGE_USAGE));"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d \"+issues \" + IssueUtil.getCreateIssueCommand(toCreate);"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid title -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d \"   \" + CreateIssueCommand.COMMAND_WORD + \"  \" + INVALID_TITLE_DESC"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"                + \"  \" + ASSIGNEE_DESC_ANMIN + \" \""},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"                + MILESTONE_DESC_ONE + \"   \""},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"                + BODY_DESC_ONE + \"   \""},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"                + LABEL_DEC_TASK + \"   \";"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid assignee -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d \"   \" + CreateIssueCommand.COMMAND_WORD + \"  \" + TITLE_DESC_ONE"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"                + \"  \" + INVALID_ASSIGNEE_DESC + \" \""},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"                + MILESTONE_DESC_ONE + \"   \""},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"                + BODY_DESC_ONE + \"   \""},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"                + LABEL_DEC_TASK + \"   \";"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, Assignees.MESSAGE_ASSIGNEES_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid milestone -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"        //command \u003d CreateIssueCommand.COMMAND_WORD + \"  \" + TITLE_DESC_ONE"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"        //+ \"  \" + ASSIGNEE_DESC_ANMIN + \" \""},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        //+ INVALID_MILESTONE_DESC + \"   \""},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"        //+ BODY_DESC_ONE + \"   \""},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        //+ LABEL_DEC_TASK + \"   \";"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid labels -\u003e rejected */"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CreateIssueCommand.COMMAND_WORD + \"  \" + TITLE_DESC_ONE"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"                + \"  \" + ASSIGNEE_DESC_ANMIN + \" \""},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"                + MILESTONE_DESC_ONE + \"   \""},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"                + INVALID_BODY_DESC + \"   \""},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"                + INVALID_LABEL_DESC + \"   \";"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, Labels.MESSAGE_LABEL_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"     * Executes the {@code CreateIssueCommand} that adds {@code toCreate} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"     * 3. Result display box displays the success message of executing {@code CreateIssueCommand} with the details of"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"     * {@code toCreate}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"     * 4. {@code Model}, {@code Storage} and {@code issueListPanel} equal to the corresponding components in"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"     * the current model added with {@code toCreate}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandSuccess(Issue toCreate) throws Exception {"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(IssueUtil.getCreateIssueCommand(toCreate), toCreate);"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":"     * Performs the same verification as {@code assertCommandSuccess(issue)}. Executes {@code command}"},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"     * instead."},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandSuccess(String command, Issue toCreate) throws Exception {"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"        expectedModel.loginGithub(validDetails);"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"            expectedModel.createIssueOnGitHub(toCreate);"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException | CommandException e) {"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalArgumentException(\"Check authentication or parameters\");"},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"        String expectedResultMessage \u003d CreateIssueCommand.MESSAGE_SUCCESS;"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Issue)} except asserts that"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"     * 2. {@code Model}, {@code Storage} and {@code issueListPanel} equal to the corresponding components in"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogin);"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogin);"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(command, expectedResultMessage, expectedModel);"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandFailureWithoutAuthentication(String command, String expectedResultMessage) {"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogout);"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(command, expectedResultMessage, expectedModel);"},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":205,"-":18}},{"path":"src/test/java/seedu/progresschecker/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_ADD_INCOMPLETE \u003d \"ad\";"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_ADD_COMPLETE \u003d AddCommand.COMMAND_FORMAT;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_EDIT_INCOMPLETE \u003d \"e\";"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private static final String COMMAND_EDIT_COMPLETE \u003d EditCommand.COMMAND_FORMAT;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"    public void handleKeyPress_tab() {"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"        // add command"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"        commandBoxHandle.setInput(COMMAND_ADD_INCOMPLETE);"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_ADD_COMPLETE);"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        // edit command"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"        commandBoxHandle.setInput(COMMAND_EDIT_INCOMPLETE);"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_EDIT_COMPLETE);"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"        // invalid command"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_THAT_FAILS);"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":21,"-":159}},{"path":"src/test/java/systemtests/CloseIssueCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_ISSUE_ONE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private final String gitlogin \u003d \"gl r/AdityaA1998/CS2103TESTING gu/anminkang pc/aditya2018\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public void closeIssue() throws Exception {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        /* ----------------- Performing closeIssue operation on open issues on github -------------------- */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        expectedModel.loginGithub(validDetails);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        String command \u003d \"     \" + CloseIssueCommand.COMMAND_WORD + \"      \""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"                + INDEX_ISSUE_ONE.getOneBased() + \"       \";"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        String expectedResultMessage \u003d String.format(CloseIssueCommand.MESSAGE_SUCCESS,"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"                String.valueOf(INDEX_ISSUE_ONE.getOneBased()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: github not authenticated -\u003e rejected*/"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CloseIssueCommand.COMMAND_WORD + \" 34\";"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailureWithoutAuthentication(command, CloseIssueCommand.MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CloseIssueCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CloseIssueCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid index -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d CloseIssueCommand.COMMAND_WORD + \" \" + 99999;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, CloseIssueCommand.MESSAGE_FAILURE);"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(CloseIssueCommand.COMMAND_WORD + \" abc\","},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(CloseIssueCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogin);"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogin);"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(command, expectedResultMessage, expectedModel);"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandFailureWithoutAuthentication(String command, String expectedResultMessage) {"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(\"gitlogout\");"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(command, expectedResultMessage, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":59,"-":73}},{"path":"src/test/java/systemtests/ReopenIssueCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_ISSUE_ONE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommandSystemTest extends ProgressCheckerSystemTest {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private final String gitlogin \u003d \"gl r/AdityaA1998/CS2103TESTING gu/anminkang pc/aditya2018\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public void reopenIssue() throws Exception {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        /* ----------------- Performing closeIssue operation on open issues on github -------------------- */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        expectedModel.loginGithub(validDetails);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        String command \u003d \"     \" + ReopenIssueCommand.COMMAND_WORD + \"      \""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"                + INDEX_ISSUE_ONE.getOneBased() + \"       \";"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        String expectedResultMessage \u003d String.format(ReopenIssueCommand.MESSAGE_SUCCESS,"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"                String.valueOf(INDEX_ISSUE_ONE.getOneBased()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: github not authenticated -\u003e rejected*/"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d ReopenIssueCommand.COMMAND_WORD + \" 34\";"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailureWithoutAuthentication(command, ReopenIssueCommand.MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d ReopenIssueCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d ReopenIssueCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid index -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        command \u003d ReopenIssueCommand.COMMAND_WORD + \" \" + 99999;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(command, ReopenIssueCommand.MESSAGE_FAILURE);"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(ReopenIssueCommand.COMMAND_WORD + \" abc\","},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(ReopenIssueCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"     * @see ReopenIssueCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogin);"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(gitlogin);"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(command, expectedResultMessage, expectedModel);"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @see ProgressCheckerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"    private void assertCommandFailureWithoutAuthentication(String command, String expectedResultMessage) {"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(\"gitlogout\");"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"        executeCommand(command);"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        assertApplicationDisplaysExpectedForIssue(command, expectedResultMessage, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":60,"-":72}},{"path":"src/test/java/seedu/progresschecker/ui/ProfilePanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.testutil.GuiTestAssert.assertProfileDisplaysPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ProfilePanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"public class ProfilePanelTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"        ProfilePanel profilePanel \u003d new ProfilePanel();"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"        profilePanel.loadPerson(personWithNoTags);"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"        uiPartRule.setUiPart(profilePanel);"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"        assertProfileDisplay(profilePanel, personWithNoTags);"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"        // with tags"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        profilePanel \u003d new ProfilePanel();"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"        profilePanel.loadPerson(personWithTags);"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"        uiPartRule.setUiPart(profilePanel);"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        assertProfileDisplay(profilePanel, personWithTags);"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"        ProfilePanel profilePanel \u003d new ProfilePanel();"},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"        profilePanel.loadPerson(person);"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"        // same object -\u003e returns true"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"        assertTrue(profilePanel.equals(profilePanel));"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"        // null -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"        assertFalse(profilePanel.equals(null));"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"        // different types -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"        assertFalse(profilePanel.equals(0));"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"     * Asserts that {@code personProfile} displays the details of {@code expectedPerson} correctly."},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"    private void assertProfileDisplay(ProfilePanel personProfile, Person expectedPerson) {"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"        ProfilePanelHandle profilePanelHandle \u003d new ProfilePanelHandle(personProfile.getRoot());"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"        // verify person details are displayed correctly"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"        assertProfileDisplaysPerson(expectedPerson, profilePanelHandle);"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":48,"-":12}},{"path":"src/test/java/seedu/progresschecker/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ProfilePanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"     * Asserts that {@code actualProfile} displays the details of {@code expectedPerson}."},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"    public static void assertProfileDisplaysPerson(Person expectedPerson, ProfilePanelHandle actualProfile) {"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"        assertEquals(expectedPerson.getName().fullName, actualProfile.getName());"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"Livian1107":8,"iNekox3":1,"-":64}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ProgressChecker - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B3/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team T09-B3` ¬†¬†¬†¬† Since: `Feb 2018` ¬†¬†¬†¬† Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"ProgressChecker is for *students* who *prefer to use a desktop app* to keep track of their learning progressthroughout the certain module. (Current version is available for CS2103/T) +"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"For the current version, you can add your teammates details into ProgressChecker. You can also create a new task list through google task. By default, app will display all the link:DeveloperGuide.adoc#Learning-Outcomes[Learning Outcomes] taken from the https://nus-cs2103-ay1718s2.github.io/website/index.html[CS2103/T module website] for this week in the task list. Students can use this task list to track their weekly homework and the progress of the project."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"More importantly, ProgressChecker is *optimized for students who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (link:DeveloperGuide.adoc#GUI[GUI])."},{"lineNumber":24,"author":{"gitID":"-"},"content":"If you can type fast, ProgressChecker can get your learning outcome tasks done faster than traditional GUI apps. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Now you are ready to jump to the \u003c\u003cSetting-up,Setting up\u003e\u003e to get started. Enjoy!"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Icons Meaning"},{"lineNumber":29,"author":{"gitID":"-"},"content":"You will be seeing these icons throughout the guide. Each icon display specific information."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This lightbulb icon means tips that you can try when using ProgressChecker."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"This info icon means notes that you should pay attention to when using ProgressChecker."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"There are some things you will need to set up before getting started in contributing to ProgressChecker. Below lists the important key elements you will have to configure."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":51,"author":{"gitID":"-"},"content":"+"},{"lineNumber":52,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". https://www.atlassian.com/git/tutorials/comparing-workflows#forking-workflow[Fork] this repo, and https://nus-cs2103-ay1718s2.github.io/website/book/gitAndGithub/init/index.html[clone] the fork to your computer"},{"lineNumber":60,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":62,"author":{"gitID":"-"},"content":"... Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":63,"author":{"gitID":"-"},"content":"image:setup2.png[width\u003d\"600\"] +"},{"lineNumber":64,"author":{"gitID":"-"},"content":"_step 3.i_"},{"lineNumber":65,"author":{"gitID":"-"},"content":"... Click `New...` and find the directory of the JDK"},{"lineNumber":66,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK` +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"image:setup3.png[width\u003d\"600\"]  +"},{"lineNumber":69,"author":{"gitID":"-"},"content":"_step 5_"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":71,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":72,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":73,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":74,"author":{"gitID":"-"},"content":"image:setup5.png[width\u003d\"600\"]  +"},{"lineNumber":75,"author":{"gitID":"-"},"content":"_step 8_"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":". Run the `gradlew.bat run` and try a few commands"},{"lineNumber":80,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":89,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":90,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-T09-B3/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-T09-B3/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Now you are ready to start coding! You can:"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture,Design Architecture\u003e\u003e."},{"lineNumber":120,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"ProgressChecker consists of multiple components that work together via an event-driven structure. This section will break down the various components in details to help you jump straight into understanding the architecture in depth."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given below explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":133,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":134,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":135,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/progresschecker/MainApp.java[`MainApp`]. It is responsible for: +"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Initializing the components in the correct sequence, and connects them up with each other at app launch."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Shutting down the components and invokes cleanup method where necessary."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":160,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":165,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":181,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `ProgressCheckerChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":203,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/progresschecker/ui/Ui.java[`Ui.java`]"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/progresschecker/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":216,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":223,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":224,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":234,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/progresschecker/logic/Logic.java[`Logic.java`]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":".  `Logic` uses the `ProgressCheckerParser` class to parse the user command."},{"lineNumber":237,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":238,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a teammate) and/or raise events."},{"lineNumber":239,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":244,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":250,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/progresschecker/model/Model.java[`Model.java`]"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":257,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":258,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":259,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":265,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/progresschecker/storage/Storage.java[`Storage.java`]"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":274,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.progresschecker.commons` package."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":286,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":287,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the ProgressChecker (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component"},{"lineNumber":294,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the ProgressChecker before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":301,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":302,"author":{"gitID":"-"},"content":"----"},{"lineNumber":303,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"}"},{"lineNumber":309,"author":{"gitID":"-"},"content":"----"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":312,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":313,"author":{"gitID":"-"},"content":"----"},{"lineNumber":314,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":"}"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"},{"lineNumber":329,"author":{"gitID":"-"},"content":"----"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th teammate in the ProgressChecker. The current state of the ProgressChecker is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":".Undo/Redo Stack at Starting Point"},{"lineNumber":336,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new teammate."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":".Undo/Redo Stack with New Command `add`"},{"lineNumber":343,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":348,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"The user now decides that adding the teammate was a mistake, and decides to undo that action using `undo`."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the ProgressChecker to the state before the `add` command executed."},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":".Undo/Redo Stack with Command `undo`"},{"lineNumber":355,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":360,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":".Sequence Diagram of Undo/Redo"},{"lineNumber":365,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the ProgressChecker to the state after the command is executed)."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":372,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":".Undo/Redo Stack with New Command `clear`"},{"lineNumber":377,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":".Undo/Redo Stack with Command `list`"},{"lineNumber":384,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":".Activity Diagram of Undo/Redo"},{"lineNumber":391,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":398,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"|**Add a new abstract method `executeUndoableCommand()`** +"},{"lineNumber":401,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":402,"author":{"gitID":"-"},"content":"|We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":403,"author":{"gitID":"-"},"content":"|Hard for new developers to understand the template pattern."},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"|**Override `execute()`**"},{"lineNumber":406,"author":{"gitID":"-"},"content":"|Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":407,"author":{"gitID":"-"},"content":"|Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":416,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":417,"author":{"gitID":"-"},"content":"|**Save the entire ProgressChecker** +"},{"lineNumber":418,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":419,"author":{"gitID":"-"},"content":"|Easy to implement."},{"lineNumber":420,"author":{"gitID":"-"},"content":"|May have performance issues in terms of memory usage."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"|**Individual command knows how to undo/redo by itself**"},{"lineNumber":423,"author":{"gitID":"-"},"content":"|Will use less memory (e.g. for `delete`, just save the teammate being deleted)."},{"lineNumber":424,"author":{"gitID":"-"},"content":"|We must ensure that the implementation of each individual command are correct."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":433,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":434,"author":{"gitID":"-"},"content":"|**Only include commands that modifies the ProgressChecker (`add`, `clear`, `edit`)** +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":436,"author":{"gitID":"-"},"content":"|We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":437,"author":{"gitID":"-"},"content":"|User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"|**Include all commands**"},{"lineNumber":440,"author":{"gitID":"-"},"content":"|Might be more intuitive for the user."},{"lineNumber":441,"author":{"gitID":"-"},"content":"| User have no way of skipping such commands if he or she just want to reset the state of the ProgressChecker and not the view."},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":446,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":453,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"|**Use separate stack for undo and redo** +"},{"lineNumber":456,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":457,"author":{"gitID":"-"},"content":"|Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":458,"author":{"gitID":"-"},"content":"|Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"|**Use `HistoryManager` for undo/redo**"},{"lineNumber":461,"author":{"gitID":"-"},"content":"|We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":462,"author":{"gitID":"-"},"content":"|Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"// tag::upload[]"},{"lineNumber":469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Upload feature"},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Planned Implementation"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"The Upload command will allow users to upload their preferred image to replace the default profile photo."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"The valid photo to be upload will be copies from local path inside resources folder under /images/contact. The name of the file will be renamed according to the time that the photo is uploaded."},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"Upload can be undoable. The diagram below shows how the `EventsCenter` reacts to `uploadPhoto` event."},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":".Component Interactions for `uploadPhoto` Command"},{"lineNumber":479,"author":{"gitID":"-"},"content":"image::SDforUploadPhoto.png[width\u003d\"800\"]"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"UploadCommand is implemented this way:"},{"lineNumber":484,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":485,"author":{"gitID":"-"},"content":"----"},{"lineNumber":486,"author":{"gitID":"-"},"content":"public class UploadCommand extends UndoableCommand {"},{"lineNumber":487,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":488,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":489,"author":{"gitID":"-"},"content":"        requireNonNull(personToUpdate);"},{"lineNumber":490,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":491,"author":{"gitID":"-"},"content":"            model.addPhoto(photoPath);"},{"lineNumber":492,"author":{"gitID":"-"},"content":"            model.uploadPhoto(personToUpdate, savePath);"},{"lineNumber":493,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":494,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":495,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":496,"author":{"gitID":"-"},"content":"        } catch (DuplicatePhotoException e) {"},{"lineNumber":497,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_IMAGE_DUPLICATE);"},{"lineNumber":498,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":499,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_IMAGE_DUPLICATE);"},{"lineNumber":500,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":501,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":502,"author":{"gitID":"-"},"content":"}"},{"lineNumber":503,"author":{"gitID":"-"},"content":"----"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":506,"author":{"gitID":"-"},"content":"Users are allowed to reload the image if they want to update the profile photo."},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"Here is the code to copy the photo from local path inside resources folder."},{"lineNumber":509,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":510,"author":{"gitID":"-"},"content":"----"},{"lineNumber":511,"author":{"gitID":"-"},"content":"public String copyLocalPhoto(String localPath) throws IOException {"},{"lineNumber":512,"author":{"gitID":"-"},"content":"    File localFile \u003d new File(localPath);"},{"lineNumber":513,"author":{"gitID":"-"},"content":"    String newPath \u003d createSavePath(localPath);"},{"lineNumber":514,"author":{"gitID":"-"},"content":"    if (!localFile.exists()) {"},{"lineNumber":515,"author":{"gitID":"-"},"content":"        throw new FileNotFoundException(MESSAGE_LOCAL_PATH_CONSTRAINTS);"},{"lineNumber":516,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":517,"author":{"gitID":"-"},"content":"    createSavedPhoto(newPath);"},{"lineNumber":518,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":519,"author":{"gitID":"-"},"content":"        copyFile(localPath, newPath);"},{"lineNumber":520,"author":{"gitID":"-"},"content":"    } catch (IOException e) {"},{"lineNumber":521,"author":{"gitID":"-"},"content":"        throw new IOException(MESSAGE_COPY_FAIL);"},{"lineNumber":522,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":523,"author":{"gitID":"-"},"content":"    return newPath;"},{"lineNumber":524,"author":{"gitID":"-"},"content":"}"},{"lineNumber":525,"author":{"gitID":"-"},"content":"----"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":528,"author":{"gitID":"-"},"content":"If the local path is invalid or the image cannot be found, the upload will not be successful. The extension of the file can only be \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027. User will be asked to write the correct path to image again."},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UploadCommand`"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":535,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"|**User will provide the path of image** +"},{"lineNumber":538,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":539,"author":{"gitID":"-"},"content":"|The path can be used directly to find the image and display it in the app."},{"lineNumber":540,"author":{"gitID":"-"},"content":"|Image may be a local file. When other users open the app, they cannot see the update."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"|**User will upload image into our github folder manually**"},{"lineNumber":543,"author":{"gitID":"-"},"content":"|Everyone can see the update of profile photo."},{"lineNumber":544,"author":{"gitID":"-"},"content":"|Quite trobulesome to upload photo manually first."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":547,"author":{"gitID":"-"},"content":"// end::upload[]"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"// tag::search[]"},{"lineNumber":550,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Dynamic Search Implementation"},{"lineNumber":551,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"AdityaA1998"},"content":"The `find` command shows the searched contact currently. However, the user does not need to type the complete name press enter, the whole search is dynamic. As soon as the user types the command `find` dynamic search state is toggled. After typing `find` command, whichever character is entered by the user, the results which contain"},{"lineNumber":554,"author":{"gitID":"AdityaA1998"},"content":" the typed keywords appear."},{"lineNumber":555,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":556,"author":{"gitID":"AdityaA1998"},"content":"To implement the dynamic search, we used the following method - as soon as the user enters any character in the command box, the text is retrieved from"},{"lineNumber":557,"author":{"gitID":"AdityaA1998"},"content":"the command box and checked if it is the `find` command. If it is the `find` command, dynamic search is started. After the `find` command is detected in the"},{"lineNumber":558,"author":{"gitID":"AdityaA1998"},"content":"command box, every key that is pressed is parsed and sent to the `find` command parser. After that the basic functionality of find is used and the results are displayed."},{"lineNumber":559,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":560,"author":{"gitID":"AdityaA1998"},"content":"The code snippet for the implementation is:"},{"lineNumber":561,"author":{"gitID":"AdityaA1998"},"content":"[source,java]"},{"lineNumber":562,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":563,"author":{"gitID":"AdityaA1998"},"content":"if ((commandTextField.getText().trim().equalsIgnoreCase(CORRECT_COMMAND_WORD)"},{"lineNumber":564,"author":{"gitID":"AdityaA1998"},"content":"                        || isCorrectCommandWord)) {"},{"lineNumber":565,"author":{"gitID":"AdityaA1998"},"content":"                    isCorrectCommandWord \u003d !commandTextField.getText().trim().isEmpty();"},{"lineNumber":566,"author":{"gitID":"AdityaA1998"},"content":"                    CommandResult commandResult;"},{"lineNumber":567,"author":{"gitID":"AdityaA1998"},"content":"                    if (keyEvent.getCode() !\u003d KeyCode.BACK_SPACE \u0026\u0026 keyEvent.getCode() !\u003d KeyCode.DELETE) {"},{"lineNumber":568,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText() + keyEvent.getText());"},{"lineNumber":569,"author":{"gitID":"AdityaA1998"},"content":"                    } else {"},{"lineNumber":570,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText().substring(0,"},{"lineNumber":571,"author":{"gitID":"AdityaA1998"},"content":"                                commandTextField.getText().length() - 1));"},{"lineNumber":572,"author":{"gitID":"AdityaA1998"},"content":"                    }"},{"lineNumber":573,"author":{"gitID":"AdityaA1998"},"content":"                    // process result of the command"},{"lineNumber":574,"author":{"gitID":"AdityaA1998"},"content":"                    logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":575,"author":{"gitID":"AdityaA1998"},"content":"                    raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":576,"author":{"gitID":"AdityaA1998"},"content":"                }"},{"lineNumber":577,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":578,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":579,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":580,"author":{"gitID":"AdityaA1998"},"content":"The entered key is not instantly updated in the command box thats why after the `commandTextField.getText()` is executed we need to append\\delete a character for the"},{"lineNumber":581,"author":{"gitID":"AdityaA1998"},"content":" code to the result to process the right input - the one that the user can see on their screens."},{"lineNumber":582,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":583,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Design consideration"},{"lineNumber":584,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: User Interface (UI)"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":587,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":588,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"|**Show the search results without actually highlighting the keywords** +"},{"lineNumber":590,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":591,"author":{"gitID":"-"},"content":"|Allows more readability of the of the results as they contain multiple fields and not just user name."},{"lineNumber":592,"author":{"gitID":"-"},"content":"|User needs to manually search for the keywords entered by him in the search results."},{"lineNumber":593,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"|**Show the search results WITH highlighting the keywords in the searched name** +"},{"lineNumber":595,"author":{"gitID":"-"},"content":"|It will make it easier for the user to view the user to identify the searched keyword in the displayed results."},{"lineNumber":596,"author":{"gitID":"-"},"content":"|Adding highlights to the results might make the displayed results a bit too cluttered specially with the presence of tags which are colored as well."},{"lineNumber":597,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":599,"author":{"gitID":"-"},"content":"// end::search[]"},{"lineNumber":600,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"// tag::view[]"},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Toggling between tab views"},{"lineNumber":603,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"This command toggles the view between the different type of tabs in the software. +"},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":".Reference of the tab view in the software"},{"lineNumber":608,"author":{"gitID":"-"},"content":"image::TabView.png[width\u003d\"600\"]"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"It inherits `Command` and executes on an _Event Driven_ design between the Logic and UI component."},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"Suppose that the user is on the `Task` tab and wants to toggle to the `Exercise` tab. The user executes a new `Command`, `view exercise`, to switch to the `Exercise` tab. The _Sequence Diagram_ below shows how the components interact with each other."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":".Logic and UI component interaction for `view exercise` command (part 1)"},{"lineNumber":617,"author":{"gitID":"-"},"content":"image::SDforViewExercise.png[width\u003d\"600\"]"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":622,"author":{"gitID":"-"},"content":"Note how the `Logic` simply raises a `TabLoadChangedEvent` when the `view` command gets executed. The `TabLoadChangedEvent` is implemented as follows:"},{"lineNumber":623,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":624,"author":{"gitID":"-"},"content":"----"},{"lineNumber":625,"author":{"gitID":"-"},"content":"public class TabLoadChangedEvent extends BaseEvent {"},{"lineNumber":626,"author":{"gitID":"-"},"content":"    public final String type;"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"    public TabLoadChangedEvent(String type) {"},{"lineNumber":629,"author":{"gitID":"-"},"content":"        this.type \u003d type;"},{"lineNumber":630,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":633,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":634,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":635,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"    public String getTabName() {"},{"lineNumber":638,"author":{"gitID":"-"},"content":"        return type;"},{"lineNumber":639,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":640,"author":{"gitID":"-"},"content":"}"},{"lineNumber":641,"author":{"gitID":"-"},"content":"----"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventCenter` reacts to that event, which eventually results in the UI updating to which tab view is to be in selection."},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":".Logic and UI component interaction for `view exercise` command (part 2)"},{"lineNumber":646,"author":{"gitID":"-"},"content":"image::SDforViewExerciseEventHandling.png[width\u003d\"600\"]"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":651,"author":{"gitID":"-"},"content":"The UI scene\u0027s elements are automatically populated in `MainWindow.java` due to using JavaFX FXML Controller. That is, a reference to a particular UI element will be available as long as it has its `fx:id` specified in `MainWindow.fxml`."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"The code snippet below shows how the UI component executes the toggling of tab view upon receiving the event change."},{"lineNumber":654,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":655,"author":{"gitID":"-"},"content":"----"},{"lineNumber":656,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":657,"author":{"gitID":"-"},"content":"private void handleTabLoadChangedEvent(TabLoadChangedEvent event) {"},{"lineNumber":658,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":659,"author":{"gitID":"-"},"content":"    SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPlaceholder.getSelectionModel();"},{"lineNumber":660,"author":{"gitID":"-"},"content":"    switch (event.getTabName()) {"},{"lineNumber":661,"author":{"gitID":"-"},"content":"    case \"profile\":"},{"lineNumber":662,"author":{"gitID":"-"},"content":"        selectionModel.select(profilePlaceholder);"},{"lineNumber":663,"author":{"gitID":"-"},"content":"        break;"},{"lineNumber":664,"author":{"gitID":"-"},"content":"    case \"task\":"},{"lineNumber":665,"author":{"gitID":"-"},"content":"        selectionModel.select(taskPlaceholder);"},{"lineNumber":666,"author":{"gitID":"-"},"content":"        break;"},{"lineNumber":667,"author":{"gitID":"-"},"content":"    case \"exercise\":"},{"lineNumber":668,"author":{"gitID":"-"},"content":"        selectionModel.select(exercisePlaceholder);"},{"lineNumber":669,"author":{"gitID":"-"},"content":"        break;"},{"lineNumber":670,"author":{"gitID":"-"},"content":"    case \"issues\":"},{"lineNumber":671,"author":{"gitID":"-"},"content":"        selectionModel.select(issuePlaceholder);"},{"lineNumber":672,"author":{"gitID":"-"},"content":"        break;"},{"lineNumber":673,"author":{"gitID":"-"},"content":"    default:"},{"lineNumber":674,"author":{"gitID":"-"},"content":"        selectionModel.select(selectionModel.getSelectedItem());"},{"lineNumber":675,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":676,"author":{"gitID":"-"},"content":"}"},{"lineNumber":677,"author":{"gitID":"-"},"content":"----"},{"lineNumber":678,"author":{"gitID":"-"},"content":"// end::view[]"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"// tag::answer[]"},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View, answer, and save for an exercise"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"This command allows user to answer an exercise based on the question index shown in the software."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":".Reference of the question index in the software"},{"lineNumber":687,"author":{"gitID":"-"},"content":"image::QuestionIndexIndication.png[width\u003d\"300\"]"},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"It inherits `UndoableCommand` and executes through all four components in the code base."},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"Suppose that the user wants to answer an exercise with index 11.1.1. The user executes a new `Command`, `ans 11.1.1 a`, to answer the exercise. The Sequence Diagram below shows how the components interact with each other."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":".Component interactions for `ans 11.1.1 a` command (part 1)"},{"lineNumber":696,"author":{"gitID":"-"},"content":"image::SDforAnswerExercise.png[width\u003d\"800\"]"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"{sp}+"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":701,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `ProgressCheckerChangedEvent` when the ProgressChecker data has been changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk."},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":".Component interactions for `ans 11.1.1 a` command (part 2)"},{"lineNumber":708,"author":{"gitID":"-"},"content":"image::SDforAnswerExerciseEventHandling.png[width\u003d\"800\"]"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"Before the `Logic` component executes the `Undoable Command` which calls the `Model`, it prepares the exercise that needs to be updated by going through the internal list of exercises stored in model. The code that searches for the exercise is as follows:"},{"lineNumber":713,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":714,"author":{"gitID":"-"},"content":"----"},{"lineNumber":715,"author":{"gitID":"-"},"content":"for (Exercise e : exerciseList) {"},{"lineNumber":716,"author":{"gitID":"-"},"content":"    if (e.getQuestionIndex().toString().equals(questionIndex.toString())) {"},{"lineNumber":717,"author":{"gitID":"-"},"content":"        exerciseToEdit \u003d exerciseList.get(exerciseList.indexOf(e));"},{"lineNumber":718,"author":{"gitID":"-"},"content":"        editedExercise \u003d createEditedExercise(exerciseToEdit, studentAnswer);"},{"lineNumber":719,"author":{"gitID":"-"},"content":"        isFound \u003d true;"},{"lineNumber":720,"author":{"gitID":"-"},"content":"        break;"},{"lineNumber":721,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":722,"author":{"gitID":"-"},"content":"}"},{"lineNumber":723,"author":{"gitID":"-"},"content":"----"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"The internal list, `exerciseList`, is implemented as an observable list of filtered exercises in `Model`. Upon calling the `ProgressCheckerChangedEvent`, `Storage` will run `saveProgressChecker`. Subsequently, to load the data on the next software start up requires parsing of xml data into `Model`. The following code snippet shows how `Storage` does so:"},{"lineNumber":726,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":727,"author":{"gitID":"-"},"content":"----"},{"lineNumber":728,"author":{"gitID":"-"},"content":"public Exercise toModelType() throws IllegalValueException {"},{"lineNumber":729,"author":{"gitID":"-"},"content":"    if (this.questionIndex \u003d\u003d null) {"},{"lineNumber":730,"author":{"gitID":"-"},"content":"        throw new IllegalValueException("},{"lineNumber":731,"author":{"gitID":"-"},"content":"                String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":732,"author":{"gitID":"-"},"content":"                QuestionIndex.class.getSimpleName()));"},{"lineNumber":733,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":734,"author":{"gitID":"-"},"content":"    if (!QuestionIndex.isValidIndex(this.questionIndex)) {"},{"lineNumber":735,"author":{"gitID":"-"},"content":"        throw new IllegalValueException(QuestionIndex.MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":736,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":737,"author":{"gitID":"-"},"content":"    final QuestionIndex questionIndex \u003d new QuestionIndex(this.questionIndex);"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"    if (this.questionType \u003d\u003d null) {"},{"lineNumber":740,"author":{"gitID":"-"},"content":"        throw new IllegalValueException("},{"lineNumber":741,"author":{"gitID":"-"},"content":"                String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":742,"author":{"gitID":"-"},"content":"                QuestionType.class.getSimpleName()));"},{"lineNumber":743,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":744,"author":{"gitID":"-"},"content":"    if (!QuestionType.isValidType(this.questionType)) {"},{"lineNumber":745,"author":{"gitID":"-"},"content":"        throw new IllegalValueException(QuestionType.MESSAGE_TYPE_CONSTRAINTS);"},{"lineNumber":746,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":747,"author":{"gitID":"-"},"content":"    final QuestionType questionType \u003d new QuestionType(this.questionType);"},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"    return new Exercise(questionIndex, questionType, question, studentAnswer, modelAnswer);"},{"lineNumber":752,"author":{"gitID":"-"},"content":"}"},{"lineNumber":753,"author":{"gitID":"-"},"content":"----"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"Additionally, since it is an observable list, the UI element harboring this list will update any changes made to this list accordingly. In viewing of exercises by week, the list is filtered with predicate as follows:"},{"lineNumber":756,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":757,"author":{"gitID":"-"},"content":"----"},{"lineNumber":758,"author":{"gitID":"-"},"content":"model.updateFilteredExerciseList(exercise -\u003e exercise.getQuestionIndex().getWeekNumber()"},{"lineNumber":759,"author":{"gitID":"-"},"content":"                \u003d\u003d editedExercise.getQuestionIndex().getWeekNumber());"},{"lineNumber":760,"author":{"gitID":"-"},"content":"----"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":763,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Viewing of exercises by week"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":766,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"|**Adapt from `View Command` by adding additional WEEK_NUMBER parameter to type `exercise`** +"},{"lineNumber":769,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":770,"author":{"gitID":"-"},"content":"|Not required to create a new command and hence more cohesive with the existing commands as well as one less command for users to learn"},{"lineNumber":771,"author":{"gitID":"-"},"content":"|`ViewCommandParser` requires additional parser check to separate between the `View Command` that can take in WEEK_NUMBER to one that doesn\u0027t which might violate SLAP principle"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"|**Create a new command to list exercises by week** +"},{"lineNumber":774,"author":{"gitID":"-"},"content":"|Standalone from existing commands and hence easier to be built upon or removed without consequences"},{"lineNumber":775,"author":{"gitID":"-"},"content":"|Creates an extra unnecessary complication for users having to learn a new command when the existing `View Command` essentially does something similar"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect:  Loading of exercises data on fresh start"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":782,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"|**Include all exercises data in `SampleDataUtil` and read from there** +"},{"lineNumber":785,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":786,"author":{"gitID":"-"},"content":"|No additional processing required, is easy to modify whenever default data needs to be changed"},{"lineNumber":787,"author":{"gitID":"-"},"content":"|Is directly affected by the `Clear Command` that is meant for the list of `Persons` which user may not expect it to be for"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"|**Read from stored text file, parse accordingly, and load into software on fresh start** +"},{"lineNumber":790,"author":{"gitID":"-"},"content":"|Standalone data and will not be affected by changes made to list of `Persons`"},{"lineNumber":791,"author":{"gitID":"-"},"content":"|Incurs extra overhead when parsing the text file into Java objects"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":794,"author":{"gitID":"-"},"content":"// end::answer[]"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"// tag::tasks[]"},{"lineNumber":797,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Tasks"},{"lineNumber":798,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"The default LOs for all weeks would be stored in a local file, which will be loaded as input to create a task list on the"},{"lineNumber":801,"author":{"gitID":"-"},"content":"user\u0027s Google Account with Google Tasks API."},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"There are several commands related to tasks, including `newtasklist` to add and upload the default task list, `viewtasklist FILTER_KEYWORD`"},{"lineNumber":804,"author":{"gitID":"-"},"content":"to view the default task list with filtering, `completetask INDEX`/`resettask INDEX` to mark a task as completed/not completed,"},{"lineNumber":805,"author":{"gitID":"-"},"content":"and `goto INDEX` to open the URL of a task. As an example, the _High Level Sequence Diagram_ and _Sequence Diagram_ below shows how the components interact"},{"lineNumber":806,"author":{"gitID":"-"},"content":"for the scenario where the user issues the command `viewtasklist 5`."},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":".Component Interactions for `viewtasklist 5` Command (High Level)"},{"lineNumber":809,"author":{"gitID":"-"},"content":"image::HighLevelSDforViewTaskListCommand.png[width\u003d\"800\"]"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":".Component Interactions for `viewtasklist 5` Command"},{"lineNumber":814,"author":{"gitID":"-"},"content":"image::SDforViewTaskListCommand.png[width\u003d\"800\"]"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"We apply Google Tasks API to help us save user tasks data online. This offers back up data which allow our users to recover"},{"lineNumber":819,"author":{"gitID":"-"},"content":"their tasks and status of each task even after uninstalling the application. The task list will be ready to display once the user"},{"lineNumber":820,"author":{"gitID":"-"},"content":"reinstall and open the application."},{"lineNumber":821,"author":{"gitID":"-"},"content":"To use Google Tasks API, we fist need to register this project on google developer console and retrieve a client credential file (client_id.json) to authorize our project."},{"lineNumber":822,"author":{"gitID":"-"},"content":"Then, add corresponding dependencies to build.gradle, the library files will be downloaded automatically upon project rebuild."},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"Here is the code snippet to add dependencies:"},{"lineNumber":825,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"----"},{"lineNumber":827,"author":{"gitID":"-"},"content":"compile ("},{"lineNumber":828,"author":{"gitID":"-"},"content":"    [\u0027com.google.api-client:google-api-client:1.23.0\u0027],"},{"lineNumber":829,"author":{"gitID":"-"},"content":"    [\u0027com.google.apis:google-api-services-tasks:v1-rev49-1.23.0\u0027],"},{"lineNumber":830,"author":{"gitID":"-"},"content":"    [\u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027],"},{"lineNumber":831,"author":{"gitID":"-"},"content":")"},{"lineNumber":832,"author":{"gitID":"-"},"content":"----"},{"lineNumber":833,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":834,"author":{"gitID":"-"},"content":"Simply downloading JAR files without editing gradle is not suggested. JARs are not in git thus our co-developers will rely on the dependencies to retrieve the libraries."},{"lineNumber":835,"author":{"gitID":"-"},"content":"Also, set gradleVersion to 4.6 if it is an older version, otherwise runtime compilation of Google API library will affect Junit tests."},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"We write a program to authorize our project (by loading the aforementioned client credential file), trigger user loggin and build service."},{"lineNumber":838,"author":{"gitID":"-"},"content":"Note that when users are using ProgressChecker, only the first tasks command requires them to log in and authorize ProgressChecker to access"},{"lineNumber":839,"author":{"gitID":"-"},"content":"their Google Tasks data with their google accounts."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"Google Tasks API helps us save time building massive data structures (ie. Tasks, TaskLists, Lists of TaskLists, as well as many methods and exceptions)."},{"lineNumber":842,"author":{"gitID":"-"},"content":"However, we do have a few classes (eg. TaskUtil, TaskListUtil) in the modeling part that further add customized methods which are useful for current commands and even future commands."},{"lineNumber":843,"author":{"gitID":"-"},"content":"In this way, we avoid repetition of code snippet and having big chunks of import statements in numerous commands."},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"Here is a code snippet that can find a task list by its title (while the native method only finds task by its id which is not memorable or even known by our users):"},{"lineNumber":846,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"----"},{"lineNumber":848,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":849,"author":{"gitID":"-"},"content":" * Finds the task list with title {@code String listTitle} from the user\u0027s task lists"},{"lineNumber":850,"author":{"gitID":"-"},"content":" *"},{"lineNumber":851,"author":{"gitID":"-"},"content":" * @param listTitle title of the task list we look for"},{"lineNumber":852,"author":{"gitID":"-"},"content":" * @return the task list instance"},{"lineNumber":853,"author":{"gitID":"-"},"content":" */"},{"lineNumber":854,"author":{"gitID":"-"},"content":"public static TaskList searchTaskList(String listTitle) throws CommandException {"},{"lineNumber":855,"author":{"gitID":"-"},"content":"    TaskList taskList \u003d null;"},{"lineNumber":856,"author":{"gitID":"-"},"content":"    ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":857,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":858,"author":{"gitID":"-"},"content":"        connection.authorize();"},{"lineNumber":859,"author":{"gitID":"-"},"content":"    } catch (Exception e) {"},{"lineNumber":860,"author":{"gitID":"-"},"content":"        throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":861,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":862,"author":{"gitID":"-"},"content":"    Tasks service \u003d connection.getTasksService();"},{"lineNumber":863,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":864,"author":{"gitID":"-"},"content":"    TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":865,"author":{"gitID":"-"},"content":"        taskList \u003d taskLists.getItems().stream()"},{"lineNumber":866,"author":{"gitID":"-"},"content":"                .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":867,"author":{"gitID":"-"},"content":"                .findFirst()"},{"lineNumber":868,"author":{"gitID":"-"},"content":"                .orElse(null);"},{"lineNumber":869,"author":{"gitID":"-"},"content":"    } catch (IOException ioe) {"},{"lineNumber":870,"author":{"gitID":"-"},"content":"        throw new CommandException(LOAD_FAILURE);"},{"lineNumber":871,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"    return taskList;"},{"lineNumber":874,"author":{"gitID":"-"},"content":"}"},{"lineNumber":875,"author":{"gitID":"-"},"content":"----"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of tasks commands"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"* All these commands extend `Command` but not extend `UndoableCommand`. `AddDefaultTasksCommand`, `CompleteTaskCommand` and `ResetTaskCommand` make"},{"lineNumber":882,"author":{"gitID":"-"},"content":" external changes that update task list in users\u0027 Google account, which is out of the scope of undo command. `ViewTaskListCommand` and"},{"lineNumber":883,"author":{"gitID":"-"},"content":" `GoToTaskUrlCommand` do not make changes to the data, thus no applicable to undo command."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How `AddDefaultTasksCommand` is executed"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"* This command will load the tasks from local storage and add a task list filled with these tasks to the user\u0027s Google account."},{"lineNumber":888,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":889,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":890,"author":{"gitID":"-"},"content":"|**Find the user\u0027s Google task list with ID \"@default\" (this is the default task list in Google Task and not removable). Create a new"},{"lineNumber":891,"author":{"gitID":"-"},"content":"task list and transfer the tasks from @default to the new one. Then change the title of @default to \"CS2103 LOs\", and add the tasks"},{"lineNumber":892,"author":{"gitID":"-"},"content":"loaded from local storage** +"},{"lineNumber":893,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":894,"author":{"gitID":"-"},"content":"|The other tasks commands will only need to refer to the ID \"@default\" to find the task list, which is faster and more accurate than searching with title ("},{"lineNumber":895,"author":{"gitID":"-"},"content":"as list ID is unique while list title can duplicate and the native API method only supports finding list with ID)."},{"lineNumber":896,"author":{"gitID":"-"},"content":"|It requires more steps, thus slower (but fortunately this command should only be executed ONCE in the lifetime of this application)."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"|**Create a new list with title \"CS2103 LOs\", then load and push all tasks from local storage**"},{"lineNumber":899,"author":{"gitID":"-"},"content":"|Will be a bit faster."},{"lineNumber":900,"author":{"gitID":"-"},"content":"|The other task commands will be slower since they will be finding the list with title. The commands may also encounter error if"},{"lineNumber":901,"author":{"gitID":"-"},"content":"there are task list with the same name in the user\u0027s Google account."},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How `ViewTaskListCommand` is executed"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"* This command will load the tasks from task list @default from the user\u0027s Google account and apply user-specified filter before displaying"},{"lineNumber":910,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":911,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":912,"author":{"gitID":"-"},"content":"|**Find the user\u0027s @default task list and load the whole list. Then apply user-specified filter to select applicable"},{"lineNumber":913,"author":{"gitID":"-"},"content":"tasks to form a new list. The new list will be ready to be displayed** +"},{"lineNumber":914,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":915,"author":{"gitID":"-"},"content":"|Easy to implement, well modularized."},{"lineNumber":916,"author":{"gitID":"-"},"content":"|More repetitions of list traversal."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"|**Find the user\u0027s @default task list and load the whole list. Then apply user-specified filter to select applicable"},{"lineNumber":919,"author":{"gitID":"-"},"content":"   tasks while processing the methods to display it**"},{"lineNumber":920,"author":{"gitID":"-"},"content":"|Easy to implement."},{"lineNumber":921,"author":{"gitID":"-"},"content":"|Might lead to complicated methods to display list (eg. multi-level abstraction)."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How `CompleteTaskCommand` and `ResetTaskCommand` is executed"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"* This command will set the task with user-input index number as completed/ not completed."},{"lineNumber":930,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":931,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":932,"author":{"gitID":"-"},"content":"|**Find the user\u0027s @default task list and retrieve the task with user-input index number. Check if it needs update, and update it"},{"lineNumber":933,"author":{"gitID":"-"},"content":"if necessary.** +"},{"lineNumber":934,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":935,"author":{"gitID":"-"},"content":"|Easy to implement."},{"lineNumber":936,"author":{"gitID":"-"},"content":"|"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How `GoToTaskUrl` is executed"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"* This command will open the URL of the task with the user-input index number."},{"lineNumber":945,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":946,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":947,"author":{"gitID":"-"},"content":"|**Find the user\u0027s @default task list and retrieved the task based on the input index. Get the URL in the task object and open it in"},{"lineNumber":948,"author":{"gitID":"-"},"content":"the browser panel** +"},{"lineNumber":949,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":950,"author":{"gitID":"-"},"content":"|Easy to implement."},{"lineNumber":951,"author":{"gitID":"-"},"content":"|"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"|**No need for implementation, the user can click the hyperlink while viewing the task list**"},{"lineNumber":954,"author":{"gitID":"-"},"content":"|No need for implementation."},{"lineNumber":955,"author":{"gitID":"-"},"content":"|Not command line based."},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: What UI structure to show the task list"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":964,"author":{"gitID":"-"},"content":"|Alternative | Pros | Cons"},{"lineNumber":965,"author":{"gitID":"-"},"content":"|**Use a browser panel.** +"},{"lineNumber":966,"author":{"gitID":"-"},"content":"(current choice)"},{"lineNumber":967,"author":{"gitID":"-"},"content":"|Can show task list and external websites linked to tasks in the same panel."},{"lineNumber":968,"author":{"gitID":"-"},"content":"|Exercise list, issue list and person list are all shown in a list panel. The handling of browser panel and list panel is different,"},{"lineNumber":969,"author":{"gitID":"-"},"content":"which leads to inconsistency."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"|**Use a list panel to display tasks, and a browser panel to display external webpages**"},{"lineNumber":972,"author":{"gitID":"-"},"content":"|Guarantees consistency between task list, exercise list, issue list and person list."},{"lineNumber":973,"author":{"gitID":"-"},"content":"|Takes more space."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: What can we improve / what command can we add in v2.0"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"* Send reminder email to the user when a deadline is near"},{"lineNumber":982,"author":{"gitID":"-"},"content":"* Back/Forward the browser panel"},{"lineNumber":983,"author":{"gitID":"-"},"content":"* View teammates\u0027 task list and progress (Google Tasks does not support it. Thus, a possible implementation is to sync data"},{"lineNumber":984,"author":{"gitID":"-"},"content":"with the help of Google Drive API. After every transaction with Google Tasks, we retrieve the task list and save in Google Drive."},{"lineNumber":985,"author":{"gitID":"-"},"content":"Students in the same team will use a shared folder on Google Drive, thus can access each other\u0027s task list data. ProgressChecker will"},{"lineNumber":986,"author":{"gitID":"-"},"content":"retrieve teammate task list data from the shared folder in Google Drive)."},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"{sp} +"},{"lineNumber":989,"author":{"gitID":"-"},"content":"// end::tasks[]"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"AdityaA1998"},"content":"// tag::github[]"},{"lineNumber":992,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":993,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Github Login"},{"lineNumber":994,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Current Implemetation"},{"lineNumber":995,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":996,"author":{"gitID":"AdityaA1998"},"content":"The `GitDetails` represents an object that is used to authenticate github. It contains `Username`, `Passcode`, and `Repository` object which represent the github account\u0027s username, password and repository respectively."},{"lineNumber":997,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":998,"author":{"gitID":"AdityaA1998"},"content":"All fields are compulsory for github authentication."},{"lineNumber":999,"author":{"gitID":"AdityaA1998"},"content":".UML diagram for github details"},{"lineNumber":1000,"author":{"gitID":"AdityaA1998"},"content":"image::gitdetails.png[width\u003d\"800\"]"},{"lineNumber":1001,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1002,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1003,"author":{"gitID":"AdityaA1998"},"content":"`GitDetails` object is not stored locally as it can violate user\u0027s data and privacy."},{"lineNumber":1004,"author":{"gitID":"AdityaA1998"},"content":"To manage the github account following command classes can be used:"},{"lineNumber":1005,"author":{"gitID":"AdityaA1998"},"content":"****"},{"lineNumber":1006,"author":{"gitID":"AdityaA1998"},"content":"* GitLoginCommand"},{"lineNumber":1007,"author":{"gitID":"AdityaA1998"},"content":"* GitLogoutCommand"},{"lineNumber":1008,"author":{"gitID":"AdityaA1998"},"content":"****"},{"lineNumber":1009,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1010,"author":{"gitID":"AdityaA1998"},"content":"`GitLoginCommand` needs to be used for tracking any issue activity on the ProgressChecker application. After the `GitDetails` object is created, its member\u0027s are used to create a `Github` object from the Github API library which is used to authenticate github."},{"lineNumber":1011,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1012,"author":{"gitID":"AdityaA1998"},"content":"Implementation of github login and issue tracking is done with the help of GitHub API for Java (org.kohsuke.github)."},{"lineNumber":1013,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Logging into github"},{"lineNumber":1014,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1015,"author":{"gitID":"AdityaA1998"},"content":"User can log into github after using the `GitLoginCommand`. After executing the command, a `GitDetails` object is created"},{"lineNumber":1016,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1017,"author":{"gitID":"AdityaA1998"},"content":"Given below is a sequence diagram for authenticating github."},{"lineNumber":1018,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1019,"author":{"gitID":"AdityaA1998"},"content":".UML Diagram for Github details"},{"lineNumber":1020,"author":{"gitID":"AdityaA1998"},"content":"image::gitlogin1.png[width\u003d\"800\"]"},{"lineNumber":1021,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1022,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1023,"author":{"gitID":"AdityaA1998"},"content":"The following code snippet shows how GitLoginCommand#execute() will update the model by creating `Github` object which will be used to authenticate github."},{"lineNumber":1024,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1025,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":1026,"author":{"gitID":"AdityaA1998"},"content":"public class GitLoginCommand extends Command {"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":1029,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1030,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":1031,"author":{"gitID":"AdityaA1998"},"content":"            model.loginGithub(toAuthenticate);"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":1033,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException e) {"},{"lineNumber":1034,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":1035,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":1036,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(ce.getMessage());"},{"lineNumber":1037,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":1038,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":1039,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":1040,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":1041,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1042,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1043,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1044,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Using password for authentication"},{"lineNumber":1045,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1046,"author":{"gitID":"AdityaA1998"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1047,"author":{"gitID":"AdityaA1998"},"content":"|Alternative | Pros | Cons"},{"lineNumber":1048,"author":{"gitID":"AdityaA1998"},"content":"|**Used github password for authentication** +"},{"lineNumber":1049,"author":{"gitID":"AdityaA1998"},"content":"(current choice)"},{"lineNumber":1050,"author":{"gitID":"AdityaA1998"},"content":"|User easily remebers his password, thus logging in is easy."},{"lineNumber":1051,"author":{"gitID":"AdityaA1998"},"content":"|Password cannot be stored offline to protect users data and privacy."},{"lineNumber":1052,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1053,"author":{"gitID":"AdityaA1998"},"content":"|**Using OAuth token for authentication**"},{"lineNumber":1054,"author":{"gitID":"AdityaA1998"},"content":"|OAuth token can be stored offline which can provide one-time login functionality, as we can restrict the token\u0027s usage for only ProgressChecker application."},{"lineNumber":1055,"author":{"gitID":"AdityaA1998"},"content":"|Manually generating a token by the user is a tedious task and github tokens expire regularly which can be a pain for the user."},{"lineNumber":1056,"author":{"gitID":"AdityaA1998"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1057,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Github Issue Tracker"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":1059,"author":{"gitID":"AdityaA1998"},"content":"The `Issue` object represents an issue that is to be created on github. It contains `Title`, `Assignees`, `Milestone`, `Body`, and `Labels` which are the different attributes of an issue on github."},{"lineNumber":1060,"author":{"gitID":"AdityaA1998"},"content":"[NOTE]"},{"lineNumber":1061,"author":{"gitID":"AdityaA1998"},"content":"Only the `Title` field is compulsory for `Issue` as this the only limitation set by github."},{"lineNumber":1062,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1063,"author":{"gitID":"AdityaA1998"},"content":".UML diagram for github Issue"},{"lineNumber":1064,"author":{"gitID":"AdityaA1998"},"content":"image::issueobject.png[width\u003d\"800\"]"},{"lineNumber":1065,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1066,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1067,"author":{"gitID":"AdityaA1998"},"content":"`Issue` objects are not stored in memory after an issue is created on github. The issues are not stored in a local file to protect users confidential data and privacy."},{"lineNumber":1068,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1069,"author":{"gitID":"AdityaA1998"},"content":"Issue tracking is done by several command classes, namely:"},{"lineNumber":1070,"author":{"gitID":"AdityaA1998"},"content":"****"},{"lineNumber":1071,"author":{"gitID":"AdityaA1998"},"content":"* CreateIssueCommand"},{"lineNumber":1072,"author":{"gitID":"AdityaA1998"},"content":"* CloseIssueCommand"},{"lineNumber":1073,"author":{"gitID":"AdityaA1998"},"content":"* EditIssueCommand"},{"lineNumber":1074,"author":{"gitID":"AdityaA1998"},"content":"* ReopenIssueCommand"},{"lineNumber":1075,"author":{"gitID":"AdityaA1998"},"content":"* ListIssueCommand"},{"lineNumber":1076,"author":{"gitID":"AdityaA1998"},"content":"****"},{"lineNumber":1077,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1078,"author":{"gitID":"AdityaA1998"},"content":"All the above commands will only work after you have logged into github. Use \u0027gitLogin\u0027 command to login."},{"lineNumber":1079,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1080,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Creating an issue"},{"lineNumber":1081,"author":{"gitID":"AdityaA1998"},"content":"An issue is created on github using the CreateIssueCommand. After executing the command, an `Issue` object is created which is then converted to a `GHIssue` object present in the Github Library. GHIssue is then posted online using the Github API library."},{"lineNumber":1082,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1083,"author":{"gitID":"AdityaA1998"},"content":"Given below is the sequence diagram for creating an issue on github."},{"lineNumber":1084,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1085,"author":{"gitID":"AdityaA1998"},"content":".High level sequence diagram for creating a new issue on github"},{"lineNumber":1086,"author":{"gitID":"AdityaA1998"},"content":"image::finalcreateIssue.png[width\u003d\"800\"]"},{"lineNumber":1087,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1088,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1089,"author":{"gitID":"AdityaA1998"},"content":"The following code snippet shows how `CreateIssueCommand#execute()` will update the model of the application by creating an issue `toCreate` on github and later updating the `GitIssueList`."},{"lineNumber":1090,"author":{"gitID":"AdityaA1998"},"content":"Note: This an issue will not be created if you haven\u0027t logged into github."},{"lineNumber":1091,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1092,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":1093,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommandTest {"},{"lineNumber":1094,"author":{"gitID":"AdityaA1998"},"content":"..."},{"lineNumber":1095,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":1097,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1098,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":1099,"author":{"gitID":"AdityaA1998"},"content":"            model.createIssueOnGitHub(toCreate);"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":1101,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException | CommandException e) {"},{"lineNumber":1102,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":1103,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":1104,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":1105,"author":{"gitID":"AdityaA1998"},"content":"    ..."},{"lineNumber":1106,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":1107,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":1108,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1109,"author":{"gitID":"AdityaA1998"},"content":"The issue created will be shown on the `Issues` tab in the application."},{"lineNumber":1110,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1111,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Closing an issue"},{"lineNumber":1112,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1113,"author":{"gitID":"AdityaA1998"},"content":"An issue can be closed on github using the CloseIssueCommand. After executing the command, a `GHIssue` object of the specified index is retrieved from the Github database. The state of the GHIssue is checked and it is marked as closed if it is open."},{"lineNumber":1114,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1115,"author":{"gitID":"AdityaA1998"},"content":"Given below is the sequence diagram for closing an issue."},{"lineNumber":1116,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1117,"author":{"gitID":"AdityaA1998"},"content":".High Level Sequence Diagram for closing an issue on github"},{"lineNumber":1118,"author":{"gitID":"AdityaA1998"},"content":"image::closeissue.png[width\u003d\"800\"]"},{"lineNumber":1119,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1120,"author":{"gitID":"AdityaA1998"},"content":"The following code snippet shows how `CloseIssueCommand#execute()` will update the model of application by closing an issue updating the `GitIssueList`."},{"lineNumber":1121,"author":{"gitID":"AdityaA1998"},"content":"Note: The entered index number should be a valid issue index, and the user should be logged into github before using the command."},{"lineNumber":1122,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1123,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":1124,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommand extends Command {"},{"lineNumber":1125,"author":{"gitID":"AdityaA1998"},"content":"@Override"},{"lineNumber":1126,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":1127,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":1128,"author":{"gitID":"AdityaA1998"},"content":"            model.closeIssueOnGithub(targetIndex);"},{"lineNumber":1129,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":1130,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":1131,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":1132,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":1133,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":1134,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1135,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":1136,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":1137,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":1138,"author":{"gitID":"AdityaA1998"},"content":"----"},{"lineNumber":1139,"author":{"gitID":"AdityaA1998"},"content":"The issue created will be removed from the `Issues` tab in the application, as by default only open issues are displayed."},{"lineNumber":1140,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1141,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1142,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1143,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing issues on a local file"},{"lineNumber":1144,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1145,"author":{"gitID":"AdityaA1998"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1146,"author":{"gitID":"AdityaA1998"},"content":"|Alternative | Pros | Cons"},{"lineNumber":1147,"author":{"gitID":"AdityaA1998"},"content":"|**Not storing the issues offline** +"},{"lineNumber":1148,"author":{"gitID":"AdityaA1998"},"content":"(current choice)"},{"lineNumber":1149,"author":{"gitID":"AdityaA1998"},"content":"|Users data and privacy is protected, as issues on github might contain very confidential data regarding the product\u0027s information."},{"lineNumber":1150,"author":{"gitID":"AdityaA1998"},"content":"|The user cannot view the exisitng issues offline and he can not use the software to work offline and then push everything online once the internet connection is available."},{"lineNumber":1151,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1152,"author":{"gitID":"AdityaA1998"},"content":"|**Implementing data encryption so that the issues can be stored offline**"},{"lineNumber":1153,"author":{"gitID":"AdityaA1998"},"content":"|User will be able work offline on issues and post changes when internet connection is availabe."},{"lineNumber":1154,"author":{"gitID":"AdityaA1998"},"content":"|In order to do offline authentication and decrypt the issue data, the application will have to store the user credentials offline which might violate Github\u0027s API policy."},{"lineNumber":1155,"author":{"gitID":"AdityaA1998"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1156,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1157,"author":{"gitID":"AdityaA1998"},"content":"// end::github[]"},{"lineNumber":1158,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation. This section talks about how you can modify and publish the existing documentations."},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1189,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1202,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1203,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1204,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"ProgressChecker uses JUnit tests to check for its correctness. This section covers the type of tests and how to run them."},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1219,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1220,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.progresschecker.ui` package."},{"lineNumber":1221,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"e.g. `seedu.progresschecker.commons.StringUtilTest`"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"e.g. `seedu.progresschecker.storage.StorageManagerTest`"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"e.g. `seedu.progresschecker.logic.LogicManagerTest`"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1234,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/progresschecker/MainApp.java[`MainApp.java`]."},{"lineNumber":1258,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1259,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1260,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1265,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"It might be your first time working with a large code base. If so, here is a suggested path for new programmers to kick start your first functionality:"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove teammates in the list."},{"lineNumber":1292,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/progresschecker/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/progresschecker/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1296,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser`] is responsible for analyzing command words."},{"lineNumber":1297,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1299,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1300,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1301,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the ProgressChecker, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the ProgressChecker."},{"lineNumber":1313,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1314,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/progresschecker/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`] API need to be updated."},{"lineNumber":1317,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`] and link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`] allows you to update a teammate, and link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1319,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1320,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`]. Loop through each teammates, and remove the `tag` from each teammate."},{"lineNumber":1321,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/progresschecker/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/progresschecker/model/ModelManager.java[`ModelManager`] should call `ProgressChecker#removeTag(Tag)`."},{"lineNumber":1322,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1323,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1324,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/progresschecker/model/ProgressChecker.java[`ProgressChecker`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1325,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1326,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your ProgressChecker application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last teammate in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1335,"author":{"gitID":"-"},"content":""},{"lineNumber":1336,"author":{"gitID":"-"},"content":". Use different colors for different tags inside teammate cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1337,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1338,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1339,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1342,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1347,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1349,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1350,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1351,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1352,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1353,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1354,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1355,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/progresschecker/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1358,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1360,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1368,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/progresschecker/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/progresschecker/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/progresschecker/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1370,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/progresschecker/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1371,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/progresschecker/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1373,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/progresschecker/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1374,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1376,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/ProgressCheckerSystemTest.java[`ProgressCheckerSystemTest#assertCommandBoxShowsDefaultStyle() and ProgressCheckerSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1377,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1378,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1379,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the ProgressChecker."},{"lineNumber":1382,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1383,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1384,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1386,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1394,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the ProgressChecker is updated."},{"lineNumber":1395,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of teammates when the application just started."},{"lineNumber":1397,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/progresschecker/ui/StatusBarFooter.java[`StatusBarFooter#handleProgressCheckerChangedEvent(ProgressCheckerChangedEvent)`] to update the number of teammates whenever there are new changes to the progresschecker."},{"lineNumber":1398,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1399,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/ProgressCheckerSystemTest.java[`ProgressCheckerSystemTest`] to also verify the new total number of teammates status bar."},{"lineNumber":1400,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1401,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the ProgressChecker to the cloud. However, the current implementation of the application constantly saves the ProgressChecker after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the ProgressChecker storage."},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1409,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":". Add a new method `backupProgressChecker(ReadOnlyProgressChecker)`, so that the ProgressChecker can be saved in a fixed temporary location."},{"lineNumber":1412,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1413,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1414,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/progresschecker/storage/ProgressCheckerStorage.java[`ProgressCheckerStorage`] interface."},{"lineNumber":1416,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/progresschecker/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/progresschecker/storage/XmlProgressCheckerStorage.java[`XmlProgressCheckerStorage`] class."},{"lineNumber":1417,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1418,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1419,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1425,"author":{"gitID":"-"},"content":""},{"lineNumber":1426,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `progresschecker`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1429,"author":{"gitID":"-"},"content":"Edits the remark for a teammate specified in the `INDEX`. +"},{"lineNumber":1430,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1435,"author":{"gitID":"-"},"content":"Edits the remark for the first teammate to `Likes to drink coffee.`"},{"lineNumber":1436,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1437,"author":{"gitID":"-"},"content":"Removes the remark for the first teammate."},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1443,"author":{"gitID":"-"},"content":""},{"lineNumber":1444,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/progresschecker/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1447,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser`] to accept a `RemarkCommand`."},{"lineNumber":1448,"author":{"gitID":"-"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1452,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/progresschecker/logic/parser/ProgressCheckerParserTest.java[`ProgressCheckerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1453,"author":{"gitID":"-"},"content":""},{"lineNumber":1454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1455,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1460,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1461,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java[`ProgressCheckerParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1464,"author":{"gitID":"-"},"content":""},{"lineNumber":1465,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1466,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1467,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1468,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/progresschecker/logic/parser/ProgressCheckerParserTest.java[`ProgressCheckerParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1471,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1472,"author":{"gitID":"-"},"content":""},{"lineNumber":1473,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1476,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1481,"author":{"gitID":"-"},"content":""},{"lineNumber":1482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1483,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1488,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1495,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`]."},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1498,"author":{"gitID":"-"},"content":""},{"lineNumber":1499,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`]."},{"lineNumber":1500,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1501,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `progressChecker.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1502,"author":{"gitID":"-"},"content":""},{"lineNumber":1503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1504,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/progresschecker/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1509,"author":{"gitID":"-"},"content":""},{"lineNumber":1510,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1511,"author":{"gitID":"-"},"content":""},{"lineNumber":1512,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonProgressChecker.xml`, `typicalPersonsProgressChecker.xml`, `validProgressChecker.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1513,"author":{"gitID":"-"},"content":""},{"lineNumber":1514,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1515,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/progresschecker/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/progresschecker/model/person/Person.java[`Person`]."},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1518,"author":{"gitID":"-"},"content":""},{"lineNumber":1519,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/progresschecker/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1520,"author":{"gitID":"-"},"content":". Try and use the method on any sample `us` in link:{repoURL}/src/test/java/seedu/progresschecker/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1521,"author":{"gitID":"-"},"content":""},{"lineNumber":1522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1523,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1524,"author":{"gitID":"-"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1526,"author":{"gitID":"-"},"content":""},{"lineNumber":1527,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/progresschecker/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1528,"author":{"gitID":"-"},"content":""},{"lineNumber":1529,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1530,"author":{"gitID":"-"},"content":""},{"lineNumber":1531,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/progresschecker/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1534,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1535,"author":{"gitID":"-"},"content":""},{"lineNumber":1536,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1537,"author":{"gitID":"-"},"content":""},{"lineNumber":1538,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a teammate."},{"lineNumber":1539,"author":{"gitID":"-"},"content":""},{"lineNumber":1540,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1541,"author":{"gitID":"-"},"content":""},{"lineNumber":1542,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1543,"author":{"gitID":"-"},"content":""},{"lineNumber":1544,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1545,"author":{"gitID":"-"},"content":""},{"lineNumber":1546,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1547,"author":{"gitID":"-"},"content":""},{"lineNumber":1548,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1549,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1550,"author":{"gitID":"-"},"content":""},{"lineNumber":1551,"author":{"gitID":"-"},"content":"This section covers what ProgressChecker is meant to be and what it can do for the users."},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1554,"author":{"gitID":"-"},"content":""},{"lineNumber":1555,"author":{"gitID":"-"},"content":"* is taking CS2103T in NUS"},{"lineNumber":1556,"author":{"gitID":"-"},"content":"* has a need to manage a up to 4 contacts"},{"lineNumber":1557,"author":{"gitID":"-"},"content":"* wants to have a centralized hub for managing his/her learning and software development"},{"lineNumber":1558,"author":{"gitID":"-"},"content":"* wants to keep track on his/her learning outcomes and progress"},{"lineNumber":1559,"author":{"gitID":"-"},"content":"* wants to save and refer to their answers for the weekly CS2103/T exercises"},{"lineNumber":1560,"author":{"gitID":"-"},"content":"* wants to manage GitHub issues efficiently"},{"lineNumber":1561,"author":{"gitID":"-"},"content":"* prefers desktop apps over other platforms"},{"lineNumber":1562,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1563,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1564,"author":{"gitID":"-"},"content":""},{"lineNumber":1565,"author":{"gitID":"-"},"content":"*Value proposition*:"},{"lineNumber":1566,"author":{"gitID":"-"},"content":""},{"lineNumber":1567,"author":{"gitID":"-"},"content":"* keep track of your teammates\u0027 details"},{"lineNumber":1568,"author":{"gitID":"-"},"content":"* keep track of your own progress on a week by week basis"},{"lineNumber":1569,"author":{"gitID":"-"},"content":"* never miss any learning outcomes due to missing them out in nested collapsible list"},{"lineNumber":1570,"author":{"gitID":"-"},"content":"* keep track of completed and incomplete (compulsory) learning outcomes"},{"lineNumber":1571,"author":{"gitID":"-"},"content":"* view and save your answers for the exercises (as proof of completion and for future revision)"},{"lineNumber":1572,"author":{"gitID":"-"},"content":"* manage issues from GitHub straight from the software along with other tracking"},{"lineNumber":1573,"author":{"gitID":"-"},"content":""},{"lineNumber":1574,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1575,"author":{"gitID":"-"},"content":"\u003d\u003d Feature Contribution"},{"lineNumber":1576,"author":{"gitID":"-"},"content":""},{"lineNumber":1577,"author":{"gitID":"-"},"content":"The names of the contributors and their contributions to the project are listed here in brief."},{"lineNumber":1578,"author":{"gitID":"-"},"content":""},{"lineNumber":1579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Koh Yee Ru"},{"lineNumber":1580,"author":{"gitID":"-"},"content":""},{"lineNumber":1581,"author":{"gitID":"-"},"content":". (Major) View, answer and save responses for weekly CS2103/T exercises"},{"lineNumber":1582,"author":{"gitID":"-"},"content":". (Minor) View command that toggles the tab view"},{"lineNumber":1583,"author":{"gitID":"-"},"content":"image:TabView.png[width\u003d\"600\"]"},{"lineNumber":1584,"author":{"gitID":"-"},"content":""},{"lineNumber":1585,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Kang Anmin"},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":". (Major) Task management: Add LOs to google tasks (the users google account, load tasks and sign completion."},{"lineNumber":1588,"author":{"gitID":"-"},"content":". (Minor) Progress Bar: to give a graphic view of tasks completeness"},{"lineNumber":1589,"author":{"gitID":"-"},"content":". (Minor) Change/Add more fields of information for teammates in the contact list, in order to fit the specific context of this software. It also lays a foundation for other operations."},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lai Liwen"},{"lineNumber":1592,"author":{"gitID":"-"},"content":""},{"lineNumber":1593,"author":{"gitID":"-"},"content":". (Major) Revamp the UI: rearrange the different sections and panels to best suit audience\u0027s needs"},{"lineNumber":1594,"author":{"gitID":"-"},"content":". (Major) Upload profile photo: students will be able to upload a photo to their profile"},{"lineNumber":1595,"author":{"gitID":"-"},"content":". (Minor) HighLight the key word: the key word will be highlighted in command find"},{"lineNumber":1596,"author":{"gitID":"-"},"content":""},{"lineNumber":1597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Aditya Agarwal"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"AdityaA1998"},"content":". (Major) Create a github issue tracker which will be used to track issues on github using the ProgressChecker application."},{"lineNumber":1600,"author":{"gitID":"-"},"content":". (Minor) Implement dynamic search"},{"lineNumber":1601,"author":{"gitID":"-"},"content":""},{"lineNumber":1602,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1603,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1604,"author":{"gitID":"-"},"content":""},{"lineNumber":1605,"author":{"gitID":"-"},"content":"This section lists the actions that both new and long-time users can and may want to perform with ProgressChecker."},{"lineNumber":1606,"author":{"gitID":"-"},"content":""},{"lineNumber":1607,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1608,"author":{"gitID":"-"},"content":""},{"lineNumber":1609,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1610,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1612,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1613,"author":{"gitID":"-"},"content":""},{"lineNumber":1614,"author":{"gitID":"-"},"content":"|`* * *` |new user |fill in my details such as name, email, 8 digits phone number |provide necessary information for platform maintenance"},{"lineNumber":1615,"author":{"gitID":"-"},"content":""},{"lineNumber":1616,"author":{"gitID":"-"},"content":"|`* * *` |new user |fill in optional fields such as faculty, year of study, etc. |help my teammates know me better"},{"lineNumber":1617,"author":{"gitID":"-"},"content":""},{"lineNumber":1618,"author":{"gitID":"-"},"content":"|`* * *` |user |update information of certain field(s) |keep my information up-to-date"},{"lineNumber":1619,"author":{"gitID":"-"},"content":""},{"lineNumber":1620,"author":{"gitID":"-"},"content":"|`* * *` |user |add a teammate\u0027s details |help myself to track my current teammates\u0027 progress"},{"lineNumber":1621,"author":{"gitID":"-"},"content":""},{"lineNumber":1622,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a teammate\u0027s details |remove an entry of a teammate\u0027s details that I\u0027m no longer grouped with"},{"lineNumber":1623,"author":{"gitID":"-"},"content":""},{"lineNumber":1624,"author":{"gitID":"-"},"content":"|`* * *` |new user |upload a photo for myself or my teammates |help me to recognize my teammates"},{"lineNumber":1625,"author":{"gitID":"-"},"content":""},{"lineNumber":1626,"author":{"gitID":"-"},"content":"|`* * *` |user |view my to-do \u003c\u003clearning outcomes,learning outcomes\u003e\u003e |know all the weekly deliverables and not miss them out"},{"lineNumber":1627,"author":{"gitID":"-"},"content":""},{"lineNumber":1628,"author":{"gitID":"-"},"content":"|`* * *` |user |mark a to-do learning outcome as completed |focus on the tasks I have not done"},{"lineNumber":1629,"author":{"gitID":"-"},"content":""},{"lineNumber":1630,"author":{"gitID":"-"},"content":"|`* * *` |user |answer and save my responses for the weekly exercises |show to tutor as proof of my learning outcome and revise before exams"},{"lineNumber":1631,"author":{"gitID":"-"},"content":""},{"lineNumber":1632,"author":{"gitID":"-"},"content":"|`* * *` |user |know if my answer for an exercise is correct |learn from any mistakes I made"},{"lineNumber":1633,"author":{"gitID":"-"},"content":""},{"lineNumber":1634,"author":{"gitID":"-"},"content":"|`* * *` |user |list issues (tasks) on GitHub |easily inform my teammates of my upcoming plans even before I send any pull requests to the team\u0027s repository"},{"lineNumber":1635,"author":{"gitID":"-"},"content":""},{"lineNumber":1636,"author":{"gitID":"-"},"content":"|`* * *` |user |assign issues (tasks) to my teammates |track who is doing what"},{"lineNumber":1637,"author":{"gitID":"-"},"content":""},{"lineNumber":1638,"author":{"gitID":"-"},"content":"|`* * *` |user |see the issues (tasks) listed on GitHub |easily know the upcoming plans of my teammates even before they send any pull requests to the team\u0027s repository"},{"lineNumber":1639,"author":{"gitID":"-"},"content":""},{"lineNumber":1640,"author":{"gitID":"-"},"content":"|`* * *` |user |close issues (tasks) on GitHub |easily inform my teammates of a completed task if no particular pull requests closes it"},{"lineNumber":1641,"author":{"gitID":"-"},"content":""},{"lineNumber":1642,"author":{"gitID":"-"},"content":"|`* *` |user |see the timeline showing the learning progress of me and my teammates |make sure everyone is on track"},{"lineNumber":1643,"author":{"gitID":"-"},"content":""},{"lineNumber":1644,"author":{"gitID":"-"},"content":"|`* *` |new user |load a photo of myself or my teammates from GitHub |help me to recognize my teammates"},{"lineNumber":1645,"author":{"gitID":"-"},"content":""},{"lineNumber":1646,"author":{"gitID":"-"},"content":"|`* *` |user |see the list of completed/incomplete \u003c\u003clearning outcomes,learning outcomes\u003e\u003e of my teammates |help to remind my teammate of the task or know which task to offer help with if they are having difficulties"},{"lineNumber":1647,"author":{"gitID":"-"},"content":""},{"lineNumber":1648,"author":{"gitID":"-"},"content":"|`* *` |user |search information in our module website based on keywords |navigate and reference the information I need quickly"},{"lineNumber":1649,"author":{"gitID":"-"},"content":""},{"lineNumber":1650,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1651,"author":{"gitID":"-"},"content":""},{"lineNumber":1652,"author":{"gitID":"-"},"content":"|`* *` |user with many teammates in the ProgressChecker |sort teammates by name |locate a teammate easily"},{"lineNumber":1653,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1654,"author":{"gitID":"-"},"content":""},{"lineNumber":1655,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1656,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1657,"author":{"gitID":"-"},"content":""},{"lineNumber":1658,"author":{"gitID":"-"},"content":"This section list the sequence of events for a feature. It includes possible scenarios in which a feature is not interacted with as intended which you can defense against."},{"lineNumber":1659,"author":{"gitID":"-"},"content":""},{"lineNumber":1660,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `ProgressChecker` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1661,"author":{"gitID":"-"},"content":""},{"lineNumber":1662,"author":{"gitID":"-"},"content":"// tag::viewusecase[]"},{"lineNumber":1663,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1664,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View (toggle) a different tab"},{"lineNumber":1665,"author":{"gitID":"-"},"content":""},{"lineNumber":1666,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1667,"author":{"gitID":"-"},"content":""},{"lineNumber":1668,"author":{"gitID":"-"},"content":"1.  User requests to view a specific tab type"},{"lineNumber":1669,"author":{"gitID":"-"},"content":"2.  ProgressChecker toggles tab view to show the requested tab"},{"lineNumber":1670,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1671,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1674,"author":{"gitID":"-"},"content":""},{"lineNumber":1675,"author":{"gitID":"-"},"content":"* 1a. The given tab type is invalid."},{"lineNumber":1676,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1677,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":1678,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1679,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1680,"author":{"gitID":"-"},"content":""},{"lineNumber":1681,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":1682,"author":{"gitID":"iNekox3"},"content":"* 2a. There is no content to be shown."},{"lineNumber":1683,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1684,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1685,"author":{"gitID":"-"},"content":"// end::viewusecase[]"},{"lineNumber":1686,"author":{"gitID":"-"},"content":""},{"lineNumber":1687,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1688,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add teammate"},{"lineNumber":1689,"author":{"gitID":"-"},"content":""},{"lineNumber":1690,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1691,"author":{"gitID":"-"},"content":""},{"lineNumber":1692,"author":{"gitID":"-"},"content":"1.  User requests to add a specific teammate in the list"},{"lineNumber":1693,"author":{"gitID":"-"},"content":"2.  ProgressChecker add the teammate"},{"lineNumber":1694,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1695,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1696,"author":{"gitID":"-"},"content":""},{"lineNumber":1697,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1698,"author":{"gitID":"-"},"content":""},{"lineNumber":1699,"author":{"gitID":"-"},"content":"* 1a. The teammate has already been existing in the list."},{"lineNumber":1700,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1701,"author":{"gitID":"-"},"content":""},{"lineNumber":1702,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1703,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1704,"author":{"gitID":"AdityaA1998"},"content":"Use case resumes at step 1."},{"lineNumber":1705,"author":{"gitID":"-"},"content":""},{"lineNumber":1706,"author":{"gitID":"-"},"content":"* 1a. The given information is invalid."},{"lineNumber":1707,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1708,"author":{"gitID":"-"},"content":""},{"lineNumber":1709,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1710,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1711,"author":{"gitID":"AdityaA1998"},"content":"Use case resumes at step 1."},{"lineNumber":1712,"author":{"gitID":"-"},"content":""},{"lineNumber":1713,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add the default task list"},{"lineNumber":1715,"author":{"gitID":"-"},"content":""},{"lineNumber":1716,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1717,"author":{"gitID":"-"},"content":""},{"lineNumber":1718,"author":{"gitID":"-"},"content":"1.  User requests to add the task list"},{"lineNumber":1719,"author":{"gitID":"-"},"content":"2.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1720,"author":{"gitID":"-"},"content":"3.  ProgressChecker loads and parses local file, adds the task list to user\u0027s google account"},{"lineNumber":1721,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1722,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1723,"author":{"gitID":"-"},"content":""},{"lineNumber":1724,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1725,"author":{"gitID":"-"},"content":""},{"lineNumber":1726,"author":{"gitID":"-"},"content":"* 2a. No Internet Access."},{"lineNumber":1727,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1728,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1729,"author":{"gitID":"-"},"content":""},{"lineNumber":1730,"author":{"gitID":"-"},"content":"* 2b. Invalid client credential file."},{"lineNumber":1731,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1732,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"* 2c. Invalid user log in information."},{"lineNumber":1735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1736,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1737,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1738,"author":{"gitID":"-"},"content":"* 3a. The file is not found."},{"lineNumber":1739,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1740,"author":{"gitID":"AdityaA1998"},"content":"Use case ends."},{"lineNumber":1741,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1742,"author":{"gitID":"-"},"content":"* 3b. The file is corrupted."},{"lineNumber":1743,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1744,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1747,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Task List"},{"lineNumber":1748,"author":{"gitID":"-"},"content":""},{"lineNumber":1749,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"-"},"content":"1.  User requests to view the task list with a filter argument"},{"lineNumber":1752,"author":{"gitID":"-"},"content":"2.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1753,"author":{"gitID":"-"},"content":"3.  ProgressChecker makes request to the user\u0027s google account to load the task list."},{"lineNumber":1754,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1755,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1756,"author":{"gitID":"-"},"content":""},{"lineNumber":1757,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1758,"author":{"gitID":"-"},"content":""},{"lineNumber":1759,"author":{"gitID":"-"},"content":"* 1a. The argument is invalid."},{"lineNumber":1760,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1761,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1762,"author":{"gitID":"-"},"content":""},{"lineNumber":1763,"author":{"gitID":"-"},"content":"* 2a. No Internet Access."},{"lineNumber":1764,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1765,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1766,"author":{"gitID":"-"},"content":""},{"lineNumber":1767,"author":{"gitID":"-"},"content":"* 2b. Invalid client credential file."},{"lineNumber":1768,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1769,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1770,"author":{"gitID":"-"},"content":""},{"lineNumber":1771,"author":{"gitID":"-"},"content":"* 2c. Invalid user log in information."},{"lineNumber":1772,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1773,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1774,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1775,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Complete a task"},{"lineNumber":1777,"author":{"gitID":"-"},"content":""},{"lineNumber":1778,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1779,"author":{"gitID":"-"},"content":""},{"lineNumber":1780,"author":{"gitID":"-"},"content":"1.  User requests to mark a task as completed"},{"lineNumber":1781,"author":{"gitID":"-"},"content":"2.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1782,"author":{"gitID":"-"},"content":"3.  ProgressChecker marks the task as completed"},{"lineNumber":1783,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1784,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1785,"author":{"gitID":"-"},"content":""},{"lineNumber":1786,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1787,"author":{"gitID":"-"},"content":""},{"lineNumber":1788,"author":{"gitID":"-"},"content":"* 1a. The index is invalid."},{"lineNumber":1789,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1790,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1791,"author":{"gitID":"-"},"content":""},{"lineNumber":1792,"author":{"gitID":"-"},"content":"* 2a. No Internet Access."},{"lineNumber":1793,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1794,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1795,"author":{"gitID":"-"},"content":""},{"lineNumber":1796,"author":{"gitID":"-"},"content":"* 2b. Invalid client credential file."},{"lineNumber":1797,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1798,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"* 2c. Invalid user log in information."},{"lineNumber":1801,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1802,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1803,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1804,"author":{"gitID":"-"},"content":"* 3a. The index is valid but out of bound."},{"lineNumber":1805,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1806,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1807,"author":{"gitID":"-"},"content":""},{"lineNumber":1808,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Reset a task"},{"lineNumber":1810,"author":{"gitID":"-"},"content":""},{"lineNumber":1811,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1812,"author":{"gitID":"-"},"content":""},{"lineNumber":1813,"author":{"gitID":"-"},"content":"1.  User requests to reset a task as not completed"},{"lineNumber":1814,"author":{"gitID":"-"},"content":"2.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1815,"author":{"gitID":"-"},"content":"3.  ProgressChecker resets the task as not completed"},{"lineNumber":1816,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1817,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1818,"author":{"gitID":"-"},"content":""},{"lineNumber":1819,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1820,"author":{"gitID":"-"},"content":""},{"lineNumber":1821,"author":{"gitID":"-"},"content":"* 1a. The index is invalid."},{"lineNumber":1822,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1823,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1824,"author":{"gitID":"-"},"content":""},{"lineNumber":1825,"author":{"gitID":"-"},"content":"* 2a. No Internet Access."},{"lineNumber":1826,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1827,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1828,"author":{"gitID":"-"},"content":""},{"lineNumber":1829,"author":{"gitID":"-"},"content":"* 2b. Invalid client credential file."},{"lineNumber":1830,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1831,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1832,"author":{"gitID":"-"},"content":""},{"lineNumber":1833,"author":{"gitID":"-"},"content":"* 2c. Invalid user log in information."},{"lineNumber":1834,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1835,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1836,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1837,"author":{"gitID":"-"},"content":"* 3a. The index is valid but out of bound."},{"lineNumber":1838,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1839,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1840,"author":{"gitID":"-"},"content":""},{"lineNumber":1841,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Open URL of a task"},{"lineNumber":1843,"author":{"gitID":"-"},"content":""},{"lineNumber":1844,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1845,"author":{"gitID":"-"},"content":""},{"lineNumber":1846,"author":{"gitID":"-"},"content":"1.  User requests to open URL of a task"},{"lineNumber":1847,"author":{"gitID":"-"},"content":"2.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":1848,"author":{"gitID":"-"},"content":"3.  ProgressChecker opens the URL and show in browser panel"},{"lineNumber":1849,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1850,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1851,"author":{"gitID":"-"},"content":""},{"lineNumber":1852,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1853,"author":{"gitID":"-"},"content":""},{"lineNumber":1854,"author":{"gitID":"-"},"content":"* 1a. The index is invalid."},{"lineNumber":1855,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1856,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1857,"author":{"gitID":"-"},"content":""},{"lineNumber":1858,"author":{"gitID":"-"},"content":"* 2a. No Internet Access."},{"lineNumber":1859,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1860,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1861,"author":{"gitID":"-"},"content":""},{"lineNumber":1862,"author":{"gitID":"-"},"content":"* 2b. Invalid client credential file."},{"lineNumber":1863,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1864,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1865,"author":{"gitID":"-"},"content":""},{"lineNumber":1866,"author":{"gitID":"-"},"content":"* 2c. Invalid user log in information."},{"lineNumber":1867,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1868,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1869,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1870,"author":{"gitID":"-"},"content":"* 3a. The index is valid but out of bound."},{"lineNumber":1871,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1872,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1873,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":1874,"author":{"gitID":"-"},"content":"// tag::answerusecase[]"},{"lineNumber":1875,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1876,"author":{"gitID":"iNekox3"},"content":"\u003d\u003d\u003d Use case: Answer a question and save"},{"lineNumber":1877,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1878,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1879,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1880,"author":{"gitID":"-"},"content":"1.  User requests to view the exercise tab of week X"},{"lineNumber":1881,"author":{"gitID":"-"},"content":"2.  ProgressChecker toggles to exercise tab and list week X\u0027s exercises"},{"lineNumber":1882,"author":{"gitID":"iNekox3"},"content":"3.  User requests to key in and save an answer to a question"},{"lineNumber":1883,"author":{"gitID":"-"},"content":"4.  ProgressChecker takes in input and saves"},{"lineNumber":1884,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1885,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1886,"author":{"gitID":"-"},"content":""},{"lineNumber":1887,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1888,"author":{"gitID":"-"},"content":""},{"lineNumber":1889,"author":{"gitID":"-"},"content":"* 1a. The given tab type is invalid."},{"lineNumber":1890,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1891,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1892,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":1893,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1894,"author":{"gitID":"-"},"content":""},{"lineNumber":1895,"author":{"gitID":"-"},"content":"* 1b. Specified week does not exist."},{"lineNumber":1896,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1897,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1898,"author":{"gitID":"-"},"content":"** 1b1. ProgressChecker shows an error message."},{"lineNumber":1899,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1900,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1901,"author":{"gitID":"-"},"content":""},{"lineNumber":1902,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1903,"author":{"gitID":"-"},"content":"* 2a. There are no exercises to be shown."},{"lineNumber":1904,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1905,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1906,"author":{"gitID":"-"},"content":""},{"lineNumber":1907,"author":{"gitID":"-"},"content":"* 3a. User did not provide a question index."},{"lineNumber":1908,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1909,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":1910,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":1911,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":1912,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1913,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1914,"author":{"gitID":"-"},"content":"* 3b. User did not provide an answer."},{"lineNumber":1915,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1916,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1917,"author":{"gitID":"-"},"content":"** 3b1. ProgressChecker shows an error message."},{"lineNumber":1918,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1919,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1920,"author":{"gitID":"-"},"content":""},{"lineNumber":1921,"author":{"gitID":"-"},"content":"* 3c. The given question index does not exists."},{"lineNumber":1922,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1923,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1924,"author":{"gitID":"-"},"content":"** 3c1. ProgressChecker shows an error message."},{"lineNumber":1925,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1926,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1927,"author":{"gitID":"-"},"content":"// end::answerusecase[]"},{"lineNumber":1928,"author":{"gitID":"-"},"content":""},{"lineNumber":1929,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1930,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Assign an issue to a teammate"},{"lineNumber":1931,"author":{"gitID":"-"},"content":""},{"lineNumber":1932,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":1933,"author":{"gitID":"-"},"content":""},{"lineNumber":1934,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1935,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Use case: Autocomplete a command"},{"lineNumber":1936,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1937,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1938,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1939,"author":{"gitID":"AdityaA1998"},"content":"1.  User types an incomplete command"},{"lineNumber":1940,"author":{"gitID":"AdityaA1998"},"content":"2.  User presses `tab` key to complete the command"},{"lineNumber":1941,"author":{"gitID":"AdityaA1998"},"content":"3.  ProgessChecker returns the completed command with dummy fields if there exists a specific format"},{"lineNumber":1942,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1943,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1944,"author":{"gitID":"-"},"content":""},{"lineNumber":1945,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1946,"author":{"gitID":"-"},"content":""},{"lineNumber":1947,"author":{"gitID":"AdityaA1998"},"content":"* 1a. Specified command does not exist."},{"lineNumber":1948,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1949,"author":{"gitID":"AdityaA1998"},"content":"[none]"},{"lineNumber":1950,"author":{"gitID":"AdityaA1998"},"content":"** 1a1. ProgressChecker doesn\u0027t do anything and waits for the right key/command to be entered."},{"lineNumber":1951,"author":{"gitID":"AdityaA1998"},"content":"** 1a2. It waits for the right letter to be pressed or the correct command to be entered."},{"lineNumber":1952,"author":{"gitID":"AdityaA1998"},"content":"+"},{"lineNumber":1953,"author":{"gitID":"AdityaA1998"},"content":"Use case resumes at step 1."},{"lineNumber":1954,"author":{"gitID":"-"},"content":""},{"lineNumber":1955,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1956,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete teammate"},{"lineNumber":1957,"author":{"gitID":"-"},"content":""},{"lineNumber":1958,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1959,"author":{"gitID":"-"},"content":""},{"lineNumber":1960,"author":{"gitID":"-"},"content":"1.  User requests to list teammates"},{"lineNumber":1961,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows a list of teammates"},{"lineNumber":1962,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific teammate in the list"},{"lineNumber":1963,"author":{"gitID":"-"},"content":"4.  ProgressChecker deletes the teammate"},{"lineNumber":1964,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1965,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1966,"author":{"gitID":"-"},"content":""},{"lineNumber":1967,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1968,"author":{"gitID":"-"},"content":""},{"lineNumber":1969,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1970,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1971,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1972,"author":{"gitID":"-"},"content":""},{"lineNumber":1973,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1974,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1975,"author":{"gitID":"-"},"content":""},{"lineNumber":1976,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":1977,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1978,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1979,"author":{"gitID":"-"},"content":""},{"lineNumber":1980,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1981,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Close an issue"},{"lineNumber":1982,"author":{"gitID":"-"},"content":""},{"lineNumber":1983,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":1984,"author":{"gitID":"-"},"content":""},{"lineNumber":1985,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":1986,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find teammate"},{"lineNumber":1987,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1988,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":1989,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1990,"author":{"gitID":"-"},"content":"1.  User types find"},{"lineNumber":1991,"author":{"gitID":"-"},"content":"2.  ProgressChecker automatically shows the list dynamically without the user needing to press enter key"},{"lineNumber":1992,"author":{"gitID":"-"},"content":"3.  User need not need to type the whole name, substrings will generate results"},{"lineNumber":1993,"author":{"gitID":"-"},"content":"4.  ProgressChecker displays the necessary results"},{"lineNumber":1994,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1995,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1996,"author":{"gitID":"-"},"content":""},{"lineNumber":1997,"author":{"gitID":"iNekox3"},"content":"*Extensions*"},{"lineNumber":1998,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":1999,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2000,"author":{"gitID":"-"},"content":"* 2a. The contact list is empty."},{"lineNumber":2001,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2002,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2003,"author":{"gitID":"-"},"content":""},{"lineNumber":2004,"author":{"gitID":"-"},"content":"* 3a. The given substring doesn\u0027t exist in any name"},{"lineNumber":2005,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2006,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2007,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":2008,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2009,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2010,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":2011,"author":{"gitID":"-"},"content":""},{"lineNumber":2012,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2013,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: List an issue"},{"lineNumber":2014,"author":{"gitID":"-"},"content":""},{"lineNumber":2015,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":2016,"author":{"gitID":"-"},"content":""},{"lineNumber":2017,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2018,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Mark a learning outcome as completed"},{"lineNumber":2019,"author":{"gitID":"-"},"content":""},{"lineNumber":2020,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2021,"author":{"gitID":"-"},"content":""},{"lineNumber":2022,"author":{"gitID":"-"},"content":"1.  User requests to list tasks(LOs)"},{"lineNumber":2023,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows a list of tasks(LOs)"},{"lineNumber":2024,"author":{"gitID":"-"},"content":"3.  User provides an index to requests to mark the corresponding LO in the list as completed"},{"lineNumber":2025,"author":{"gitID":"-"},"content":"4.  If this is the first google-task-relevant command used by the user in this session, user is requested to log in his/her google account"},{"lineNumber":2026,"author":{"gitID":"-"},"content":"5.  ProgressChecker executes command to mark the LO as completed in google tasks under the user\u0027s google account"},{"lineNumber":2027,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2028,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2029,"author":{"gitID":"-"},"content":""},{"lineNumber":2030,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2031,"author":{"gitID":"-"},"content":""},{"lineNumber":2032,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":2033,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2034,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2035,"author":{"gitID":"-"},"content":""},{"lineNumber":2036,"author":{"gitID":"-"},"content":"* 2b. The list has not been created yet (invalid list name)."},{"lineNumber":2037,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2038,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2039,"author":{"gitID":"-"},"content":""},{"lineNumber":2040,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":2041,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2042,"author":{"gitID":"-"},"content":""},{"lineNumber":2043,"author":{"gitID":"-"},"content":"** 3a1. ProgressChecker shows an error message."},{"lineNumber":2044,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2045,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2046,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":2047,"author":{"gitID":"iNekox3"},"content":"[discrete]"},{"lineNumber":2048,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Search for information"},{"lineNumber":2049,"author":{"gitID":"-"},"content":""},{"lineNumber":2050,"author":{"gitID":"-"},"content":"_{ to be added }_"},{"lineNumber":2051,"author":{"gitID":"-"},"content":""},{"lineNumber":2052,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2053,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Upload a photo for the profile"},{"lineNumber":2054,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":2055,"author":{"gitID":"iNekox3"},"content":"*MSS*"},{"lineNumber":2056,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":2057,"author":{"gitID":"-"},"content":"1.  User requests to view their profile"},{"lineNumber":2058,"author":{"gitID":"-"},"content":"2.  ProgressChecker shows the profile of the user"},{"lineNumber":2059,"author":{"gitID":"-"},"content":"3.  User requests to upload a new photo to the profile"},{"lineNumber":2060,"author":{"gitID":"-"},"content":"4.  ProgressChecker adds a new photo to the profile of user"},{"lineNumber":2061,"author":{"gitID":"-"},"content":"5.  Profile displays the new photo"},{"lineNumber":2062,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2063,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2064,"author":{"gitID":"-"},"content":""},{"lineNumber":2065,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2066,"author":{"gitID":"-"},"content":""},{"lineNumber":2067,"author":{"gitID":"-"},"content":"* 1a. Picture intented to add cannot be found."},{"lineNumber":2068,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":2069,"author":{"gitID":"iNekox3"},"content":"[none]"},{"lineNumber":2070,"author":{"gitID":"-"},"content":"** 1a1. ProgressChecker shows an error message."},{"lineNumber":2071,"author":{"gitID":"iNekox3"},"content":"+"},{"lineNumber":2072,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2073,"author":{"gitID":"-"},"content":""},{"lineNumber":2074,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2075,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":2076,"author":{"gitID":"-"},"content":""},{"lineNumber":2077,"author":{"gitID":"-"},"content":"This sections list the criteria needed for the system and software."},{"lineNumber":2078,"author":{"gitID":"-"},"content":""},{"lineNumber":2079,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":2080,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2081,"author":{"gitID":"-"},"content":".  The data cannot be retrieved from outside."},{"lineNumber":2082,"author":{"gitID":"-"},"content":".  The product may need 3-5 minutes to build up for the first time."},{"lineNumber":2083,"author":{"gitID":"-"},"content":".  User need to authenticate with their Google Tasks credentials."},{"lineNumber":2084,"author":{"gitID":"-"},"content":""},{"lineNumber":2085,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2086,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2087,"author":{"gitID":"-"},"content":""},{"lineNumber":2088,"author":{"gitID":"-"},"content":"[[Build-Automation]] Build Automation::"},{"lineNumber":2089,"author":{"gitID":"-"},"content":"Build automation is the process of automating the creation of a software build and the associated processes including: compiling computer source code into binary code, packaging binary code, and running automated tests."},{"lineNumber":2090,"author":{"gitID":"-"},"content":""},{"lineNumber":2091,"author":{"gitID":"-"},"content":"[[Gradle]] Gradle::"},{"lineNumber":2092,"author":{"gitID":"-"},"content":"Gradle is an open-source build automation system."},{"lineNumber":2093,"author":{"gitID":"-"},"content":""},{"lineNumber":2094,"author":{"gitID":"-"},"content":"[[GUI]] GUI::"},{"lineNumber":2095,"author":{"gitID":"-"},"content":"Graphical User Interface."},{"lineNumber":2096,"author":{"gitID":"-"},"content":""},{"lineNumber":2097,"author":{"gitID":"-"},"content":"[[Learning-Outcomes (LO)]] Learning Outcomes::"},{"lineNumber":2098,"author":{"gitID":"-"},"content":"Exercises that need to be done through GitHub for module CS2103/T."},{"lineNumber":2099,"author":{"gitID":"-"},"content":""},{"lineNumber":2100,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":2101,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, MAC-OS(OS-X)."},{"lineNumber":2102,"author":{"gitID":"-"},"content":""},{"lineNumber":2103,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":2104,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others."},{"lineNumber":2105,"author":{"gitID":"-"},"content":""},{"lineNumber":2106,"author":{"gitID":"-"},"content":"[[sequence-diagram]] Sequence Diagram::"},{"lineNumber":2107,"author":{"gitID":"-"},"content":"A \u003c\u003csequence diagram,sequence diagram\u003e\u003e shows object interactions shown in time sequence."},{"lineNumber":2108,"author":{"gitID":"-"},"content":""},{"lineNumber":2109,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2110,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":2111,"author":{"gitID":"-"},"content":""},{"lineNumber":2112,"author":{"gitID":"-"},"content":"You may want to do manual testing to familiarise yourself with the software. Given below are instructions to test the app manually."},{"lineNumber":2113,"author":{"gitID":"-"},"content":""},{"lineNumber":2114,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2115,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":2116,"author":{"gitID":"-"},"content":""},{"lineNumber":2117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":2118,"author":{"gitID":"-"},"content":""},{"lineNumber":2119,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":2120,"author":{"gitID":"-"},"content":""},{"lineNumber":2121,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":2122,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":2123,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":2124,"author":{"gitID":"-"},"content":""},{"lineNumber":2125,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":2126,"author":{"gitID":"-"},"content":""},{"lineNumber":2127,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":2128,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":2129,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":2130,"author":{"gitID":"-"},"content":""},{"lineNumber":2131,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a teammate"},{"lineNumber":2132,"author":{"gitID":"-"},"content":""},{"lineNumber":2133,"author":{"gitID":"-"},"content":". Deleting a teammate while all teammates are listed"},{"lineNumber":2134,"author":{"gitID":"-"},"content":""},{"lineNumber":2135,"author":{"gitID":"-"},"content":".. Prerequisites: List all teammates using the `list` command. Multiple teammates in the list."},{"lineNumber":2136,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":2137,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":2138,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":2139,"author":{"gitID":"-"},"content":"   Expected: No teammate is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2140,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":2141,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2142,"author":{"gitID":"-"},"content":""},{"lineNumber":2143,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Log into Github"},{"lineNumber":2144,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2145,"author":{"gitID":"AdityaA1998"},"content":". Logging in to github when not not logged in"},{"lineNumber":2146,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2147,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User shouldn\u0027t have logged into github"},{"lineNumber":2148,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `gitlogin gu/USERNAME pc/PASSCODE r/REPOSITORY` +"},{"lineNumber":2149,"author":{"gitID":"AdityaA1998"},"content":"   Expected: You have successfully logged into github!"},{"lineNumber":2150,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `gitlogin gu/WRONG_USERNAME pc/PASSCODE r/REPOSITORY` +"},{"lineNumber":2151,"author":{"gitID":"AdityaA1998"},"content":"   Expected: Enter correct username and password. +"},{"lineNumber":2152,"author":{"gitID":"AdityaA1998"},"content":".. Other incorrect gitlogin commands to try: `gitlogin`, +"},{"lineNumber":2153,"author":{"gitID":"AdityaA1998"},"content":"   Expected: Invalid command format."},{"lineNumber":2154,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2155,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Create an issue on github"},{"lineNumber":2156,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2157,"author":{"gitID":"AdityaA1998"},"content":". Create issue on github after logging in"},{"lineNumber":2158,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2159,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should have logged into github with correct repository"},{"lineNumber":2160,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `+issue ti/Test b/test body ms/v1.1 a/johndoe l/bug` +"},{"lineNumber":2161,"author":{"gitID":"AdityaA1998"},"content":"  Expected: You have successfully created an issue on github!"},{"lineNumber":2162,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `+issue ti/Test b/test body ms/INVALID_MILESTONE a/johndoe l/bug` +"},{"lineNumber":2163,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Enter correct milestone. +"},{"lineNumber":2164,"author":{"gitID":"AdityaA1998"},"content":".. Other incorrect +issue commands to try: `+issue`, +"},{"lineNumber":2165,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Invalid command format."},{"lineNumber":2166,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2167,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Edit an issue on github"},{"lineNumber":2168,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2169,"author":{"gitID":"AdityaA1998"},"content":". Edit issue on github after logging in"},{"lineNumber":2170,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2171,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should have logged into github with correct repository"},{"lineNumber":2172,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `editissue 123 ti/Test b/test body ms/v1.1 a/johndoe l/bug` +"},{"lineNumber":2173,"author":{"gitID":"AdityaA1998"},"content":"  Expected: You have successfully editted an issue on github!"},{"lineNumber":2174,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `editissue 99999 ti/Test b/test body ms/v1.1 a/johndoe l/bug` +"},{"lineNumber":2175,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Issue not edited. Enter correct index number. +"},{"lineNumber":2176,"author":{"gitID":"AdityaA1998"},"content":".. Other incorrect editissue commands to try: `editissue`, +"},{"lineNumber":2177,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Invalid command format."},{"lineNumber":2178,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2179,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Close an issue on github"},{"lineNumber":2180,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2181,"author":{"gitID":"AdityaA1998"},"content":". Close an issue on github after logging in"},{"lineNumber":2182,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2183,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should have logged into github with correct repository"},{"lineNumber":2184,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `-issue 37` +"},{"lineNumber":2185,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Issue #37 has successfully been closed!"},{"lineNumber":2186,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `-issue 9999` +"},{"lineNumber":2187,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Issue not closed. Enter correct index number. +"},{"lineNumber":2188,"author":{"gitID":"AdityaA1998"},"content":".. Other incorrect close issue commands to try: `-issue 3 text`, +"},{"lineNumber":2189,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Invalid command format."},{"lineNumber":2190,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2191,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Reopen an issue on github"},{"lineNumber":2192,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2193,"author":{"gitID":"AdityaA1998"},"content":". Reopen an issue on github after logging in"},{"lineNumber":2194,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2195,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should have logged into github with correct repository"},{"lineNumber":2196,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `reopenissue 37` +"},{"lineNumber":2197,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Issue #37 has successfully been reopened!"},{"lineNumber":2198,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `reopenissue 9999` +"},{"lineNumber":2199,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Issue not reopened. Enter correct index number. +"},{"lineNumber":2200,"author":{"gitID":"AdityaA1998"},"content":".. Other incorrect reopen issue commands to try: `reopen 3 text`, +"},{"lineNumber":2201,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Invalid command format."},{"lineNumber":2202,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2203,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d List issues on github"},{"lineNumber":2204,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2205,"author":{"gitID":"AdityaA1998"},"content":". List issues on github after logging in"},{"lineNumber":2206,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2207,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should have logged into github with correct repository"},{"lineNumber":2208,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `listissues OPEN` +"},{"lineNumber":2209,"author":{"gitID":"AdityaA1998"},"content":"  Expected: All open issues are listed!"},{"lineNumber":2210,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `listissues ssxss` +"},{"lineNumber":2211,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Enter correct state value. +"},{"lineNumber":2212,"author":{"gitID":"AdityaA1998"},"content":".. Other incorrect list issues commands to try: `listissues`, +"},{"lineNumber":2213,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Invalid command format."},{"lineNumber":2214,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2215,"author":{"gitID":"AdityaA1998"},"content":"\u003d\u003d\u003d Logout of Github"},{"lineNumber":2216,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2217,"author":{"gitID":"AdityaA1998"},"content":". Log out of github after logging in"},{"lineNumber":2218,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":2219,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should have logged into github with correct repository"},{"lineNumber":2220,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `gitlogout` +"},{"lineNumber":2221,"author":{"gitID":"AdityaA1998"},"content":"  Expected: You have successfully logged out of github!"},{"lineNumber":2222,"author":{"gitID":"AdityaA1998"},"content":".. Prerequisites: User should not have logged into github"},{"lineNumber":2223,"author":{"gitID":"AdityaA1998"},"content":".. Test case: `gitlogout` +"},{"lineNumber":2224,"author":{"gitID":"AdityaA1998"},"content":"  Expected: Please log into github first to logout. +"},{"lineNumber":2225,"author":{"gitID":"-"},"content":""},{"lineNumber":2226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":2227,"author":{"gitID":"-"},"content":""},{"lineNumber":2228,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":2229,"author":{"gitID":"-"},"content":""},{"lineNumber":2230,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":2231,"author":{"gitID":"-"},"content":""},{"lineNumber":2232,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":2233,"author":{"gitID":"-"},"content":""},{"lineNumber":2234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Toggling a tab view"},{"lineNumber":2235,"author":{"gitID":"-"},"content":""},{"lineNumber":2236,"author":{"gitID":"-"},"content":". Navigate to another tab view"},{"lineNumber":2237,"author":{"gitID":"-"},"content":""},{"lineNumber":2238,"author":{"gitID":"-"},"content":".. Test case: `view exercise` +"},{"lineNumber":2239,"author":{"gitID":"-"},"content":"   Expected: UI toggles the tab view to the Exercise tab. A list of exercises should be displayed."},{"lineNumber":2240,"author":{"gitID":"-"},"content":".. Test case: `view exercise 5` +"},{"lineNumber":2241,"author":{"gitID":"-"},"content":"   Expected: UI toggles the tab view to the Exercise tab. Week 5\u0027s list of exercises should be displayed."},{"lineNumber":2242,"author":{"gitID":"-"},"content":".. Test case: `view invalidtype` +"},{"lineNumber":2243,"author":{"gitID":"-"},"content":"   Expected: No such tab found. Error details shown in the status message."},{"lineNumber":2244,"author":{"gitID":"-"},"content":".. Other incorrect view commands to try: `view`, `view exercise x` (where x is an input not within 2 to 11 (inclusive) +"},{"lineNumber":2245,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2246,"author":{"gitID":"-"},"content":""},{"lineNumber":2247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Answering an exercise"},{"lineNumber":2248,"author":{"gitID":"-"},"content":""},{"lineNumber":2249,"author":{"gitID":"-"},"content":". Answer an exercise and see the suggested answer"},{"lineNumber":2250,"author":{"gitID":"-"},"content":""},{"lineNumber":2251,"author":{"gitID":"-"},"content":".. Prerequisites: UI view is on the Exercise tab, showing week 11\u0027s exercises."},{"lineNumber":2252,"author":{"gitID":"-"},"content":".. Test case: `ans 11.1.1 a` +"},{"lineNumber":2253,"author":{"gitID":"-"},"content":"   Expected: Question index 11.1.1 turns green. Answer `a` is reflected under \"Your Answer\" and suggested answer for question index 11.1.1 is revealed."},{"lineNumber":2254,"author":{"gitID":"-"},"content":".. Test case: `view 11` +"},{"lineNumber":2255,"author":{"gitID":"-"},"content":"   Expected: Given question index does not exist. Error details shown in the status message."},{"lineNumber":2256,"author":{"gitID":"-"},"content":".. Other incorrect answer commands to try: `ans`, `ans 11.2` +"},{"lineNumber":2257,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2258,"author":{"gitID":"-"},"content":""},{"lineNumber":2259,"author":{"gitID":"-"},"content":"Back to \u003c\u003cSetting up,TOP\u003e\u003e"}],"authorContributionMap":{"AdityaA1998":303,"iNekox3":34,"-":1922}},{"path":"src/test/java/seedu/progresschecker/ui/testutil/EventsCollectorRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Sets up an {@code EventsCollector} and tears it down after each test."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EventsCollectorRule implements TestRule {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final EventsCollector eventsCollector \u003d new EventsCollector();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * A class that collects events raised by other classes."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public class EventsCollector {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        public EventsCollector() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * Collects any event raised by any class"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        @Subscribe"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        public void collectEvent(BaseEvent event) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            events.add(event);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * Removes collected events from the collected list"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        public void reset() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            events.clear();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        public int getSize() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return events.size();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * Returns the most recent event collected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        public BaseEvent getMostRecent() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            if (events.isEmpty()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return events.get(events.size() - 1);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"        //@@author adityaa1998"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"         * Returns the second last event collected"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        public BaseEvent getSecondLast() {"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"            if (events.isEmpty()) {"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"                return null;"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"            return events.get(events.size() - 2);"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"        //@@author"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * Returns true if the collector did not receive any events"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public boolean isEmpty() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return events.isEmpty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":13,"-":86}},{"path":"src/test/java/seedu/progresschecker/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadTaskEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadUrlEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    private static final String webpage \u003d \"\u003c!DOCTYPE html\u003e\\n\""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003chtml\u003e\\n\""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003chead\u003e\\n\""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"            + \"    \u003c!-- \u003clink rel\u003d\\\"stylesheet\\\" href\u003d\\\"DarkTheme.css\\\"\u003e --\u003e\\n\""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003c/head\u003e\\n\""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"            + \"\\n\""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003cbody class\u003d\\\"background\\\"\u003e\\n\""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003c/body\u003e\\n\""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003c/html\u003e\";"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    private LoadUrlEvent loadUrlEventStub;"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    private LoadTaskEvent loadTaskEventStub;"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        loadTaskEventStub \u003d new LoadTaskEvent(webpage);"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        String expectedUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE).toString();"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        loadUrlEventStub \u003d new LoadUrlEvent(expectedUrl);"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    public void display() throws Exception {"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        // default web page"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"        // associated web page of a person"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        postNow(loadTaskEventStub);"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"        String expectedTitle \u003d null;"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedTitle, browserPanelHandle.getLoadedTitle());"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        postNow(loadUrlEventStub);"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        URL expectedUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);;"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":50,"-":21}},{"path":"src/test/java/seedu/progresschecker/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":158}},{"path":"src/test/java/seedu/progresschecker/ui/Browser2PanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowser2Loaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.Browser2Panel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.Browser2PanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadBarEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"public class Browser2PanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    private static final String webpage \u003d \"\u003c!DOCTYPE html\u003e\\n\""},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003chtml\u003e\\n\""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003chead\u003e\\n\""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            + \"    \u003c!-- \u003clink rel\u003d\\\"stylesheet\\\" href\u003d\\\"DarkTheme.css\\\"\u003e --\u003e\\n\""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003c/head\u003e\\n\""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            + \"\\n\""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003cbody class\u003d\\\"background\\\"\u003e\\n\""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003c/body\u003e\\n\""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"            + \"\u003c/html\u003e\";"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    private Browser2Panel browser2Panel;"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    private Browser2PanelHandle browser2PanelHandle;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    private LoadBarEvent loadBarEventStub;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        loadBarEventStub \u003d new LoadBarEvent(webpage);"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        guiRobot.interact(() -\u003e browser2Panel \u003d new Browser2Panel());"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        uiPartRule.setUiPart(browser2Panel);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"        browser2PanelHandle \u003d new Browser2PanelHandle(browser2Panel.getRoot());"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    public void display() throws Exception {"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        // default web page"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedDefaultPageUrl, browser2PanelHandle.getLoadedUrl());"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        postNow(loadBarEventStub);"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        String expectedTitle \u003d null;"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        waitUntilBrowser2Loaded(browser2PanelHandle);"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedTitle, browser2PanelHandle.getLoadedTitle());"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":40,"-":17}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ReopenIssueCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_ISSUE;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    private ReopenIssueCommandParser parser \u003d new ReopenIssueCommandParser();"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_validArgs_returnsReopenIssueCommand() {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, \"1\", new ReopenIssueCommand(INDEX_ISSUE));"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"                ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":22,"-":5}},{"path":"src/test/java/seedu/progresschecker/logic/parser/CloseIssueCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_ISSUE;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    private CloseIssueCommandParser parser \u003d new CloseIssueCommandParser();"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_validArgs_returnsCloseIssueCommand() {"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, \"1\", new CloseIssueCommand(INDEX_ISSUE));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":16,"-":9}},{"path":"src/test/java/seedu/progresschecker/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, \"1\" + INVALID_USERNAME_DESC,"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"                GithubUsername.MESSAGE_USERNAME_CONSTRAINTS); // invalid username"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MAJOR_DESC, Major.MESSAGE_MAJOR_CONSTRAINTS); // invalid major"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, \"1\" + INVALID_YEAR_DESC, Year.MESSAGE_YEAR_CONSTRAINTS); // invalid year"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + INVALID_USERNAME_DESC"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                 + VALID_MAJOR_AMY + VALID_PHONE_AMY + VALID_YEAR_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + USERNAME_DESC_AMY"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + MAJOR_DESC_AMY + YEAR_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withUsername(VALID_USERNAME_AMY)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_AMY).withYear(VALID_YEAR_AMY)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        // username"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"        userInput \u003d targetIndex.getOneBased() + USERNAME_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withUsername(VALID_USERNAME_AMY).build();"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        // major"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"        userInput \u003d targetIndex.getOneBased() + MAJOR_DESC_AMY;"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withMajor(VALID_MAJOR_AMY).build();"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + MAJOR_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + MAJOR_DESC_AMY + EMAIL_DESC_AMY + YEAR_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_AMY + USERNAME_DESC_BOB;"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB).withTags("},{"lineNumber":210,"author":{"gitID":"-"},"content":"                VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + USERNAME_DESC_BOB"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + PHONE_DESC_BOB;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_BOB).withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB).build();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":19,"-":225}},{"path":"src/test/java/seedu/progresschecker/logic/parser/GoToTaskUrlCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_CHARSET;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_NEGATIVE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_ZERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GoToTaskUrlCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"public class GoToTaskUrlCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    private GoToTaskUrlCommandParser parser \u003d new GoToTaskUrlCommandParser();"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_validArgsFirstTask_returnsGoToTaskUrlCommand() {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, INDEX_FIRST_TASK, new GoToTaskUrlCommand(INDEX_FIRST_TASK_INT));"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsNegative_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_NEGATIVE, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"                GoToTaskUrlCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsZero_throwsParseException() {"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_ZERO, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"                GoToTaskUrlCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsCharset_throwsParseException() {"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_CHARSET, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"                GoToTaskUrlCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":28,"-":15}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ProgressCheckerParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTabTypes.TYPE_EXERCISE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COMPULSORY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COM_INT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK_INT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddDefaultTasksCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ExitCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GoToTaskUrlCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HelpCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HistoryCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonUtil;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class ProgressCheckerParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final ProgressCheckerParser parser \u003d new ProgressCheckerParser();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"    public void parseCommand_addDefaultTasks() throws Exception {"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(parser.parseCommand(AddDefaultTasksCommand.COMMAND_WORD) instanceof AddDefaultTasksCommand);"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(parser.parseCommand(AddDefaultTasksCommand.COMMAND_WORD"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"                + \" 3\") instanceof AddDefaultTasksCommand);"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(parser.parseCommand(AddDefaultTasksCommand.COMMAND_ALIAS) instanceof AddDefaultTasksCommand);"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(parser.parseCommand(AddDefaultTasksCommand.COMMAND_ALIAS"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"                + \" 3\") instanceof AddDefaultTasksCommand);"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"    public void parseCommand_completeTask() throws Exception {"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand command \u003d (CompleteTaskCommand) parser.parseCommand("},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"                CompleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK);"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new CompleteTaskCommand(INDEX_FIRST_TASK_INT), command);"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand command2 \u003d (CompleteTaskCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"                CompleteTaskCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK);"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new CompleteTaskCommand(INDEX_FIRST_TASK_INT), command2);"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"    public void parseCommand_resetTask() throws Exception {"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand command \u003d (ResetTaskCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"                ResetTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK);"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new ResetTaskCommand(INDEX_FIRST_TASK_INT), command);"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand command2 \u003d (ResetTaskCommand) parser.parseCommand("},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"                ResetTaskCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK);"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new ResetTaskCommand(INDEX_FIRST_TASK_INT), command2);"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"    public void parseCommand_goToTaskUrl() throws Exception {"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand command \u003d (GoToTaskUrlCommand) parser.parseCommand("},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"                GoToTaskUrlCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK);"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new GoToTaskUrlCommand(INDEX_FIRST_TASK_INT), command);"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand command2 \u003d (GoToTaskUrlCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"                GoToTaskUrlCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK);"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new GoToTaskUrlCommand(INDEX_FIRST_TASK_INT), command2);"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"    public void parseCommand_viewTaskList() throws Exception {"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand command \u003d (ViewTaskListCommand) parser.parseCommand("},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand.COMMAND_WORD + \" \" + FIRST_WEEK);"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new ViewTaskListCommand(FIRST_WEEK_INT), command);"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand command2 \u003d (ViewTaskListCommand) parser.parseCommand("},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand.COMMAND_ALIAS + \" \" + COMPULSORY);"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(new ViewTaskListCommand(COM_INT), command2);"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":125,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":148,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":180,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":197,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"iNekox3"},"content":"    public void parseCommand_view() throws Exception {"},{"lineNumber":199,"author":{"gitID":"iNekox3"},"content":"        ViewCommand command \u003d (ViewCommand) parser.parseCommand("},{"lineNumber":200,"author":{"gitID":"iNekox3"},"content":"                ViewCommand.COMMAND_WORD + \" \" + TYPE_EXERCISE + \" 11 true\");"},{"lineNumber":201,"author":{"gitID":"iNekox3"},"content":"        assertEquals(new ViewCommand(TYPE_EXERCISE, 11, true), command);"},{"lineNumber":202,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":204,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":51,"iNekox3":9,"-":158}},{"path":"src/test/java/seedu/progresschecker/logic/parser/GitLoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.GITHUB_DESC_PASSCODE_ONE;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.GITHUB_DESC_PASSCODE_TWO;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.GITHUB_DESC_REPO_ONE;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.GITHUB_DESC_REPO_TWO;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.GITHUB_DESC_USERNAME_ONE;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.GITHUB_DESC_USERNAME_TWO;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_GITHUB_PASSCODE_DESC;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_GITHUB_REPO_DESC;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_GITHUB_USERNAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_GITHUB_PASSCODE_ONE;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_GITHUB_REPO_ONE;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_GITHUB_USERNAME_ONE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Passcode;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Repository;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Username;"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"public class GitLoginCommandParserTest {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    private GitLoginCommandParser parser \u003d new GitLoginCommandParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails expectedGitDetails \u003d new GitDetailsBuilder().withRepository(VALID_GITHUB_REPO_ONE)"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"                .withUsername(VALID_GITHUB_USERNAME_ONE)"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"                .withPasscode(VALID_GITHUB_PASSCODE_ONE).build();"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        // whitespace only preamble"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GITHUB_DESC_REPO_ONE + GITHUB_DESC_USERNAME_ONE"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"                        + GITHUB_DESC_PASSCODE_ONE,"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"                new GitLoginCommand(expectedGitDetails));"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        // multiple repos - last repo accepted"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, GITHUB_DESC_REPO_TWO + GITHUB_DESC_REPO_ONE"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"                        + GITHUB_DESC_PASSCODE_ONE + GITHUB_DESC_USERNAME_ONE,"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"                new GitLoginCommand(expectedGitDetails));"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        // multiple passcodes - last body accepted"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, GITHUB_DESC_REPO_ONE + GITHUB_DESC_PASSCODE_TWO"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                        + GITHUB_DESC_PASSCODE_ONE + GITHUB_DESC_USERNAME_ONE,"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                new GitLoginCommand(expectedGitDetails));"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        // multiple username - last username accepted"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, GITHUB_DESC_REPO_ONE + GITHUB_DESC_PASSCODE_ONE"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"                        + GITHUB_DESC_USERNAME_TWO + GITHUB_DESC_USERNAME_ONE,"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"                new GitLoginCommand(expectedGitDetails));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GitLoginCommand.MESSAGE_USAGE);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        //missing repository"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, GITHUB_DESC_USERNAME_ONE + GITHUB_DESC_PASSCODE_ONE, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        //missing username"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, GITHUB_DESC_REPO_ONE + GITHUB_DESC_PASSCODE_ONE, expectedMessage);"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        //missing passcode"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, GITHUB_DESC_USERNAME_ONE + GITHUB_DESC_REPO_ONE, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"        //invalid repository"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, INVALID_GITHUB_REPO_DESC + GITHUB_DESC_USERNAME_ONE + GITHUB_DESC_PASSCODE_ONE,"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"                Repository.MESSAGE_REPOSITORY_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"        //invalid username"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, GITHUB_DESC_REPO_ONE + INVALID_GITHUB_USERNAME_DESC + GITHUB_DESC_PASSCODE_ONE,"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"                Username.MESSAGE_GITUSERNAME_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"        //invalid passcode"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, GITHUB_DESC_REPO_ONE + GITHUB_DESC_USERNAME_ONE + INVALID_GITHUB_PASSCODE_DESC,"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"                Passcode.MESSAGE_PASSCODE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":69,"-":21}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.ASTERISK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.ASTERISK_INT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COM;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COMPULSORY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COM_INT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.DEFAULT_LIST_TITLE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK_INT;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_CHARSET;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_DOUBLE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_MULTIPLE_ARGS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_NEGATIVE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_TITLE;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_ZERO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.LAST_WEEK;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.LAST_WEEK_INT;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.OUT_OF_BOUND_WEEK;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.SUB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.SUBMISSION;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.SUB_INT;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.VALID_TITLE_EDGE;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String INVALID_MAJOR \u003d \" \";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final String INVALID_USERNAME \u003d \"R@chelGithub\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final String VALID_MAJOR \u003d \"Computer Science\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private static final String VALID_USERNAME \u003d \"RachelGithub\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskIndex_invalidInputZero_throwsIllegalValueException() throws Exception {"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskIndex(INVALID_ZERO);"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskIndex_invalidInputNegative_throwsIllegalValueException() throws Exception {"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskIndex(INVALID_NEGATIVE);"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskIndex_invalidInputNotInteger_throwsIllegalValueException() throws Exception {"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskIndex(INVALID_DOUBLE);"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskIndex_invalidInputNotNumber_throwsIllegalValueException() throws Exception {"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskIndex(INVALID_CHARSET);"},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskIndex_invalidInputMultipleArgs_throwsIllegalValueException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskIndex(INVALID_MULTIPLE_ARGS);"},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskIndex_validInput_success() throws Exception {"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(INDEX_FIRST_TASK_INT, ParserUtil.parseTaskIndex(INDEX_FIRST_TASK));"},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(INDEX_FIRST_TASK_INT, ParserUtil.parseTaskIndex(\" \" + INDEX_FIRST_TASK + \" \"));"},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_invalidInputOutOfBound_throwsIllegalValueException() throws Exception {"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskWeek(OUT_OF_BOUND_WEEK);"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_invalidInputZero_throwsIllegalValueException() throws Exception {"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskWeek(INVALID_ZERO);"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_invalidInputNegative_throwsIllegalValueException() throws Exception {"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskWeek(INVALID_NEGATIVE);"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_invalidInputNotInteger_throwsIllegalValueException() throws Exception {"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskWeek(INVALID_DOUBLE);"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_invalidInputNotNumber_throwsIllegalValueException() throws Exception {"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskWeek(INVALID_CHARSET);"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_invalidInputMultipleArgs_throwsIllegalValueException() throws Exception {"},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskWeek(INVALID_MULTIPLE_ARGS);"},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_validInputFirstWeek_success() throws Exception {"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(FIRST_WEEK_INT, ParserUtil.parseTaskWeek(FIRST_WEEK));"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(FIRST_WEEK_INT, ParserUtil.parseTaskWeek(\" \" + FIRST_WEEK + \" \"));"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_validInputLastWeek_success() throws Exception {"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(LAST_WEEK_INT, ParserUtil.parseTaskWeek(LAST_WEEK));"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(LAST_WEEK_INT, ParserUtil.parseTaskWeek(\" \" + LAST_WEEK + \" \"));"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_validInputAsterisk_success() throws Exception {"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(ASTERISK_INT, ParserUtil.parseTaskWeek(ASTERISK));"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(ASTERISK_INT, ParserUtil.parseTaskWeek(\" \" + ASTERISK + \" \"));"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_validInputCom_success() throws Exception {"},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(COM_INT, ParserUtil.parseTaskWeek(COMPULSORY));"},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":203,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":204,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(COM_INT, ParserUtil.parseTaskWeek(\" \" + COMPULSORY + \" \"));"},{"lineNumber":205,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":206,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces-alias"},{"lineNumber":207,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(COM_INT, ParserUtil.parseTaskWeek(COM));"},{"lineNumber":208,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":209,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces-alias"},{"lineNumber":210,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(COM_INT, ParserUtil.parseTaskWeek(\" \" + COM + \" \"));"},{"lineNumber":211,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":213,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskWeek_validInputSub_success() throws Exception {"},{"lineNumber":215,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(SUB_INT, ParserUtil.parseTaskWeek(SUBMISSION));"},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(SUB_INT, ParserUtil.parseTaskWeek(\" \" + SUBMISSION + \" \"));"},{"lineNumber":220,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":221,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces-alias"},{"lineNumber":222,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(SUB_INT, ParserUtil.parseTaskWeek(SUB));"},{"lineNumber":223,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":224,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces-alias"},{"lineNumber":225,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(SUB_INT, ParserUtil.parseTaskWeek(\" \" + SUB + \" \"));"},{"lineNumber":226,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":228,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskTitle_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"EdwardKSG"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"EdwardKSG"},"content":"        ParserUtil.parseTaskTitle(INVALID_TITLE);"},{"lineNumber":232,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":234,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"EdwardKSG"},"content":"    public void parseTaskTitle_validInput_success() throws Exception {"},{"lineNumber":236,"author":{"gitID":"EdwardKSG"},"content":"        // No whitespaces"},{"lineNumber":237,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(DEFAULT_LIST_TITLE, ParserUtil.parseTaskTitle(DEFAULT_LIST_TITLE));"},{"lineNumber":238,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":239,"author":{"gitID":"EdwardKSG"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":240,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(DEFAULT_LIST_TITLE, ParserUtil.parseTaskTitle(\" \" + DEFAULT_LIST_TITLE + \" \"));"},{"lineNumber":241,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":242,"author":{"gitID":"EdwardKSG"},"content":"        // Valid length without leading and trailing whitespaces, but exceeds limit after having these spaces"},{"lineNumber":243,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(VALID_TITLE_EDGE, ParserUtil.parseTaskTitle(\" \" + VALID_TITLE_EDGE + \" \"));"},{"lineNumber":244,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":312,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_null_throwsNullPointerException() {"},{"lineNumber":314,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((String) null));"},{"lineNumber":315,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((Optional\u003cString\u003e) null));"},{"lineNumber":316,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":318,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_invalidValue_throwsIllegalValueException() {"},{"lineNumber":320,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUsername(INVALID_USERNAME));"},{"lineNumber":321,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUsername("},{"lineNumber":322,"author":{"gitID":"EdwardKSG"},"content":"                Optional.of(INVALID_USERNAME)));"},{"lineNumber":323,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":325,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":326,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":327,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(ParserUtil.parseUsername(Optional.empty()).isPresent());"},{"lineNumber":328,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":330,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":331,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_validValueWithoutWhitespace_returnsUsername() throws Exception {"},{"lineNumber":332,"author":{"gitID":"EdwardKSG"},"content":"        GithubUsername expectedUsername \u003d new GithubUsername(VALID_USERNAME);"},{"lineNumber":333,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedUsername, ParserUtil.parseUsername(VALID_USERNAME));"},{"lineNumber":334,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedUsername), ParserUtil.parseUsername(Optional.of(VALID_USERNAME)));"},{"lineNumber":335,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":337,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":338,"author":{"gitID":"EdwardKSG"},"content":"    public void parseUsername_validValueWithWhitespace_returnsTrimmedUsername() throws Exception {"},{"lineNumber":339,"author":{"gitID":"EdwardKSG"},"content":"        String usernameWithWhitespace \u003d WHITESPACE + VALID_USERNAME + WHITESPACE;"},{"lineNumber":340,"author":{"gitID":"EdwardKSG"},"content":"        GithubUsername expectedUsername \u003d new GithubUsername(VALID_USERNAME);"},{"lineNumber":341,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedUsername, ParserUtil.parseUsername(usernameWithWhitespace));"},{"lineNumber":342,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedUsername), ParserUtil.parseUsername(Optional.of(usernameWithWhitespace)));"},{"lineNumber":343,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":345,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":346,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":347,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_null_throwsNullPointerException() {"},{"lineNumber":348,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor((String) null));"},{"lineNumber":349,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMajor((Optional\u003cString\u003e) null));"},{"lineNumber":350,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":352,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":353,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_invalidValue_throwsIllegalValueException() {"},{"lineNumber":354,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMajor(INVALID_MAJOR));"},{"lineNumber":355,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMajor(Optional.of(INVALID_MAJOR)));"},{"lineNumber":356,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":358,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":360,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(ParserUtil.parseMajor(Optional.empty()).isPresent());"},{"lineNumber":361,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":363,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":364,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_validValueWithoutWhitespace_returnsMajor() throws Exception {"},{"lineNumber":365,"author":{"gitID":"EdwardKSG"},"content":"        Major expectedMajor \u003d new Major(VALID_MAJOR);"},{"lineNumber":366,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedMajor, ParserUtil.parseMajor(VALID_MAJOR));"},{"lineNumber":367,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedMajor), ParserUtil.parseMajor(Optional.of(VALID_MAJOR)));"},{"lineNumber":368,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":370,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":371,"author":{"gitID":"EdwardKSG"},"content":"    public void parseMajor_validValueWithWhitespace_returnsTrimmedMajor() throws Exception {"},{"lineNumber":372,"author":{"gitID":"EdwardKSG"},"content":"        String majorWithWhitespace \u003d WHITESPACE + VALID_MAJOR + WHITESPACE;"},{"lineNumber":373,"author":{"gitID":"EdwardKSG"},"content":"        Major expectedMajor \u003d new Major(VALID_MAJOR);"},{"lineNumber":374,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expectedMajor, ParserUtil.parseMajor(majorWithWhitespace));"},{"lineNumber":375,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(Optional.of(expectedMajor), ParserUtil.parseMajor(Optional.of(majorWithWhitespace)));"},{"lineNumber":376,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":388,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":389,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":393,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":394,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":397,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":398,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":399,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":400,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":405,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":407,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":408,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":409,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":412,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":413,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":414,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":415,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":418,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":419,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":420,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":421,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":424,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":425,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":426,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":427,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":431,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":432,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":433,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":434,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":437,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":439,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":443,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":444,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":445,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":449,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":450,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":451,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":454,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":455,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":456,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":459,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":460,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":218,"-":242}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ResetTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_CHARSET;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_NEGATIVE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_ZERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"public class ResetTaskCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    private ResetTaskCommandParser parser \u003d new ResetTaskCommandParser();"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_validArgsFirstTask_returnsResetTaskCommand() {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, INDEX_FIRST_TASK, new ResetTaskCommand(INDEX_FIRST_TASK_INT));"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsNegative_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_NEGATIVE, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"                ResetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsZero_throwsParseException() {"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_ZERO, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"                ResetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsCharset_throwsParseException() {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_CHARSET, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"                ResetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":27,"-":15}},{"path":"src/test/java/seedu/progresschecker/logic/parser/CreateIssueCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.ASSIGNEE_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.ASSIGNEE_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.BODY_DESC_ONE;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.BODY_DESC_TWO;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_ASSIGNEE_DESC;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_BODY_DESC;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_LABEL_DESC;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.LABEL_DEC_STORY;"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.LABEL_DEC_TASK;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MILESTONE_DESC_ONE;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MILESTONE_DESC_TWO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TITLE_DESC_ONE;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TITLE_DESC_TWO;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_ASSIGNEE_AMY;"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_ASSIGNEE_BOB;"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_BODY_ONE;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_LABEL_STORY;"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_LABEL_TASK;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MILESTONE_ONE;"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TITLE_ONE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssueCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.IssueBuilder;"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueCommandParserTest {"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    private CreateIssueParser parser \u003d new CreateIssueParser();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssue \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE).withAssignees(VALID_ASSIGNEE_AMY)"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(VALID_BODY_ONE).withMilestone(VALID_MILESTONE_ONE)"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels(VALID_LABEL_STORY).build();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        // whitespace only preamble"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_ONE + ASSIGNEE_DESC_AMY"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                        + BODY_DESC_ONE + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssue));"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        // multiple titles - last title accepted"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_TWO + TITLE_DESC_ONE + BODY_DESC_ONE + ASSIGNEE_DESC_AMY"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"                         + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssue));"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        // multiple body - last body accepted"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + BODY_DESC_TWO + BODY_DESC_ONE + ASSIGNEE_DESC_AMY"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"                         + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssue));"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        // multiple milestone - last milestone accepted"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + BODY_DESC_ONE + ASSIGNEE_DESC_AMY + MILESTONE_DESC_TWO"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"                        + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssue));"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        // multiple assignees - all accepted"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssueMultipleAssignees \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE)"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"                .withAssignees(VALID_ASSIGNEE_BOB, VALID_ASSIGNEE_AMY)"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(VALID_BODY_ONE).withMilestone(VALID_MILESTONE_ONE)"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels(VALID_LABEL_STORY).build();"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + ASSIGNEE_DESC_BOB + ASSIGNEE_DESC_AMY"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"                        + BODY_DESC_ONE + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssueMultipleAssignees));"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"        // multiple labels - all accepted"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssueMultipleLabels \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE)"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"                .withAssignees(VALID_ASSIGNEE_BOB)"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(VALID_BODY_ONE).withMilestone(VALID_MILESTONE_ONE)"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels(VALID_LABEL_STORY, VALID_LABEL_TASK).build();"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + ASSIGNEE_DESC_BOB"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"                        + BODY_DESC_ONE + MILESTONE_DESC_ONE + LABEL_DEC_STORY + LABEL_DEC_TASK,"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssueMultipleLabels));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"        // zero labels"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssue \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE).withAssignees(VALID_ASSIGNEE_AMY)"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(VALID_BODY_ONE).withMilestone(VALID_MILESTONE_ONE)"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels().build();"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + BODY_DESC_ONE + MILESTONE_DESC_ONE + ASSIGNEE_DESC_AMY,"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssue));"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"        // zero body"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssueWithoutBody \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE).withAssignees(VALID_ASSIGNEE_AMY)"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(\"\").withMilestone(VALID_MILESTONE_ONE)"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels(VALID_LABEL_STORY).build();"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + MILESTONE_DESC_ONE"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"                        + ASSIGNEE_DESC_AMY + LABEL_DEC_STORY,"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssueWithoutBody));"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"        // zero assignees"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssueWithoutAssignee \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE)"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"                .withAssignees(VALID_ASSIGNEE_AMY)"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(VALID_BODY_ONE).withMilestone(VALID_MILESTONE_ONE).withLabels().build();"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, TITLE_DESC_ONE + BODY_DESC_ONE + MILESTONE_DESC_ONE + ASSIGNEE_DESC_AMY,"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"                new CreateIssueCommand(expectedIssueWithoutAssignee));"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        // zero milestone"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssueWithoutMilestone \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE)"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"                .withAssignees(VALID_ASSIGNEE_AMY)"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(VALID_BODY_ONE).withMilestone(\"\")"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels(VALID_LABEL_STORY).build();"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"        //assertParseSuccess(parser, TITLE_DESC_ONE + BODY_DESC_ONE + ASSIGNEE_DESC_AMY + LABEL_DEC_STORY"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"        //        , new CreateIssueCommand(expectedIssueWithoutMilestone));"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        // only title"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"        Issue expectedIssueWithOnlyTitle \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE).withAssignees()"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"                .withBody(\"\").withMilestone(\"\")"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"                .withLabels().build();"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"        //assertParseSuccess(parser, TITLE_DESC_ONE, new CreateIssueCommand(expectedIssue));"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateIssueCommand.MESSAGE_USAGE);"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"        //missing title"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser,  ASSIGNEE_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"                        + BODY_DESC_ONE + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"                expectedMessage);"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":"        // invalid title"},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, INVALID_TITLE_DESC + BODY_DESC_ONE + ASSIGNEE_DESC_AMY + MILESTONE_DESC_ONE"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"                        + LABEL_DEC_STORY,"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"                Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        // invalid assignee"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, TITLE_DESC_ONE + BODY_DESC_ONE + INVALID_ASSIGNEE_DESC + MILESTONE_DESC_ONE"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"                        + LABEL_DEC_STORY,"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"                Assignees.MESSAGE_ASSIGNEES_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":"        // invalid tag"},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, TITLE_DESC_ONE + BODY_DESC_ONE + ASSIGNEE_DESC_AMY + MILESTONE_DESC_ONE"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"                        + INVALID_LABEL_DESC,"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"                Labels.MESSAGE_LABEL_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_BODY_DESC + ASSIGNEE_DESC_AMY + MILESTONE_DESC_ONE"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"                        + LABEL_DEC_STORY,"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"                Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"        // non-empty preamble"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + BODY_DESC_ONE + ASSIGNEE_DESC_AMY"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"                        + MILESTONE_DESC_ONE + LABEL_DEC_STORY,"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateIssueCommand.MESSAGE_USAGE));"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":151,"-":25}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ViewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_TAB_TYPE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_WEEK_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTabTypes.TYPE_EXERCISE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"public class ViewCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    public void parse_validArgsType_returnsViewCommand() {"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        assertParseSuccess(parser, \"exercise\", new ViewCommand(TYPE_EXERCISE, -1,"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"                false));"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    public void parse_validArgsWeekNumber_returnsViewCommand() {"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"        assertParseSuccess(parser, \"exercise 5\", new ViewCommand(TYPE_EXERCISE, 5,"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"                true));"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public void parse_invalidArgsType_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        assertParseFailure(parser, \"invalid type\", MESSAGE_INVALID_TAB_TYPE"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"                + \" \\n\" + ViewCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    public void parse_invalidArgsWeekNumber_throwsParseException() {"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"        assertParseFailure(parser, \"exercise 0\", MESSAGE_INVALID_WEEK_NUMBER"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"                + \" \\n\" + ViewCommand.MESSAGE_USAGE);"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":29,"-":12}},{"path":"src/test/java/seedu/progresschecker/logic/parser/CompleteTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_CHARSET;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_NEGATIVE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_ZERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"public class CompleteTaskCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    private CompleteTaskCommandParser parser \u003d new CompleteTaskCommandParser();"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_validArgsFirstTask_returnsCompleteTaskCommand() {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, INDEX_FIRST_TASK, new CompleteTaskCommand(INDEX_FIRST_TASK_INT));"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsNegative_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_NEGATIVE, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"                CompleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsZero_throwsParseException() {"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_ZERO, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"                CompleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsCharset_throwsParseException() {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_CHARSET, String.format(MESSAGE_INVALID_INDEX_OR_FORMAT,"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"                CompleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":27,"-":15}},{"path":"src/test/java/seedu/progresschecker/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withMajor(VALID_MAJOR_BOB).withYear(VALID_YEAR_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"        // multiple usernames - last name accepted"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"                        + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"        // multiple majors - last major accepted"},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_AMY + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        // multiple years - last year accepted"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_AMY + YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB).withMajor(VALID_MAJOR_BOB)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withYear(VALID_YEAR_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withYear(VALID_YEAR_AMY).withTags().build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + USERNAME_DESC_AMY"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_AMY + YEAR_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + USERNAME_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"        // missing username prefix"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_USERNAME_BOB"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"        // missing major prefix"},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"                + VALID_MAJOR_BOB + YEAR_DESC_BOB, expectedMessage);"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"        // missing year prefix"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + VALID_YEAR_BOB, expectedMessage);"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_USERNAME_BOB"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                + VALID_MAJOR_BOB + VALID_YEAR_BOB, expectedMessage);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + USERNAME_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"        // invalid username"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_USERNAME_DESC"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"                GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"        // invalid major"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"                + INVALID_MAJOR_DESC + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"                Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"        // invalid year"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"                + MAJOR_DESC_BOB + INVALID_YEAR_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"                Year.MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + MAJOR_DESC_BOB + YEAR_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + USERNAME_DESC_BOB"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + INVALID_MAJOR_DESC + YEAR_DESC_BOB,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                + USERNAME_DESC_BOB + MAJOR_DESC_BOB + YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":45,"AdityaA1998":1,"-":164}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ViewTaskListCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_TASK_FILTER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COMPULSORY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COM_INT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK_INT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_CHARSET;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_NEGATIVE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INVALID_ZERO;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.SUBMISSION;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.SUB_INT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"public class ViewTaskListCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    private ViewTaskListCommandParser parser \u003d new ViewTaskListCommandParser();"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_validArgsFirstWeek_returnsViewTaskListCommand() {"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, FIRST_WEEK, new ViewTaskListCommand(FIRST_WEEK_INT));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_validArgsCompulsory_returnsViewTaskListCommand() {"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, COMPULSORY, new ViewTaskListCommand(COM_INT));"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_validArgsSubmission_returnsViewTaskListCommand() {"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        assertParseSuccess(parser, SUBMISSION, new ViewTaskListCommand(SUB_INT));"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsNegative_throwsParseException() {"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_NEGATIVE, String.format(MESSAGE_INVALID_TASK_FILTER,"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsZero_throwsParseException() {"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_ZERO, String.format(MESSAGE_INVALID_TASK_FILTER,"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    public void parse_invalidArgsCharset_throwsParseException() {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"        assertParseFailure(parser, INVALID_CHARSET, String.format(MESSAGE_INVALID_TASK_FILTER,"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":37,"-":19}},{"path":"src/test/java/seedu/progresschecker/logic/parser/ListIssuesCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ListIssuesCommand;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class ListIssuesCommandParserTest {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    private ListIssuesCommandParser parser \u003d new ListIssuesCommandParser();"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public void parse_validArgs_returnsListIssuesCommand() {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, \"OPEN\", new ListIssuesCommand(\"OPEN\"));"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"        assertParseSuccess(parser, \"CLOSE\", new ListIssuesCommand(\"CLOSE\"));"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":14,"-":4}},{"path":"src/test/java/seedu/progresschecker/logic/parser/AnswerCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_WEEK_NUMBER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AnswerCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"public class AnswerCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    private AnswerCommandParser parser \u003d new AnswerCommandParser();"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public void parse_invalidArgsIndex_throwsParseException() {"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"        assertParseFailure(parser, \"ans 11.50.80 b\", MESSAGE_INVALID_WEEK_NUMBER"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"                + \" \\n\" + AnswerCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":11,"-":9}},{"path":"src/test/java/seedu/progresschecker/logic/commands/ResetTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ResetTaskCommand.MESSAGE_NO_ACTION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ResetTaskCommand.MESSAGE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.INDEX_OUT_OF_BOUND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_LAST_TASK_INT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.OUT_OF_BOUND_TASK_INDEX_INT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":" * Contains assertion tests for {@code ResetTaskCommand}. This command is not undoable."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"public class ResetTaskCommandTest {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_commandEquals() throws Exception {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand resetTaskCommand \u003d new ResetTaskCommand(INDEX_FIRST_TASK_INT);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand resetTaskCommand2 \u003d new ResetTaskCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // same object -\u003e execution successful"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(resetTaskCommand.equals(resetTaskCommand));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // different object -\u003e execution failed"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(resetTaskCommand.equals(resetTaskCommand2));"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexFirst_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand resetFirst \u003d new ResetTaskCommand(INDEX_FIRST_TASK_INT);"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_FIRST_TASK_INT + \". LO[W6.5][Submission]\");"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d resetFirst.execute().feedbackToUser;"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexLast_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand resetLast \u003d new ResetTaskCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_LAST_TASK_INT + \". LO[W3.10][Compulsory][Submission]\");"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d resetLast.execute().feedbackToUser;"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexLastTwice_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand resetTwice \u003d new ResetTaskCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_NO_ACTION,"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_LAST_TASK_INT + \". LO[W3.10][Compulsory][Submission]\");"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d resetTwice.execute().feedbackToUser;"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"    // the case of negative/zero/non-integer are tested in the command parser test."},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_invalidIndexZero_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"        ResetTaskCommand resetOutOfBound \u003d new ResetTaskCommand(OUT_OF_BOUND_TASK_INDEX_INT);"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(INDEX_OUT_OF_BOUND);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d resetOutOfBound.execute().feedbackToUser;"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":59,"-":14}},{"path":"src/test/java/seedu/progresschecker/logic/commands/ThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalThemes.DAY_THEME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalThemes.NIGHT_THEME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":" * Contains assertion tests for {@code ThemeCommand}."},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"public class ThemeCommandTest {"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"        ThemeCommand dayTheme \u003d new ThemeCommand(DAY_THEME);"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        ThemeCommand nightTheme \u003d new ThemeCommand(NIGHT_THEME);"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"        assertTrue(dayTheme.equals(dayTheme));"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        ThemeCommand dayThemeCopy \u003d new ThemeCommand(DAY_THEME);"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"        assertTrue(dayTheme.equals(dayThemeCopy));"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        // different types -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"        assertFalse(dayTheme.equals(1));"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"        assertFalse(dayTheme.equals(null));"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        // different type -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"        assertFalse(dayTheme.equals(nightTheme));"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":27,"-":9}},{"path":"src/test/java/seedu/progresschecker/logic/commands/CompleteTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CompleteTaskCommand.MESSAGE_NO_ACTION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CompleteTaskCommand.MESSAGE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.INDEX_OUT_OF_BOUND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_LAST_TASK_INT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.OUT_OF_BOUND_TASK_INDEX_INT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":" * Contains assertion tests for {@code CompleteTaskCommand}. This command is not undoable."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"public class CompleteTaskCommandTest {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_commandEquals() throws Exception {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand completeTaskCommand \u003d new CompleteTaskCommand(INDEX_FIRST_TASK_INT);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand completeTaskCommand2 \u003d new CompleteTaskCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // same object -\u003e execution successful"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(completeTaskCommand.equals(completeTaskCommand));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // different object -\u003e execution failed"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(completeTaskCommand.equals(completeTaskCommand2));"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexFirst_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand completeFirst \u003d new CompleteTaskCommand(INDEX_FIRST_TASK_INT);"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_FIRST_TASK_INT + \". LO[W6.5][Submission]\");"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d completeFirst.execute().feedbackToUser;"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexLast_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand completeLast \u003d new CompleteTaskCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_LAST_TASK_INT + \". LO[W3.10][Compulsory][Submission]\");"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d completeLast.execute().feedbackToUser;"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexLastTwice_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand completeTwice \u003d new CompleteTaskCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_NO_ACTION,"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_LAST_TASK_INT + \". LO[W3.10][Compulsory][Submission]\");"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d completeTwice.execute().feedbackToUser;"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"    // the case of negative/zero/non-integer are tested in the command parser test."},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_invalidIndexZero_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"        CompleteTaskCommand completeOutOfBound \u003d new CompleteTaskCommand(OUT_OF_BOUND_TASK_INDEX_INT);"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(INDEX_OUT_OF_BOUND);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d completeOutOfBound.execute().feedbackToUser;"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"}"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""}],"authorContributionMap":{"EdwardKSG":60,"-":14}},{"path":"src/test/java/seedu/progresschecker/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_YEAR_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        //@@author EdwardKSG"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        // different major -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMajor(VALID_MAJOR_BOB).build();"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        // different year -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withYear(VALID_YEAR_BOB).build();"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        //@@author"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":9,"-":56}},{"path":"src/test/java/seedu/progresschecker/logic/commands/GitlogoutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalProgressChecker;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"public class GitlogoutCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public void setUp() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalProgressChecker(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        model.loginGithub(validDetails);"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_gitlogout_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        CommandResult commandResult \u003d prepareCommand(model).execute();"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"         * The model cannot be tested because if the model is tested,"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"         * There is just one model instead of two : an expected model and a model"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"         * The reason for the same is because if createIssue command is executed twice, there will be 2 issues online"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"         * Thus, the success message is comapred with the feedback to the user"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"         * success message is only posted after an issue is created on git"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals (GitLogoutCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_authenticationError_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        model.logoutGithub();"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expectMessage(GitLogoutCommand.MESSAGE_FAILURE);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        prepareCommand(model).execute();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"     * Generates a new {@code GitLogoutCommand} which upon execution, adds {@code issue} into the {@code model}."},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    private GitLogoutCommand prepareCommand(Model model) {"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        GitLogoutCommand command \u003d new GitLogoutCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":45,"-":23}},{"path":"src/test/java/seedu/progresschecker/logic/commands/GitloginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_GITHUB_USERNAME_ONE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalProgressChecker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"public class GitloginCommandTest {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public void setUp() throws Exception {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalProgressChecker(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_gitLogin_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validGitDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getProgressChecker(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        expectedModel.loginGithub(validGitDetails);"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandSuccess(prepareCommand(validGitDetails, model), model,"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"                GitLoginCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validGitDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        model.loginGithub(validGitDetails);"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        assertCommandFailure(prepareCommand(validGitDetails, model), model, \"You have already logged in as \""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"                + VALID_GITHUB_USERNAME_ONE + \". Please logout first.\");"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"     * Generates a new {@code GitLoginCommand} which upon execution, adds {@code gitDetails} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    private GitLoginCommand prepareCommand(GitDetails gitDetails, Model model) {"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        GitLoginCommand command \u003d new GitLoginCommand(gitDetails);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":28,"-":27}},{"path":"src/test/java/seedu/progresschecker/logic/commands/GoToTaskUrlCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.GoToTaskUrlCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.INDEX_OUT_OF_BOUND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_FIRST_TASK_INT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.INDEX_LAST_TASK_INT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.OUT_OF_BOUND_TASK_INDEX_INT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":" * Contains assertion tests for {@code GoToTaskUrlCommand}. This command is not undoable."},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"public class GoToTaskUrlCommandTest {"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_commandEquals() throws Exception {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand goToTaskUrlCommand \u003d new GoToTaskUrlCommand(INDEX_FIRST_TASK_INT);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand goToTaskUrlCommand2 \u003d new GoToTaskUrlCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"        // same object -\u003e execution successful"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(goToTaskUrlCommand.equals(goToTaskUrlCommand));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"        // different object -\u003e execution failed"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(goToTaskUrlCommand.equals(goToTaskUrlCommand2));"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexFirst_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand gotoFirst \u003d new GoToTaskUrlCommand(INDEX_FIRST_TASK_INT);"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_FIRST_TASK_INT + \". LO[W6.5][Submission]\");"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d gotoFirst.execute().feedbackToUser;"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexLast_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand gotoLast \u003d new GoToTaskUrlCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_LAST_TASK_INT + \". LO[W3.10][Compulsory][Submission]\");"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d gotoLast.execute().feedbackToUser;"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validIndexLastTwice_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand gotoTwice \u003d new GoToTaskUrlCommand(INDEX_LAST_TASK_INT);"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"                INDEX_LAST_TASK_INT + \". LO[W3.10][Compulsory][Submission]\");"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d gotoTwice.execute().feedbackToUser;"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"    // the case of negative/zero/non-integer are tested in the command parser test."},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_invalidIndexZero_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        GoToTaskUrlCommand gotoOutOfBound \u003d new GoToTaskUrlCommand(OUT_OF_BOUND_TASK_INDEX_INT);"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(INDEX_OUT_OF_BOUND);"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d gotoOutOfBound.execute().feedbackToUser;"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":59,"-":13}},{"path":"src/test/java/seedu/progresschecker/logic/commands/AddDefaultTasksCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.DEFAULT_LIST_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":" * Contains assertion tests for {@code AddDefaultTasksCommand}. This command is not undoable."},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":" * This test may take a long time to execute, roughly 20s."},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"public class AddDefaultTasksCommandTest {"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TEST_TITLE \u003d \"testTitle\";"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_commandEquals() throws Exception {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        AddDefaultTasksCommand completeTaskCommand \u003d new AddDefaultTasksCommand(DEFAULT_LIST_TITLE);"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        AddDefaultTasksCommand completeTaskCommand2 \u003d new AddDefaultTasksCommand(\"random thing\");"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"        // same object -\u003e execution successful"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(completeTaskCommand.equals(completeTaskCommand));"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // different object -\u003e execution failed"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(completeTaskCommand.equals(completeTaskCommand2));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    /* Outdated: Decided to remove this test because: 1. this test will add a new task list and the content of the"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    list is still being updated while before the final release. Once the list data is updated by us developers, the"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    edge condition and expected output for tests of complete/reset task command and view URL command will all must be"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    updated which is very tedious. 2. the result of this command is easy to observe and no repetitive tests involved"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    3. this test takes a long time, which slows down the process when other developers build the project."},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    Current solution: have a special fixed test data file which is small. */"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        AddDefaultTasksCommand addDefaultTasksCommand \u003d new AddDefaultTasksCommand(TEST_TITLE);"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, DEFAULT_LIST_TITLE);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d addDefaultTasksCommand.execute().feedbackToUser;"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":35,"-":10}},{"path":"src/test/java/seedu/progresschecker/logic/commands/ViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTabTypes.TYPE_EXERCISE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTabTypes.TYPE_TASK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":" * Contains assertion tests for {@code ViewCommand}."},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"public class ViewCommandTest {"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"        ViewCommand viewFirstCommand \u003d new ViewCommand(TYPE_TASK, -1, false);"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"        ViewCommand viewSecondCommand \u003d new ViewCommand(TYPE_EXERCISE, 11, true);"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommand));"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(TYPE_TASK, -1, false);"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        // different types -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        assertFalse(viewFirstCommand.equals(1));"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"        assertFalse(viewFirstCommand.equals(null));"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        // different type -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"        assertFalse(viewFirstCommand.equals(viewSecondCommand));"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":27,"-":9}},{"path":"src/test/java/seedu/progresschecker/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_PASSCODE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_REPO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_USERNAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_USERNAME_AMY \u003d \"AmyBeeGithub\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_USERNAME_BOB \u003d \"BobChooGithub\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_MAJOR_AMY \u003d \"Computer Science\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_MAJOR_BOB \u003d \"Computer Engineering\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_YEAR_AMY \u003d \"2\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_YEAR_BOB \u003d \"3\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String VALID_PATH_AMY \u003d \"/images/contact/amy.jpg\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_PATH_BOB \u003d \"/images/contact/bob.jpg\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String USERNAME_DESC_AMY \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String USERNAME_DESC_BOB \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String MAJOR_DESC_AMY \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String MAJOR_DESC_BOB \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String YEAR_DESC_AMY \u003d \" \" + PREFIX_YEAR + VALID_YEAR_AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String YEAR_DESC_BOB \u003d \" \" + PREFIX_YEAR + VALID_YEAR_BOB;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_USERNAME_DESC \u003d \" \""},{"lineNumber":78,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"James\u0026Github\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_MAJOR_DESC \u003d \" \" + PREFIX_MAJOR; // empty string not allowed for majors"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String INVALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + \"9\"; // year of study cannot exceed 5"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_PATH_DESC \u003d \"/images/ \"; // prefix of path is not completed"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_TITLE_ONE \u003d \"This is a github issue one\";"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_TITLE_TWO \u003d \"This is a github issue two\";"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_ASSIGNEE_BOB \u003d \"bob\";"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_ASSIGNEE_AMY \u003d \"amy\";"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_ASSIGNEE_ANMIN \u003d \"anminkang\";"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_BODY_ONE \u003d \"This is issue one\u0027s body\";"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_BODY_TWO \u003d \"This is issue two\u0027s body\";"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_MILESTONE_ONE \u003d \"v1.2\";"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_MILESTONE_TWO \u003d \"v1.3\";"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_LABEL_TASK \u003d \"type.task\";"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_LABEL_STORY \u003d \"type.story\";"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"    public static final String TITLE_DESC_ONE \u003d \" \" + PREFIX_TITLE + VALID_TITLE_ONE;"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"    public static final String TITLE_DESC_TWO \u003d \" \" + PREFIX_TITLE + VALID_TITLE_TWO;"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"    public static final String BODY_DESC_ONE \u003d \" \" + PREFIX_BODY + VALID_BODY_ONE;"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"    public static final String BODY_DESC_TWO \u003d \" \" + PREFIX_BODY + VALID_BODY_TWO;"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"    public static final String ASSIGNEE_DESC_BOB \u003d \" \" + PREFIX_ASSIGNEES + VALID_ASSIGNEE_BOB;"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"    public static final String ASSIGNEE_DESC_AMY \u003d \" \" + PREFIX_ASSIGNEES + VALID_ASSIGNEE_AMY;"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"    public static final String ASSIGNEE_DESC_ANMIN \u003d \" \" + PREFIX_ASSIGNEES + VALID_ASSIGNEE_ANMIN;"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MILESTONE_DESC_ONE \u003d \" \" + PREFIX_MILESTONE + VALID_MILESTONE_ONE;"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MILESTONE_DESC_TWO \u003d \" \" + PREFIX_MILESTONE + VALID_MILESTONE_TWO;"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"    public static final String LABEL_DEC_TASK \u003d \" \" + PREFIX_LABEL + VALID_LABEL_TASK;"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"    public static final String LABEL_DEC_STORY \u003d \" \" + PREFIX_LABEL + VALID_LABEL_STORY;"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"\";"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_BODY_DESC \u003d \" \" + PREFIX_BODY + \"\";"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_LABEL_DESC \u003d \" \" + PREFIX_LABEL + \"\";"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_ASSIGNEE_DESC \u003d \" \" + PREFIX_ASSIGNEES + \"\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_GITHUB_REPO_ONE \u003d \"adityaa1998/addressbook-level4\";"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_GITHUB_REPO_TWO \u003d \"adityaa1998/samplerepo-pr-practice\";"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_GITHUB_USERNAME_ONE \u003d \"anminkang\";"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_GITHUB_USERNAME_TWO \u003d \"adityaa1998\";"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_GITHUB_PASSCODE_ONE \u003d \"Github1\";"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"    public static final String VALID_GITHUB_PASSCODE_TWO \u003d \"Github2\";"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"    public static final String GITHUB_DESC_REPO_ONE \u003d \" \" + PREFIX_GIT_REPO + VALID_GITHUB_REPO_ONE;"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"    public static final String GITHUB_DESC_REPO_TWO \u003d \" \" + PREFIX_GIT_REPO + VALID_GITHUB_REPO_TWO;"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"    public static final String GITHUB_DESC_USERNAME_ONE \u003d \" \" + PREFIX_GIT_USERNAME + VALID_GITHUB_USERNAME_ONE;"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"    public static final String GITHUB_DESC_USERNAME_TWO \u003d \" \" + PREFIX_GIT_USERNAME + VALID_GITHUB_USERNAME_TWO;"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"    public static final String GITHUB_DESC_PASSCODE_ONE \u003d \" \" + PREFIX_GIT_PASSCODE + VALID_GITHUB_PASSCODE_ONE;"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"    public static final String GITHUB_DESC_PASSCODE_TWO \u003d \" \" + PREFIX_GIT_PASSCODE + VALID_GITHUB_PASSCODE_TWO;"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_GITHUB_REPO_DESC \u003d \" \" + PREFIX_GIT_REPO + \"\";"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_GITHUB_USERNAME_DESC \u003d \" \" + PREFIX_GIT_USERNAME + \"\";"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"    public static final String INVALID_GITHUB_PASSCODE_DESC \u003d \" \" + PREFIX_GIT_PASSCODE + \"\";"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_AMY).withMajor(VALID_MAJOR_AMY)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .withYear(VALID_YEAR_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .withUsername(VALID_USERNAME_BOB).withMajor(VALID_MAJOR_BOB)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                .withYear(VALID_YEAR_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * - the ProgressChecker and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":173,"author":{"gitID":"-"},"content":"        ProgressChecker expectedProgressChecker \u003d new ProgressChecker(actualModel.getProgressChecker());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            assertEquals(expectedProgressChecker, actualModel.getProgressChecker());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s ProgressChecker."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s ProgressChecker."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":46,"-":183}},{"path":"src/test/java/seedu/progresschecker/logic/commands/UploadCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":"//@@author: Livian1107"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"public class UploadCommandTest {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    public void isValidLocalPath() {"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"        // valid photo path"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"        assertTrue(UploadCommand.isValidLocalPath(\"C:\\\\Users\\\\Livian\\\\desktop\\\\1.png\"));"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"        // empty path"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"\")); // empty string"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\" \")); // spaces only"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"        // invalid extension"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"C:\\\\photo.gif\"));"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"D:\\\\photo.bmp\"));"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        // invalid path format"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"C:\\\\\\\\1.jpg\")); // too many backslashes"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"        assertFalse(UploadCommand.isValidLocalPath(\"C:\\\\\")); // no file name"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":21,"-":7}},{"path":"src/test/java/seedu/progresschecker/logic/commands/AnswerCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.ExerciseBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"public class AnswerCommandTest {"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    public void constructor_nullExercise_throwsNullPointerException() {"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        new AnswerCommand(null, null);"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        Exercise exercise1 \u003d new ExerciseBuilder().withStudentAnswer(\"a b c\").build();"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"        Exercise exercise2 \u003d new ExerciseBuilder().withStudentAnswer(\"d e f\").build();"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"        AnswerCommand answerExercise1Command \u003d new AnswerCommand(exercise1.getQuestionIndex(),"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"a b c\"));"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        AnswerCommand answerExercise2Command \u003d new AnswerCommand(exercise2.getQuestionIndex(),"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"d e f\"));"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        assertTrue(answerExercise1Command.equals(answerExercise1Command));"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"        assertFalse(answerExercise1Command.equals(1));"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"        // null -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"        assertFalse(answerExercise1Command.equals(null));"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        // different person -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"        assertFalse(answerExercise1Command.equals(answerExercise2Command));"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":34,"-":13}},{"path":"src/test/java/seedu/progresschecker/logic/commands/ReopenIssueCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_ISSUE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalProgressChecker;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    public void setUp() throws Exception {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalProgressChecker(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        model.loginGithub(validDetails);"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_closeIssue_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        CommandResult commandResult \u003d prepareCommand(INDEX_ISSUE, model).execute();"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"         * The model cannot be tested because if the model is tested,"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"         * There is just one model instead of two : an expected model and a model"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"         * The reason for the same is because if createIssue command is executed twice, there will be 2 issues online"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"         * Thus, the success message is comapred with the feedback to the user"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"         * success message is only posted after an issue is created on git"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals (String.format(ReopenIssueCommand.MESSAGE_SUCCESS,"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"                INDEX_ISSUE.getOneBased()), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_authenticationError_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        model.logoutGithub();"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expectMessage(ReopenIssueCommand.MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        prepareCommand(INDEX_ISSUE, model).execute();"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"     * Generates a new {@code ReopenIssueCommand} which upon execution, adds {@code issue} into the {@code model}."},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    private ReopenIssueCommand prepareCommand(Index index, Model model) {"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        ReopenIssueCommand command \u003d new ReopenIssueCommand(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":49,"-":23}},{"path":"src/test/java/seedu/progresschecker/logic/commands/CloseIssueCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_ISSUE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalProgressChecker;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    public void setUp() throws Exception {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalProgressChecker(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        model.loginGithub(validDetails);"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_closeIssue_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        CommandResult commandResult \u003d prepareCommand(INDEX_ISSUE, model).execute();"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"         * The model cannot be tested because if the model is tested,"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"         * There is just one model instead of two : an expected model and a model"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"         * The reason for the same is because if createIssue command is executed twice, there will be 2 issues online"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"         * Thus, the success message is comapred with the feedback to the user"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"         * success message is only posted after an issue is created on git"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals (String.format(CloseIssueCommand.MESSAGE_SUCCESS,"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"                INDEX_ISSUE.getOneBased()), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_authenticationError_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        model.logoutGithub();"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expectMessage(CloseIssueCommand.MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        prepareCommand(INDEX_ISSUE, model).execute();"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"     * Generates a new {@code CreateIssueCommadn} which upon execution, adds {@code issue} into the {@code model}."},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    private CloseIssueCommand prepareCommand(Index index, Model model) {"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        CloseIssueCommand command \u003d new CloseIssueCommand(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":48,"-":23}},{"path":"src/test/java/seedu/progresschecker/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalProgressChecker;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalProgressChecker(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of ProgressChecker list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getProgressChecker().getPersonList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getSecondLast();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        TabLoadChangedEvent previousEvent \u003d (TabLoadChangedEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals(selectCommand.tabType, \"profile\");"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":5,"-":140}},{"path":"src/test/java/seedu/progresschecker/logic/commands/CreateIssueCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ReadOnlyProgressChecker;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.IssueBuilder;"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueCommandTest {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_nullIssue_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        new CreateIssueCommand(null);"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    public void equals() {"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        Issue one \u003d new IssueBuilder().withTitle(\"one\").build();"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        Issue two \u003d new IssueBuilder().withTitle(\"two\").build();"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        CreateIssueCommand createOneIssue \u003d new CreateIssueCommand(one);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        CreateIssueCommand createTwoIssue \u003d new CreateIssueCommand(two);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        // same object -\u003e returns true"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(createOneIssue.equals(createOneIssue));"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        // same values -\u003e returns true"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        CreateIssueCommand createOneIssueCopy \u003d new CreateIssueCommand(one);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(createOneIssue.equals(createOneIssue));"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        // different types -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(createOneIssue.equals(1));"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        // null -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(createOneIssue.equals(null));"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        // different person -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(createOneIssue.equals(createTwoIssue));"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_authenticationError_throwsCommandException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        ModelStub modelStub \u003d new CreateIssueCommandTest.ModelStubCommandExceptionException();"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"        Issue validIssue \u003d new IssueBuilder().build();"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expectMessage(CreateIssueCommand.MESSAGE_FAILURE);"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"        getCreateIssueCommandForIssue(validIssue, modelStub).execute();"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"     * Generates a new CreateIssueCommand with the details of the given issue."},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"    private CreateIssueCommand getCreateIssueCommandForIssue(Issue issue, ModelStub model) {"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        CreateIssueCommand command \u003d new CreateIssueCommand(issue);"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"        return command;"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_issueAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        ModelStubAcceptingIssueAdded modelStub \u003d new ModelStubAcceptingIssueAdded();"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"        Issue validIssue \u003d new IssueBuilder().build();"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        CommandResult commandResult \u003d getCreateIssueCommandForIssue(validIssue, modelStub).execute();"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals(CreateIssueCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals(Arrays.asList(validIssue), modelStub.issueAdded);"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"    private class ModelStub implements Model {"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"        public void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"        public void logoutGithub() throws CommandException {"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        public void createIssueOnGitHub(Issue issue) throws IOException, CommandException {"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called. \");"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"        public void closeIssueOnGithub(Index index) throws IOException {"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"        public void listIssues(String state) throws IOException, CommandException, IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"        public void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"        public void sort() {"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"            return null;"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"                throws DuplicatePersonException {"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"            return null;"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"        public void uploadPhoto(Person target, String path)"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"        public void updateIssue(Index index, Issue editedIssue) throws IOException {"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"        public void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"        public void updateExercise(Exercise target, Exercise editedExercise) {"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"            return null;"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"        public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"            return null;"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"        public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":"     * A Model stub that always throw a CommandException when trying to create a new issue."},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"    private class ModelStubCommandExceptionException extends ModelStub {"},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"        public void createIssueOnGitHub(Issue issue) throws IOException, CommandException {"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"\");"},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":237,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"AdityaA1998"},"content":"     * A Model stub that always accept the issue being added."},{"lineNumber":239,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"AdityaA1998"},"content":"    private class ModelStubAcceptingIssueAdded extends ModelStub {"},{"lineNumber":241,"author":{"gitID":"AdityaA1998"},"content":"        final ArrayList\u003cIssue\u003e issueAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":242,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":243,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":244,"author":{"gitID":"AdityaA1998"},"content":"        public void createIssueOnGitHub(Issue issue) throws IOException, CommandException {"},{"lineNumber":245,"author":{"gitID":"AdityaA1998"},"content":"            requireNonNull(issue);"},{"lineNumber":246,"author":{"gitID":"AdityaA1998"},"content":"            issueAdded.add(issue);"},{"lineNumber":247,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":249,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":250,"author":{"gitID":"AdityaA1998"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":251,"author":{"gitID":"AdityaA1998"},"content":"            return new ProgressChecker();"},{"lineNumber":252,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":255,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":222,"-":33}},{"path":"src/test/java/seedu/progresschecker/logic/commands/ViewTaskListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_TITLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.COMPULSORY_STR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.MESSAGE_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.SUBMISSION_STR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.ASTERISK_INT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.COM_INT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.FIRST_WEEK_INT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.LAST_WEEK_INT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalTaskArgs.SUB_INT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":" * Contains assertion tests for {@code ViewTaskListCommand}. This command is not undoable."},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"public class ViewTaskListCommandTest {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_commandEquals() throws Exception {"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewTaskListCommand \u003d new ViewTaskListCommand(ASTERISK_INT);"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewTaskListCommand2 \u003d new ViewTaskListCommand(FIRST_WEEK_INT);"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // same object -\u003e execution successful"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(viewTaskListCommand.equals(viewTaskListCommand));"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        // different object -\u003e execution failed"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(viewTaskListCommand.equals(viewTaskListCommand2));"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validArgUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewAll \u003d new ViewTaskListCommand(ASTERISK_INT);"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS, DEFAULT_LIST_TITLE);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d viewAll.execute().feedbackToUser;"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validArgFirstWeekFilteredList_success() throws Exception {"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewFirst \u003d new ViewTaskListCommand(FIRST_WEEK_INT);"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"                DEFAULT_LIST_TITLE + \"  Week: \" + FIRST_WEEK_INT);"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d viewFirst.execute().feedbackToUser;"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validArgLastWeekFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewFirst \u003d new ViewTaskListCommand(LAST_WEEK_INT);"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"                DEFAULT_LIST_TITLE + \"  Week: \" + LAST_WEEK_INT);"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d viewFirst.execute().feedbackToUser;"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validArgCompulsoryFilteredList_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewFirst \u003d new ViewTaskListCommand(COM_INT);"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"                DEFAULT_LIST_TITLE + COMPULSORY_STR);"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d viewFirst.execute().feedbackToUser;"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"    public void execute_validArgSubmissionFilteredList_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"        ViewTaskListCommand viewFirst \u003d new ViewTaskListCommand(SUB_INT);"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"        String expected \u003d String.format(MESSAGE_SUCCESS,"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"                DEFAULT_LIST_TITLE + SUBMISSION_STR);"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"        String actual \u003d viewFirst.execute().feedbackToUser;"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"        assertEquals(expected, actual);"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":68,"-":17}},{"path":"src/test/java/seedu/progresschecker/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ReadOnlyProgressChecker;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public void logoutGithub() throws CommandException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void createIssueOnGitHub(Issue issue) throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called. \");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"        public void closeIssueOnGithub(Index index) throws IOException {"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"        public void listIssues(String state) throws IOException, CommandException, IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"        public void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public void sort() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void uploadPhoto(Person target, String path)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"        public void updateIssue(Index index, Issue editedIssue) throws IOException {"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void updateExercise(Exercise target, Exercise editedExercise) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            return new ProgressChecker();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            return new ProgressChecker();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":21,"-":237}},{"path":"src/test/java/seedu/progresschecker/logic/commands/CreateIssueCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.testutil.TypicalPersons.getTypicalProgressChecker;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.GitDetailsBuilder;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.testutil.IssueBuilder;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    public void setUp() throws Exception {"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        model \u003d new ModelManager(getTypicalProgressChecker(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        GitDetails validDetails \u003d new GitDetailsBuilder().build();"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        model.loginGithub(validDetails);"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_newIssue_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        Issue validIssue \u003d new IssueBuilder().build();"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        CommandResult commandResult \u003d prepareCommand(validIssue, model).execute();"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"         * The model cannot be tested because if the model is tested,"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"         * There is just one model instead of two : an expected model and a model"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"         * The reason for the same is because if createIssue command is executed twice, there will be 2 issues online"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"         * Thus, the success message is comapred with the feedback to the user"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"         * success message is only posted after an issue is created on git"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        assertEquals (CreateIssueCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    public void execute_authenticationError_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        model.logoutGithub();"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        Issue validIssue \u003d new IssueBuilder().build();"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        thrown.expectMessage(CreateIssueCommand.MESSAGE_FAILURE);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        prepareCommand(validIssue, model).execute();"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"     * Generates a new {@code CreateIssueCommadn} which upon execution, adds {@code issue} into the {@code model}."},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"    private CreateIssueCommand prepareCommand(Issue issue, Model model) {"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        CreateIssueCommand command \u003d new CreateIssueCommand(issue);"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        return command;"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":59,"-":16}},{"path":"src/test/java/seedu/progresschecker/model/person/GithubUsernameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class GithubUsernameTest {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new GithubUsername(null));"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_invalidUsername_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new GithubUsername(invalidUsername));"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public void isValidUsername() {"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // null username"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e GithubUsername.isValidUsername(null));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // invalid username"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(GithubUsername.isValidUsername(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        // valid username"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"peter jack\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"Capital Tan\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(GithubUsername.isValidUsername(\"David Roger Jackson Ray Jr 2nd\")); // long usernames"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":33,"-":9}},{"path":"src/test/java/seedu/progresschecker/model/person/MajorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class MajorTest {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Major(null));"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public void constructor_invalidMajor_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        String invalidMajor \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Major(invalidMajor));"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public void isValidMajor() {"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"        // null major"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Major.isValidMajor(null));"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"        // invalid majors"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(Major.isValidMajor(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        assertFalse(Major.isValidMajor(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        // valid majors"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(Major.isValidMajor(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(Major.isValidMajor(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        assertTrue(Major.isValidMajor(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long major"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":29,"-":9}},{"path":"src/test/java/seedu/progresschecker/model/issue/MilestoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.model.issue;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"public class MilestoneTest {"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":6}},{"path":"src/test/java/seedu/progresschecker/model/issue/AssigneesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.model.issue;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class AssigneesTest {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Assignees(null));"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_invalidAssigneeName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"        String invalidAssigneeName \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Assignees(invalidAssigneeName));"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidAssigneeName() {"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        // null tag name"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Assignees.isValidAssignee(null));"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":24,"-":3}},{"path":"src/test/java/seedu/progresschecker/model/issue/TitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.model.issue;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class TitleTest {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidTitle() {"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        // null name"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        // invalid name"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Title.isValidTitle(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Title.isValidTitle(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":38,"-":6}},{"path":"src/test/java/seedu/progresschecker/model/issue/LabelsTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.model.issue;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"public class LabelsTest {"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Labels(null));"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_invalidLabelName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        String invalidLabelName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Labels(invalidLabelName));"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidLabelName() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        // null tag name"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Labels.isValidLabel(null));"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        // valid name"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"peter jack\")); // alphabets only"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"12345\")); // numbers only"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"Capital Tan\")); // with capital letters"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Labels.isValidLabel(\"^\")); // only non-alphanumeric characters"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":32,"-":5}},{"path":"src/test/java/seedu/progresschecker/model/issue/BodyTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.model.issue;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class BodyTest {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Body(null));"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidBody() {"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        // null name"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Body.isValidBody(null));"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        // valid name"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"peter jack\")); // alphabets only"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"12345\")); // numbers only"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"Capital Tan\")); // with capital letters"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Body.isValidBody(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":27,"-":6}},{"path":"src/test/java/seedu/progresschecker/model/photo/PhotoPathTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"public class PhotoPathTest {"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PhotoPath(null));"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"    public void isValidPhotoPath() {"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"        // null photo path"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PhotoPath.isValidPhotoPath(null));"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"        // blank photo path"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\" \")); // spaces only"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"        // invalid starting"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\"src/image.jpg\")); // missing parent path"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/image.jpg\")); // missing parent path"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/image.jpg\")); // missing parent path"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/images/image.jpg\")); // missing parent path"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"        // invalid file extension"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contact/image.psd\"));"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contact/image.gif\"));"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"        // valid photo path"},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"        assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contact/image.jpg\"));"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"        assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contact/image.jpeg\"));"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"        assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contact/image.png\"));"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"        assertTrue(PhotoPath.isValidPhotoPath(\"\")); // empty path"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":33,"-":9}},{"path":"src/test/java/seedu/progresschecker/model/credentials/RepositoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"public class RepositoryTest {"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Repository(null));"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_invalidRepository_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        String invalidRepo \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Repository(invalidRepo));"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidRepository() {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        // null repo"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Repository.isValidRepository(null));"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        // invalid repo"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Repository.isValidRepository(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Repository.isValidRepository(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Repository.isValidRepository(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Repository.isValidRepository(\"ca jacxvccxk\")); // alphabets only with spaces"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Repository.isValidRepository(\"adityaa the 2nd\")); // alphanumeric characters with spaces"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        // valid repo"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Repository.isValidRepository(\"12345\")); // numbers only"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Repository.isValidRepository(\"github/repo-4\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Repository.isValidRepository(\"git*\")); // contains non-alphanumeric characters"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":34,"-":9}},{"path":"src/test/java/seedu/progresschecker/testutil/TypicalThemes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":4,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":" * A utility class containing a list of {@code String} objects to be used in tests."},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":"public class TypicalThemes {"},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":"    public static final String DAY_THEME \u003d \"day\";"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"    public static final String NIGHT_THEME \u003d \"night\";"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":8,"-":2}},{"path":"src/test/java/seedu/progresschecker/model/credentials/PasscodeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"public class PasscodeTest {"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Passcode(null));"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_invalidPasscode_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        String invalidPasscode \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Passcode(invalidPasscode));"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidPasscode() {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        // null passcode"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Passcode.isValidPasscode(null));"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        // invalid passcode"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"ads12\")); // only lowercase and numbers with less than 7 characters"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"cajacxvccxk\")); // alphabets only"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"ADDD1232\")); // capital letter and numbers only"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Passcode.isValidPasscode(\"git*\")); // contains characters with less than 7 characters"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        // valid passcode"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Passcode.isValidPasscode(\"adityaathe2nd\")); // alphanumeric characters with numerals"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Passcode.isValidPasscode(\"giTHub/repo-4\")); // with capital letters"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Passcode.isValidPasscode(\"github passcode1\")); // with letters and numerals"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":37,"-":9}},{"path":"src/test/java/seedu/progresschecker/model/credentials/UsernameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"public class UsernameTest {"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public void constructor_invalidUsername_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUsername));"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public void isValidUsername() {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        // null repo"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        // invalid repo"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Username.isValidUsername(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Username.isValidUsername(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Username.isValidUsername(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Username.isValidUsername(\"ca jacxvccxk\")); // alphabets only with spaces"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        assertFalse(Username.isValidUsername(\"git hub1212#\")); // alphanumeric characters with spaces"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        // valid repo"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Username.isValidUsername(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Username.isValidUsername(\"github-repo-4\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        assertTrue(Username.isValidUsername(\"git_hub\")); // contains non-alphanumeric characters"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":33,"-":9}},{"path":"src/test/java/seedu/progresschecker/testutil/ExerciseBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":" * A utility class to help with building Exercise objects."},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"public class ExerciseBuilder {"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public static final String DEFAULT_QUESTION_INDEX \u003d \"11.1.1\";"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"    public static final String DEFAULT_QUESTION_TYPE \u003d \"choice\";"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public static final String DEFAULT_QUESTION \u003d \"What is the main difference between\""},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"            + \"a class diagram and and an OO domain model?\\n\""},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"            + \"a. One is about the problem domain while the other is about the solution domain.\\n\""},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"            + \"b. One has more classes than the other.\\n\""},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"            + \"c. One shows more details than the other.\\n\""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"            + \"d. One is a UML diagram, while the other is not a UML diagram.\";"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public static final String DEFAULT_STUDENT_ANSWER \u003d \"\";"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    public static final String DEFAULT_MODEL_ANSWER \u003d \"a. Both are UML diagrams, and use the class diagram notation. \""},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"            + \"While it is true that often a class diagram may have more classes and more details, \""},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"            + \"the main difference is that the OO domain model describes the problem domain \""},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"            + \"while the class diagram describes the solution.\";"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    private QuestionIndex questionIndex;"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    private QuestionType questionType;"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    private Question question;"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    private StudentAnswer studentAnswer;"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"    private ModelAnswer modelAnswer;"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    public ExerciseBuilder() {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        questionIndex \u003d new QuestionIndex(DEFAULT_QUESTION_INDEX);"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"        questionType \u003d new QuestionType(DEFAULT_QUESTION_TYPE);"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"        question \u003d new Question(DEFAULT_QUESTION);"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"        studentAnswer \u003d new StudentAnswer(DEFAULT_STUDENT_ANSWER);"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"        modelAnswer \u003d new ModelAnswer(DEFAULT_MODEL_ANSWER);"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"     * Initializes the ExerciseBuilder with the data of {@code exerciseToCopy}."},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"    public ExerciseBuilder(Exercise exerciseToCopy) {"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"        questionIndex \u003d exerciseToCopy.getQuestionIndex();"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        questionType \u003d exerciseToCopy.getQuestionType();"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"        question \u003d exerciseToCopy.getQuestion();"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"        studentAnswer \u003d exerciseToCopy.getStudentAnswer();"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"        modelAnswer \u003d exerciseToCopy.getModelAnswer();"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"     * Sets the {@code StudentAnswer} of the {@code Exercise} that we are building."},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"    public ExerciseBuilder withStudentAnswer(String studentAnswer) {"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d new StudentAnswer(studentAnswer);"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":"    public Exercise build() {"},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"        return new Exercise(questionIndex, questionType, question, studentAnswer, modelAnswer);"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":58,"-":9}},{"path":"src/test/java/seedu/progresschecker/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final Index INDEX_ISSUE \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public static final Index INDEX_ISSUE_ONE \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":4,"-":12}},{"path":"src/test/java/seedu/progresschecker/testutil/TypicalIssue.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_ASSIGNEE_ANMIN;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_ASSIGNEE_BOB;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_BODY_ONE;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_BODY_TWO;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_LABEL_STORY;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_LABEL_TASK;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MILESTONE_ONE;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_MILESTONE_TWO;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TITLE_ONE;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.logic.commands.CommandTestUtil.VALID_TITLE_TWO;"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":" * A utility class containing a list of {@code Issue} objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"public class TypicalIssue {"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_ONE \u003d new IssueBuilder().withTitle(\"Test one\")"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(\"anminkang\").withBody(\"Test 1 body\")"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            .withMilestone(\"v1.1\").withLabels(\"test1\").build();"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_TWO \u003d new IssueBuilder().withTitle(\"Test two\")"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(\"adityaa1998\").withBody(\"Test 2 body\")"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"            .withMilestone(\"v1.2\").withLabels(\"test2\").build();"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_THREE \u003d new IssueBuilder().withTitle(\"Test three\")"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(\"kush1509\").withBody(\"Test 3 body\")"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"            .withMilestone(\"v1.3\").withLabels(\"test3\").build();"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_FOUR \u003d new IssueBuilder().withTitle(\"Test four\")"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"            .withBody(\"Test 4 body\")"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"            .withMilestone(\"v1.3\").withLabels(\"test4\").build();"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_FIVE \u003d new IssueBuilder().withTitle(\"Test five\")"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(\"anminkang\")"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            .withMilestone(\"v1.3\").withLabels(\"test5\").build();"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_SIX \u003d new IssueBuilder().withTitle(\"Test six\")"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(\"anminkang\").withBody(\"Test 6 body\")"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            .withLabels(\"test6\").build();"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue TEST_SEVEN \u003d new IssueBuilder().withTitle(\"Test seven\")"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(\"anminkang\").withBody(\"Test 7 body\")"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"            .withMilestone(\"v1.3\").build();"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    //Manually added - Issue\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue ISSUE_ONE \u003d new IssueBuilder().withTitle(VALID_TITLE_ONE)"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(VALID_ASSIGNEE_ANMIN)"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            .withBody(VALID_BODY_ONE).withMilestone(VALID_MILESTONE_ONE)"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            .withLabels(VALID_LABEL_TASK).build();"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    public static final Issue ISSUE_TWO \u003d new IssueBuilder().withTitle(VALID_TITLE_TWO)"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"            .withAssignees(VALID_ASSIGNEE_BOB)"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"            .withBody(VALID_BODY_TWO).withMilestone(VALID_MILESTONE_TWO)"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            .withLabels(VALID_LABEL_STORY).build();"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":51,"-":2}},{"path":"src/test/java/seedu/progresschecker/testutil/GitDetailsBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Passcode;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Repository;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Username;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * A utility class to help with building GitDetails objects."},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class GitDetailsBuilder {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_REPO \u003d \"AdityaA1998/CS2103TESTING\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_USERNAME \u003d \"anminkang\";"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_PASSCDE \u003d \"aditya2018\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    private Repository repository;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    private Username username;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    private Passcode passcode;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetailsBuilder() {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        repository \u003d new Repository(DEFAULT_REPO);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        username \u003d new Username(DEFAULT_USERNAME);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        passcode \u003d new Passcode(DEFAULT_PASSCDE);"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"     * Initializes the GitDetailsBuilder with the data of {@code detailsToCopy}."},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetailsBuilder (GitDetails detailsToCopy) {"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        repository \u003d detailsToCopy.getRepository();"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        passcode \u003d detailsToCopy.getPasscode();"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        username \u003d detailsToCopy.getUsername();"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the {@code Repository} of the {@code GitDetails} that we are building."},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetailsBuilder withRepository(String repository) {"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        this.repository \u003d new Repository(repository);"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the {@code Username} of the {@code GitDetails} that we are building."},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetailsBuilder withUsername(String username) {"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        this.username \u003d new Username(username);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the {@code Passcode} of the {@code GitDetails} that we are building."},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetailsBuilder withPasscode(String passcode) {"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        this.passcode \u003d new Passcode(passcode);"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetails build() {"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        return new GitDetails(username, passcode, repository);"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":59,"-":5}},{"path":"src/test/java/seedu/progresschecker/testutil/TypicalTaskArgs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":4,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":" * A utility class containing a list of arguments to be used in tests for tasks commands."},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"public class TypicalTaskArgs {"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":"    // User input"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"    // week number arguments"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FIRST_WEEK \u003d \"1\";"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"    public static final int FIRST_WEEK_INT \u003d 1;"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String RANDOM_WEEK \u003d \"5\";"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public static final String LAST_WEEK \u003d \"13\";"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    public static final int LAST_WEEK_INT \u003d 13;"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    public static final String OUT_OF_BOUND_WEEK \u003d \"14\";"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    // task index number arguments"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INDEX_FIRST_TASK \u003d \"1\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final int INDEX_FIRST_TASK_INT \u003d 1;"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final int INDEX_LAST_TASK_INT \u003d 4; //specifically for the model being tested"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public static final int OUT_OF_BOUND_TASK_INDEX_INT \u003d 500;"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    // valid char arguments"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPULSORY \u003d \"compulsory\";"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COM \u003d \"com\";"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final int COM_INT \u003d -13;"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SUBMISSION \u003d \"submission\";"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SUB \u003d \"sub\";"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public static final int SUB_INT \u003d -20;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    public static final String ASTERISK \u003d \"*\";"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final int ASTERISK_INT \u003d 0;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DEFAULT_LIST_TITLE \u003d \"CS2103 LOs\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String VALID_TITLE_EDGE \u003d \"1234567891234567891234567891234567891234567891234\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    // general invalid input arguments"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INVALID_ZERO \u003d \"0\";"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INVALID_NEGATIVE \u003d \"-3\";"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INVALID_DOUBLE \u003d \"3.4\";"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INVALID_CHARSET \u003d \"comppp\";"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INVALID_TITLE \u003d \"ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"            + \"ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\"; // exceeds length limit"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INVALID_MULTIPLE_ARGS \u003d \"compulsory 4 2\";"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    //-----------------------------------------------------------------------------------------------------"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    // Parser output (command input)"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":48,"-":2}},{"path":"src/test/java/seedu/progresschecker/testutil/IssueBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":" * A utility class to help with building Issue objects."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"public class IssueBuilder {"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_TITLE \u003d \"CS2103 software engneering\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_ASSIGNEE \u003d \"anminkang\";"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_BODY \u003d \"This an issue created for testing purposes\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_MIILESTONE \u003d \"v1.1\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public static final String DEFAULT_LABELS \u003d \"testing\";"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    private Title title;"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private List\u003cAssignees\u003e assignees;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    private Body body;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    private Milestone milestone;"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    private List\u003cLabels\u003e labels;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder() {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        title \u003d new Title(DEFAULT_TITLE);"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        assignees \u003d SampleDataUtil.getAssigneeList(DEFAULT_ASSIGNEE);"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        body \u003d new Body(DEFAULT_BODY);"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        milestone \u003d new Milestone(DEFAULT_MIILESTONE);"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        labels \u003d SampleDataUtil.getLabelsList(DEFAULT_LABELS);"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     * Initializes the IssueBuilder with the data of {@code issueToCopy}."},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder (Issue issueToCopy) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        title \u003d issueToCopy.getTitle();"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        assignees \u003d new ArrayList\u003c\u003e(issueToCopy.getAssignees());"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        body \u003d issueToCopy.getBody();"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"        milestone \u003d issueToCopy.getMilestone();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        labels \u003d new ArrayList\u003c\u003e(issueToCopy.getLabelsList());"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the {@code Title} of the {@code Issue} that we are building."},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder withTitle(String title) {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        this.title \u003d new Title(title);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the {@code assignees} into a {@code List\u003cAssignee\u003e} and set it to the {@code Issues} that we are building."},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder withAssignees(String... assignees) {"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        this.assignees \u003d SampleDataUtil.getAssigneeList(assignees);"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the {@code Body} of the {@code Issue} that we are building."},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder withBody(String body) {"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"        this.body \u003d new Body(body);"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the {@code Milestone} of the {@code Issue} that we are building."},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder withMilestone(String milestone) {"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"        this.milestone \u003d new Milestone(milestone);"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the {@code labels} into a {@code List\u003cLabels\u003e} and set it to the {@code Issues} that we are building."},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"    public IssueBuilder withLabels(String... labels) {"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"        this.labels \u003d SampleDataUtil.getLabelsList(labels);"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"    public Issue build() {"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"        return new Issue(title, assignees, milestone, body, labels);"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":82,"-":12}},{"path":"src/test/java/seedu/progresschecker/testutil/TypicalTabTypes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":4,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":" * A utility class containing a list of {@code String} objects to be used in tests."},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"public class TypicalTabTypes {"},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":"    public static final String TYPE_PROFILE \u003d \"profile\";"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"    public static final String TYPE_TASK \u003d \"task\";"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"    public static final String TYPE_EXERCISE \u003d \"exercise\";"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public static final String TYPE_ISSUES \u003d \"issues\";"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":10,"-":2}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     * Sets text in the command box."},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public void setInput(String input) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        getRootNode().setText(input);"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":7,"-":46}},{"path":"src/test/java/seedu/progresschecker/testutil/IssueUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"AdityaA1998"},"content":"package seedu.progresschecker.testutil;"},{"lineNumber":2,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssueCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" * A utility class for Issue."},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"public class IssueUtil {"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * Returns an createIssue command string for adding the {@code issue}."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static String getCreateIssueCommand(Issue issue) {"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        return CreateIssueCommand.COMMAND_WORD + \" \" + getIssueDetails(issue);"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     * Returns the part of command string for the given {@code issue}\u0027s details."},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    public static String getIssueDetails(Issue issue) {"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        sb.append(PREFIX_TITLE + issue.getTitle().fullMessage + \" \");"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        sb.append(PREFIX_BODY + issue.getBody().fullBody + \" \");"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        sb.append(PREFIX_MILESTONE + issue.getMilestone().fullMilestone + \" \");"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        issue.getAssignees().stream()"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"                .forEach(a -\u003e sb.append(PREFIX_ASSIGNEES + a.fullAssignees + \" \"));"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"        issue.getLabelsList().stream()"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"                .forEach(l -\u003e sb.append(PREFIX_LABEL + l.fullLabels + \" \"));"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":31,"-":8}},{"path":"src/test/java/guitests/guihandles/WebViewUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper methods for dealing with {@code WebView}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class WebViewUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page in the {@code webView}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static URL getLoadedUrl(WebView webView) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            return new URL(webView.getEngine().getLocation());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * If the {@code browserPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void waitUntilBrowserLoaded(BrowserPanelHandle browserPanelHandle) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(browserPanelHandle::isLoaded);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * If the {@code browser2PanelHandle}\u0027s {@code WebView} is loading, sleeps the thread"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * till it is successfully loaded."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void waitUntilBrowser2Loaded(Browser2PanelHandle browser2PanelHandle) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(browser2PanelHandle::isLoaded);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"     * Returns the {@code String} of the currently loaded page in the {@code webView}."},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public static String getLoadedTitle(WebView webView) {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        return webView.getEngine().getTitle();"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":8,"-":41}},{"path":"src/test/java/guitests/guihandles/BrowserPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"     * Returns the {@code String title} of the currently loaded page."},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public String getLoadedTitle() {"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"        return WebViewUtil.getLoadedTitle(getChildNode(BROWSER_ID));"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":8,"-":65}},{"path":"src/main/java/seedu/progresschecker/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.CommandFormatListUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.ListElementPointer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CommandResult;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    private static final String CORRECT_COMMAND_WORD \u003d \"find\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    private boolean isCorrectCommandWord \u003d false;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":44,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        //@@author adityaa1998"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        //TAB case is used to auto-complete commands"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        case TAB:"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"            keyEvent.consume();"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"            autocompleteCommad(commandTextField.getText());"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        default:"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"            //dynamic search implementation"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"                if ((commandTextField.getText().trim().equalsIgnoreCase(CORRECT_COMMAND_WORD)"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"                        || isCorrectCommandWord)) {"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"                    isCorrectCommandWord \u003d !commandTextField.getText().trim().isEmpty();"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"                    CommandResult commandResult;"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"                    if (keyEvent.getCode() !\u003d KeyCode.BACK_SPACE \u0026\u0026 keyEvent.getCode() !\u003d KeyCode.DELETE) {"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText() + keyEvent.getText());"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"                    } else {"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"                        commandResult \u003d logic.execute(commandTextField.getText().substring(0,"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"                                commandTextField.getText().length() - 1));"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"                    }"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"                    // process result of the command"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"                    logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"                    raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"                }"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"            } catch (CommandException | ParseException e) {"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"                // handle command failure"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"                logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"                raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"            //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":165,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"     * Sets the commandbox to completed command format if the entered substring of the command is valid"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"     * @param text is the command which is to be autocompleted"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"    private void autocompleteCommad(String text) {"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cString\u003e commandFormatList \u003d CommandFormatListUtil.getCommandFormatList();"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        //retrieve the list of words which begin with text"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cString\u003e autocompleteCommandList \u003d commandFormatList.stream()"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"                .filter(s -\u003e s.startsWith(text))"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"                .collect(Collectors.toList());"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"        //replace input in text field with matched keyword"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"        if (!autocompleteCommandList.isEmpty()) {"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"            replaceText(autocompleteCommandList.get(0));"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":58,"-":148}},{"path":"src/main/java/seedu/progresschecker/ui/ExerciseListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":" * Panel containing the list of exercises."},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    private ListView\u003cExerciseCard\u003e exerciseListView;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        setConnections(exerciseList);"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    private void setConnections(ObservableList\u003cExercise\u003e exerciseList) {"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        ObservableList\u003cExerciseCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"                exerciseList, (exercise) -\u003e new ExerciseCard(exercise));"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"        exerciseListView.setItems(mappedList);"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ExerciseCard}."},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    class ExerciseListViewCell extends ListCell\u003cExerciseCard\u003e {"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        @Override"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"        protected void updateItem(ExerciseCard exercise, boolean empty) {"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"            super.updateItem(exercise, empty);"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"            if (empty || exercise \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"                setGraphic(null);"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"                setText(null);"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"                setGraphic(exercise.getRoot());"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":43,"-":14}},{"path":"src/test/java/guitests/guihandles/ProfilePanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":" * Provides a handle to profile panel."},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"public class ProfilePanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"    private static final String MAJOR_FIELD_ID \u003d \"#major\";"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"    private static final String YEAR_FIELD_ID \u003d \"#year\";"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"    private static final String USERNAME_FIELD_ID \u003d \"#username\";"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"    private final Label nameLabel;"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"    private final Label majorLabel;"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"    private final Label yearLabel;"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"    private final Label phoneLabel;"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"    private final Label usernameLabel;"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"    private final Label emailLabel;"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"    private String lastRememberedName;"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"    public ProfilePanelHandle(Node cardNode) {"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"        super(cardNode);"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"        this.majorLabel \u003d getChildNode(MAJOR_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"        this.yearLabel \u003d getChildNode(YEAR_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"        this.usernameLabel \u003d getChildNode(USERNAME_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"                .stream()"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":"                .map(Label.class::cast)"},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"                .collect(Collectors.toList());"},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"    public String getUsername() {"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"        return usernameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"    public String getName() {"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"        return nameLabel.getText();"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":"    public String getAddress() {"},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"        return majorLabel.getText();"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":"    public String getYear() {"},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"        return yearLabel.getText();"},{"lineNumber":66,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":68,"author":{"gitID":"Livian1107"},"content":"    public String getPhone() {"},{"lineNumber":69,"author":{"gitID":"Livian1107"},"content":"        return phoneLabel.getText();"},{"lineNumber":70,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":72,"author":{"gitID":"Livian1107"},"content":"    public String getEmail() {"},{"lineNumber":73,"author":{"gitID":"Livian1107"},"content":"        return emailLabel.getText();"},{"lineNumber":74,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":76,"author":{"gitID":"Livian1107"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":77,"author":{"gitID":"Livian1107"},"content":"        return tagLabels"},{"lineNumber":78,"author":{"gitID":"Livian1107"},"content":"                .stream()"},{"lineNumber":79,"author":{"gitID":"Livian1107"},"content":"                .map(Label::getText)"},{"lineNumber":80,"author":{"gitID":"Livian1107"},"content":"                .collect(Collectors.toList());"},{"lineNumber":81,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":83,"author":{"gitID":"Livian1107"},"content":"    public List\u003cLabel\u003e getTagLabels() {"},{"lineNumber":84,"author":{"gitID":"Livian1107"},"content":"        return tagLabels;"},{"lineNumber":85,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":77,"-":9}},{"path":"src/main/java/seedu/progresschecker/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadTaskEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadUrlEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"     * Loads the HTML file which contains task information."},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    public void loadTaskPage(String content) {"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        loadPageViaString(content);"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    public void loadPageViaString(String content) {"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        Platform.runLater(() -\u003e browser.getEngine().loadContent(content));"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"    @Subscribe"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"    private void handleLoadTaskEvent(LoadTaskEvent event)  {"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"        loadTaskPage(event.getContent());"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"    private void handleLoadUrlEvent(LoadUrlEvent event)  {"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"        loadPage(event.getUrl());"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":25,"-":68}},{"path":"src/main/java/seedu/progresschecker/ui/IssueListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":" * Panel containing the issues on github."},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"public class IssueListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    private static final String FXML \u003d \"IssueListPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(IssueListPanel.class);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    @javafx.fxml.FXML"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private ListView\u003cIssueCard\u003e issueListView;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public IssueListPanel(ObservableList\u003cIssue\u003e issueList) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        setConnections(issueList);"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    private void setConnections(ObservableList\u003cIssue\u003e issueList) {"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        ObservableList\u003cIssueCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"                issueList, (issue) -\u003e new IssueCard(issue, issue.getIssueIndex()));"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        issueListView.setItems(mappedList);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        issueListView.setCellFactory(listView -\u003e new IssueListViewCell());"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"     * Scrolls to the {@code IssueCard} at the {@code index} and selects it."},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    private void scrollTo(int index) {"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            issueListView.scrollTo(index);"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            issueListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        });"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    @Subscribe"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code IssueCard}."},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    class IssueListViewCell extends ListCell\u003cIssueCard\u003e {"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        protected void updateItem(IssueCard issue, boolean empty) {"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"            super.updateItem(issue, empty);"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"            if (empty || issue \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"                setGraphic(null);"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"                setText(null);"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"            } else {"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"                setGraphic(issue.getRoot());"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":59,"-":17}},{"path":"src/main/java/seedu/progresschecker/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.SingleSelectionModel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Config;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.GuiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.AppUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.Logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/progress_checker_32.png\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String DARK_THEME \u003d \"view/DarkTheme.css\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String DAY_THEME \u003d \"view/DayTheme.css\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Browser2Panel browser2Panel;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private ExerciseListPanel exerciseListPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private IssueListPanel issueListPanel;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private ProfilePanel profilePanel;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane browser2Placeholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane exerciseListPanelPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane profilePanelPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private StackPane issuePanelPlaceholder;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private TabPane tabPlaceholder;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private Tab profilePlaceholder;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private Tab taskPlaceholder;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private Tab exercisePlaceholder;"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private Tab issuePlaceholder;"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        handleDayTheme();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":146,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":150,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":151,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":152,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":153,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":154,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":155,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":156,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        browser2Panel \u003d new Browser2Panel();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        browser2Placeholder.getChildren().add(browser2Panel.getRoot());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        profilePanel \u003d new ProfilePanel();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        profilePanelPlaceholder.getChildren().add(profilePanel.getRoot());"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        issueListPanel \u003d new IssueListPanel(logic.getFilteredIssueList());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        issuePanelPlaceholder.getChildren().add(issueListPanel.getRoot());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getProgressCheckerFilePath());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"Livian1107"},"content":"    //@@author: Livian1107"},{"lineNumber":235,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"Livian1107"},"content":"     * Switches to the Night Theme."},{"lineNumber":237,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":239,"author":{"gitID":"Livian1107"},"content":"    public void handleNightTheme() {"},{"lineNumber":240,"author":{"gitID":"Livian1107"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":241,"author":{"gitID":"Livian1107"},"content":"        scene.getStylesheets().setAll(DARK_THEME);"},{"lineNumber":242,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":243,"author":{"gitID":"Livian1107"},"content":"        show();"},{"lineNumber":244,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":246,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"Livian1107"},"content":"     * Switches to the Day Theme."},{"lineNumber":248,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":250,"author":{"gitID":"Livian1107"},"content":"    public void handleDayTheme() {"},{"lineNumber":251,"author":{"gitID":"Livian1107"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":252,"author":{"gitID":"Livian1107"},"content":"        scene.getStylesheets().setAll(DAY_THEME);"},{"lineNumber":253,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":254,"author":{"gitID":"Livian1107"},"content":"        show();"},{"lineNumber":255,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        browser2Panel.freeResources();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":286,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"Livian1107"},"content":"     * Sets the icon of Main Window"},{"lineNumber":288,"author":{"gitID":"Livian1107"},"content":"     * @param icon with given path"},{"lineNumber":289,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"Livian1107"},"content":"    private void setIcon(String icon) {"},{"lineNumber":291,"author":{"gitID":"Livian1107"},"content":"        primaryStage.getIcons().setAll(AppUtil.getImage(icon));"},{"lineNumber":292,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":294,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"Livian1107"},"content":"     * Sets the minimum size of the main window"},{"lineNumber":296,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"Livian1107"},"content":"    private void setWindowMinSize() {"},{"lineNumber":298,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":299,"author":{"gitID":"Livian1107"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":300,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":302,"author":{"gitID":"Livian1107"},"content":"    @Subscribe"},{"lineNumber":303,"author":{"gitID":"Livian1107"},"content":"    private  void handleChangeThemeEvent(ChangeThemeEvent event) {"},{"lineNumber":304,"author":{"gitID":"Livian1107"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":305,"author":{"gitID":"Livian1107"},"content":"        switch (event.getTheme()) {"},{"lineNumber":306,"author":{"gitID":"Livian1107"},"content":"        case \"day\":"},{"lineNumber":307,"author":{"gitID":"Livian1107"},"content":"            handleDayTheme();"},{"lineNumber":308,"author":{"gitID":"Livian1107"},"content":"            break;"},{"lineNumber":309,"author":{"gitID":"Livian1107"},"content":"        case \"night\":"},{"lineNumber":310,"author":{"gitID":"Livian1107"},"content":"            handleNightTheme();"},{"lineNumber":311,"author":{"gitID":"Livian1107"},"content":"            break;"},{"lineNumber":312,"author":{"gitID":"Livian1107"},"content":"        default:"},{"lineNumber":313,"author":{"gitID":"Livian1107"},"content":"            handleDayTheme();"},{"lineNumber":314,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":319,"author":{"gitID":"iNekox3"},"content":"    @Subscribe"},{"lineNumber":320,"author":{"gitID":"iNekox3"},"content":"    private void handleTabLoadChangedEvent(TabLoadChangedEvent event) {"},{"lineNumber":321,"author":{"gitID":"iNekox3"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":322,"author":{"gitID":"iNekox3"},"content":"        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPlaceholder.getSelectionModel();"},{"lineNumber":323,"author":{"gitID":"iNekox3"},"content":"        switch (event.getTabName()) {"},{"lineNumber":324,"author":{"gitID":"iNekox3"},"content":"        case \"profile\":"},{"lineNumber":325,"author":{"gitID":"iNekox3"},"content":"            selectionModel.select(profilePlaceholder);"},{"lineNumber":326,"author":{"gitID":"iNekox3"},"content":"            break;"},{"lineNumber":327,"author":{"gitID":"iNekox3"},"content":"        case \"task\":"},{"lineNumber":328,"author":{"gitID":"iNekox3"},"content":"            selectionModel.select(taskPlaceholder);"},{"lineNumber":329,"author":{"gitID":"iNekox3"},"content":"            break;"},{"lineNumber":330,"author":{"gitID":"iNekox3"},"content":"        case \"exercise\":"},{"lineNumber":331,"author":{"gitID":"iNekox3"},"content":"            selectionModel.select(exercisePlaceholder);"},{"lineNumber":332,"author":{"gitID":"iNekox3"},"content":"            break;"},{"lineNumber":333,"author":{"gitID":"iNekox3"},"content":"        case \"issues\":"},{"lineNumber":334,"author":{"gitID":"iNekox3"},"content":"            selectionModel.select(issuePlaceholder);"},{"lineNumber":335,"author":{"gitID":"iNekox3"},"content":"            break;"},{"lineNumber":336,"author":{"gitID":"iNekox3"},"content":"        default:"},{"lineNumber":337,"author":{"gitID":"iNekox3"},"content":"            selectionModel.select(selectionModel.getSelectedItem());"},{"lineNumber":338,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":339,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":341,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Livian1107":55,"iNekox3":23,"-":263}},{"path":"src/main/java/seedu/progresschecker/ui/ExerciseCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":" * An UI component that displays information of an {@code Exercise}."},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"public class ExerciseCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    private static final String FXML \u003d \"ExerciseListCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public final Exercise exercise;"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    private Label questionIndex;"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    private Label questionType;"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    private Label question;"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    private Label studentAnswer;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    private Label modelAnswerHeader;"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    private Label modelAnswer;"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public ExerciseCard(Exercise exercise) {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        this.exercise \u003d exercise;"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"        questionIndex.setText(exercise.getQuestionIndex().value);"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"        question.setText(exercise.getQuestion().value);"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        studentAnswer.setText(exercise.getStudentAnswer().value);"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        modelAnswer.setText(\"\");"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"        if (!exercise.getStudentAnswer().value.equals(\"\")) {"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"            questionIndex.getStyleClass().add(\"answered\");"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"            modelAnswerHeader.setText(\"Suggested Answer: \");"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"            modelAnswer.setText(exercise.getModelAnswer().value);"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":38,"-":7}},{"path":"src/main/java/seedu/progresschecker/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"     * Adds each letter of given string into an integer."},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"    private int getValueOfString(String tagName) {"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"        int sum \u003d 0;"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"        for (char c : tagName.toCharArray()) {"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"            sum +\u003d c;"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        return sum;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":28,"-":42}},{"path":"src/main/java/seedu/progresschecker/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_EXERCISE_INDEX \u003d \"Exercise %1$s does not exist in the current week\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX \u003d \"The issue index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":14}},{"path":"src/main/java/seedu/progresschecker/ui/Browser2Panel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadBarEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The second Browser Panel of the App."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class Browser2Panel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"Browser2Panel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private WebView browser2;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Browser2Panel() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser2.getEngine().load(url));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"     * Loads the HTML file which contains task information."},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    public void loadBarPage(String content) {"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        loadPageViaString(content);"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"    public void loadPageViaString(String content) {"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        Platform.runLater(() -\u003e browser2.getEngine().loadContent(content));"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"    public void freeResources() {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        browser2 \u003d null;"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"    @Subscribe"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"    private void handleLoadBarEvent(LoadBarEvent event)  {"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"        loadBarPage(event.getContent());"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"},{"lineNumber":79,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"EdwardKSG":25,"-":54}},{"path":"src/main/java/seedu/progresschecker/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.BufferedInputStream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.BufferedOutputStream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileInputStream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.FileOutputStream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String REGEX_VALID_IMAGE \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|jpeg|png))$)\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":89,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Livian1107"},"content":"     * Copies all the contents from the file in original path to the one in destination path."},{"lineNumber":91,"author":{"gitID":"Livian1107"},"content":"     * @param oriPath of the file to be copied"},{"lineNumber":92,"author":{"gitID":"Livian1107"},"content":"     * @param destPath of the file to be pasted"},{"lineNumber":93,"author":{"gitID":"Livian1107"},"content":"     * @return true if the file is successfully copied to the specified place."},{"lineNumber":94,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Livian1107"},"content":"    public static boolean copyFile(String oriPath, String destPath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":97,"author":{"gitID":"Livian1107"},"content":"        //create a buffer to store content"},{"lineNumber":98,"author":{"gitID":"Livian1107"},"content":"        byte[] buffer \u003d new byte[3072];"},{"lineNumber":99,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":100,"author":{"gitID":"Livian1107"},"content":"        //bufferedInputStream"},{"lineNumber":101,"author":{"gitID":"Livian1107"},"content":"        FileInputStream fis \u003d new FileInputStream(oriPath);"},{"lineNumber":102,"author":{"gitID":"Livian1107"},"content":"        BufferedInputStream bis \u003d new BufferedInputStream(fis);"},{"lineNumber":103,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":104,"author":{"gitID":"Livian1107"},"content":"        //bufferedOutputStream"},{"lineNumber":105,"author":{"gitID":"Livian1107"},"content":"        FileOutputStream fos \u003d new FileOutputStream(destPath);"},{"lineNumber":106,"author":{"gitID":"Livian1107"},"content":"        BufferedOutputStream bos \u003d new BufferedOutputStream(fos);"},{"lineNumber":107,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"        int numBytes \u003d bis.read(buffer);"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"        while (numBytes \u003e 0) {"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":"            bos.write(buffer, 0, numBytes);"},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"            numBytes \u003d bis.read(buffer);"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"        //close input,output stream"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"        bis.close();"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"        bos.close();"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"        return true;"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":133,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Livian1107"},"content":"     * Returns the extension information from the file path"},{"lineNumber":135,"author":{"gitID":"Livian1107"},"content":"     * @param filePath"},{"lineNumber":136,"author":{"gitID":"Livian1107"},"content":"     * @return extension String"},{"lineNumber":137,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"Livian1107"},"content":"    public static String getFileExtension(String filePath) {"},{"lineNumber":139,"author":{"gitID":"Livian1107"},"content":"        return \".\" + filePath.split(\"\\\\.\")[1];"},{"lineNumber":140,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":142,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"Livian1107"},"content":"     * Creates a new file if it does not exist"},{"lineNumber":144,"author":{"gitID":"Livian1107"},"content":"     * @param file to created"},{"lineNumber":145,"author":{"gitID":"Livian1107"},"content":"     * @throws IOException if the file cannot be created"},{"lineNumber":146,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"Livian1107"},"content":"    public static void createMissing(File file) throws IOException {"},{"lineNumber":148,"author":{"gitID":"Livian1107"},"content":"        if (!file.exists()) {"},{"lineNumber":149,"author":{"gitID":"Livian1107"},"content":"            createFile(file);"},{"lineNumber":150,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":153,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"Livian1107"},"content":"     * Returns whether the uploaded file is a valid image file"},{"lineNumber":155,"author":{"gitID":"Livian1107"},"content":"     * Valid image file should have extension: \u0027.jpg\u0027, \u0027.jepg\u0027 or \u0027png\u0027."},{"lineNumber":156,"author":{"gitID":"Livian1107"},"content":"     * @param path of the uploaded image file"},{"lineNumber":157,"author":{"gitID":"Livian1107"},"content":"     * @return true if the uploaded file has valid extension"},{"lineNumber":158,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"Livian1107"},"content":"    public static boolean isValidImageFile(String path) {"},{"lineNumber":160,"author":{"gitID":"Livian1107"},"content":"        return path.matches(REGEX_VALID_IMAGE);"},{"lineNumber":161,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":163,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"Livian1107"},"content":"     * Returns whether the path of uploaded file is under the specific folder"},{"lineNumber":165,"author":{"gitID":"Livian1107"},"content":"     * @param path of the uploaded file"},{"lineNumber":166,"author":{"gitID":"Livian1107"},"content":"     * @param parentFolder of the specific folder"},{"lineNumber":167,"author":{"gitID":"Livian1107"},"content":"     * @return true if the file is under this specific folder"},{"lineNumber":168,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"Livian1107"},"content":"    public static boolean isUnderFolder(String path, String parentFolder) {"},{"lineNumber":170,"author":{"gitID":"Livian1107"},"content":"        return path.startsWith(parentFolder);"},{"lineNumber":171,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Livian1107":74,"-":99}},{"path":"src/main/java/seedu/progresschecker/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //for a word that contains the substring"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            for (int i \u003d 0; i \u003c\u003d wordInSentence.length() - preppedWord.length(); i++) {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"                if (wordInSentence.substring(i, i + preppedWord.length()).equalsIgnoreCase(preppedWord)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"     * Returns true if {@code s} is within the range 2 to 11."},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"     * e.g. 2, 3, 4, ..., 11 \u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"    public static boolean isWithinRange(String s) {"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(s);"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"            return value \u003e\u003d ViewCommand.MIN_WEEK_NUMBER \u0026\u0026 value \u003c\u003d ViewCommand.MAX_WEEK_NUMBER;"},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"AdityaA1998":4,"iNekox3":19,"-":71}},{"path":"src/main/java/seedu/progresschecker/ui/IssueCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" * An UI component that displays information of a {@code Issue}."},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class IssueCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private static final String FXML \u003d \"IssueListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    private static final String[] LABEL_COLORS \u003d { \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\" };"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    public final Issue issue;"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    @javafx.fxml.FXML"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    private Label title;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    private Label body;"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    private Label milestone;"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    private FlowPane labelled;"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    private FlowPane assignees;"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public IssueCard(Issue issue, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        this.issue \u003d issue;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        id.setText(\"#\" + displayedIndex + \" \");"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"        title.setText(issue.getTitle().toString());"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        body.setText(issue.getBody().fullBody);"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        milestone.setText(issue.getMilestone().fullMilestone);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        issue.getLabelsList().forEach(labels -\u003e {"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"            Label label \u003d new Label(labels.fullLabels);"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            label.getStyleClass().add(getLabelColor(labels.fullLabels));"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            labelled.getChildren().add(label);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        });"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        issue.getAssignees().forEach(assignee -\u003e {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"            Label label \u003d new Label(assignee.fullAssignees);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"            label.getStyleClass().add(getLabelColor(assignee.fullAssignees));"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"            assignees.getChildren().add(label);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        });"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"     * Get a deterministic label color based off label\u0027s name value."},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"    private String getLabelColor(String labelName) {"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        int index \u003d getValueOfString(labelName) % LABEL_COLORS.length;"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        return LABEL_COLORS[index];"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"     * Adds each letter of given string into an integer."},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    private int getValueOfString(String labelName) {"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"        int sum \u003d 0;"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        for (char c : labelName.toCharArray()) {"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"            sum +\u003d c;"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"        return sum;"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        // short circuit if same object"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof IssueCard)) {"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"        // state check"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        IssueCard card \u003d (IssueCard) other;"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 issue.equals(card.issue);"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":89,"-":9}},{"path":"src/main/java/seedu/progresschecker/ui/ProfilePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.shape.Ellipse;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":" * Panel contains the information of person"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"public class ProfilePanel extends UiPart\u003cRegion\u003e  {"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"    private static final String FXML \u003d \"ProfilePanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"    private static String DEFAULT_PHOTO \u003d \"/images/profile_photo.jpg\";"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"    private static final String[] TAG_COLORS \u003d { \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\" };"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"    private Person person;"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"    private Person currentlyViewedPerson;"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"    private Label name;"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"    private Label phone;"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"    private Label major;"},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"    private Label year;"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"    private Label email;"},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"    private Label username;"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"    private FlowPane tags;"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":"    private Ellipse profile;"},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"    public ProfilePanel() {"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"        super(FXML);"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":"        this.person \u003d null;"},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":"        loadDefaultPerson();"},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":66,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":67,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"     * Get a deterministic tag color based off tag\u0027s name value."},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"    private String getTagColor(String tagName) {"},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"        int index \u003d getValueOfString(tagName) % TAG_COLORS.length;"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":"        return TAG_COLORS[index];"},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"     * Adds each letter of given string into an integer."},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"    private int getValueOfString(String tagName) {"},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"        int sum \u003d 0;"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"        for (char c : tagName.toCharArray()) {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"            sum +\u003d c;"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"        return sum;"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":91,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"Livian1107"},"content":"     * Loads the default person"},{"lineNumber":93,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Livian1107"},"content":"    private void loadDefaultPerson() {"},{"lineNumber":95,"author":{"gitID":"Livian1107"},"content":"        name.setText(\"Person X\");"},{"lineNumber":96,"author":{"gitID":"Livian1107"},"content":"        phone.setText(\"\");"},{"lineNumber":97,"author":{"gitID":"Livian1107"},"content":"        username.setText(\"\");"},{"lineNumber":98,"author":{"gitID":"Livian1107"},"content":"        email.setText(\"\");"},{"lineNumber":99,"author":{"gitID":"Livian1107"},"content":"        year.setText(\"\");"},{"lineNumber":100,"author":{"gitID":"Livian1107"},"content":"        major.setText(\"\");"},{"lineNumber":101,"author":{"gitID":"Livian1107"},"content":"        tags.getChildren().clear();"},{"lineNumber":102,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":103,"author":{"gitID":"Livian1107"},"content":"        setDefaultInfoPhoto();"},{"lineNumber":104,"author":{"gitID":"Livian1107"},"content":"        currentlyViewedPerson \u003d null;"},{"lineNumber":105,"author":{"gitID":"Livian1107"},"content":"        logger.info(\"Currently Viewing: Default Person\");"},{"lineNumber":106,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"     * Loads the info of the selected person"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"    public void loadPerson(Person person) {"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"        this.person \u003d person;"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":"        tags.getChildren().clear();"},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"        major.setText(person.getMajor().value);"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":"        year.setText(person.getYear().value);"},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"        username.setText(person.getUsername().username);"},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"        //@@author iNekox3"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"            Label label \u003d new Label(tag.tagName);"},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"            label.getStyleClass().add(getTagColor(tag.tagName));"},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":"            tags.getChildren().add(label);"},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":"        });"},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"        //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"Livian1107"},"content":"        //@@author Livian1107"},{"lineNumber":129,"author":{"gitID":"Livian1107"},"content":"        loadPhoto();"},{"lineNumber":130,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":131,"author":{"gitID":"Livian1107"},"content":"        currentlyViewedPerson \u003d person;"},{"lineNumber":132,"author":{"gitID":"Livian1107"},"content":"        logger.info(\"Currently Viewing: \" + currentlyViewedPerson.getName());"},{"lineNumber":133,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":135,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"Livian1107"},"content":"     * Sets the default info photo."},{"lineNumber":137,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"Livian1107"},"content":"    public void setDefaultInfoPhoto() {"},{"lineNumber":139,"author":{"gitID":"Livian1107"},"content":"        Image defaultImage \u003d new Image(MainApp.class.getResourceAsStream(DEFAULT_PHOTO));"},{"lineNumber":140,"author":{"gitID":"Livian1107"},"content":"        profile.setFill(new ImagePattern(defaultImage));"},{"lineNumber":141,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":143,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"Livian1107"},"content":"     * Loads profile photo"},{"lineNumber":145,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"Livian1107"},"content":"    private void loadPhoto() {"},{"lineNumber":147,"author":{"gitID":"Livian1107"},"content":"        String photoPath \u003d person.getPhotoPath();"},{"lineNumber":148,"author":{"gitID":"Livian1107"},"content":"        Image profilePhoto;"},{"lineNumber":149,"author":{"gitID":"Livian1107"},"content":"        if (photoPath.contains(\"contact\")) {"},{"lineNumber":150,"author":{"gitID":"Livian1107"},"content":"            File photo \u003d new File(photoPath);"},{"lineNumber":151,"author":{"gitID":"Livian1107"},"content":"            if (photo.exists() \u0026\u0026 !photo.isDirectory()) {"},{"lineNumber":152,"author":{"gitID":"Livian1107"},"content":"                String url \u003d photo.toURI().toString();"},{"lineNumber":153,"author":{"gitID":"Livian1107"},"content":"                profilePhoto \u003d new Image(url);"},{"lineNumber":154,"author":{"gitID":"Livian1107"},"content":"                profile.setFill(new ImagePattern(profilePhoto));"},{"lineNumber":155,"author":{"gitID":"Livian1107"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"Livian1107"},"content":"        } else {"},{"lineNumber":157,"author":{"gitID":"Livian1107"},"content":"            profilePhoto \u003d new Image("},{"lineNumber":158,"author":{"gitID":"Livian1107"},"content":"                    MainApp.class.getResourceAsStream(person.getDefaultPath()));"},{"lineNumber":159,"author":{"gitID":"Livian1107"},"content":"            profile.setFill(new ImagePattern(profilePhoto));"},{"lineNumber":160,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":163,"author":{"gitID":"Livian1107"},"content":"    @Subscribe"},{"lineNumber":164,"author":{"gitID":"Livian1107"},"content":"    private void handlePersonPanelSelectionChangeEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":165,"author":{"gitID":"Livian1107"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":166,"author":{"gitID":"Livian1107"},"content":"        this.loadPerson(event.getNewSelection().person);"},{"lineNumber":167,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":120,"iNekox3":27,"-":21}},{"path":"src/main/java/seedu/progresschecker/commons/events/ui/TabLoadChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents a tab change in Main Window."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class TabLoadChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String type;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    public TabLoadChangedEvent(String type) {"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"        this.type \u003d type;"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    public String getTabName() {"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        return type;"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":21,"-":4}},{"path":"src/main/java/seedu/progresschecker/commons/events/ui/LoadUrlEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":" * Represents a page change in the Browser Panel"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"public class LoadUrlEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"    public final String url;"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public LoadUrlEvent(String url) {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        this.url \u003d url;"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public String getUrl() {"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        return url;"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"}"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"//@@author"}],"authorContributionMap":{"EdwardKSG":24,"-":4}},{"path":"src/main/java/seedu/progresschecker/commons/events/ui/LoadTaskEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":" * Represents a page change in the Browser Panel"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"public class LoadTaskEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"    public final String content;"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public LoadTaskEvent(String content) {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        this.content \u003d content;"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public String getContent() {"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        return content;"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"}"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"//@@author"}],"authorContributionMap":{"EdwardKSG":24,"-":4}},{"path":"src/main/java/seedu/progresschecker/commons/events/ui/LoadBarEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":" * Represents a page change in the second Browser Panel which shows the progress bar."},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"public class LoadBarEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"    public final String content;"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public LoadBarEvent(String content) {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        this.content \u003d content;"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public String getContent() {"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        return content;"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"}"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"//@@author"}],"authorContributionMap":{"EdwardKSG":24,"-":4}},{"path":"src/main/java/seedu/progresschecker/commons/events/ui/ChangeThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":" * Represents the change of the theme of ProgressChecker."},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"public class ChangeThemeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"    public final String theme;"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":"    public ChangeThemeEvent(String theme) {"},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"        this.theme \u003d theme;"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"    public String getTheme() {"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"        return theme;"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":20,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ReopenIssueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new CloseIssueCommand object"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommandParser implements Parser\u003cReopenIssueCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the ReopenIssueCommand"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an ReopenIssueCommand object for execution."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public ReopenIssueCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            return new ReopenIssueCommand(index);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenIssueCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":24,"-":7}},{"path":"src/main/java/seedu/progresschecker/logic/parser/GoToTaskUrlCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GoToTaskUrlCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new GoToTaskUrlCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class GoToTaskUrlCommandParser implements Parser\u003cGoToTaskUrlCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the GoToTaskUrlCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns a GoToTaskUrlCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public GoToTaskUrlCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            int index \u003d ParserUtil.parseTaskIndex(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new GoToTaskUrlCommand(index);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_INDEX_OR_FORMAT, GoToTaskUrlCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":22,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ResetTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new ResetTaskCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class ResetTaskCommandParser implements Parser\u003cResetTaskCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the ResetTaskCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns an ResetTaskCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public ResetTaskCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            int index \u003d ParserUtil.parseTaskIndex(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new ResetTaskCommand(index);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_INDEX_OR_FORMAT, ResetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":22,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/UploadCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UploadCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":" * Parses input arguments and creates a new UploadCommand object"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"public class UploadCommandParser  implements Parser\u003cUploadCommand\u003e  {"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"     * Parses the given {@code String} of arguments in the context of the UploadCommand"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"     * and returns an UploadCommand object for execution."},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"    public UploadCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"        Index index;"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"        String[] content \u003d args.trim().split(\" \");"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"            index \u003d ParserUtil.parseIndex(content[0]);"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"            return new UploadCommand(index, content[1]);"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"                    UploadCommand.MESSAGE_IMAGE_NOT_FOUND);"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":27,"-":12}},{"path":"src/main/java/seedu/progresschecker/logic/CommandFormatListUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AnswerCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssueCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.EditIssueCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLogoutCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GoToTaskUrlCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SortCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ThemeCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UploadCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":" * Initialises and returns a list which contains different command formats"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"public final class CommandFormatListUtil {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    private static ArrayList\u003cString\u003e commandFormatList;"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    public static ArrayList\u003cString\u003e getCommandFormatList () {"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        createCommandFormatList();"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        return commandFormatList;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"     * Creates commandFormatList for existing commands"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    private static void createCommandFormatList() {"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(AddCommand.COMMAND_FORMAT);"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(AnswerCommand.COMMAND_FORMAT);"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(DeleteCommand.COMMAND_FORMAT);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(CompleteTaskCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(EditCommand.COMMAND_FORMAT);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(FindCommand.COMMAND_FORMAT);"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(GoToTaskUrlCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ResetTaskCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(SelectCommand.COMMAND_FORMAT);"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(SortCommand.COMMAND_WORD);"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(UploadCommand.COMMAND_FORMAT);"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ViewCommand.COMMAND_FORMAT);"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ViewTaskListCommand.COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(CreateIssueCommand.COMMAND_FORMAT);"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(EditIssueCommand.COMMAND_FORMAT);"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ReopenIssueCommand.COMMAND_FORMAT);"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(CloseIssueCommand.COMMAND_FORMAT);"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(GitLoginCommand.COMMAND_FORMAT);"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(ThemeCommand.COMMAND_FORMAT);"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        commandFormatList.add(GitLogoutCommand.COMMAND_WORD);"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"        //sorting the commandFormatList"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"        Collections.sort(commandFormatList);"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":54,"-":26}},{"path":"src/main/java/seedu/progresschecker/logic/parser/EditIssueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.EditIssueCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new EditIssueCommand object"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"public class EditIssueCommandParser implements Parser\u003cEditIssueCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the EditIssueCommand"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an EditIssueCommand object for execution."},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public EditIssueCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_ASSIGNEES, PREFIX_MILESTONE, PREFIX_BODY,"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"                        PREFIX_LABEL);"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIssueCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        EditIssueCommand.EditIssueDescriptor editIssueDescriptor \u003d new EditIssueCommand.EditIssueDescriptor();"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).ifPresent(editIssueDescriptor::setTitle);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            parseAssigneesForEdit(argMultimap.getAllValues(PREFIX_ASSIGNEES))"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                    .ifPresent(editIssueDescriptor::setAssignees);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            ParserUtil.parseMilestone(argMultimap.getValue(PREFIX_MILESTONE))"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"                    .ifPresent(editIssueDescriptor::setMilestone);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"            ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY))"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"                    .ifPresent(editIssueDescriptor::setBody);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            parseLabelsForEdit(argMultimap.getAllValues(PREFIX_LABEL)).ifPresent(editIssueDescriptor::setLabels);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        if (!editIssueDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"            return new EditIssueCommand(index, editIssueDescriptor);"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(EditIssueCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e labels} into a {@code Set\u003cLabels\u003e} if {@code labels} is non-empty."},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"     * If {@code labels} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"     * {@code Set\u003cLabels\u003e} containing zero labels."},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    private Optional\u003cSet\u003cLabels\u003e\u003e parseLabelsForEdit(Collection\u003cString\u003e labels) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        assert labels !\u003d null;"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        if (labels.isEmpty()) {"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.empty();"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        Collection\u003cString\u003e labelSet \u003d labels.size() \u003d\u003d 1 \u0026\u0026 labels.contains(\"\") ? Collections.emptySet() : labels;"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        return Optional.of(ParserUtil.parseLabels(labels));"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e assignees} into a {@code Set\u003cAssignees\u003e} if {@code assignees} is non-empty."},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"     * If {@code assignees} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"     * {@code Set\u003cAssignees\u003e} containing zero assignees."},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"    private Optional\u003cSet\u003cAssignees\u003e\u003e parseAssigneesForEdit(Collection\u003cString\u003e assignees) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        assert assignees !\u003d null;"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"        if (assignees.isEmpty()) {"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.empty();"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        Collection\u003cString\u003e assigneesSet \u003d assignees.size() \u003d\u003d 1"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 assignees.contains(\"\") ? Collections.emptySet() : assignees;"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        return Optional.of(ParserUtil.parseAssignees(assignees));"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":86,"-":21}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ViewTaskListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_TASK_FILTER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new ViewTaskListCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class ViewTaskListCommandParser implements Parser\u003cViewTaskListCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewTaskListCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns an ViewTaskListCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public ViewTaskListCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            int week \u003d ParserUtil.parseTaskWeek(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new ViewTaskListCommand(week);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_TASK_FILTER, ViewTaskListCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":21,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/CompleteTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX_OR_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":" * Parses input arguments and creates a new CompleteTaskCommand object"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"public class CompleteTaskCommandParser implements Parser\u003cCompleteTaskCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"     * Parses the given {@code String} of arguments in the context of the CompleteTaskCommand"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * and returns an CompleteTaskCommand object for execution."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public CompleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"            int index \u003d ParserUtil.parseTaskIndex(args);"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"            return new CompleteTaskCommand(index);"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    String.format(MESSAGE_INVALID_INDEX_OR_FORMAT, CompleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":22,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/AnswerCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AnswerCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":" * Parses input arguments and creates a new AnswerCommand object"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    private static final int QUESTION_INDEX_INDEX \u003d 0;"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    private static final int ANSWER_INDEX \u003d 1;"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"     * Parses the given {@code String} of arguments in the context of the AnswerCommand"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"     * and returns an AnswerCommand object for execution."},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    public AnswerCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"            String[] content \u003d args.trim().split(\" \", 2);"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"            QuestionIndex questionIndex;"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"            questionIndex \u003d ParserUtil.parseQuestionIndex(content[QUESTION_INDEX_INDEX]);"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"            StudentAnswer studentAnswer \u003d ParserUtil.parseStudentAnswer(content[ANSWER_INDEX]);"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"            return new AnswerCommand(questionIndex, studentAnswer);"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":32,"-":11}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":" * Parses input arguments and creates a new ViewCommand object"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     * and returns an ViewCommand object for execution."},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"            String[] typeArray \u003d ParserUtil.parseTabType(args);"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"            String type \u003d typeArray[0];"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"            int weekNumber \u003d -1;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"            boolean isToggleExerciseByWeek \u003d false;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"            if (typeArray.length \u003e 1) {"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"                weekNumber \u003d Integer.parseInt(typeArray[1]);"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"                isToggleExerciseByWeek \u003d true;"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"            }"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"            return new ViewCommand(type, weekNumber, isToggleExerciseByWeek);"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":28,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.ALL_WEEK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.COMPULSORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.MAX_TITLE_LENGTH;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.SUBMISSION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Passcode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Repository;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Username;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":38,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX_OR_FORMAT \u003d \"Wrong format or index is not a positive integer.\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_TASK_FILTER \u003d \"Filter keyword is not an integer 1~13 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"or * or \\\"submission\\\" or \\\"sub\\\" or \\\"compulsory\\\" or \\\"com\\\".\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_TAB_TYPE \u003d \"Invalid command format!\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_WEEK_NUMBER \u003d \"Invalid command format!\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"     * Parses {@code String} into an {@code int} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"     * trimmed."},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"    public static int parseTaskIndex(String index) throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedIndex \u003d index.trim();"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"        return Integer.parseInt(trimmedIndex);"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"     * Parses {@code String} into an {@code int} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"     * trimmed."},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the specified week number is invalid (neither an integer ranging from 1 to 13"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"     * nor an asterisk(*))."},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"    public static int parseTaskWeek(String week) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedWeek \u003d week.trim();"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"        if (trimmedWeek.equals(\"*\")) {"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"            return ALL_WEEK;"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"        } else if (trimmedWeek.equals(\"sub\") || trimmedWeek.equals(\"submission\")) {"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"            return SUBMISSION;"},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"        } else if (trimmedWeek.equals(\"com\") || trimmedWeek.equals(\"compulsory\")) {"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"            return COMPULSORY;"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"        } else if (!StringUtil.isNonZeroUnsignedInteger(trimmedWeek)) {"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TASK_FILTER);"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        int intWeek \u003d Integer.parseInt(trimmedWeek);"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        if (intWeek \u003e\u003d 1 \u0026\u0026 intWeek \u003c\u003d 13) {"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"            return intWeek;"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        } else {"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TASK_FILTER);"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"     * Parses {@code type} into a {@code String[]} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"     * trimmed."},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":"     * @throws IllegalValueException if the specified type is invalid, that is:"},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"     * i. type is not of string \"profile\", \"task\", or \"exercise\"."},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"     * ii. type is of \"exercise\" and comes with an index specified"},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":"     *     in which the index does not fall between the accepted range."},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"    public static String[] parseTabType(String type) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"        String trimmedType \u003d type.trim();"},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":"        String[] trimmedTypeArray \u003d trimmedType.split(\" \");"},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"        if (!trimmedTypeArray[0].equals(\"profile\")"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 !trimmedTypeArray[0].equals(\"task\")"},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 !trimmedTypeArray[0].equals(\"exercise\")"},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 !trimmedTypeArray[0].equals(\"issues\")) {"},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TAB_TYPE);"},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"        if (trimmedTypeArray.length \u003e 1"},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 trimmedTypeArray[0].equals(\"exercise\")"},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 !StringUtil.isWithinRange(trimmedTypeArray[1])) {"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_WEEK_NUMBER);"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":133,"author":{"gitID":"iNekox3"},"content":"        return trimmedTypeArray;"},{"lineNumber":134,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":136,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":137,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Livian1107"},"content":"     * Parses {@code type} into a {@code String} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":139,"author":{"gitID":"Livian1107"},"content":"     * trimmed."},{"lineNumber":140,"author":{"gitID":"Livian1107"},"content":"     * @throws IllegalValueException if the specified theme is invalid (not of string \"day\" or \"night\")."},{"lineNumber":141,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Livian1107"},"content":"    public static String parseTheme(String theme) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"Livian1107"},"content":"        String trimmedType \u003d theme.trim();"},{"lineNumber":144,"author":{"gitID":"Livian1107"},"content":"        if (!trimmedType.equals(\"day\") \u0026\u0026 !trimmedType.equals(\"night\")) {"},{"lineNumber":145,"author":{"gitID":"Livian1107"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TAB_TYPE);"},{"lineNumber":146,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"Livian1107"},"content":"        return trimmedType;"},{"lineNumber":148,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String Title} into a {@code String}."},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code Title} is invalid."},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"    public static String parseTaskTitle(String title) throws IllegalValueException {"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(title);"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"        if (trimmedTitle.length() \u003e MAX_TITLE_LENGTH) {"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"        return trimmedTitle;"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String title} into a {@code Title}."},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IllegalValueException if the given {@code title} is invalid."},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"    public static Title parseTitle(String title) throws IllegalValueException {"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(title);"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cName\u003e} if {@code title} is present."},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cTitle\u003e parseTitle(Optional\u003cString\u003e title) throws IllegalValueException {"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(title);"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String assignees} into a {@code Assignees}."},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":"    public static Assignees parseAssignees(String assignees) throws IllegalValueException {"},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(assignees);"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedAssignees \u003d assignees.trim();"},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":"        if (!Assignees.isValidAssignee(trimmedAssignees)) {"},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Assignees.MESSAGE_ASSIGNEES_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"        return new Assignees(trimmedAssignees);"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e assignees} into a {@code Set\u003cAssignees\u003e}."},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":"    public static Set\u003cAssignees\u003e parseAssignees(Collection\u003cString\u003e assignees) throws IllegalValueException {"},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(assignees);"},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":"        final Set\u003cAssignees\u003e assigneesSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":237,"author":{"gitID":"AdityaA1998"},"content":"        for (String assigneeName : assignees) {"},{"lineNumber":238,"author":{"gitID":"AdityaA1998"},"content":"            assigneesSet.add(parseAssignees(assigneeName));"},{"lineNumber":239,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"AdityaA1998"},"content":"        return assigneesSet;"},{"lineNumber":241,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":243,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String labels} into a {@code Labels}."},{"lineNumber":245,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":246,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":248,"author":{"gitID":"AdityaA1998"},"content":"    public static Labels parseLabels(String labels) throws IllegalValueException {"},{"lineNumber":249,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(labels);"},{"lineNumber":250,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedLabels \u003d labels.trim();"},{"lineNumber":251,"author":{"gitID":"AdityaA1998"},"content":"        if (!Labels.isValidLabel(trimmedLabels)) {"},{"lineNumber":252,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Labels.MESSAGE_LABEL_CONSTRAINTS);"},{"lineNumber":253,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"AdityaA1998"},"content":"        return new Labels(trimmedLabels);"},{"lineNumber":255,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":257,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"AdityaA1998"},"content":"     * Parses {@code Collection\u003cString\u003e labels} into a {@code Set\u003cLabels\u003e}."},{"lineNumber":259,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"AdityaA1998"},"content":"    public static Set\u003cLabels\u003e parseLabels(Collection\u003cString\u003e labels) throws IllegalValueException {"},{"lineNumber":261,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(labels);"},{"lineNumber":262,"author":{"gitID":"AdityaA1998"},"content":"        final Set\u003cLabels\u003e labelsSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":263,"author":{"gitID":"AdityaA1998"},"content":"        for (String labelName : labels) {"},{"lineNumber":264,"author":{"gitID":"AdityaA1998"},"content":"            labelsSet.add(parseLabels(labelName));"},{"lineNumber":265,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"AdityaA1998"},"content":"        return labelsSet;"},{"lineNumber":267,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":269,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":270,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String milestone} into a {@code Milestone}."},{"lineNumber":272,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":273,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":274,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IllegalValueException if the given {@code milestone} is invalid."},{"lineNumber":275,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":277,"author":{"gitID":"AdityaA1998"},"content":"    public static Milestone parseMilestone(String milestone) throws IllegalValueException {"},{"lineNumber":278,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(milestone);"},{"lineNumber":279,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedMilestone \u003d milestone.trim();"},{"lineNumber":280,"author":{"gitID":"AdityaA1998"},"content":"        return new Milestone(trimmedMilestone);"},{"lineNumber":281,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":283,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code Optional\u003cString\u003e milestone} into an {@code Optional\u003cMilestone\u003e} if {@code milestone} is present."},{"lineNumber":285,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":286,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cMilestone\u003e parseMilestone(Optional\u003cString\u003e milestone) throws IllegalValueException {"},{"lineNumber":288,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(milestone);"},{"lineNumber":289,"author":{"gitID":"AdityaA1998"},"content":"        return milestone.isPresent() ? Optional.of(parseMilestone(milestone.get())) : Optional.empty();"},{"lineNumber":290,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":292,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String body} into a {@code Body}."},{"lineNumber":294,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":295,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":297,"author":{"gitID":"AdityaA1998"},"content":"    public static Body parseBody(String body) throws IllegalValueException {"},{"lineNumber":298,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(body);"},{"lineNumber":299,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedBody \u003d body.trim();"},{"lineNumber":300,"author":{"gitID":"AdityaA1998"},"content":"        if (!Body.isValidBody(trimmedBody)) {"},{"lineNumber":301,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Body.MESSAGE_BODY_CONSTRAINTS);"},{"lineNumber":302,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"AdityaA1998"},"content":"        return new Body(trimmedBody);"},{"lineNumber":304,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":306,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code Optional\u003cString\u003e body} into an {@code Optional\u003cBody\u003e} if {@code body} is present."},{"lineNumber":308,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":309,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cBody\u003e parseBody(Optional\u003cString\u003e body) throws IllegalValueException {"},{"lineNumber":311,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(body);"},{"lineNumber":312,"author":{"gitID":"AdityaA1998"},"content":"        return body.isPresent() ? Optional.of(parseBody(body.get())) : Optional.empty();"},{"lineNumber":313,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":315,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":316,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String username} into a {@code Username}."},{"lineNumber":317,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":318,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"AdityaA1998"},"content":"    public static Username parseGitUsername(String username) throws IllegalValueException {"},{"lineNumber":320,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(username);"},{"lineNumber":321,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":322,"author":{"gitID":"AdityaA1998"},"content":"        if (!Username.isValidUsername(trimmedUsername)) {"},{"lineNumber":323,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Username.MESSAGE_GITUSERNAME_CONSTRAINTS);"},{"lineNumber":324,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"AdityaA1998"},"content":"        return new Username(trimmedUsername);"},{"lineNumber":326,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":328,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":329,"author":{"gitID":"AdityaA1998"},"content":"     Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cUsername\u003e} if {@code username} is present."},{"lineNumber":330,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":331,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cUsername\u003e parseGitUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":333,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(username);"},{"lineNumber":334,"author":{"gitID":"AdityaA1998"},"content":"        return username.isPresent() ? Optional.of(parseGitUsername(username.get())) : Optional.empty();"},{"lineNumber":335,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":337,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String passcode} into a {@code Passcode}."},{"lineNumber":339,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"AdityaA1998"},"content":"    public static Passcode parsePasscode(String passcode) throws IllegalValueException {"},{"lineNumber":341,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(passcode);"},{"lineNumber":342,"author":{"gitID":"AdityaA1998"},"content":"        if (!Passcode.isValidPasscode(passcode)) {"},{"lineNumber":343,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Passcode.MESSAGE_PASSCODE_CONSTRAINTS);"},{"lineNumber":344,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"AdityaA1998"},"content":"        return new Passcode(passcode);"},{"lineNumber":346,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":348,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":349,"author":{"gitID":"AdityaA1998"},"content":"     Parses a {@code Optional\u003cString\u003e Passcode} into an {@code Optional\u003cPasscode\u003e} if {@code passcpde} is present."},{"lineNumber":350,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":351,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":352,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cPasscode\u003e parsePasscode(Optional\u003cString\u003e passcode) throws IllegalValueException {"},{"lineNumber":353,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(passcode);"},{"lineNumber":354,"author":{"gitID":"AdityaA1998"},"content":"        return passcode.isPresent() ? Optional.of(parsePasscode(passcode.get())) : Optional.empty();"},{"lineNumber":355,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":357,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":358,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String repositroy} into a {@code Repository}."},{"lineNumber":359,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":360,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":361,"author":{"gitID":"AdityaA1998"},"content":"    public static Repository parseRepository(String repository) throws IllegalValueException {"},{"lineNumber":362,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(repository);"},{"lineNumber":363,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedRepository \u003d repository.trim();"},{"lineNumber":364,"author":{"gitID":"AdityaA1998"},"content":"        if (!Repository.isValidRepository(trimmedRepository)) {"},{"lineNumber":365,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(Repository.MESSAGE_REPOSITORY_CONSTRAINTS);"},{"lineNumber":366,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":367,"author":{"gitID":"AdityaA1998"},"content":"        return new Repository(trimmedRepository);"},{"lineNumber":368,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":370,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":371,"author":{"gitID":"AdityaA1998"},"content":"     Parses a {@code Optional\u003cString\u003e Repository} into an {@code Optional\u003cRepository\u003e} if {@code repository} is present."},{"lineNumber":372,"author":{"gitID":"AdityaA1998"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":373,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":374,"author":{"gitID":"AdityaA1998"},"content":"    public static Optional\u003cRepository\u003e parseRepository(Optional\u003cString\u003e repository) throws IllegalValueException {"},{"lineNumber":375,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(repository);"},{"lineNumber":376,"author":{"gitID":"AdityaA1998"},"content":"        return repository.isPresent() ? Optional.of(parseRepository(repository.get())) : Optional.empty();"},{"lineNumber":377,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":378,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":379,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":380,"author":{"gitID":"AdityaA1998"},"content":"     * Parses a {@code String state} into a trimmed string."},{"lineNumber":381,"author":{"gitID":"AdityaA1998"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":382,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":383,"author":{"gitID":"AdityaA1998"},"content":"    public static String parseStateType(String state) throws IllegalValueException {"},{"lineNumber":384,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(state);"},{"lineNumber":385,"author":{"gitID":"AdityaA1998"},"content":"        String trimmedState \u003d state.trim();"},{"lineNumber":386,"author":{"gitID":"AdityaA1998"},"content":"        return trimmedState;"},{"lineNumber":387,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":391,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":392,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String username} into a {@code GithubUsername}."},{"lineNumber":393,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":394,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":395,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code username} is invalid."},{"lineNumber":396,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":397,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":398,"author":{"gitID":"EdwardKSG"},"content":"    public static GithubUsername parseUsername(String username) throws IllegalValueException {"},{"lineNumber":399,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(username);"},{"lineNumber":400,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":401,"author":{"gitID":"EdwardKSG"},"content":"        if (!GithubUsername.isValidUsername(trimmedUsername)) {"},{"lineNumber":402,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(GithubUsername.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":403,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":404,"author":{"gitID":"EdwardKSG"},"content":"        return new GithubUsername(trimmedUsername);"},{"lineNumber":405,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":407,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":408,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cGithubUsername\u003e}"},{"lineNumber":409,"author":{"gitID":"EdwardKSG"},"content":"     *     if {@code username} is present."},{"lineNumber":410,"author":{"gitID":"EdwardKSG"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":411,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":412,"author":{"gitID":"EdwardKSG"},"content":"    public static Optional\u003cGithubUsername\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":413,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(username);"},{"lineNumber":414,"author":{"gitID":"EdwardKSG"},"content":"        return username.isPresent() ? Optional.of(parseUsername(username.get())) : Optional.empty();"},{"lineNumber":415,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":419,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":420,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":421,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":422,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":423,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":424,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":425,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":426,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":427,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":428,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":429,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":430,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":431,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":434,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":435,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":436,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":437,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":439,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":443,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":444,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String major} into an {@code Major}."},{"lineNumber":445,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":446,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":447,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code major} is invalid."},{"lineNumber":448,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":449,"author":{"gitID":"EdwardKSG"},"content":"    public static Major parseMajor(String major) throws IllegalValueException {"},{"lineNumber":450,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(major);"},{"lineNumber":451,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedMajor \u003d major.trim();"},{"lineNumber":452,"author":{"gitID":"EdwardKSG"},"content":"        if (!Major.isValidMajor(trimmedMajor)) {"},{"lineNumber":453,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":454,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":455,"author":{"gitID":"EdwardKSG"},"content":"        return new Major(trimmedMajor);"},{"lineNumber":456,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":457,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":458,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":459,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code Optional\u003cString\u003e major} into an {@code Optional\u003cMajor\u003e} if {@code major} is present."},{"lineNumber":460,"author":{"gitID":"EdwardKSG"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":461,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":462,"author":{"gitID":"EdwardKSG"},"content":"    public static Optional\u003cMajor\u003e parseMajor(Optional\u003cString\u003e major) throws IllegalValueException {"},{"lineNumber":463,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(major);"},{"lineNumber":464,"author":{"gitID":"EdwardKSG"},"content":"        return major.isPresent() ? Optional.of(parseMajor(major.get())) : Optional.empty();"},{"lineNumber":465,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":466,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":467,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":468,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code String year} into an {@code Year}."},{"lineNumber":469,"author":{"gitID":"EdwardKSG"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":470,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":471,"author":{"gitID":"EdwardKSG"},"content":"     * @throws IllegalValueException if the given {@code year} is invalid."},{"lineNumber":472,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":473,"author":{"gitID":"EdwardKSG"},"content":"    public static Year parseYear(String year) throws IllegalValueException {"},{"lineNumber":474,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(year);"},{"lineNumber":475,"author":{"gitID":"EdwardKSG"},"content":"        String trimmedYear \u003d year.trim();"},{"lineNumber":476,"author":{"gitID":"EdwardKSG"},"content":"        if (!Year.isValidYear(trimmedYear)) {"},{"lineNumber":477,"author":{"gitID":"EdwardKSG"},"content":"            throw new IllegalValueException(Year.MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":478,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":479,"author":{"gitID":"EdwardKSG"},"content":"        return new Year(trimmedYear);"},{"lineNumber":480,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":481,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":482,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":483,"author":{"gitID":"EdwardKSG"},"content":"     * Parses a {@code Optional\u003cString\u003e year} into an {@code Optional\u003cYear\u003e} if {@code year} is present."},{"lineNumber":484,"author":{"gitID":"EdwardKSG"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":485,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":486,"author":{"gitID":"EdwardKSG"},"content":"    public static Optional\u003cYear\u003e parseYear(Optional\u003cString\u003e year) throws IllegalValueException {"},{"lineNumber":487,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(year);"},{"lineNumber":488,"author":{"gitID":"EdwardKSG"},"content":"        return year.isPresent() ? Optional.of(parseYear(year.get())) : Optional.empty();"},{"lineNumber":489,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":490,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":493,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":494,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":495,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":496,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":497,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":498,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":499,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":500,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":501,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":502,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":503,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":504,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":505,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":508,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":509,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":510,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":511,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":512,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":513,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":514,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":517,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":518,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":519,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":520,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":521,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":522,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":523,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":524,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":525,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":526,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":527,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":528,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":529,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":532,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":533,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":534,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":535,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":536,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":537,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":538,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":539,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":540,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":541,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":544,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":545,"author":{"gitID":"iNekox3"},"content":"     * Parses a {@code String questionIndex} into a {@code QuestionIndex}."},{"lineNumber":546,"author":{"gitID":"iNekox3"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":547,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":548,"author":{"gitID":"iNekox3"},"content":"     * @throws IllegalValueException if the given {@code questionIndex} is invalid."},{"lineNumber":549,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":550,"author":{"gitID":"iNekox3"},"content":"    public static QuestionIndex parseQuestionIndex(String questionIndex) throws IllegalValueException {"},{"lineNumber":551,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(questionIndex);"},{"lineNumber":552,"author":{"gitID":"iNekox3"},"content":"        String trimmedQuestionIndex \u003d questionIndex.trim();"},{"lineNumber":553,"author":{"gitID":"iNekox3"},"content":"        if (!QuestionIndex.isValidIndex(trimmedQuestionIndex)) {"},{"lineNumber":554,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(QuestionIndex.MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":555,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":556,"author":{"gitID":"iNekox3"},"content":"        return new QuestionIndex(trimmedQuestionIndex);"},{"lineNumber":557,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":558,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":559,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":560,"author":{"gitID":"iNekox3"},"content":"     * Parses a {@code String studentAnswer} into a {@code StudentAnswer}."},{"lineNumber":561,"author":{"gitID":"iNekox3"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":562,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":563,"author":{"gitID":"iNekox3"},"content":"    public static StudentAnswer parseStudentAnswer(String studentAnswer) {"},{"lineNumber":564,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(studentAnswer);"},{"lineNumber":565,"author":{"gitID":"iNekox3"},"content":"        String trimmedStudentAnswer \u003d studentAnswer.trim();"},{"lineNumber":566,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":567,"author":{"gitID":"iNekox3"},"content":"        return new StudentAnswer(trimmedStudentAnswer);"},{"lineNumber":568,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":569,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"EdwardKSG":131,"Livian1107":14,"AdityaA1998":198,"iNekox3":55,"-":171}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ThemeCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":" * Parses input arguments and creates a new ThemeCommand object"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"     * and returns an ViewCommand object for execution."},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"            String theme \u003d ParserUtil.parseTheme(args);"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"            return new ThemeCommand(theme);"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":21,"-":8}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ProgressCheckerParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_TITLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AddDefaultTasksCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.AnswerCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.Command;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CompleteTaskCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssueCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.EditIssueCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLogoutCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GoToTaskUrlCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ListIssuesCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ReopenIssueCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ResetTaskCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.SortCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ThemeCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.UploadCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class ProgressCheckerParser {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        final String commandWordInLowerCase \u003d commandWord.toLowerCase();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        switch (commandWordInLowerCase) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case AddDefaultTasksCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case AddDefaultTasksCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new AddDefaultTasksCommand(DEFAULT_LIST_TITLE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case ViewTaskListCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case ViewTaskListCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new ViewTaskListCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case CompleteTaskCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case CompleteTaskCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new CompleteTaskCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case ThemeCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case ResetTaskCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case ResetTaskCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new ResetTaskCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case GoToTaskUrlCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case GoToTaskUrlCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new GoToTaskUrlCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case AnswerCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case AnswerCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new AnswerCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        case EditIssueCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"        case EditIssueCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"            return new EditIssueCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case UploadCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case UploadCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new UploadCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case CreateIssueCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        case CreateIssueCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new CreateIssueParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return new SortCommand();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"        case ViewCommand.COMMAND_ALIAS:"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"        case ReopenIssueCommand.COMMAND_WORD:"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"        case ReopenIssueCommand.COMMAND_ALIAS:"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"            return new ReopenIssueCommandParser().parse(arguments);"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"        case CloseIssueCommand.COMMAND_WORD:"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"        case CloseIssueCommand.COMMAND_ALIAS:"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"            return new CloseIssueCommandParser().parse(arguments);"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        case GitLoginCommand.COMMAND_WORD:"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        case GitLoginCommand.COMMAND_ALIAS:"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return new GitLoginCommandParser().parse(arguments);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        case GitLogoutCommand.COMMAND_WORD:"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        case GitLogoutCommand.COMMAND_ALIAS:"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return new GitLogoutCommand();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"        case ListIssuesCommand.COMMAND_WORD:"},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"        case ListIssuesCommand.COMMAND_ALIAS:"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"            return new ListIssuesCommandParser().parse(arguments);"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":24,"-":166}},{"path":"src/main/java/seedu/progresschecker/logic/parser/GitLoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_PASSCODE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_REPO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_USERNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.GitLoginCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Passcode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Repository;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.Username;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new GitDetails object"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"public class GitLoginCommandParser implements Parser\u003cGitLoginCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the GitLoginCommand"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an GitLoginCommand object for execution."},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public GitLoginCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GIT_USERNAME, PREFIX_GIT_PASSCODE, PREFIX_GIT_REPO);"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GIT_USERNAME, PREFIX_GIT_PASSCODE, PREFIX_GIT_REPO)"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GitLoginCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            Username username \u003d ParserUtil.parseGitUsername(argMultimap.getValue(PREFIX_GIT_USERNAME)).get();"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            Passcode passcode \u003d ParserUtil.parsePasscode(argMultimap.getValue(PREFIX_GIT_PASSCODE)).get();"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"            Repository repository \u003d ParserUtil.parseRepository(argMultimap.getValue(PREFIX_GIT_REPO)).get();"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            GitDetails details \u003d new GitDetails(username, passcode, repository);"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            return new GitLoginCommand(details);"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":42,"-":17}},{"path":"src/main/java/seedu/progresschecker/logic/parser/CreateIssueParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CreateIssueCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new CreateIssueCommand object"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueParser implements Parser\u003cCreateIssueCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the CreateIssueCommand"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an createIssue object for execution."},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public CreateIssueCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_ASSIGNEES,"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"                        PREFIX_MILESTONE, PREFIX_BODY, PREFIX_LABEL);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateIssueCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).get();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            Set\u003cAssignees\u003e assigneeSet \u003d ParserUtil.parseAssignees(argMultimap.getAllValues(PREFIX_ASSIGNEES));"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"            Milestone milestone \u003d ParserUtil.parseMilestone(argMultimap.getValue(PREFIX_MILESTONE)).orElse(null);"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"            Body body \u003d ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY).orElse(\"\"));"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"            Set\u003cLabels\u003e labelSet \u003d ParserUtil.parseLabels(argMultimap.getAllValues(PREFIX_LABEL));"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            List\u003cAssignees\u003e assigneesList \u003d new ArrayList\u003c\u003e(assigneeSet);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"            List\u003cLabels\u003e labelsList \u003d new ArrayList\u003c\u003e(labelSet);"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"            Issue issue \u003d new Issue(title, assigneesList, milestone, body, labelsList);"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"            return new CreateIssueCommand(issue);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":48,"-":24}},{"path":"src/main/java/seedu/progresschecker/logic/apisetup/ConnectTasksApi.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.apisetup;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.api.client.http.javanet.NetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.api.client.util.store.DataStoreFactory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.Tasks;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.TasksScopes;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":" * Sets up Google Tasks API."},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":" * i. Authorizes data access based on client credentials."},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":" * ii. Builds service (initializes API)."},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"public class ConnectTasksApi {"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    private static final String appName \u003d \"ProgressChecker\";"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    private JsonFactory jsonFactory;"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    private HttpTransport transport;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    private Credential credentials;"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public ConnectTasksApi() {"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"        this.jsonFactory \u003d new JacksonFactory();"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        this.transport \u003d new NetHttpTransport();"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"        this.credentials \u003d null;"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"     * Authorizes the data access requested by Tasks API by loading client secrets file."},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    public void authorize() throws Exception {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        final java.util.logging.Logger buggyLogger \u003d java.util.logging.Logger.getLogger("},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"                FileDataStoreFactory.class.getName());"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        buggyLogger.setLevel(java.util.logging.Level.SEVERE);"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        // Sets up files to store access token"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        DataStoreFactory datastore \u003d new FileDataStoreFactory("},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"                new File(\"tokens\")"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        );"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"        InputStream in \u003d"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"                ConnectTasksApi.class.getResourceAsStream(\"/client_id.json\");"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        // Loads Client Secrets file downloaded from Google developer console."},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load("},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"                this.jsonFactory,"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"                new InputStreamReader(in)"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        );"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        // Sets Up authorization code flow."},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"                this.transport,"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"                this.jsonFactory,"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"                clientSecrets,"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"                Collections.singleton(TasksScopes.TASKS)"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        ).setDataStoreFactory(datastore).build();"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        // Authorizes with client credentials."},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        this.credentials \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                flow,"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"                new LocalServerReceiver()"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"        ).authorize(\"user\");"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"     * Builds Google Tasks service."},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"    public Tasks getTasksService() {"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"        return new Tasks.Builder("},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"                this.transport,"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"                this.jsonFactory,"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"                this.credentials"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"        ).setApplicationName(appName).build();"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":66,"-":21}},{"path":"src/main/java/seedu/progresschecker/logic/parser/CloseIssueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.CloseIssueCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new CloseIssueCommand object"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommandParser implements Parser\u003cCloseIssueCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the CloseIssueCommand"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an CloseIssueCommand object for execution."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public CloseIssueCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            return new CloseIssueCommand(index);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseIssueCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":24,"-":7}},{"path":"src/main/java/seedu/progresschecker/logic/parser/ListIssuesCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.logic.commands.ListIssuesCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" * Parses input arguments and creates a new ListIssuesCommand object"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"public class ListIssuesCommandParser implements Parser\u003cListIssuesCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * Parses the given {@code String} of arguments in the context of the ListIssueCommand"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * and returns an ListIssueCommand object for execution."},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public ListIssuesCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"            String issueState \u003d ParserUtil.parseStateType(args);"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            return new ListIssuesCommand(issueState);"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListIssuesCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":23,"-":6}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" * Change view of the tab pane in main window based on categories."},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"public class ViewCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    public static final int MIN_WEEK_NUMBER \u003d 2;"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    public static final int MAX_WEEK_NUMBER \u003d 11;"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_ALIAS \u003d \"v\";"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" TYPE\";"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"            + \": Change the tab view to profiles, tasks, exercises, or issues.\\n\""},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"            + \"Parameters: TYPE (must be either \u0027profile\u0027, \u0027task\u0027, \u0027exercise\u0027, or \u0027issues\u0027)\\n\""},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"            + \"INDEX (if TYPE is exercise and must be within \" + MIN_WEEK_NUMBER"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"            + \" and \" + MAX_WEEK_NUMBER + \" (boundary numbers inclusive)\\n\""},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"            + \"Example: \" + COMMAND_WORD + \" exercise\\n\""},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"            + COMMAND_WORD + \"exercise 5\";"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_SUCCESS_TAB \u003d \"Viewing tab %1$s\";"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_SUCCESS_WEEK \u003d \"Viewing week %1$s\u0027s exercises\";"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    private final String type;"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    private final int weekNumber;"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    private final boolean isToggleExerciseByWeek;"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"    public ViewCommand(String type, int weekNumber, boolean isToggleExerciseByWeek) {"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"        this.type \u003d type;"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        this.weekNumber \u003d weekNumber;"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        this.isToggleExerciseByWeek \u003d isToggleExerciseByWeek;"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    public CommandResult execute() {"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"        if (!isToggleExerciseByWeek) {"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"            EventsCenter.getInstance().post(new TabLoadChangedEvent(type));"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS_TAB, type));"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"            model.updateFilteredExerciseList(exercise -\u003e exercise.getQuestionIndex().getWeekNumber() \u003d\u003d weekNumber);"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"            EventsCenter.getInstance().post(new TabLoadChangedEvent(type));"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS_WEEK, weekNumber));"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 this.type.equals(((ViewCommand) other).type)) // state check"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 this.weekNumber \u003d\u003d ((ViewCommand) other).weekNumber"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 this.isToggleExerciseByWeek \u003d\u003d ((ViewCommand) other).isToggleExerciseByWeek;"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":55,"-":5}},{"path":"src/main/java/seedu/progresschecker/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the ProgressChecker."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" INDEX\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":68}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":"//@@author: Livian1107"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":" * Changes the thmem of ProgressChecker."},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"public class ThemeCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"            + \" THEME\";"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"            + \": Change theme of ProgressChecker.\\n\""},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"            + \"Parameters: \" + \"Theme(either \u0027day\u0027 or \u0027night\u0027)\\n\""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"            + \"Example: \" + COMMAND_WORD + \"day\";"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Change to theme %1$s\";"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"    public final String theme;"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"    public ThemeCommand(String theme) {"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"        this.theme \u003d theme;"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"    protected CommandResult executeUndoableCommand() {"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(theme));"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, theme));"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"                \u0026\u0026 this.theme.equals(((ThemeCommand) other).theme)); // state check"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":37,"-":5}},{"path":"src/main/java/seedu/progresschecker/logic/commands/CloseIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Close an issue on github"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class CloseIssueCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"-issue\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"cli\";"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" ISSUE-INDEX\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"            + \"\\nParameters: ISSUE_INDEX (must be a positive valid index number)\""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 2\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Issue #%1$s closed successfully\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Issue wasn\u0027t closed. Enter correct index number.\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_AUTHENTICATION_FAILURE \u003d \"Github isn\u0027t authenticated. \""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"            + \"Use \u0027gitlogin\u0027 command to authenticate first\";"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public CloseIssueCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            model.closeIssueOnGithub(targetIndex);"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof CloseIssueCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.targetIndex.equals(((CloseIssueCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":48,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":"//@@author: Livian1107"},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":" * Sorts all persons in the ProgressChecker in alphabetical order."},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons in alphabetical order\";"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    protected CommandResult executeUndoableCommand() {"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(model);"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"        model.sort();"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":18,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the ProgressChecker."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_MAJOR + \"MAJOR \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_YEAR + \"YEAR \""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the ProgressChecker. \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_MAJOR + \"MAJOR \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_YEAR + \"YEAR \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"JohnGithub \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_MAJOR + \"Computer Science \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_YEAR + \"2 \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the ProgressChecker\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":81}},{"path":"src/main/java/seedu/progresschecker/logic/commands/GoToTaskUrlCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewTaskListCommand.TASK_TAB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.INDEX_OUT_OF_BOUND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.getTaskUrl;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.util.Pair;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadUrlEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":" * Goes to the webpage of task with given index."},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"public class GoToTaskUrlCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"goto\";"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"go\";"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \"INDEX\";"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_INDEX_CONSTRAINTS \u003d \"The index should be an index in the task list displayed\""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"            + \"to you. It must be an integer that does not exceed the number of tasks in the list.\";"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"            + \": Open the URL of task with the given index in the list.\\n\""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: INDEX (an index in the task list)\\n \""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + 1;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Viewing webpage of task: %1$s\";"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_NO_URL \u003d \"This task does not have a webpage: %1$s\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String VIEW_URL_FAILURE \u003d \"Error. Cannot open the URL. Index: %1$s\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    private int index;"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"     * Gets URL of the task with index {@code int}"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public GoToTaskUrlCommand(int index) {"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(index);"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        this.index \u003d index;"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"            Pair\u003cString, String\u003e result  \u003d getTaskUrl(index, DEFAULT_LIST_ID);"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"            String url \u003d result.getKey();"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"            String titleWithCode \u003d result.getValue();     // full file name"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"            String[] parts \u003d titleWithCode.split(\"\u0026#\"); // String array, each element is text between dots"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d parts[0];"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"            if (url.equals(\"\")) {"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(INDEX_OUT_OF_BOUND));"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new LoadUrlEvent(url));"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new TabLoadChangedEvent(TASK_TAB));"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, index + \". \" + title));"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(VIEW_URL_FAILURE + index);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof GoToTaskUrlCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 index \u003d\u003d (((GoToTaskUrlCommand) other).index));"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":64,"-":15}},{"path":"src/main/java/seedu/progresschecker/logic/commands/GitLogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Logs out of github"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class GitLogoutCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"gitlogout\";"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"glo\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have successfully logged out of github!\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"You are currently not logged in\";"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            model.logoutGithub();"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException e) {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":26,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/AnswerCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewCommand.MAX_WEEK_NUMBER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewCommand.MIN_WEEK_NUMBER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":" * Edits details of student answer of an exercise in the ProgressChecker."},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"public class AnswerCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_WORD \u003d \"answer\";"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_ALIAS \u003d \"ans\";"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" QUESTION-INDEX\" + \" ANSWER\";"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Answer an exercise \""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"            + \"identified by the index number shown. \""},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"            + \"Existing answer will be overwritten by the input value.\\n\""},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"            + \"Parameters: INDEX (must be in the format of WEEK.SECTION.QUESTION number \""},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"            + \"where WEEK range from \" + MIN_WEEK_NUMBER + \" to \" + MAX_WEEK_NUMBER + \") \""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"            + \"ANSWER\\n\""},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2.1.1 \""},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"            + \"Procedural languages work at simple data structures and functions level.\";"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Answered Exercise: %1$s\";"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    private final QuestionIndex questionIndex;"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    private final StudentAnswer studentAnswer;"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"    private Exercise exerciseToEdit;"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"    private Exercise editedExercise;"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"     * @param questionIndex of the question in the filtered exercise list to edit"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"     * @param studentAnswer answer to edit the exercise with"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"    public AnswerCommand(QuestionIndex questionIndex, StudentAnswer studentAnswer) {"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(questionIndex);"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"        this.questionIndex \u003d questionIndex;"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d studentAnswer;"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"            model.updateExercise(exerciseToEdit, editedExercise);"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"        } catch (ExerciseNotFoundException enfe) {"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":"            throw new AssertionError(\"The target exercise cannot be missing\");"},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":"        model.updateFilteredExerciseList(exercise -\u003e exercise.getQuestionIndex().getWeekNumber()"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"                \u003d\u003d editedExercise.getQuestionIndex().getWeekNumber());"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, questionIndex));"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"    //TODO: store mapping of questionIndex to exercise\u0027s index in exerciseList in a separate data structure"},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"        List\u003cExercise\u003e exerciseList \u003d model.getFilteredExerciseList();"},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"        boolean isFound \u003d false;"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"        if (!questionIndex.isValidIndex(questionIndex.toString())) {"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"            throw new CommandException(String.format("},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"                    Messages.MESSAGE_INVALID_EXERCISE_INDEX, questionIndex.toString()));"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"        for (Exercise e : exerciseList) {"},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"            if (e.getQuestionIndex().toString().equals(questionIndex.toString())) {"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"                exerciseToEdit \u003d exerciseList.get(exerciseList.indexOf(e));"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"                editedExercise \u003d createEditedExercise(exerciseToEdit, studentAnswer);"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"                isFound \u003d true;"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"                break;"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"        if (!isFound) {"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":"            throw new CommandException(String.format("},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"                    Messages.MESSAGE_INVALID_EXERCISE_INDEX, questionIndex.toString()));"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"     * edited with {@code editExerciseDescriptor}."},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"    private static Exercise createEditedExercise(Exercise exerciseToEdit, StudentAnswer studentAnswer) {"},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"        assert exerciseToEdit !\u003d null;"},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"        QuestionIndex questionIndex \u003d exerciseToEdit.getQuestionIndex();"},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"        QuestionType questionType \u003d exerciseToEdit.getQuestionType();"},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":"        Question question \u003d exerciseToEdit.getQuestion();"},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"        StudentAnswer updatedStudentAnswer \u003d studentAnswer;"},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"        ModelAnswer modelAnswer \u003d exerciseToEdit.getModelAnswer();"},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"        return new Exercise(questionIndex, questionType, question,"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"                updatedStudentAnswer, modelAnswer);"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":"        if (!(other instanceof AnswerCommand)) {"},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":"        // state check"},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"        AnswerCommand e \u003d (AnswerCommand) other;"},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"        return questionIndex.equals(e.questionIndex)"},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 studentAnswer.equals(e.studentAnswer)"},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 Objects.equals(exerciseToEdit, e.exerciseToEdit);"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":132,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":113,"-":19}},{"path":"src/main/java/seedu/progresschecker/logic/commands/TaskCommandUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_TITLE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.NOTE_TOKEN;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.BufferedWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.nio.charset.Charset;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.FileUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.ui.CommandBox;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":" * Some util methods to be used by task-relevant commands."},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"public class TaskCommandUtil {"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"viewtask\";"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"vt\";"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final String BAR_FAILURE \u003d \"Fail to get the progress bar.\";"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final int COMPULSORY \u003d -13; // parser returns -13 for compulsory tasks"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public static final int SUBMISSION \u003d -20; // parser returns -10 for tasks need submission"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPULSORY_STR \u003d \"  [Compulsory]\";"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SUBMISSION_STR \u003d \"  [Submission]\";"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TITLE_COLOR_DAY \u003d \"grey\";"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public static final String BACKGROUND_COLOR_DAY \u003d \"white\";"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TITLE_COLOR_NIGHT \u003d \"white\";"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public static final String BACKGROUND_COLOR_NIGHT \u003d \"#202226\";"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"     * Writes the loaded task list to an html file. Loads the tasks."},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"     * @param list task list serialized in a java List."},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"     * @param indexList stores the corresponding index in the full list (the current showing list is a filtered"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"     *                  result."},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"     * @param file File object of the html file."},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"     * @param targetWeek indicates the filter argument received for viewing task list"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"     * @return progressInt the percentage of task completed (without the \"%\" sign)"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    int writeToHtml(List\u003cTask\u003e list, List\u003cInteger\u003e indexList, File file, int targetWeek) throws CommandException {"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"        String backgroundColor \u003d BACKGROUND_COLOR_DAY;"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        String titleColor \u003d TITLE_COLOR_DAY;"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        double countCompleted \u003d 0;"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        double countIncomp \u003d 0;"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        int size \u003d list.size();"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"            FileUtil.createIfMissing(file);"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw1 \u003d new FileWriter(file, false);"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw1 \u003d new BufferedWriter(fw1);"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out1 \u003d new PrintWriter(bw1);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"            out1.print(\"\");"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw \u003d new FileWriter(file, true);"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out \u003d new PrintWriter(bw);"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c!DOCTYPE html\u003e\\n\""},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003chtml lang\u003d\\\"en\\\"\u003e\\n\""},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003chead\u003e\\n\""},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003ctitle\u003eTask List\u003c/title\u003e\\n\""},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cmeta charset\u003d\\\"utf-8\\\"\u003e\\n\""},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cmeta name\u003d\\\"viewport\\\" content\u003d\\\"width\u003ddevice-width, initial-scale\u003d1\\\"\u003e\\n\""},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003clink rel\u003d\\\"stylesheet\\\" href\u003d\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7\""},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"                    + \"/css/bootstrap.min.css\\\"\u003e\\n\""},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cscript src\u003d\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1\""},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"                    + \"/jquery.min.js\\\"\u003e\u003c/script\u003e\\n\""},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cscript src\u003d\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7\""},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"                    + \"/js/bootstrap.min.js\\\"\u003e\u003c/script\u003e\\n\""},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/head\u003e\\n\""},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003cbody  style\u003d\\\"background-color:\" + backgroundColor + \";\\\"\u003e\""},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003cdiv class\u003d\\\"container\\\"  style\u003d\\\"background-color:\" + backgroundColor + \";\\\"\u003e\");"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"            if (targetWeek \u003e 0) {"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"\u003ch2 style\u003d\\\"font-family:verdana; color:\" + titleColor + \"\\\"\u003e\""},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"                        + DEFAULT_LIST_TITLE + \"  Week: \" + targetWeek + \"\u003c/h2\u003e\\n\u003cbr\u003e\\n\");"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"            } else if (targetWeek \u003d\u003d COMPULSORY) {"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"\u003ch2 style\u003d\\\"font-family:verdana; color:\" + titleColor + \"\\\"\u003e\""},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"                        + DEFAULT_LIST_TITLE + COMPULSORY_STR + \"\u003c/h2\u003e\\n\u003cbr\u003e\\n\");"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"            } else if (targetWeek \u003d\u003d SUBMISSION) {"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"\u003ch2 style\u003d\\\"font-family:verdana; color:\" + titleColor + \"\\\"\u003e\""},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"                        + DEFAULT_LIST_TITLE + SUBMISSION_STR + \"\u003c/h2\u003e\\n\u003cbr\u003e\\n\");"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"            } else {"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"\u003ch2 style\u003d\\\"font-family:verdana; color:\" + titleColor + \"\\\"\u003e\""},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"                        + DEFAULT_LIST_TITLE + \"\u003c/h2\u003e\\n\u003cbr\u003e\\n\");"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"            for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"                int index \u003d indexList.get(i);"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"                String status \u003d task.getStatus();"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"                String notesWithUrl \u003d task.getNotes();"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"                String[] parts \u003d notesWithUrl.split(NOTE_TOKEN);"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"                String notes \u003d parts[0];"},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"                String url \u003d parts[1];"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"                if (status.length() \u003e\u003d 11) {"},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"                    out.print(\"        \u003cdiv class\u003d\\\"panel panel-danger\\\"\u003e\\n\""},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"                            + \"            \u003cdiv class\u003d\\\"panel-heading\\\"\u003e\""},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"                            + index + \". \" + task.getTitle() + \"\u003c/div\u003e\\n\""},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"                            + \"            \u003cdiv class\u003d\\\"panel-body\\\"\u003e\\n\""},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"                            + \"                \u003cdd style\u003d\\\"font-family:verdana; color:black;\\\"\u003e\u0026#9888; \u0026nbsp;\""},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"                            + task.getDue().toString().substring(0, 10) + \"\u003c/dd\u003e\\n\""},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"                            + \"                \u003cdd style\u003d\\\"font-family:verdana; color:red;\\\"\u003e\u0026#9873;\""},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"                            + \" \u0026nbsp;Please work on it :) \u0026#9744;\u003c/dd\u003e\\n\");"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"                    countIncomp++;"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"                } else {"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"                    out.print(\"        \u003cdiv class\u003d\\\"panel panel-success\\\"\u003e\\n\""},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"                            + \"            \u003cdiv class\u003d\\\"panel-heading\\\"\u003e\""},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":"                            + index + \". \" + task.getTitle() + \"\u003c/div\u003e\\n\""},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"                            + \"            \u003cdiv class\u003d\\\"panel-body\\\"\u003e\\n\""},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"                            + \"                \u003cdd style\u003d\\\"font-family:verdana; color:black;\\\"\u003e\u0026#9888; \u0026nbsp;\""},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":"                            + task.getDue().toString().substring(0, 10) + \"\u003c/dd\u003e\\n\""},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"                            + \"                \u003cdd style\u003d\\\"font-family:verdana; color:darkseagreen;\\\"\u003e\u0026#9873;\""},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":"                            + \" \u0026nbsp;Completed! \u0026#9745;\u003c/dd\u003e\\n\");"},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"                    countCompleted++;"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"                \u003cdd style\u003d\\\"font-family:verdana; color:black;\\\"\u003e\u0026#9998; \u0026nbsp;\""},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"                        + notes + \"\u003c/dd\u003e\\n\""},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"                        + \"                \u003cp\u003e\u003ca href\u003d\\\"\""},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"                        + url"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"                        + \"\\\"\u003e\""},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"                        + url"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"                        + \"\u003c/a\u003e\u003c/p\u003e\\n\""},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"                        + \"            \u003c/div\u003e\\n\""},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"                        + \"        \u003c/div\u003e\\n\");"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"    \u003c/div\u003e\\n\""},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/div\u003e\\n\""},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\\n\");"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"            double percent \u003d countCompleted / (countCompleted + countIncomp);"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"            int progressInt \u003d (int) (percent * 100);"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"            String progressDevision \u003d (int) countCompleted + \"/\" + (int) (countCompleted + countIncomp);"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c/dl\u003e\\n\");"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003ch2 style\u003d\\\"font-family:verdana; color:white\\\"\u003e\" + \"You have completed \" + progressDevision"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"                    + \" !\" + \"\u003c/h2\u003e\");"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c/body\u003e\\n\""},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/html\u003e\");"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"            out1.close();"},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"            out.close();"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"            return progressInt;"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException e) {"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"            logger.info(FILE_FAILURE);"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(FILE_FAILURE);"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"     * Writes the progress bar to an html file."},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"     * @param percentage the percentage of completed tasks."},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"     * @param file File object of the html file."},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"     * @param targetWeek indicates the filter argument received for viewing task list"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"    void writeToHtmlBar(int percentage, File file, int targetWeek) throws CommandException {"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"        String backgroundColor \u003d BACKGROUND_COLOR_DAY;"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        String titleColor \u003d TITLE_COLOR_DAY;"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"            FileUtil.createIfMissing(file);"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw1 \u003d new FileWriter(file, false);"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw1 \u003d new BufferedWriter(fw1);"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out1 \u003d new PrintWriter(bw1);"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"            out1.print(\"\");"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw \u003d new FileWriter(file, true);"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out \u003d new PrintWriter(bw);"},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c!DOCTYPE html\u003e\\n\""},{"lineNumber":203,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003chtml lang\u003d\\\"en\\\"\u003e\\n\""},{"lineNumber":204,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003chead\u003e\\n\""},{"lineNumber":205,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003ctitle\u003eprogresschecker\u003c/title\u003e\\n\""},{"lineNumber":206,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cmeta charset\u003d\\\"utf-8\\\"\u003e\\n\""},{"lineNumber":207,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cmeta name\u003d\\\"viewport\\\" content\u003d\\\"width\u003ddevice-width, initial-scale\u003d1\\\"\u003e\\n\""},{"lineNumber":208,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003clink rel\u003d\\\"stylesheet\\\" \""},{"lineNumber":209,"author":{"gitID":"EdwardKSG"},"content":"                    + \"href\u003d\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\"\u003e\\n\""},{"lineNumber":210,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cscript src\u003d\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"\u003e\""},{"lineNumber":211,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/script\u003e\\n\""},{"lineNumber":212,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cscript src\u003d\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\\\"\u003e\""},{"lineNumber":213,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/script\u003e\\n\""},{"lineNumber":214,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/head\u003e\\n\""},{"lineNumber":215,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003cbody  style\u003d\\\"background-color:\" + backgroundColor + \";\\\"\u003e\\n\""},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003cdiv class\u003d\\\"container\\\"\u003e\\n\""},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003ch2 style \u003d \\\"font-size: x-large; color: \" + titleColor + \";\\\"\u003eYour Progress\");"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"            if (targetWeek \u003e 0) {"},{"lineNumber":220,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"(Week\" + targetWeek + \")\");"},{"lineNumber":221,"author":{"gitID":"EdwardKSG"},"content":"            } else if (targetWeek \u003d\u003d COMPULSORY) {"},{"lineNumber":222,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"([Compulsory])\");"},{"lineNumber":223,"author":{"gitID":"EdwardKSG"},"content":"            } else if (targetWeek \u003d\u003d SUBMISSION) {"},{"lineNumber":224,"author":{"gitID":"EdwardKSG"},"content":"                out.print(\"([Submission])\");"},{"lineNumber":225,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":227,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\": \""},{"lineNumber":228,"author":{"gitID":"EdwardKSG"},"content":"                    + percentage + \"%\u003c/h2\u003e\\n\""},{"lineNumber":229,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cbr\u003e\\n\""},{"lineNumber":230,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cdiv class\u003d\\\"progress\\\"\u003e\\n\""},{"lineNumber":231,"author":{"gitID":"EdwardKSG"},"content":"                    + \"        \u003cdiv class\u003d\\\"progress-bar progress-bar-striped active\\\" role\u003d\\\"progressbar\\\" \""},{"lineNumber":232,"author":{"gitID":"EdwardKSG"},"content":"                    + \"aria-valuenow\u003d\\\"\" + percentage + \"\\\" aria-valuemin\u003d\\\"0\\\" aria-valuemax\u003d\\\"100\\\" \""},{"lineNumber":233,"author":{"gitID":"EdwardKSG"},"content":"                    + \"style\u003d\\\"width:\" + percentage + \"%\\\"\u003e\\n\""},{"lineNumber":234,"author":{"gitID":"EdwardKSG"},"content":"                    + \"            \" + percentage + \"% (on the way)\\n\""},{"lineNumber":235,"author":{"gitID":"EdwardKSG"},"content":"                    + \"        \u003c/div\u003e\\n\""},{"lineNumber":236,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003c/div\u003e\\n\""},{"lineNumber":237,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/div\u003e\\n\""},{"lineNumber":238,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/body\u003e\\n\""},{"lineNumber":239,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/html\u003e\\n\");"},{"lineNumber":240,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":241,"author":{"gitID":"EdwardKSG"},"content":"            out1.close();"},{"lineNumber":242,"author":{"gitID":"EdwardKSG"},"content":"            out.close();"},{"lineNumber":243,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":244,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException e) {"},{"lineNumber":245,"author":{"gitID":"EdwardKSG"},"content":"            logger.info(FILE_FAILURE);"},{"lineNumber":246,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(BAR_FAILURE);"},{"lineNumber":247,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":248,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":251,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"EdwardKSG"},"content":"     * Writes an html file to involve both the progress bar and task list (the file is for backup,"},{"lineNumber":253,"author":{"gitID":"EdwardKSG"},"content":"     * preview and debugging purposes."},{"lineNumber":254,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":255,"author":{"gitID":"EdwardKSG"},"content":"     * @param file File object of the html file."},{"lineNumber":256,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"EdwardKSG"},"content":"    void writeToHtmlChecker(File file) throws CommandException {"},{"lineNumber":258,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":259,"author":{"gitID":"EdwardKSG"},"content":"            FileUtil.createIfMissing(file);"},{"lineNumber":260,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":261,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw1 \u003d new FileWriter(file, false);"},{"lineNumber":262,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw1 \u003d new BufferedWriter(fw1);"},{"lineNumber":263,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out1 \u003d new PrintWriter(bw1);"},{"lineNumber":264,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":265,"author":{"gitID":"EdwardKSG"},"content":"            out1.print(\"\");"},{"lineNumber":266,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":267,"author":{"gitID":"EdwardKSG"},"content":"            FileWriter fw \u003d new FileWriter(file, true);"},{"lineNumber":268,"author":{"gitID":"EdwardKSG"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":269,"author":{"gitID":"EdwardKSG"},"content":"            PrintWriter out \u003d new PrintWriter(bw);"},{"lineNumber":270,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":271,"author":{"gitID":"EdwardKSG"},"content":"            out.print(\"\u003c!DOCTYPE html\u003e\\n\""},{"lineNumber":272,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003chtml\u003e\\n\""},{"lineNumber":273,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003cframeset rows\u003d\\\"20%,80%\\\"\u003e\\n\""},{"lineNumber":274,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cframe src\u003d\\\"bar.html\\\" /\u003e\\n\""},{"lineNumber":275,"author":{"gitID":"EdwardKSG"},"content":"                    + \"    \u003cframe src\u003d\\\"tasklist.html\\\" /\u003e\\n\""},{"lineNumber":276,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/frameset\u003e\\n\""},{"lineNumber":277,"author":{"gitID":"EdwardKSG"},"content":"                    + \"\u003c/html\u003e\\n\");"},{"lineNumber":278,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":279,"author":{"gitID":"EdwardKSG"},"content":"            out1.close();"},{"lineNumber":280,"author":{"gitID":"EdwardKSG"},"content":"            out.close();"},{"lineNumber":281,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":282,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException e) {"},{"lineNumber":283,"author":{"gitID":"EdwardKSG"},"content":"            logger.info(FILE_FAILURE);"},{"lineNumber":284,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(FILE_FAILURE);"},{"lineNumber":285,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":286,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":289,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"EdwardKSG"},"content":"     * Reads the content of a text file to a String."},{"lineNumber":291,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":292,"author":{"gitID":"EdwardKSG"},"content":"     * @param path file path"},{"lineNumber":293,"author":{"gitID":"EdwardKSG"},"content":"     * @param encoding the encoding standard, such as StandardCharsets.UTF_8."},{"lineNumber":294,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"EdwardKSG"},"content":"    static String readFile(String path, Charset encoding) throws IOException {"},{"lineNumber":296,"author":{"gitID":"EdwardKSG"},"content":"        byte[] encoded \u003d Files.readAllBytes(Paths.get(path));"},{"lineNumber":297,"author":{"gitID":"EdwardKSG"},"content":"        return new String(encoded, encoding);"},{"lineNumber":298,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":276,"-":23}},{"path":"src/main/java/seedu/progresschecker/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the ProgressChecker."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \" + \"INDEX \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_YEAR + \"YEAR] \""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_YEAR + \"YEAR] \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the ProgressChecker.\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        GithubUsername updatedUsername \u003d editPersonDescriptor.getUsername().orElse(personToEdit.getUsername());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Major updatedMajor \u003d editPersonDescriptor.getMajor().orElse(personToEdit.getMajor());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Year updatedYear \u003d editPersonDescriptor.getYear().orElse(personToEdit.getYear());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedUsername, updatedMajor,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                updatedYear, updatedTags);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private GithubUsername username;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Major major;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Year year;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":168,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":169,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            setUsername(toCopy.username);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            setMajor(toCopy.major);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setYear(toCopy.year);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":182,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.username,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                    this.major, this.year, this.tags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public void setUsername(GithubUsername username) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            this.username \u003d username;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public Optional\u003cGithubUsername\u003e getUsername() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(username);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public void setMajor(Major major) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            this.major \u003d major;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public Optional\u003cMajor\u003e getMajor() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(major);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public void setYear(Year year) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            this.year \u003d year;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public Optional\u003cYear\u003e getYear() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(year);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":238,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":239,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":246,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":247,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":248,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":271,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getUsername().equals(e.getUsername())"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getMajor().equals(e.getMajor())"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getYear().equals(e.getYear())"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":2,"-":275}},{"path":"src/main/java/seedu/progresschecker/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the ProgressChecker."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" INDEX\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public static final String tabType \u003d \"profile\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        EventsCenter.getInstance().post(new TabLoadChangedEvent(tabType));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":4,"-":53}},{"path":"src/main/java/seedu/progresschecker/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in ProgressChecker whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"search\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" NAME\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":1,"-":37}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ReopenIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Reopens an issue on github"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class ReopenIssueCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"reopenissue\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"ri\";"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" ISSUE-INDEX\";"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"            + \"\\nParameters: ISSUE_INDEX (must be a positive valid index number)\""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \\n\" + COMMAND_WORD + \" 2\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Issue #%1$s was reopened successfully\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Issue wasn\u0027t reopened. Enter correct index number.\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_AUTHENTICATION_FAILURE \u003d \"Github isn\u0027t authenticated. \""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"           + \"Use \u0027gitlogin\u0027 command to authenticate first\";"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public ReopenIssueCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            model.reopenIssueOnGithub(targetIndex);"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_AUTHENTICATION_FAILURE);"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof ReopenIssueCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.targetIndex.equals(((ReopenIssueCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":49,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ResetTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.undoTask;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.util.Pair;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.LogicManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":" * Sets a task with given index as incompleted."},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"public class ResetTaskCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"reset\";"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\"; // short for \"reset task\""},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATA_FOLDER \u003d \"data/\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_PAGE \u003d \"tasklist.html\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \"INDEX\";"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_INDEX_CONSTRAINTS \u003d \"The index should be an index in the task list displayed\""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            + \"to you. It must be an integer that does not exceed the number of tasks in the list.\";"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"            + \": Mark task with the given index in the list as incompleted.\\n\""},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: INDEX (an index in the task list)\\n \""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + 1;"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Reset task: %1$s\";"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_NO_ACTION \u003d \"This task is not completed yet: %1$s\";"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String RESET_FAILURE \u003d \"Error. Failed to mark it as incompleted. Index: %1$s\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String UNKNOWN_ERROR \u003d \"Unknow error in the system occurred\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public static final int ERROR \u003d -1;"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final int NO_ACTION \u003d 0;"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static final int SUCCESS \u003d 1;"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    private int index;"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"     * Reset the task with index {@code int}"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    public ResetTaskCommand(int index) {"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        this.index \u003d index;"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"            Pair\u003cInteger, String\u003e result \u003d undoTask(index, DEFAULT_LIST_ID);"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"            if (result.getKey() \u003d\u003d ERROR) {"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(result.getValue()));"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"            String titleWithCode \u003d result.getValue();     // full file name"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"            String[] parts \u003d titleWithCode.split(\"\u0026#\"); // String array, each element is text between dots"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d parts[0];"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"            if (result.getKey() \u003d\u003d NO_ACTION) {"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(MESSAGE_NO_ACTION, index + \". \" + title));"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"            } else if (result.getKey() \u003d\u003d SUCCESS) {"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand view \u003d LogicManager.getCurrentViewTask();"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"                view.updateView();"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS, index + \". \" + title));"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"            } else {"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                // the command parser could never pass any value other than the above 4, thus we say \"unknown error\"."},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"                throw new CommandException(UNKNOWN_ERROR);"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(RESET_FAILURE + index);"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof ResetTaskCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 index \u003d\u003d (((ResetTaskCommand) other).index));"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":77,"-":11}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ListIssuesCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" * Finds and lists all issues from github with the specified state in the argument."},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"public class ListIssuesCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"listissue\";"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"lis\";"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" STATE\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all the issues \""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"            + \"of the specified state with the respective github issue index.\\n\""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: KEYWORD\\n\""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" CLOSE\";"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    private static final String MESSAGE_INVALID_STATE \u003d \"Please enter correct issue state\";"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    private static final String MESSAGE_VALIDATION_FAILURE \u003d \"Please log into github first\";"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    private static final String tabType \u003d \"issues\";"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    private static final String MESSAGE_SUCCESS \u003d \"All the %s issues are being viewed\";"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    private static String state;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public ListIssuesCommand(String state) {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        this.state \u003d state;"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            model.listIssues(state);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            EventsCenter.getInstance().post(new TabLoadChangedEvent(tabType));"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, state));"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IllegalValueException ie) {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_INVALID_STATE);"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_INVALID_STATE);"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_VALIDATION_FAILURE);"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof ListIssuesCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.state.equals(((ListIssuesCommand) other).state)); // state check"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":51,"-":6}},{"path":"src/main/java/seedu/progresschecker/logic/commands/UploadCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.REGEX_VALID_IMAGE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.copyFile;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.createMissing;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.getFileExtension;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":" * Uploads a photo to the profile."},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"public class UploadCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_WORD \u003d \"upload\";"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_ALIAS \u003d \"up\";"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \" + \"INDEX \""},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"            + \"[PATH]\";"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Uploads a photo to the specified profile.\\n\""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"            + \"The valid photo extensions are \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027.\\n\""},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"            + \"Parameter: INDEX(must be a positive integer) PATH...\\n\""},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 C:\\\\Users\\\\User\\\\Desktop\\\\photo.png\\n\";"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New photo uploaded!\";"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_COPY_FAIL \u003d \"Cannot copy file!\";"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_IMAGE_NOT_FOUND \u003d \"The image cannot be found!\";"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_IMAGE_DUPLICATE \u003d \"Upload the same image!\";"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_LOCAL_PATH_CONSTRAINTS \u003d"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"            \"The photo path should be a valid path on your PC. \""},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"            + \"It should start with the name of your PC user name, \""},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":"            + \"followed by several folders, e.g.\\\"C:\\\\Usres\\\\User\\\\Desktop\\\\photo.png\\\". \\n\""},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"            + \"The file should exist. \\n\""},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"            + \"The path of file cannot contain any whitespaces inside. \\n\""},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"                    + \"The valid extensions of the file should be \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027. \\n\";"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"    public static final String REGEX_VALID_LOCAL_PATH \u003d"},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"            \"([a-zA-Z]:)?(\\\\\\\\\\\\w+)+\\\\\\\\\" + REGEX_VALID_IMAGE;"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"    public static final String PATH_SAVED_FILE \u003d \"src/main/resources/images/contact/\";"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"    private final Index targetIndex;"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":"    private Person personToUpdate;"},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":"    private PhotoPath photoPath;"},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"    private String localPath;"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"    private String savePath;"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"     * Creates an UploadCommand to upload the profile photo with specified {@code Path}"},{"lineNumber":66,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Livian1107"},"content":"    public UploadCommand(Index index, String path) throws IllegalValueException, IOException {"},{"lineNumber":68,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(path);"},{"lineNumber":69,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"Livian1107"},"content":"        if (isValidLocalPath(path)) {"},{"lineNumber":71,"author":{"gitID":"Livian1107"},"content":"            this.localPath \u003d path;"},{"lineNumber":72,"author":{"gitID":"Livian1107"},"content":"            this.targetIndex \u003d index;"},{"lineNumber":73,"author":{"gitID":"Livian1107"},"content":"            this.savePath \u003d copyLocalPhoto(localPath);"},{"lineNumber":74,"author":{"gitID":"Livian1107"},"content":"            this.photoPath \u003d new PhotoPath(savePath);"},{"lineNumber":75,"author":{"gitID":"Livian1107"},"content":"        } else {"},{"lineNumber":76,"author":{"gitID":"Livian1107"},"content":"            throw new IllegalValueException(MESSAGE_LOCAL_PATH_CONSTRAINTS);"},{"lineNumber":77,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":80,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"Livian1107"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(personToUpdate);"},{"lineNumber":83,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"Livian1107"},"content":"            model.addPhoto(photoPath);"},{"lineNumber":85,"author":{"gitID":"Livian1107"},"content":"            model.uploadPhoto(personToUpdate, savePath);"},{"lineNumber":86,"author":{"gitID":"Livian1107"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":87,"author":{"gitID":"Livian1107"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":88,"author":{"gitID":"Livian1107"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":89,"author":{"gitID":"Livian1107"},"content":"        } catch (DuplicatePhotoException e) {"},{"lineNumber":90,"author":{"gitID":"Livian1107"},"content":"            throw new CommandException(MESSAGE_IMAGE_DUPLICATE);"},{"lineNumber":91,"author":{"gitID":"Livian1107"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":92,"author":{"gitID":"Livian1107"},"content":"            throw new CommandException(MESSAGE_IMAGE_DUPLICATE);"},{"lineNumber":93,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":96,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"Livian1107"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":98,"author":{"gitID":"Livian1107"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":99,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":100,"author":{"gitID":"Livian1107"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":101,"author":{"gitID":"Livian1107"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":104,"author":{"gitID":"Livian1107"},"content":"        personToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":107,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"     * Returns true when the String path provided is a valid local path"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":"    public static boolean isValidLocalPath(String path) {"},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"        return path.matches(REGEX_VALID_LOCAL_PATH);"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"     * Copies uploaded photo file to specified saved path"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"     * @param localPath is the path of uploaded photo"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":"     * @return String of saved path of uploaded photo"},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"    public String copyLocalPhoto(String localPath) throws IOException {"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"        File localFile \u003d new File(localPath);"},{"lineNumber":121,"author":{"gitID":"Livian1107"},"content":"        String newPath \u003d createSavePath(localPath);"},{"lineNumber":122,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":123,"author":{"gitID":"Livian1107"},"content":"        if (!localFile.exists()) {"},{"lineNumber":124,"author":{"gitID":"Livian1107"},"content":"            throw new FileNotFoundException(MESSAGE_LOCAL_PATH_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":127,"author":{"gitID":"Livian1107"},"content":"        createSavedPhoto(newPath);"},{"lineNumber":128,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":129,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"Livian1107"},"content":"            copyFile(localPath, newPath);"},{"lineNumber":131,"author":{"gitID":"Livian1107"},"content":"        } catch (IOException e) {"},{"lineNumber":132,"author":{"gitID":"Livian1107"},"content":"            throw new IOException(MESSAGE_COPY_FAIL);"},{"lineNumber":133,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Livian1107"},"content":"        return newPath;"},{"lineNumber":135,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":137,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Livian1107"},"content":"     * Create a new path for uploaded photo to save"},{"lineNumber":139,"author":{"gitID":"Livian1107"},"content":"     * @param localPath is the String of uploaded photo on user PC"},{"lineNumber":140,"author":{"gitID":"Livian1107"},"content":"     * @return savePath String of uploaded photo"},{"lineNumber":141,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Livian1107"},"content":"    public static String createSavePath(String localPath) {"},{"lineNumber":143,"author":{"gitID":"Livian1107"},"content":"        Date date \u003d new Date();"},{"lineNumber":144,"author":{"gitID":"Livian1107"},"content":"        Long num \u003d date.getTime();"},{"lineNumber":145,"author":{"gitID":"Livian1107"},"content":"        String createPath \u003d PATH_SAVED_FILE + num.toString() + getFileExtension(localPath);"},{"lineNumber":146,"author":{"gitID":"Livian1107"},"content":"        return createPath;"},{"lineNumber":147,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":149,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"Livian1107"},"content":"     * Creates a new file to save profile photo"},{"lineNumber":151,"author":{"gitID":"Livian1107"},"content":"     * @param path to save photo"},{"lineNumber":152,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Livian1107"},"content":"    public void createSavedPhoto(String path) {"},{"lineNumber":154,"author":{"gitID":"Livian1107"},"content":"        File savedPhoto \u003d new File(path);"},{"lineNumber":155,"author":{"gitID":"Livian1107"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"Livian1107"},"content":"            createMissing(savedPhoto);"},{"lineNumber":157,"author":{"gitID":"Livian1107"},"content":"        } catch (IOException e) {"},{"lineNumber":158,"author":{"gitID":"Livian1107"},"content":"            assert false : \"Fail to create the file!\";"},{"lineNumber":159,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":137,"-":24}},{"path":"src/main/java/seedu/progresschecker/logic/commands/ViewTaskListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_TITLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.TaskCommandUtil.readFile;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadBarEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.LoadTaskEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.TabLoadChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.task.TaskListUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.ui.CommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":" * View the web view of a particular TaskList (with the name provided)."},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"public class ViewTaskListCommand extends Command {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"viewtask\";"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"vt\";"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATA_FOLDER \u003d \"data/\";"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_PAGE \u003d \"tasklist.html\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String BAR_PAGE \u003d \"bar.html\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public static final String CHECKER_PAGE \u003d \"progresschecker.html\";"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public static final String PROGRESS_CHECKER_PAGE \u003d \"/view/progresschecker.html\";"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static final String BAR_FAILURE \u003d \"Fail to get the progress bar.\";"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public static final String UNKNOWN_ERROR \u003d \"Unknow error in the system occurred\";"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"The title of a task list should not exceed \""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"            + \"49 characters (as specified by Google Task.\";"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_TAB \u003d \"task\";"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public static final int MAX_TITLE_LENGTH \u003d 49;"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"    public static final int MAX_WEEK \u003d 13;"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    public static final int ALL_WEEK \u003d 0;"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    public static final int COMPULSORY \u003d -13; // parser returns -13 for compulsory tasks"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    public static final int SUBMISSION \u003d -20; // parser returns -10 for tasks need submission"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPULSORY_STR \u003d \"  [Compulsory]\";"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SUBMISSION_STR \u003d \"  [Submission]\";"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"            // TODO: change description and parameter range when appropriate"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"            + \": View tasks in the default task list, filtered to show only tasks at the input week or the\""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"            + \" input category. Only ONE filter keyword is allowed.\\n\""},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: FILTER_KEYWORD (filter by week: must be an integer ranging from 1 to 13, or an asterisk (*)\""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"            + \" which means all weeks\\n\""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"            + \"                            filter by category: \\\"compulsory\\\" or \\\"com\\\" means compulsory. \""},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"            + \"\\\"submission\\\" or \\\"sub\\\" means to get the task that needs submission.\""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + \"3\\n\""},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + \"sub\";"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Viewing task list: %1$s\";"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    // when the value of it is -13 or -20, it means the command is filtering compulsory or needsSubmission tasks"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"    private final int targetWeek;"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"    public ViewTaskListCommand(int targetWeek) {"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"        this.targetWeek \u003d targetWeek;"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"        updateView();"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"        String result \u003d chooseResult();"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"        return new CommandResult(result);"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"     * Updates the HTML file and refresh the browser panel"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"     * @throws CommandException"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"    public void updateView() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e list \u003d TaskListUtil.searchTaskListById(DEFAULT_LIST_ID);"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e filteredList \u003d new LinkedList\u003cTask\u003e();"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cInteger\u003e indexList \u003d new LinkedList\u003cInteger\u003e();"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"            applyFilter (filteredList, indexList, list);"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"        TaskCommandUtil util \u003d new TaskCommandUtil();"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        File htmlFile \u003d new File(DATA_FOLDER + TASK_PAGE);"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"        int progressInt \u003d util.writeToHtml(filteredList, indexList, htmlFile, targetWeek);"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        File htmlBarFile \u003d new File(DATA_FOLDER + BAR_PAGE);"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"        util.writeToHtmlBar(progressInt, htmlBarFile, targetWeek);"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        File htmlCheckerFile \u003d new File(DATA_FOLDER + CHECKER_PAGE);"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"        util.writeToHtmlChecker(htmlCheckerFile);"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new LoadBarEvent(readFile(htmlBarFile.getAbsolutePath(),"},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"                    StandardCharsets.UTF_8)));"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new LoadTaskEvent(readFile(htmlFile.getAbsolutePath(),"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"                    StandardCharsets.UTF_8)));"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new TabLoadChangedEvent(TASK_TAB));"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"            logger.info(FILE_FAILURE);"},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(FILE_FAILURE);"},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"     * Applies the filter argument to get the filtered list."},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"     * @param filteredList the resulting list with filters applied."},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"     * @param indexList the corresponding indices for {@code List\u003cTask\u003e filteredList}."},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"     * @param list the raw list before processing."},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"     * @throws CommandException"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"    private void applyFilter (List\u003cTask\u003e filteredList, List\u003cInteger\u003e indexList, List\u003cTask\u003e list)"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"            throws CommandException {"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"        if (targetWeek \u003e 0) {"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"            int count \u003d 1;"},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : list) {"},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"                if (task.getTitle().contains(\"LO[W\" + targetWeek)) {"},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"                    filteredList.add(task);"},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":"                    indexList.add(count);"},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":"                count++;"},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"        } else if (targetWeek \u003d\u003d ALL_WEEK) {"},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"            int count \u003d 1;"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : list) {"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"                if (task.getTitle().contains(\"LO[W\")) {"},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"                    filteredList.add(task);"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"                    indexList.add(count);"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"                count++;"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"        } else if (targetWeek \u003d\u003d COMPULSORY) {"},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"            int count \u003d 1;"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : list) {"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"                if (task.getTitle().contains(\"[Compulsory]\")) {"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"                    filteredList.add(task);"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"                    indexList.add(count);"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"                count++;"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"        } else if (targetWeek \u003d\u003d SUBMISSION) {"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"            int count \u003d 1;"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : list) {"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"                if (task.getTitle().contains(\"[Submission]\")) {"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"                    filteredList.add(task);"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"                    indexList.add(count);"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"                }"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"                count++;"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"        } else {"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(UNKNOWN_ERROR);"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":"     * Choose a proper response message according to the filter argument."},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"     * @return String the response message."},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"     * @throws CommandException"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"    private String chooseResult () throws CommandException {"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":"        if (targetWeek \u003e 0) {"},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"            return String.format(MESSAGE_SUCCESS,"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"                    DEFAULT_LIST_TITLE + \"  Week: \" + targetWeek);"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"        } else if (targetWeek \u003d\u003d ALL_WEEK) {"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"            return String.format(MESSAGE_SUCCESS, DEFAULT_LIST_TITLE);"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"        } else if (targetWeek \u003d\u003d COMPULSORY) {"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"            return String.format(MESSAGE_SUCCESS,"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"                    DEFAULT_LIST_TITLE + COMPULSORY_STR);"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"        } else if (targetWeek \u003d\u003d SUBMISSION) {"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"            return String.format(MESSAGE_SUCCESS,"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"                    DEFAULT_LIST_TITLE + SUBMISSION_STR);"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        } else {"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"            // the command parser could never pass any value other than the above 4, thus we say \"unknown error\"."},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(UNKNOWN_ERROR);"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof ViewTaskListCommand // instanceof handles nulls"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 targetWeek \u003d\u003d (((ViewTaskListCommand) other).targetWeek));"},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":175,"-":24}},{"path":"src/main/java/seedu/progresschecker/logic/commands/CreateIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":" * Create an issue on github"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"public class CreateIssueCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"+issue\";"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"ci\";"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_ASSIGNEES + \"ASSIGNEES \""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"MILESTONE \""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_BODY + \"BODY \""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_LABEL + \"LABELS\";"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create an issue in your team organisation. \""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_ASSIGNEES + \"ASSIGNEES \""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"MILESTONE \""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_BODY + \"BODY \""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_LABEL + \"LABELS/n\""},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"Add new create issue command \""},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_ASSIGNEES + \"johndoe \""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"v1.1 \""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_BODY + \"This is a test issue \""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_LABEL + \"bug\";"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Issue successfully created on Github\";"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Please log into github first\";"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    private final Issue toCreate;"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"     * Creates an CreateIssueCommand to create the specified {@code Issue}"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    public CreateIssueCommand(Issue issue) {"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(issue);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"        toCreate \u003d issue;"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            model.createIssueOnGitHub(toCreate);"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException | CommandException e) {"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof CreateIssueCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 toCreate.equals(((CreateIssueCommand) other).toCreate));"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":58,"-":14}},{"path":"src/main/java/seedu/progresschecker/logic/commands/AddDefaultTasksCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskListUtil.clearTaskList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskListUtil.copyTaskList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskListUtil.createTaskList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskListUtil.setTaskListTitle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.addMultipleTask;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.storage.DefaultTasks.getDefaultTasks;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.storage.TestTasks.getTestTasks;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.task.SimplifiedTask;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":" * Adds a default task list to the user\u0027s Google account."},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"public class AddDefaultTasksCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"newtasklist\";"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"nl\"; // short for \"new list\""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SOURCE_FILE_FOLDER \u003d \"/view\";"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public static final String SOURCE_FILE \u003d \"/defaultTasks.txt\";"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TEST_FILE \u003d \"/testTasks.txt\";"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new task list. \""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"            + \"LISTNAME \""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"            + \"CS2103 LOs\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task list added: %1$s\";"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DEFAULT_LIST_TITLE \u003d \"CS2103 LOs\";"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FIRST_LIST_TITLE \u003d \"My List\";"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DEFAULT_LIST_ID \u003d \"@default\";"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public static final String CREATE_FAILURE \u003d \"Failed to create task list \""},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"            + \"due to unexpected interrupt or API error: \";"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    public static final String START_MASSEGE \u003d \"We have a lot of tasks to initialize. \""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"            + \"The preparation may take a long time, please be patient :) Thank you!\";"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    public static final String LIST_FINISH_MASSEGE \u003d \"Task List created. Now pushing tasks into it: 0/\";"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public static final String PUSH_TASK_ONGOING \u003d \"Pushing tasks into your task list: \";"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    private String listTitle;"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"     * Creates a AddDefaultTasksCommand to add the default task list with title {@code Sting}"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    public AddDefaultTasksCommand(String title) {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(title);"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        listTitle \u003d title;"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent(START_MASSEGE));"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"            setTaskListTitle(DEFAULT_LIST_ID, DEFAULT_LIST_TITLE);"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"            createTaskList(FIRST_LIST_TITLE);"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"            copyTaskList(FIRST_LIST_TITLE, DEFAULT_LIST_ID);"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"            clearTaskList(DEFAULT_LIST_ID);"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"            SimplifiedTask[] tasklist;"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"            if (!listTitle.equals(DEFAULT_LIST_TITLE)) {"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"                tasklist \u003d getTestTasks();"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"            } else {"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"                tasklist \u003d getDefaultTasks();"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"            addMultipleTask(tasklist, DEFAULT_LIST_ID);"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, DEFAULT_LIST_TITLE));"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(CREATE_FAILURE + DEFAULT_LIST_TITLE);"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":65,"-":17}},{"path":"src/main/java/seedu/progresschecker/logic/commands/GitLoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_PASSCODE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_REPO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_GIT_USERNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":" * Logins into github from app for issue creation"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"public class GitLoginCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"gitlogin\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"gl\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_USERNAME + \"USERNAME \""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_PASSCODE + \"PASSCODE \""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_REPO + \"REPOSITORY \";"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs into github \\n\""},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_USERNAME + \"USERNAME \""},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_PASSCODE + \"PASSCODE \""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_REPO + \"REPOSITORY \\n\""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_USERNAME + \"johndoe \""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_PASSCODE + \"dummy123 \""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_GIT_REPO + \"CS2103/main \";"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have successfully authenticated github!\";"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Oops? Maybe the password or the username is incorrect\";"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    private final GitDetails toAuthenticate;"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     * Creates an GitDetails object to authenticate with github {@code GitDetails}"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public GitLoginCommand(GitDetails gitDetails) {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(gitDetails);"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"        toAuthenticate \u003d gitDetails;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            model.loginGithub(toAuthenticate);"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        } catch (CommandException ce) {"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(ce.getMessage());"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof GitLoginCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 toAuthenticate.equals(((GitLoginCommand) other).toAuthenticate));"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":56,"-":12}},{"path":"src/main/java/seedu/progresschecker/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.ViewTaskListCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.ProgressCheckerParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static ViewTaskListCommand viewTaskListCommand \u003d new ViewTaskListCommand(0);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final ProgressCheckerParser progressCheckerParser;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        progressCheckerParser \u003d new ProgressCheckerParser();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Command command \u003d progressCheckerParser.parseCommand(commandText);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            if (commandText.contains(ViewTaskListCommand.COMMAND_WORD)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    || commandText.contains(ViewTaskListCommand.COMMAND_ALIAS)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                this.viewTaskListCommand \u003d (ViewTaskListCommand) command;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static ViewTaskListCommand getCurrentViewTask () {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return viewTaskListCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"        return model.getFilteredExerciseList();"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"        return model.getFilteredIssueList();"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":7,"iNekox3":7,"-":71}},{"path":"src/main/java/seedu/progresschecker/storage/XmlAdaptedIssue.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":" * JAXB-friendly version of the Issue."},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"public class XmlAdaptedIssue {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Issue\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    private String title;"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    private String body;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    private String milestone;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    private List\u003cXmlAdaptedAssignee\u003e assignees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    private List\u003cXmlAdaptedLabel\u003e labelled \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs an XmlAdaptedIssue."},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public XmlAdaptedIssue() {}"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    public XmlAdaptedIssue("},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            String title, String body, String milestone,"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"            List\u003cXmlAdaptedAssignee\u003e assignees, List\u003cXmlAdaptedLabel\u003e labelled) {"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        this.title \u003d title;"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        this.body \u003d body;"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        this.milestone \u003d milestone;"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        if (assignees !\u003d null) {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            this.assignees \u003d new ArrayList\u003c\u003e(assignees);"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        if (labelled !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"            this.labelled \u003d new ArrayList\u003c\u003e(labelled);"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"     * Converts a given Issue into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedIssue"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"    public XmlAdaptedIssue(Issue source) {"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        title \u003d source.getTitle().fullMessage;"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        body \u003d source.getBody().fullBody;"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        if (source.getMilestone() \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"            milestone \u003d \"\";"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        } else {"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"            milestone \u003d source.getMilestone().fullMilestone;"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        assignees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"        for (Assignees assignee : source.getAssignees()) {"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"            assignees.add(new XmlAdaptedAssignee(assignee));"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"        for (Labels label : source.getLabelsList()) {"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"            labelled.add(new XmlAdaptedLabel(label));"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"     * Converts this jaxb-friendly adapted issue object into the model\u0027s Issue object."},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted issue"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"    public Issue toModelType() throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"        final List\u003cAssignees\u003e issueAssignees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"        final List\u003cLabels\u003e issueLabels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"        for (XmlAdaptedAssignee assigneeIssue : assignees) {"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"            issueAssignees.add(assigneeIssue.toModelType());"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"        for (XmlAdaptedLabel labelIssue : labelled) {"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"            issueLabels.add(labelIssue.toModelType());"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        final Title title \u003d new Title(this.title);"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        final Body body \u003d new Body(this.body);"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"        final Milestone milestone \u003d new Milestone(this.milestone);"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"        return new Issue(title, issueAssignees, milestone, body, issueLabels);"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof XmlAdaptedIssue)) {"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"        XmlAdaptedIssue otherIssue \u003d (XmlAdaptedIssue) other;"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        return Objects.equals(title, otherIssue.title)"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 Objects.equals(body, otherIssue.body)"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 Objects.equals(milestone, otherIssue.milestone)"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 Objects.equals(assignees, otherIssue.assignees)"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 Objects.equals(labelled, otherIssue.labelled);"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":113,"-":16}},{"path":"src/main/java/seedu/progresschecker/storage/DefaultTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.task.SimplifiedTask;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":" * Contains information of the default tasks."},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Using an object to save data to reduce the cost of file I/O."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"public class DefaultTasks {"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"    private static final String SUB \u003d \"[Submission]\";"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"    private static final String COM \u003d \"[Compulsory]\";"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    private static final String STAR \u003d \"\u0026#9733;\";"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"    public static SimplifiedTask[] getDefaultTasks() {"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        return new SimplifiedTask[] {"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 2"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W2.2]\" + STAR,"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use basic features of an IDE (2.2 a~c): checkurlhttps:\""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week2/outcomes.html\","},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"                    \"01/25/2018 23:59\"),"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W2.3]\" + SUB + STAR + STAR,"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use Java Collections: checkurlhttps:\""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level1#use-collections-lo-collections\","},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"                    \"01/25/2018 23:59\"),"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W2.4]\" + SUB + STAR + STAR + STAR,"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use Java varargs feature: checkurlhttps:\""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level1#use-varargs-lo-varargss\","},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"                    \"01/25/2018 23:59\"),"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W2.5]\" + STAR + STAR,"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can automate simple regression testing of text UIs (2.5 a~d): checkurlhttps:\""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week2/outcomes.html\","},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"                    \"01/25/2018 23:59\"),"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W2.6]\" + SUB + STAR,"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use Git to save history (2.6 a~f): checkurlhttps://www.sourcetreeapp.com/\","},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"                    \"01/25/2018 23:59\"),"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 3"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.1]\" + STAR + STAR,"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can refactor code at a basic level (3.1 a~d, c needs submission): checkurlhttps:\""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.2]\" + SUB + STAR + STAR,"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can follow a simple style guide (3.2 a~d, c needs submission): checkurlhttps:\""},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.3]\" + STAR + STAR,"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can improve code readability (3.3 a~d): checkurlhttps:\""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.4]\" + STAR + STAR,"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use good naming (3.4 a~b): checkurlhttps:\""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.5]\" + STAR + STAR,"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can avoid unsafe coding practices (3.5 a~c): checkurlhttps:\""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.6]\" + STAR + STAR + STAR,"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can write good code comments (3.6 a~c): checkurlhttps:\""},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.7]\" + STAR + STAR + STAR,"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use intermediate level features of an IDE (3.7 a~c): checkurlhttps:\""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.8]\" + SUB + STAR,"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can communicate with a remote repo (3.8 a~d, c\u0026d need submission): checkurlhttps:\""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/samplerepo-things\","},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.9]\" + STAR + STAR + STAR,"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can traverse Git history: checkurlhttps (3.9 a~d):\""},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week3/outcomes.html\","},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.10]\" + COM + SUB + STAR,"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can work with a 1KLoC code base: checkurlhttps:\""},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level1\","},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/01/2018 23:59\"),"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 4"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.1]\" + STAR + STAR + STAR,"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain models (4.1 a~b): checkurlhttps:\""},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week4/outcomes.html\","},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.2]\" + STAR,"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain OOP (4.2 a~e): checkurlhttps:\""},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week4/outcomes.html\","},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.3]\" + STAR,"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain basic object/class structures (4.3 a~c): checkurlhttps:\""},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week4/outcomes.html\","},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.4]\" + STAR,"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement (4.4 a~b): checkurlhttps:\""},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week4/outcomes.html\","},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.5]\" + SUB + STAR + STAR,"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can do exception handling in code (4.5 a~d, c needs submission): checkurlhttps:\""},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2/blob/master/doc\""},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#handle-exceptions-lo-exceptions\","},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.6]\" + SUB + STAR + STAR + STAR,"},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use Java enumerations (4.6 a~b, b needs submission): checkurlhttps:\""},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level1/#use-enums-lo-enums\","},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.7]\" + SUB + STAR,"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can create PRs on GitHub (4.7 a~e, all need submission: checkurlhttps:\""},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/samplerepo-pr-practice\","},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/08/2018 23:59\"),"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 5"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.1]\" + STAR + STAR + STAR,"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use intermediate-level class diagrams (5.1 a~e): checkurlhttps:\""},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week5/outcomes.html\","},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.2]\" + STAR + STAR + STAR,"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain single responsibility principle: checkurlhttps:\""},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2/blob/master/doc\""},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#follow-the-single-responsibility-principle-lo-srp\","},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.3]\" + SUB + STAR,"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement inheritance (5.3 a~b, b needs submission): checkurlhttps:\""},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2/blob/master/doc\""},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#use-inheritance-to-achieve-code-reuse-lo-inheritance\","},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.4]\" + SUB + STAR + STAR,"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement class-level members (5.4 a~b, b needs submission): checkurlhttps:\""},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2/blob/master/doc\""},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#use-class-level-members-lo-classlevel\","},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.5]\" + SUB + STAR + STAR + STAR,"},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement composition (5.5 a~b, b needs submission): checkurlhttps:\""},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2/blob/master/doc\""},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#implement-a-class-lo-implementclass\","},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.6]\" + STAR + STAR + STAR,"},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement aggregation (5.6 a~b): checkurlhttps:\""},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week5/outcomes.html\","},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.7]\" + STAR + STAR + STAR,"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement overloading (5.7 a~b): checkurlhttps:\""},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week5/outcomes.html\","},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.8]\" + STAR + STAR,"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain requirements (5.8 a~d, b needs submission): checkurlhttps:\""},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level3/blob/master/doc\""},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#use-non-functional-requirements-lo-nfr\","},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.9]\" + STAR + STAR + STAR,"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain some techniques for gathering requirements (5.9 a~g): checkurlhttps:\""},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week5/outcomes.html\","},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.10]\" + SUB + STAR,"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use some techniques for specifying requirements (5.10 a~k, c needs submission): \""},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"                            + \"checkurlhttps://github.com/nus-cs2103-AY1718S2/addressbook-level3/blob/master/doc\""},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#utilize-user-stories-lo-userstories\","},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.11]\" + COM + SUB + STAR,"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can work with a 2KLoC code base: checkurlhttps:\""},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2\","},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/15/2018 23:59\"),"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 6"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W6.1]\" + SUB + STAR,"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use simple JUnit tests (6.1 a~e, e needs submission): checkurlhttps:\""},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level2/blob/master/doc\""},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#use-junit-to-implement-unit-tests-lo-junit\","},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/22/2018 23:59\"),"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W6.2]\" + STAR,"},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can follow Forking Workflow (6.2 a~e): checkurlhttps:\""},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week6/outcomes.html\","},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/22/2018 23:59\"),"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W6.3]\" + STAR,"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can interpret basic sequence diagrams (6.3 a~f): checkurlhttps:\""},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week6/outcomes.html\","},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/22/2018 23:59\"),"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W6.4]\" + SUB + STAR,"},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can implement polymorphism (6.4 a~h, d~h need submission): checkurlhttps:\""},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level3/blob/master/doc\""},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#use-polymorphism-lo-polymorphism\","},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/22/2018 23:59\"),"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W6.5]\" + SUB + STAR + STAR + STAR,"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use JavaFX to build a simple GUI: checkurlhttps:\""},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//github.com/nus-cs2103-AY1718S2/addressbook-level3/blob/master/doc\""},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"                            + \"/LearningOutcomes.md#use-java-fx-for-gui-programming-lo-javafx\","},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":"                    \"02/22/2018 23:59\"),"},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"            // RECESS"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 7"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W7.1]\" + STAR,"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can record requirements of a product: checkurlhttps:\""},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week7/outcomes.html\","},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"                    \"03/08/2018 23:59\"),"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 8"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W8.1]\" + STAR + STAR + STAR,"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can apply basic product design guidelines: checkurlhttps:\""},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week8/outcomes.html\","},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":"                    \"03/15/2018 23:59\"),"},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 9"},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W9.1]\" + STAR + STAR,"},{"lineNumber":203,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can use models to conceptualize an OO solution: checkurlhttps:\""},{"lineNumber":204,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week9/outcomes.html\","},{"lineNumber":205,"author":{"gitID":"EdwardKSG"},"content":"                    \"03/22/2018 23:59\"),"},{"lineNumber":206,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":207,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 10"},{"lineNumber":208,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W10.1]\" + STAR + STAR + STAR,"},{"lineNumber":209,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain SE principles: checkurlhttps:\""},{"lineNumber":210,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week10/outcomes.html\","},{"lineNumber":211,"author":{"gitID":"EdwardKSG"},"content":"                    \"03/29/2018 23:59\"),"},{"lineNumber":212,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":213,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 11"},{"lineNumber":214,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W11.1]\" + STAR + STAR + STAR,"},{"lineNumber":215,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain object oriented domain models: checkurlhttps:\""},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week11/outcomes.html\","},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"                    \"04/05/2018 23:59\"),"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 12"},{"lineNumber":220,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W12.1]\" + STAR + STAR + STAR,"},{"lineNumber":221,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can explain some UML models: checkurlhttps:\""},{"lineNumber":222,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week12/outcomes.html\","},{"lineNumber":223,"author":{"gitID":"EdwardKSG"},"content":"                    \"04/12/2018 23:59\"),"},{"lineNumber":224,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":225,"author":{"gitID":"EdwardKSG"},"content":"            // WEEK 13"},{"lineNumber":226,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W13.1]\" + STAR,"},{"lineNumber":227,"author":{"gitID":"EdwardKSG"},"content":"                    \"Can demo a product: checkurlhttps:\""},{"lineNumber":228,"author":{"gitID":"EdwardKSG"},"content":"                            + \"//nus-cs2103-ay1718s2.github.io/website/schedule/week13/outcomes.html\","},{"lineNumber":229,"author":{"gitID":"EdwardKSG"},"content":"                    \"04/19/2018 23:59\"),"},{"lineNumber":230,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":231,"author":{"gitID":"EdwardKSG"},"content":"        };"},{"lineNumber":232,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":229,"-":4}},{"path":"src/main/java/seedu/progresschecker/storage/TestTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.task.SimplifiedTask;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":" * Contains information of test tasks."},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"public class TestTasks {"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"    public static SimplifiedTask[] getTestTasks() {"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"        return new SimplifiedTask[] {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W3.10][Compulsory][Submission]\u0026#9733;\","},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"                \"Work with a 1KLoC code base: checkurlhttps://nus-cs2103-ay1718s2.github.io/website/schedule\""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"                        + \"/week3/outcomes.html\","},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"                \"02/01/2018 23:59\"),"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W4.1]\u0026#9733;\u0026#9733;\u0026#9733;\","},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"                \"Can explain models: checkurlhttps://nus-cs2103-ay1718s2.github.io/website/schedule/week4\""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"                        + \"/outcomes.html\","},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"                \"02/08/2018 23:59\"),"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W5.11][Compulsory][Submission]\u0026#9733;\","},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"                \"Work with a 2KLoC code base: checkurlhttps://nus-cs2103-ay1718s2.github.io/website/schedule\""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"                        + \"/week5/outcomes.html\","},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"                \"02/15/2018 23:59\"),"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"            new SimplifiedTask(\"LO[W6.5][Submission]\u0026#9733;\u0026#9733;\u0026#9733;\","},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"                \"Can use JavaFX to build a simple GUI: checkurlhttps://nus-cs2103-ay1718s2.github.io/website\""},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"                        + \"/schedule/week6/outcomes.html\","},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"                \"02/22/2018 23:59\")"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"        };"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":27,"-":4}},{"path":"src/main/java/seedu/progresschecker/logic/commands/CompleteTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.AddDefaultTasksCommand.DEFAULT_LIST_ID;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.model.task.TaskUtil.completeTask;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.util.Pair;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.LogicManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":" * Sets a task with given index as completed."},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"public class CompleteTaskCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_WORD \u003d \"complete\";"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_ALIAS \u003d \"ct\"; // short for \"complete task\""},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATA_FOLDER \u003d \"data/\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String TASK_PAGE \u003d \"tasklist.html\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String FILE_FAILURE \u003d \"Something is wrong with the file system.\";"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \"INDEX\";"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_INDEX_CONSTRAINTS \u003d \"The index should be an index in the task list displayed\""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"            + \"to you. It must be an integer that does not exceed the number of tasks in the list.\";"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public static final int DUMMY_WEEK \u003d 0;"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"            + \": Mark task with the given index in the list as completed.\\n\""},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"            + \"Parameters: INDEX (an index in the task list)\\n \""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"            + \"Example: \" + COMMAND_WORD + 1;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Keep it up! Completed task: %1$s\";"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_NO_ACTION \u003d \"This task is already completed: %1$s\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPLETE_FAILURE \u003d \"Error. Failed to mark it as completed. Index: %1$s\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    public static final String UNKNOWN_ERROR \u003d \"Unknow error in the system occurred\";"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static final int ERROR \u003d -1;"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static final int NO_ACTION \u003d 0;"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    public static final int SUCCESS \u003d 1;"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    private int index;"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"     * Complete the task with index {@code int}"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    public CompleteTaskCommand(int index) {"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(index);"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        this.index \u003d index;"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"            Pair\u003cInteger, String\u003e result \u003d completeTask(index, DEFAULT_LIST_ID);"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"            if (result.getKey() \u003d\u003d ERROR) {"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(result.getValue()));"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"            String titleWithCode \u003d result.getValue();     // full file name"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"            String[] parts \u003d titleWithCode.split(\"\u0026#\"); // String array, each element is text between dots"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d parts[0];"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"            if (result.getKey() \u003d\u003d NO_ACTION) {"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(MESSAGE_NO_ACTION, index + \". \" + title));"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"            } else if (result.getKey() \u003d\u003d SUCCESS) {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"                ViewTaskListCommand view \u003d LogicManager.getCurrentViewTask();"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"                view.updateView();"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS, index + \". \" + title));"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"            } else {"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"                // the command parser could never pass any value other than the above 4, thus we say \"unknown error\"."},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"                throw new CommandException(UNKNOWN_ERROR);"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"        } catch (CommandException ce) {"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"            throw ce;"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(COMPLETE_FAILURE + index);"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof CompleteTaskCommand // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 index \u003d\u003d (((CompleteTaskCommand) other).index));"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":79,"-":11}},{"path":"src/main/java/seedu/progresschecker/logic/commands/EditIssueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_ASSIGNEES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_LABEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_MILESTONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"import org.kohsuke.github.GHIssue;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"import org.kohsuke.github.GHLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHRepository;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHUser;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GitHub;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Body;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Milestone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Title;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":" * Edits the details of an existing issue on Github."},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"public class EditIssueCommand extends Command {"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_WORD \u003d \"editissue\";"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_ALIAS \u003d \"edi\";"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \" + \"INDEX \""},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_ASSIGNEES + \"ASSIGNEES] \""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_MILESTONE + \"MILESTONE] \""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_BODY + \"BODY] \""},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_LABEL + \"LABEL]...\";"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of an existing issue \""},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"            + \"by the index number used in the issue listing. \""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_ASSIGNEES + \"ASSIGNEES] \""},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_MILESTONE + \"MILESTONE] \""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_BODY + \"BODY] \""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_LABEL + \"LABEL]...\""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"            + \"Example: \" + COMMAND_WORD + \" 5 \""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_TITLE + \"Make a new attribute \""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"            + PREFIX_MILESTONE + \"v1.3\";"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_EDIT_ISSUE_SUCCESS \u003d \"Issue #%d was successfully edited.\";"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_ISSUE_INVALID \u003d \"Issue doesn\u0027t exist, enter correct index\";"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"    private final String repoName \u003d new String(\"AdityaA1998/samplerepo-pr-practice\");"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"    private final String userLogin \u003d new String(\"anminkang\");"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"    private final String userAuthentication \u003d new String(\"aditya2018\");"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"    private final Index index;"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"    private final EditIssueCommand.EditIssueDescriptor editIssueDescriptor;"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"    private Issue issueToEdit;"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"    private Issue editedIssue;"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"     * @param index of the issue on github that is to be edited"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"     * @param editIssueDescriptor details to edit the issue with"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"    public EditIssueCommand(Index index, EditIssueCommand.EditIssueDescriptor editIssueDescriptor)"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"            throws CommandException, IOException {"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(index);"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(editIssueDescriptor);"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"        this.index \u003d index;"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        this.editIssueDescriptor \u003d new EditIssueCommand.EditIssueDescriptor(editIssueDescriptor);"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        preprocess();"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"            model.updateIssue(index, editedIssue);"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException io) {"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"            throw  new CommandException(io.getLocalizedMessage());"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ISSUE_SUCCESS, index.getOneBased()));"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"     * Preprocess data for existing issue"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"     * @throws CommandException is thrown when invalid issue index is used"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException when the authentication fails"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"    private void preprocess() throws CommandException, IOException {"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"        GitHub github \u003d GitHub.connectUsingPassword(userLogin, userAuthentication);"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"        GHRepository repository \u003d github.getRepository(repoName);"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"        GHIssue issue;"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"            issue \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(MESSAGE_ISSUE_INVALID);"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cGHUser\u003e gitAssigneeList \u003d issue.getAssignees();"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHLabel\u003e gitLabelsList \u003d new ArrayList\u003c\u003e(issue.getLabels());"},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        Milestone existingMilestone \u003d null;"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":"        Body existingBody \u003d new Body(\"\");"},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"        if (issue.getMilestone() \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"            existingMilestone \u003d null;"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"            existingMilestone \u003d new Milestone(issue.getMilestone().getTitle());"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"        for (int i \u003d 0; i \u003c gitAssigneeList.size(); i++) {"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"            assigneesList.add(new Assignees(gitAssigneeList.get(i).getLogin()));"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"        for (int i \u003d 0; i \u003c labelsList.size(); i++) {"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"            labelsList.add(new Labels(gitLabelsList.get(i).getName()));"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"        issueToEdit \u003d new Issue(new Title(issue.getTitle()), assigneesList, existingMilestone,"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"                existingBody, labelsList);"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"        editedIssue \u003d createEditedIssue(issueToEdit, editIssueDescriptor);"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":"     * Creates and returns a {@code Issue} with the details of {@code issueToEdit}"},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"     * edited with {@code editIssueDescriptor}."},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":"    private static Issue createEditedIssue(Issue issueToEdit,"},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"                                           EditIssueCommand.EditIssueDescriptor editIssueDescriptor) {"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"        assert issueToEdit !\u003d null;"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        Title updatedTitle \u003d editIssueDescriptor.getTitle().orElse(issueToEdit.getTitle());"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"        Set\u003cAssignees\u003e updatedAssignees \u003d editIssueDescriptor.getAssignees()"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"                .orElse(new HashSet\u003c\u003e(issueToEdit.getAssignees()));"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":"        Milestone updatedMilestone \u003d editIssueDescriptor.getMilestone().orElse(issueToEdit.getMilestone());"},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        Body updatedBody \u003d editIssueDescriptor.getBody().orElse(issueToEdit.getBody());"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"        Set\u003cLabels\u003e updatedLabels \u003d editIssueDescriptor.getLabels().orElse(new HashSet\u003c\u003e(issueToEdit.getLabelsList()));"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e updatedAssigneesList \u003d new ArrayList\u003c\u003e(updatedAssignees);"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e updatedLabelsList \u003d new ArrayList\u003c\u003e(updatedLabels);"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        return new Issue(updatedTitle, updatedAssigneesList, updatedMilestone, updatedBody, updatedLabelsList);"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"        // short circuit if same object"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"        // instanceof handles nulls"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof EditIssueCommand)) {"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"        // state check"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"        EditIssueCommand e \u003d (EditIssueCommand) other;"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"        return index.equals(e.index)"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 editIssueDescriptor.equals(e.editIssueDescriptor)"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 Objects.equals(issueToEdit, e.issueToEdit);"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"     * Stores the details to edit the issue with. Each non-empty field value will replace the"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"     * corresponding field value of the Issue."},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"    public static class EditIssueDescriptor {"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"        private Title title;"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"        private Set\u003cAssignees\u003e assignees;"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"        private Milestone milestone;"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"        private Body body;"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"        private Set\u003cLabels\u003e labels;"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"        public EditIssueDescriptor() {}"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"         * Copy constructor."},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"         * A defensive copy of {@code labels} is used internally."},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"        public EditIssueDescriptor(EditIssueCommand.EditIssueDescriptor toCopy) {"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"            setTitle(toCopy.title);"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"            setAssignees(toCopy.assignees);"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"            setMilestone(toCopy.milestone);"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"            setBody(toCopy.body);"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"            setLabels(toCopy.labels);"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"            return CollectionUtil.isAnyNonNull(this.title, this.assignees, this.milestone, this.body,"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"                    this.labels);"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":"        public void setTitle(Title title) {"},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"            this.title \u003d title;"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cTitle\u003e getTitle() {"},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.ofNullable(title);"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"         * Sets {@code assignees} to this object\u0027s {@code assignees}."},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":"         * A defensive copy of {@code assignees} is used internally."},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":"        public void setAssignees(Set\u003cAssignees\u003e assignees) {"},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"            this.assignees \u003d (assignees !\u003d null) ? new HashSet\u003c\u003e(assignees) : null;"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":"         * Returns an unmodifiable assignees set, which throws {@code UnsupportedOperationException}"},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"         * if modification is attempted."},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":"         * Returns {@code Optional#empty()} if {@code labels} is null."},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cSet\u003cAssignees\u003e\u003e getAssignees() {"},{"lineNumber":237,"author":{"gitID":"AdityaA1998"},"content":"            return (assignees !\u003d null) ? Optional.of(Collections.unmodifiableSet(assignees)) : Optional.empty();"},{"lineNumber":238,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":240,"author":{"gitID":"AdityaA1998"},"content":"        public void setMilestone(Milestone milestone) {"},{"lineNumber":241,"author":{"gitID":"AdityaA1998"},"content":"            this.milestone \u003d milestone;"},{"lineNumber":242,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":244,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cMilestone\u003e getMilestone() {"},{"lineNumber":245,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.ofNullable(milestone);"},{"lineNumber":246,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":248,"author":{"gitID":"AdityaA1998"},"content":"        public void setBody(Body body) {"},{"lineNumber":249,"author":{"gitID":"AdityaA1998"},"content":"            this.body \u003d body;"},{"lineNumber":250,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":252,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cBody\u003e getBody() {"},{"lineNumber":253,"author":{"gitID":"AdityaA1998"},"content":"            return Optional.ofNullable(body);"},{"lineNumber":254,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":256,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":257,"author":{"gitID":"AdityaA1998"},"content":"         * Sets {@code labels} to this object\u0027s {@code labels}."},{"lineNumber":258,"author":{"gitID":"AdityaA1998"},"content":"         * A defensive copy of {@code labels} is used internally."},{"lineNumber":259,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":260,"author":{"gitID":"AdityaA1998"},"content":"        public void setLabels(Set\u003cLabels\u003e labels) {"},{"lineNumber":261,"author":{"gitID":"AdityaA1998"},"content":"            this.labels \u003d (labels !\u003d null) ? new HashSet\u003c\u003e(labels) : null;"},{"lineNumber":262,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":264,"author":{"gitID":"AdityaA1998"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"AdityaA1998"},"content":"         * Returns an unmodifiable labels set, which throws {@code UnsupportedOperationException}"},{"lineNumber":266,"author":{"gitID":"AdityaA1998"},"content":"         * if modification is attempted."},{"lineNumber":267,"author":{"gitID":"AdityaA1998"},"content":"         * Returns {@code Optional#empty()} if {@code labels} is null."},{"lineNumber":268,"author":{"gitID":"AdityaA1998"},"content":"         */"},{"lineNumber":269,"author":{"gitID":"AdityaA1998"},"content":"        public Optional\u003cSet\u003cLabels\u003e\u003e getLabels() {"},{"lineNumber":270,"author":{"gitID":"AdityaA1998"},"content":"            return (labels !\u003d null) ? Optional.of(Collections.unmodifiableSet(labels)) : Optional.empty();"},{"lineNumber":271,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":273,"author":{"gitID":"AdityaA1998"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"AdityaA1998"},"content":"        public boolean equals(Object other) {"},{"lineNumber":275,"author":{"gitID":"AdityaA1998"},"content":"            // short circuit if same object"},{"lineNumber":276,"author":{"gitID":"AdityaA1998"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":277,"author":{"gitID":"AdityaA1998"},"content":"                return true;"},{"lineNumber":278,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":280,"author":{"gitID":"AdityaA1998"},"content":"            // instanceof handles nulls"},{"lineNumber":281,"author":{"gitID":"AdityaA1998"},"content":"            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"},{"lineNumber":282,"author":{"gitID":"AdityaA1998"},"content":"                return false;"},{"lineNumber":283,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":285,"author":{"gitID":"AdityaA1998"},"content":"            // state check"},{"lineNumber":286,"author":{"gitID":"AdityaA1998"},"content":"            EditIssueCommand.EditIssueDescriptor e \u003d (EditIssueCommand.EditIssueDescriptor) other;"},{"lineNumber":287,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":288,"author":{"gitID":"AdityaA1998"},"content":"            return getTitle().equals(e.getTitle())"},{"lineNumber":289,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getAssignees().equals(e.getAssignees())"},{"lineNumber":290,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getMilestone().equals(e.getMilestone())"},{"lineNumber":291,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getBody().equals(e.getBody())"},{"lineNumber":292,"author":{"gitID":"AdityaA1998"},"content":"                    \u0026\u0026 getLabels().equals(e.getLabels());"},{"lineNumber":293,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":263,"-":32}},{"path":"src/main/java/seedu/progresschecker/storage/XmlAdaptedExercise.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":" * JAXB-friendly version of the Exercise."},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"public class XmlAdaptedExercise {"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    private String questionIndex;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    private String questionType;"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    private String question;"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"    private String studentAnswer;"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    private String modelAnswer;"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"     * Constructs an XmlAdaptedExercise."},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    public XmlAdaptedExercise() {}"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     * Constructs an {@code XmlAdaptedExercise} with the given exercise details."},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    public XmlAdaptedExercise("},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"            String questionIndex, String questionType, String question,"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"            String studentAnswer, String modelAnswer) {"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"        this.questionIndex \u003d questionIndex;"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"        this.question \u003d question;"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d studentAnswer;"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"        this.modelAnswer \u003d modelAnswer;"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"     * Converts a given Exercise into this class for JAXB use."},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedExercise"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":"    public XmlAdaptedExercise(Exercise source) {"},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"        questionIndex \u003d source.getQuestionIndex().value;"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        questionType \u003d source.getQuestionType().value;"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"        question \u003d source.getQuestion().value;"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"        studentAnswer \u003d source.getStudentAnswer().value;"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":"        modelAnswer \u003d source.getModelAnswer().value;"},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"     * Converts this jaxb-friendly adapted exercise object into the model\u0027s Exercise object."},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"    public Exercise toModelType() throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"        if (this.questionIndex \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":"                    QuestionIndex.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"        if (!QuestionIndex.isValidIndex(this.questionIndex)) {"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(QuestionIndex.MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"        final QuestionIndex questionIndex \u003d new QuestionIndex(this.questionIndex);"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"        if (this.questionType \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"                    QuestionType.class.getSimpleName()));"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"        if (!QuestionType.isValidType(this.questionType)) {"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException(QuestionType.MESSAGE_TYPE_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"        final QuestionType questionType \u003d new QuestionType(this.questionType);"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"        if (this.question \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"                    Question.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"        final Question question \u003d new Question(this.question);"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":99,"author":{"gitID":"iNekox3"},"content":"        if (this.studentAnswer \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":"                    StudentAnswer.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"        final StudentAnswer studentAnswer \u003d new StudentAnswer(this.studentAnswer);"},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"        if (this.modelAnswer \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"            throw new IllegalValueException("},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"                    ModelAnswer.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"        final ModelAnswer modelAnswer \u003d new ModelAnswer(this.modelAnswer);"},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"        return new Exercise(questionIndex, questionType, question, studentAnswer, modelAnswer);"},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"        if (!(other instanceof XmlAdaptedExercise)) {"},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"        XmlAdaptedExercise otherExercise \u003d (XmlAdaptedExercise) other;"},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"        return Objects.equals(questionIndex, otherExercise.questionIndex)"},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 Objects.equals(questionType, otherExercise.questionType)"},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 Objects.equals(question, otherExercise.question);"},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":117,"-":14}},{"path":"src/main/java/seedu/progresschecker/model/person/GithubUsername.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Represents a Person\u0027s Github username in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class GithubUsername {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"            \"Person Github usernames should only contain alphanumeric characters and spaces, \""},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"                    + \"and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * The first character of the username must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public final String username;"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     * Constructs a {@code GithubUsername}."},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     * @param username A valid username."},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public GithubUsername(String username) {"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(username);"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"        this.username \u003d username;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     * Returns true if a given string is a valid Github username."},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        return username;"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof GithubUsername // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 this.username.equals(((GithubUsername) other).username)); // state check"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        return username.hashCode();"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":56,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ProgressChecker;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.ReadOnlyProgressChecker;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.ModelAnswer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Question;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionIndex;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.QuestionType;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.StudentAnswer;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.DuplicateExerciseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Assignees;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Labels;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.GithubUsername;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Major;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Year;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code ProgressChecker} with sample data."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@gmail.com\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new GithubUsername(\"AlexGithub\"), new Major(\"Computer Science\"), new Year(\"2\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@gmail.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new GithubUsername(\"BerniceGithub\"), new Major(\"Computer Engineering\"), new Year(\"2\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@gmail.com\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                new GithubUsername(\"CharlotteGithub\"), new Major(\"Information Security\"), new Year(\"2\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@gmail.com\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                new GithubUsername(\"DavidGithub\"), new Major(\"Computer Engineering\"), new Year(\"2\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                getTagSet(\"family\"))"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static ReadOnlyProgressChecker getSampleProgressChecker() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ProgressChecker sampleAb \u003d new ProgressChecker();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            for (Exercise sampleExercise : getSampleExercises()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                sampleAb.addExercise(sampleExercise);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"            /*for (Issue sampleIssue : getSampleIssues()) {"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"                sampleAb.createIssueOnGitHub(sampleIssue);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"            }*/"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (DuplicateExerciseException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate exercises\", e);"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"        } /* catch (IOException ie) {"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"            throw new AssertionError(\"first login to github\", ie);"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        } */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"     * Returns an label list containing the list of strings given."},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"    public static List\u003cLabels\u003e getLabelsList(String... strings) {"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cLabels\u003e labels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"        for (String s : strings) {"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"            labels.add(new Labels(s));"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        return labels;"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"     * Returns an Assignee list containing the list of strings given."},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"    public static List\u003cAssignees\u003e getAssigneeList(String... strings) {"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cAssignees\u003e assignees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        for (String s : strings) {"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"            assignees.add(new Assignees(s));"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"        return assignees;"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":"    public static Exercise[] getSampleExercises() {"},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"        return new Exercise[] {"},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"            // week 2"},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.2.1\"), new QuestionType(\"choice\"),"},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which one of these is not a feature available in IDEs?\\n\""},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Compiling.\\n\""},{"lineNumber":119,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Syntax error highlighting.\\n\""},{"lineNumber":120,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Debugging.\\n\""},{"lineNumber":121,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Code navigation e.g., to navigate from a method call to the method implementation.\\n\""},{"lineNumber":122,"author":{"gitID":"iNekox3"},"content":"                        + \"e. Simulation e.g., run a mobile app in a simulator.\\n\""},{"lineNumber":123,"author":{"gitID":"iNekox3"},"content":"                        + \"f. Code analysis e.g. to find unreachable code.\\n\""},{"lineNumber":124,"author":{"gitID":"iNekox3"},"content":"                        + \"g. Reverse engineering design/documentation e.g. generate diagrams from code\\n\""},{"lineNumber":125,"author":{"gitID":"iNekox3"},"content":"                        + \"h. Visual programming e.g. Write programs using ‚Äòdrag and drop‚Äô actions \""},{"lineNumber":126,"author":{"gitID":"iNekox3"},"content":"                        + \"instead of typing code.\\n\""},{"lineNumber":127,"author":{"gitID":"iNekox3"},"content":"                        + \"i. Syntax assistance e.g., show hints as you type.\\n\""},{"lineNumber":128,"author":{"gitID":"iNekox3"},"content":"                        + \"j. Code generation e.g., to generate the code required \""},{"lineNumber":129,"author":{"gitID":"iNekox3"},"content":"                        + \"by simply specifying which component/structure you want to implement.\\n\""},{"lineNumber":130,"author":{"gitID":"iNekox3"},"content":"                        + \"k. Extension. i.e. ability add more functionality to the IDE using plugins.\"),"},{"lineNumber":131,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":132,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"All. While all of these features may not be present in some IDEs, \""},{"lineNumber":133,"author":{"gitID":"iNekox3"},"content":"                        + \"most do have these features in some form or other.\")),"},{"lineNumber":134,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.5.1\"), new QuestionType(\"text\"),"},{"lineNumber":135,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Explain how the concepts of testing, test case, test failure, \""},{"lineNumber":136,"author":{"gitID":"iNekox3"},"content":"                        + \"and defect are related to each other.\"),"},{"lineNumber":137,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":138,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":139,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.5.2\"), new QuestionType(\"choice\"),"},{"lineNumber":140,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Regression testing is the automated re-testing of a software \""},{"lineNumber":141,"author":{"gitID":"iNekox3"},"content":"                        + \"after it has been modified.\\n\""},{"lineNumber":142,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":143,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":144,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\\n\""},{"lineNumber":145,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Partially true\"),"},{"lineNumber":146,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":147,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"c. Regression testing need not be automated but automation is highly recommended.\")),"},{"lineNumber":148,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.5.3\"), new QuestionType(\"text\"),"},{"lineNumber":149,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Explain why and when you would do regression testing in a software project.\"),"},{"lineNumber":150,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":151,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":152,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.6.1\"), new QuestionType(\"text\"),"},{"lineNumber":153,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What does RCS stand for?\"),"},{"lineNumber":154,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":155,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"Revision Control Software.\")),"},{"lineNumber":156,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.6.2\"), new QuestionType(\"text\"),"},{"lineNumber":157,"author":{"gitID":"iNekox3"},"content":"                new Question(\"In the context of RCS, what is a Revision? Give an example.\"),"},{"lineNumber":158,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":159,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"Versions of a piece of information. For example, \""},{"lineNumber":160,"author":{"gitID":"iNekox3"},"content":"                        + \"take a file containing program code. \""},{"lineNumber":161,"author":{"gitID":"iNekox3"},"content":"                        + \"If you modify the code and save the file, \""},{"lineNumber":162,"author":{"gitID":"iNekox3"},"content":"                        + \"you have a new version of that file.\")),"},{"lineNumber":163,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.6.3\"), new QuestionType(\"choice\"),"},{"lineNumber":164,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these is not considered a benefit of a typical RCS?\\n\""},{"lineNumber":165,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Help a single user manage revisions of a single file\\n\""},{"lineNumber":166,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Help a developer recover from a incorrect modification to a code file\\n\""},{"lineNumber":167,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Makes it easier for a group of developers to collaborate on a project\\n\""},{"lineNumber":168,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Manage the drift between multiple versions of your project\\n\""},{"lineNumber":169,"author":{"gitID":"iNekox3"},"content":"                        + \"e. Detect when multiple developers make incompatible changes to the same file\\n\""},{"lineNumber":170,"author":{"gitID":"iNekox3"},"content":"                        + \"f. All of them are benefits of RCS\"),"},{"lineNumber":171,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":172,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"f.\")),"},{"lineNumber":173,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.6.4\"), new QuestionType(\"text\"),"},{"lineNumber":174,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Suppose You are doing a team project with Tom, Dick, and Harry \""},{"lineNumber":175,"author":{"gitID":"iNekox3"},"content":"                        + \"but those three have not even heard the term RCS. \""},{"lineNumber":176,"author":{"gitID":"iNekox3"},"content":"                        + \"How do you explain RCS to them as briefly as possible, \""},{"lineNumber":177,"author":{"gitID":"iNekox3"},"content":"                        + \"using the project as an example?\"),"},{"lineNumber":178,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":179,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":180,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"2.6.5\"), new QuestionType(\"text\"),"},{"lineNumber":181,"author":{"gitID":"iNekox3"},"content":"                new Question(\"In the context of RCS, what is a repo?\"),"},{"lineNumber":182,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":183,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":184,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":185,"author":{"gitID":"iNekox3"},"content":"            // week 3"},{"lineNumber":186,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.1.1\"), new QuestionType(\"choice\"),"},{"lineNumber":187,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements\\n\""},{"lineNumber":188,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":189,"author":{"gitID":"iNekox3"},"content":"                        + \" a. Refactoring can improve understandability\\n\""},{"lineNumber":190,"author":{"gitID":"iNekox3"},"content":"                        + \" b. Refactoring can uncover bugs\\n\""},{"lineNumber":191,"author":{"gitID":"iNekox3"},"content":"                        + \" c. Refactoring can result in better performance\\n\""},{"lineNumber":192,"author":{"gitID":"iNekox3"},"content":"                        + \" d. Refactoring can change the number of methods/classes\"),"},{"lineNumber":193,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":194,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c d. (a, b, c) Although the primary aim of refactoring \""},{"lineNumber":195,"author":{"gitID":"iNekox3"},"content":"                        + \"is to improve internal code structure, there are other secondary benefits. \""},{"lineNumber":196,"author":{"gitID":"iNekox3"},"content":"                        + \"(d) Some refactorings result in adding/removing methods/classes.\")),"},{"lineNumber":197,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.1.2\"), new QuestionType(\"text\"),"},{"lineNumber":198,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Do you agree with the following statement? Justify your answer.\\n\""},{"lineNumber":199,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":200,"author":{"gitID":"iNekox3"},"content":"                        + \"Statement: Whenever we refactor code to fix bugs, \""},{"lineNumber":201,"author":{"gitID":"iNekox3"},"content":"                        + \"we need not do regression testing if the bug fix was minor.\"),"},{"lineNumber":202,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":203,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"DISAGREE. Even a minor change can have major repercussions on the system. \""},{"lineNumber":204,"author":{"gitID":"iNekox3"},"content":"                        + \"We MUST do regression testing after each change, no matter how minor it is. \""},{"lineNumber":205,"author":{"gitID":"iNekox3"},"content":"                        + \"Fixing bugs is technically not refactoring.\")),"},{"lineNumber":206,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.1.3\"), new QuestionType(\"text\"),"},{"lineNumber":207,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Explain what is refactoring and why it is not the same as rewriting, \""},{"lineNumber":208,"author":{"gitID":"iNekox3"},"content":"                        + \"bug fixing, or adding features.\"),"},{"lineNumber":209,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":210,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":211,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.1.4\"), new QuestionType(\"choice\"),"},{"lineNumber":212,"author":{"gitID":"iNekox3"},"content":"                new Question(\"‚ÄòExtract method‚Äô and ‚ÄòInline method‚Äô refactorings\\n\""},{"lineNumber":213,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":214,"author":{"gitID":"iNekox3"},"content":"                        + \"a. are opposites of each other.\\n\""},{"lineNumber":215,"author":{"gitID":"iNekox3"},"content":"                        + \"b. sounds like opposites but they are not.\"),"},{"lineNumber":216,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":217,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a.\")),"},{"lineNumber":218,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.2.1\"), new QuestionType(\"choice\"),"},{"lineNumber":219,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What is the recommended approach regarding coding standards?\\n\""},{"lineNumber":220,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":221,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Each developer should find a suitable coding standard and follow it in their coding.\\n\""},{"lineNumber":222,"author":{"gitID":"iNekox3"},"content":"                        + \"b. A developer should understand the importance of following a coding standard. \""},{"lineNumber":223,"author":{"gitID":"iNekox3"},"content":"                        + \"However, there is no need to follow one.\\n\""},{"lineNumber":224,"author":{"gitID":"iNekox3"},"content":"                        + \"c. A developer should find out the coding standards currently used by the project \""},{"lineNumber":225,"author":{"gitID":"iNekox3"},"content":"                        + \"and follow that closely.\\n\""},{"lineNumber":226,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Coding standards are lame. Real programmers develop their own individual styles.\"),"},{"lineNumber":227,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":228,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"c.\")),"},{"lineNumber":229,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.2.2\"), new QuestionType(\"text\"),"},{"lineNumber":230,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What is the aim of using a coding standard? How does it help?\"),"},{"lineNumber":231,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":232,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":233,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.2.3\"), new QuestionType(\"choice\"),"},{"lineNumber":234,"author":{"gitID":"iNekox3"},"content":"                new Question(\"According to the given Java coding standard, which one of these is not a good name?\\n\""},{"lineNumber":235,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":236,"author":{"gitID":"iNekox3"},"content":"                        + \"a. integer variable name: totalPeople\\n\""},{"lineNumber":237,"author":{"gitID":"iNekox3"},"content":"                        + \"b. boolean variable name: checkWeight\\n\""},{"lineNumber":238,"author":{"gitID":"iNekox3"},"content":"                        + \"c. method name (returns integer): getPeopleCount\\n\""},{"lineNumber":239,"author":{"gitID":"iNekox3"},"content":"                        + \"d. method name (returns boolean): isValidAddress\\n\""},{"lineNumber":240,"author":{"gitID":"iNekox3"},"content":"                        + \"e. String variable name: description\"),"},{"lineNumber":241,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":242,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. checkWeight is an action. \""},{"lineNumber":243,"author":{"gitID":"iNekox3"},"content":"                        + \"Naming variables as actions makes the code harder to follow. \""},{"lineNumber":244,"author":{"gitID":"iNekox3"},"content":"                        + \"isWeightValid may be a better name.\")),"},{"lineNumber":245,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.3.1\"), new QuestionType(\"choice\"),"},{"lineNumber":246,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Putting all details in one place can create lengthy methods, \""},{"lineNumber":247,"author":{"gitID":"iNekox3"},"content":"                        + \"but it is preferred over creating many small methods \""},{"lineNumber":248,"author":{"gitID":"iNekox3"},"content":"                        + \"because it makes the code easier to understand.\\n\""},{"lineNumber":249,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":250,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":251,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":252,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":253,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. If you are using abstraction properly, \""},{"lineNumber":254,"author":{"gitID":"iNekox3"},"content":"                        + \"you DON‚ÄôT need to see all details to understand something. \""},{"lineNumber":255,"author":{"gitID":"iNekox3"},"content":"                        + \"The whole point of using abstraction is to be able to understand things \""},{"lineNumber":256,"author":{"gitID":"iNekox3"},"content":"                        + \"without knowing as little details as possible. \""},{"lineNumber":257,"author":{"gitID":"iNekox3"},"content":"                        + \"This is why we recommend single level of abstraction per method and top-down coding.\")),"},{"lineNumber":258,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.3.2\"), new QuestionType(\"choice\"),"},{"lineNumber":259,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What are the drawbacks of trying to optimize code too soon?\\n\""},{"lineNumber":260,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":261,"author":{"gitID":"iNekox3"},"content":"                        + \"a. We may not know which parts are the real performance bottleneck\\n\""},{"lineNumber":262,"author":{"gitID":"iNekox3"},"content":"                        + \"b. When we optimize code manually, it becomes harder for the compiler to optimize\\n\""},{"lineNumber":263,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Optimizing can complicate code\\n\""},{"lineNumber":264,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Optimizing can lead to more error-prone code\"),"},{"lineNumber":265,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":266,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"All.\")),"},{"lineNumber":267,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.3.3\"), new QuestionType(\"choice\"),"},{"lineNumber":268,"author":{"gitID":"iNekox3"},"content":"                new Question(\"This is a common saying among programmers\\n\""},{"lineNumber":269,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":270,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Make it fast, make it right, make it work\\n\""},{"lineNumber":271,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Make it work, make it right, make it fast\\n\""},{"lineNumber":272,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Make it fast, make it right, now make it faster\"),"},{"lineNumber":273,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":274,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b.\")),"},{"lineNumber":275,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"3.6.1\"), new QuestionType(\"choice\"),"},{"lineNumber":276,"author":{"gitID":"iNekox3"},"content":"                new Question(\"In general, comments should describe,\\n\""},{"lineNumber":277,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":278,"author":{"gitID":"iNekox3"},"content":"                        + \"a. WHAT the code does\\n\""},{"lineNumber":279,"author":{"gitID":"iNekox3"},"content":"                        + \"b. WHY the code does something\\n\""},{"lineNumber":280,"author":{"gitID":"iNekox3"},"content":"                        + \"c. HOW the code does something\"),"},{"lineNumber":281,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":282,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b. How the code does something should be apparent from the code itself. \""},{"lineNumber":283,"author":{"gitID":"iNekox3"},"content":"                        + \"However, comments can help the reader in describing WHAT and WHY aspects of the code.\")),"},{"lineNumber":284,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":285,"author":{"gitID":"iNekox3"},"content":"            // week 4"},{"lineNumber":286,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.1.1\"), new QuestionType(\"choice\"),"},{"lineNumber":287,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about models.\\n\""},{"lineNumber":288,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":289,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Models are abstractions.\\n\""},{"lineNumber":290,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Models can be used for communication.\\n\""},{"lineNumber":291,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Models can be used for analysis of a problem.\\n\""},{"lineNumber":292,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Generating models from code is useless.\\n\""},{"lineNumber":293,"author":{"gitID":"iNekox3"},"content":"                        + \"e. Models can be used as blueprints for generating code.\"),"},{"lineNumber":294,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":295,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c e. Models generated from code can be used for understanding, analysing, \""},{"lineNumber":296,"author":{"gitID":"iNekox3"},"content":"                        + \"and communicating about the code.\")),"},{"lineNumber":297,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.1.2\"), new QuestionType(\"text\"),"},{"lineNumber":298,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Explain how models (e.g. UML diagrams) can be used in a class project.\"),"},{"lineNumber":299,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":300,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":301,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.2.1\"), new QuestionType(\"choice\"),"},{"lineNumber":302,"author":{"gitID":"iNekox3"},"content":"                new Question(\"A) Choose the correct statements\\n\""},{"lineNumber":303,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":304,"author":{"gitID":"iNekox3"},"content":"                        + \"a. OO is a programming paradigm\\n\""},{"lineNumber":305,"author":{"gitID":"iNekox3"},"content":"                        + \"b. OO guides us in how to structure the solution\\n\""},{"lineNumber":306,"author":{"gitID":"iNekox3"},"content":"                        + \"c. OO is mainly an abstraction mechanism\\n\""},{"lineNumber":307,"author":{"gitID":"iNekox3"},"content":"                        + \"d. OO is a programming language\\n\""},{"lineNumber":308,"author":{"gitID":"iNekox3"},"content":"                        + \"e. OO is modeled after how the objects in real world work\"),"},{"lineNumber":309,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":310,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c e. While many languages support the OO paradigm, OO is not a language itself.\")),"},{"lineNumber":311,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.2.2\"), new QuestionType(\"choice\"),"},{"lineNumber":312,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements\\n\""},{"lineNumber":313,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":314,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Java and C++ are OO languages\\n\""},{"lineNumber":315,"author":{"gitID":"iNekox3"},"content":"                        + \"b. C language follows the Functional Programming paradigm\\n\""},{"lineNumber":316,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Java can be used to write procedural code\\n\""},{"lineNumber":317,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Prolog follows the Logic Programming paradigm\"),"},{"lineNumber":318,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":319,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c d. C follows the procedural paradigm. \""},{"lineNumber":320,"author":{"gitID":"iNekox3"},"content":"                        + \"Yes, we can write procedural code using OO languages e.g., AddressBook-level1.\")),"},{"lineNumber":321,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.2.3\"), new QuestionType(\"choice\"),"},{"lineNumber":322,"author":{"gitID":"iNekox3"},"content":"                new Question(\"OO is a higher level mechanism than the procedural paradigm.\\n\""},{"lineNumber":323,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":324,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":325,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":326,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":327,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. True. Procedural languages work at simple data structures (e.g., integers, arrays) \""},{"lineNumber":328,"author":{"gitID":"iNekox3"},"content":"                        + \"and functions level. Because an object is an abstraction over data+related functions, \""},{"lineNumber":329,"author":{"gitID":"iNekox3"},"content":"                        + \"OO works at a higher level.\")),"},{"lineNumber":330,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.2.4\"), new QuestionType(\"choice\"),"},{"lineNumber":331,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statement\\n\""},{"lineNumber":332,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":333,"author":{"gitID":"iNekox3"},"content":"                        + \"a. An object is an encapsulation because it packages data and behavior into one bundle.\\n\""},{"lineNumber":334,"author":{"gitID":"iNekox3"},"content":"                        + \"b. An object is an encapsulation because it lets us think in terms of higher level concepts \""},{"lineNumber":335,"author":{"gitID":"iNekox3"},"content":"                        + \"such as Students rather than student-related functions and data separately.\"),"},{"lineNumber":336,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":337,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. The second statement should be: An object is an abstraction encapsulation \""},{"lineNumber":338,"author":{"gitID":"iNekox3"},"content":"                        + \"because it lets ...\")),"},{"lineNumber":339,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.5.1\"), new QuestionType(\"choice\"),"},{"lineNumber":340,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which are benefits of exceptions?\\n\""},{"lineNumber":341,"author":{"gitID":"iNekox3"},"content":"                        + \"+\\n\""},{"lineNumber":342,"author":{"gitID":"iNekox3"},"content":"                        + \" a. Exceptions allow us to separate normal code from error handling code.\\n\""},{"lineNumber":343,"author":{"gitID":"iNekox3"},"content":"                        + \" b. Exceptions can prevent problems that happen in the environment.\\n\""},{"lineNumber":344,"author":{"gitID":"iNekox3"},"content":"                        + \" c. Exceptions allow us to handle in one location an error raised in another location.\"),"},{"lineNumber":345,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":346,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c. Exceptions cannot prevent problems in the environment. \""},{"lineNumber":347,"author":{"gitID":"iNekox3"},"content":"                        + \"They can only be used to handle and recover from such problems.\")),"},{"lineNumber":348,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.6.1\"), new QuestionType(\"text\"),"},{"lineNumber":349,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Show (in UML notation) an enumeration called WeekDay \""},{"lineNumber":350,"author":{"gitID":"iNekox3"},"content":"                        + \"to use when the value can only be Monday ... Friday.\"),"},{"lineNumber":351,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":352,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":353,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.7.1\"), new QuestionType(\"text\"),"},{"lineNumber":354,"author":{"gitID":"iNekox3"},"content":"                new Question(\"In the context of RCS, what is the branching? What is the need for branching?\"),"},{"lineNumber":355,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":356,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":357,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"4.7.2\"), new QuestionType(\"text\"),"},{"lineNumber":358,"author":{"gitID":"iNekox3"},"content":"                new Question(\"In the context of RCS, what is the merging branches? \""},{"lineNumber":359,"author":{"gitID":"iNekox3"},"content":"                        + \"How can it lead to merge conflicts?\"),"},{"lineNumber":360,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":361,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":362,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":363,"author":{"gitID":"iNekox3"},"content":"            // week 5"},{"lineNumber":364,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"5.4.1\"), new QuestionType(\"choice\"),"},{"lineNumber":365,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these are suitable as class-level variables?\\n\""},{"lineNumber":366,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":367,"author":{"gitID":"iNekox3"},"content":"                        + \"a. system: multi-player Pac Man game, Class: Player, variable: totalScore\\n\""},{"lineNumber":368,"author":{"gitID":"iNekox3"},"content":"                        + \"b. system: eLearning system, class: Course, variable: totalStudents\\n\""},{"lineNumber":369,"author":{"gitID":"iNekox3"},"content":"                        + \"c. system: ToDo manager, class: Task, variable: totalPendingTasks\\n\""},{"lineNumber":370,"author":{"gitID":"iNekox3"},"content":"                        + \"d. system: any, class: ArrayList, variable: total \""},{"lineNumber":371,"author":{"gitID":"iNekox3"},"content":"                        + \"(i.e., total items in a given ArrayList object)\"),"},{"lineNumber":372,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":373,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"c. totalPendingTasks should not be managed by individual Task objects \""},{"lineNumber":374,"author":{"gitID":"iNekox3"},"content":"                        + \"and therefore suitable to be maintained as a class-level variable. \""},{"lineNumber":375,"author":{"gitID":"iNekox3"},"content":"                        + \"The other variables should be managed at instance level \""},{"lineNumber":376,"author":{"gitID":"iNekox3"},"content":"                        + \"as their value varies from instance to instance. \""},{"lineNumber":377,"author":{"gitID":"iNekox3"},"content":"                        + \"e.g., totalStudents for one Course object will differ from totalStudents of another.\")),"},{"lineNumber":378,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"5.6.1\"), new QuestionType(\"choice\"),"},{"lineNumber":379,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which one of these is recommended not to use in UML diagrams \""},{"lineNumber":380,"author":{"gitID":"iNekox3"},"content":"                        + \"because it adds more confusion than clarity?\\n\""},{"lineNumber":381,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":382,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Composition symbol\\n\""},{"lineNumber":383,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Aggregation symbol\"),"},{"lineNumber":384,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":385,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b.\")),"},{"lineNumber":386,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"5.8.1\"), new QuestionType(\"choice\"),"},{"lineNumber":387,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Given below are some requirements of TEAMMATES \""},{"lineNumber":388,"author":{"gitID":"iNekox3"},"content":"                        + \"(an online peer evaluation system for education). \""},{"lineNumber":389,"author":{"gitID":"iNekox3"},"content":"                        + \"Which one of these are non-functional requirements?\\n\""},{"lineNumber":390,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":391,"author":{"gitID":"iNekox3"},"content":"                        + \"a. The response to any use action should become visible within 5 seconds.\\n\""},{"lineNumber":392,"author":{"gitID":"iNekox3"},"content":"                        + \"b. The application admin should be able to view a log of user activities.\\n\""},{"lineNumber":393,"author":{"gitID":"iNekox3"},"content":"                        + \"c. The source code should be open source.\\n\""},{"lineNumber":394,"author":{"gitID":"iNekox3"},"content":"                        + \"d. A course should be able to have up to 2000 students.\\n\""},{"lineNumber":395,"author":{"gitID":"iNekox3"},"content":"                        + \"e. As a student user, I can view details of my team members \""},{"lineNumber":396,"author":{"gitID":"iNekox3"},"content":"                        + \"so that I can know who they are.\\n\""},{"lineNumber":397,"author":{"gitID":"iNekox3"},"content":"                        + \"f. The user interface should be intuitive enough for users who are not IT-savvy.\\n\""},{"lineNumber":398,"author":{"gitID":"iNekox3"},"content":"                        + \"g. The product is offered as a free online service.\"),"},{"lineNumber":399,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":400,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c d f g. (b) are (e) are functions available for a specific user types. \""},{"lineNumber":401,"author":{"gitID":"iNekox3"},"content":"                        + \"Therefore, they are functional requirements. \""},{"lineNumber":402,"author":{"gitID":"iNekox3"},"content":"                        + \"(a), (c), (d), (f) and (g) are either constraints on functionality \""},{"lineNumber":403,"author":{"gitID":"iNekox3"},"content":"                        + \"or constraints on how the project is done, \""},{"lineNumber":404,"author":{"gitID":"iNekox3"},"content":"                        + \"both of which are considered non-functional requirements.\")),"},{"lineNumber":405,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"5.9.1\"), new QuestionType(\"choice\"),"},{"lineNumber":406,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What is the key characteristic about brainstorming?\\n\""},{"lineNumber":407,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":408,"author":{"gitID":"iNekox3"},"content":"                        + \" a. There should be at least 5 participants.\\n\""},{"lineNumber":409,"author":{"gitID":"iNekox3"},"content":"                        + \" b. All ideas are welcome. There are no bad ideas.\\n\""},{"lineNumber":410,"author":{"gitID":"iNekox3"},"content":"                        + \" c. Only the best people in the team should take part.\\n\""},{"lineNumber":411,"author":{"gitID":"iNekox3"},"content":"                        + \" d. They are a good way to eliminate bad ideas.\"),"},{"lineNumber":412,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":413,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b.\")),"},{"lineNumber":414,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":415,"author":{"gitID":"iNekox3"},"content":"            // week 6"},{"lineNumber":416,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"6.1.1\"), new QuestionType(\"text\"),"},{"lineNumber":417,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Discuss pros and cons of developers testing their own code.\"),"},{"lineNumber":418,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":419,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"Pros:\\n\""},{"lineNumber":420,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":421,"author":{"gitID":"iNekox3"},"content":"                        + \"Can be done early (the earlier we find a bug, the cheaper it is to fix).\\n\""},{"lineNumber":422,"author":{"gitID":"iNekox3"},"content":"                        + \"Can be done at lower levels, for examples, at operation and class level \""},{"lineNumber":423,"author":{"gitID":"iNekox3"},"content":"                        + \"(testers usually test the system at UI level).\\n\""},{"lineNumber":424,"author":{"gitID":"iNekox3"},"content":"                        + \"It is possible to do more thorough testing because \""},{"lineNumber":425,"author":{"gitID":"iNekox3"},"content":"                        + \"developers know the expected external behavior \""},{"lineNumber":426,"author":{"gitID":"iNekox3"},"content":"                        + \"as well as the internal structure of the component.\\n\""},{"lineNumber":427,"author":{"gitID":"iNekox3"},"content":"                        + \"It forces developers to take responsibility for their own work \""},{"lineNumber":428,"author":{"gitID":"iNekox3"},"content":"                        + \"(they cannot claim that \\\"testing is the job of the testers\\\").\\n\""},{"lineNumber":429,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":430,"author":{"gitID":"iNekox3"},"content":"                        + \"Cons:\\n\""},{"lineNumber":431,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":432,"author":{"gitID":"iNekox3"},"content":"                        + \"A developer may unconsciously test only situations that he knows to work \""},{"lineNumber":433,"author":{"gitID":"iNekox3"},"content":"                        + \"(i.e. test it too \u0027gently\u0027).\\n\""},{"lineNumber":434,"author":{"gitID":"iNekox3"},"content":"                        + \"A developer may be blind to his own mistakes\""},{"lineNumber":435,"author":{"gitID":"iNekox3"},"content":"                        + \"(if he did not consider a certain combination of input while writing code, \""},{"lineNumber":436,"author":{"gitID":"iNekox3"},"content":"                        + \"it is possible for him to miss it again during testing).\\n\""},{"lineNumber":437,"author":{"gitID":"iNekox3"},"content":"                        + \"A developer may have misunderstood what the SUT is supposed to do in the first place.\\n\""},{"lineNumber":438,"author":{"gitID":"iNekox3"},"content":"                        + \"A developer may lack the testing expertise.\")),"},{"lineNumber":439,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"6.1.2\"), new QuestionType(\"choice\"),"},{"lineNumber":440,"author":{"gitID":"iNekox3"},"content":"                new Question(\"The cost of fixing a bug goes down as we reach the product release.\\n\""},{"lineNumber":441,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":442,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":443,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":444,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":445,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. The cost goes up over time.\")),"},{"lineNumber":446,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"6.1.3\"), new QuestionType(\"text\"),"},{"lineNumber":447,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Explain why early testing by developers is important.\"),"},{"lineNumber":448,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":449,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":450,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"6.4.1\"), new QuestionType(\"choice\"),"},{"lineNumber":451,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about abstract classes and concrete classes.\\n\""},{"lineNumber":452,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":453,"author":{"gitID":"iNekox3"},"content":"                        + \"a. A concrete class can contain an abstract method.\\n\""},{"lineNumber":454,"author":{"gitID":"iNekox3"},"content":"                        + \"b. An abstract class can contain concrete methods.\\n\""},{"lineNumber":455,"author":{"gitID":"iNekox3"},"content":"                        + \"c. An abstract class need not contain any concrete methods.\\n\""},{"lineNumber":456,"author":{"gitID":"iNekox3"},"content":"                        + \"d. An abstract class cannot be instantiated.\"),"},{"lineNumber":457,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":458,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b c d. A concrete class cannot contain even a single abstract method.\")),"},{"lineNumber":459,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":460,"author":{"gitID":"iNekox3"},"content":"            // week 7"},{"lineNumber":461,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"7.2.1\"), new QuestionType(\"choice\"),"},{"lineNumber":462,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statement\\n\""},{"lineNumber":463,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":464,"author":{"gitID":"iNekox3"},"content":"                        + \"a. The architecture of a system should be simple enough \""},{"lineNumber":465,"author":{"gitID":"iNekox3"},"content":"                        + \"for all team members to understand it.\\n\""},{"lineNumber":466,"author":{"gitID":"iNekox3"},"content":"                        + \"b. The architecture is primarily a high-level design of the system.\\n\""},{"lineNumber":467,"author":{"gitID":"iNekox3"},"content":"                        + \"c. The architecture is usually decided by the project manager.\\n\""},{"lineNumber":468,"author":{"gitID":"iNekox3"},"content":"                        + \"d. The architecture can contain details private to a component.\"),"},{"lineNumber":469,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":470,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b. Not (c) because architecture is usually designed by the Architect. \""},{"lineNumber":471,"author":{"gitID":"iNekox3"},"content":"                        + \"Not (d) because ... private details of elements‚Äîdetails having to do solely \""},{"lineNumber":472,"author":{"gitID":"iNekox3"},"content":"                        + \"with internal implementation‚Äîare not architectural.\")),"},{"lineNumber":473,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"7.3.1\"), new QuestionType(\"choice\"),"},{"lineNumber":474,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements\\n\""},{"lineNumber":475,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":476,"author":{"gitID":"iNekox3"},"content":"                        + \"a. A software component can have an API.\\n\""},{"lineNumber":477,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Any method of a class is part of its API.\\n\""},{"lineNumber":478,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Private methods of a class are not part of its API.\\n\""},{"lineNumber":479,"author":{"gitID":"iNekox3"},"content":"                        + \"d. The API forms the contract between the component developer and the component user.\\n\""},{"lineNumber":480,"author":{"gitID":"iNekox3"},"content":"                        + \"e. Sequence diagrams can be used to show how components interact \""},{"lineNumber":481,"author":{"gitID":"iNekox3"},"content":"                        + \"with each other via APIs.\"),"},{"lineNumber":482,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":483,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c d e. (b) is incorrect because private methods cannot be a part of the API.\")),"},{"lineNumber":484,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"7.3.2\"), new QuestionType(\"choice\"),"},{"lineNumber":485,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Defining component APIs early is useful for developing components in parallel.\\n\""},{"lineNumber":486,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":487,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":488,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":489,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":490,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. True. Yes, once we know the precise behavior expected of each component, \""},{"lineNumber":491,"author":{"gitID":"iNekox3"},"content":"                        + \"we can start developing them in parallel.\\n\")),"},{"lineNumber":492,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"7.6.1\"), new QuestionType(\"choice\"),"},{"lineNumber":493,"author":{"gitID":"iNekox3"},"content":"                new Question(\"A Calculator program crashes with an ‚Äòassertion failure‚Äô message \""},{"lineNumber":494,"author":{"gitID":"iNekox3"},"content":"                        + \"when you try to find the square root of a negative number.\\n\""},{"lineNumber":495,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":496,"author":{"gitID":"iNekox3"},"content":"                        + \"a. This is a correct use of assertions.\\n\""},{"lineNumber":497,"author":{"gitID":"iNekox3"},"content":"                        + \"b. The application should have terminated with an exception instead.\\n\""},{"lineNumber":498,"author":{"gitID":"iNekox3"},"content":"                        + \"c. The program has a bug.\\n\""},{"lineNumber":499,"author":{"gitID":"iNekox3"},"content":"                        + \"d. All statements above are incorrect.\"),"},{"lineNumber":500,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":501,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"c. An assertion failure indicates a bug in the code. \""},{"lineNumber":502,"author":{"gitID":"iNekox3"},"content":"                        + \"(b) is not acceptable because of the word \\\"terminated\\\". \""},{"lineNumber":503,"author":{"gitID":"iNekox3"},"content":"                        + \"The application should not fail at all for this input. \""},{"lineNumber":504,"author":{"gitID":"iNekox3"},"content":"                        + \"But it could have used an exception to handle the situation internally.\")),"},{"lineNumber":505,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"7.6.2\"), new QuestionType(\"choice\"),"},{"lineNumber":506,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which statements are correct?\\n\""},{"lineNumber":507,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":508,"author":{"gitID":"iNekox3"},"content":"                        + \" a. Use assertions to indicate the programmer messed up; \""},{"lineNumber":509,"author":{"gitID":"iNekox3"},"content":"                        + \"Use exceptions to indicate the user or the environment messed up.\\n\""},{"lineNumber":510,"author":{"gitID":"iNekox3"},"content":"                        + \" b. Use exceptions to indicate the programmer messed up; \""},{"lineNumber":511,"author":{"gitID":"iNekox3"},"content":"                        + \"Use assertions to indicate the user or the environment messed up.\"),"},{"lineNumber":512,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":513,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a.\")),"},{"lineNumber":514,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"7.8.1\"), new QuestionType(\"choice\"),"},{"lineNumber":515,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Gradle_is used used for,\\n\""},{"lineNumber":516,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":517,"author":{"gitID":"iNekox3"},"content":"                        + \"a. better revision control\\n\""},{"lineNumber":518,"author":{"gitID":"iNekox3"},"content":"                        + \"b. build automation\\n\""},{"lineNumber":519,"author":{"gitID":"iNekox3"},"content":"                        + \"c. UML diagramming\\n\""},{"lineNumber":520,"author":{"gitID":"iNekox3"},"content":"                        + \"d. project collaboration\"),"},{"lineNumber":521,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":522,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b.\")),"},{"lineNumber":523,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":524,"author":{"gitID":"iNekox3"},"content":"            // week 8"},{"lineNumber":525,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.4.1\"), new QuestionType(\"text\"),"},{"lineNumber":526,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Explain the link (if any) between regressions and coupling.\"),"},{"lineNumber":527,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":528,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"When the system is highly-coupled, the risk of regressions is higher too  \""},{"lineNumber":529,"author":{"gitID":"iNekox3"},"content":"                        + \"e.g. when component A is modified, all components ‚Äòcoupled‚Äô to component A \""},{"lineNumber":530,"author":{"gitID":"iNekox3"},"content":"                        + \"risk ‚Äòunintended behavioral changes‚Äô.\\n\")),"},{"lineNumber":531,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.4.2\"), new QuestionType(\"text\"),"},{"lineNumber":532,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Discuss the relationship between coupling and testability.\\n\"),"},{"lineNumber":533,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":534,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"Coupling decreases testability because if the SUT is coupled to many other components \""},{"lineNumber":535,"author":{"gitID":"iNekox3"},"content":"                        + \"it becomes difficult to test the SUI in isolation of its dependencies.\")),"},{"lineNumber":536,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.4.3\"), new QuestionType(\"choice\"),"},{"lineNumber":537,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements.\\n\""},{"lineNumber":538,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":539,"author":{"gitID":"iNekox3"},"content":"                        + \"a. As coupling increases, testability decreases.\\n\""},{"lineNumber":540,"author":{"gitID":"iNekox3"},"content":"                        + \"b. As coupling increases, the risk of regression increases.\\n\""},{"lineNumber":541,"author":{"gitID":"iNekox3"},"content":"                        + \"c. As coupling increases, the value of automated regression testing increases.\\n\""},{"lineNumber":542,"author":{"gitID":"iNekox3"},"content":"                        + \"d. As coupling increases, integration becomes easier as everything is connected together.\\n\""},{"lineNumber":543,"author":{"gitID":"iNekox3"},"content":"                        + \"e. As coupling increases, maintainability decreases.\"),"},{"lineNumber":544,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":545,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c e. High coupling means either more components require to be integrated at once \""},{"lineNumber":546,"author":{"gitID":"iNekox3"},"content":"                        + \"in a big-bang fashion (increasing the risk of things going wrong) or more drivers \""},{"lineNumber":547,"author":{"gitID":"iNekox3"},"content":"                        + \"and stubs are required when integrating incrementally.\")),"},{"lineNumber":548,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.4.4\"), new QuestionType(\"choice\"),"},{"lineNumber":549,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these indicate a coupling between components A and B?\\n\""},{"lineNumber":550,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":551,"author":{"gitID":"iNekox3"},"content":"                        + \"a. component A has access to internal structure of component B.\\n\""},{"lineNumber":552,"author":{"gitID":"iNekox3"},"content":"                        + \"b. component A and B are written by the same developer.\\n\""},{"lineNumber":553,"author":{"gitID":"iNekox3"},"content":"                        + \"c. component A calls component B.\\n\""},{"lineNumber":554,"author":{"gitID":"iNekox3"},"content":"                        + \"d. component A receives an object of component B as a parameter.\\n\""},{"lineNumber":555,"author":{"gitID":"iNekox3"},"content":"                        + \"e. component A inherits from component B.\\n\""},{"lineNumber":556,"author":{"gitID":"iNekox3"},"content":"                        + \"f. components A and B have to follow the same data format or communication protocol.\"),"},{"lineNumber":557,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":558,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c d e f. Being written by the same developer does not imply a coupling.\")),"},{"lineNumber":559,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.4.5\"), new QuestionType(\"choice\"),"},{"lineNumber":560,"author":{"gitID":"iNekox3"},"content":"                new Question(\"‚ÄúOnly the GUI class should interact with the user. \""},{"lineNumber":561,"author":{"gitID":"iNekox3"},"content":"                        + \"The GUI class should only concern itself with user interactions‚Äù. \""},{"lineNumber":562,"author":{"gitID":"iNekox3"},"content":"                        + \"This statement follows from,\\n\""},{"lineNumber":563,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":564,"author":{"gitID":"iNekox3"},"content":"                        + \"a. A software design should promote separation of concerns in a design.\\n\""},{"lineNumber":565,"author":{"gitID":"iNekox3"},"content":"                        + \"b. A software design should increase cohesion of its components.\\n\""},{"lineNumber":566,"author":{"gitID":"iNekox3"},"content":"                        + \"c. A software design should follow single responsibility principle.\"),"},{"lineNumber":567,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":568,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c. By making ‚Äòuser interaction‚Äô GUI class‚Äô sole responsibility, \""},{"lineNumber":569,"author":{"gitID":"iNekox3"},"content":"                        + \"we increase its cohesion. This is also in line with separation of concerns \""},{"lineNumber":570,"author":{"gitID":"iNekox3"},"content":"                        + \"(i.e., we separated the concern of user interaction) \""},{"lineNumber":571,"author":{"gitID":"iNekox3"},"content":"                        + \"and single responsibility principle (GUI class has only one responsibility).\")),"},{"lineNumber":572,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.4.6\"), new QuestionType(\"choice\"),"},{"lineNumber":573,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these is closest to the meaning of the open-closed principle?\\n\""},{"lineNumber":574,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":575,"author":{"gitID":"iNekox3"},"content":"                        + \"a. We should be able to change a software module‚Äôs behavior without modifying its code.\\n\""},{"lineNumber":576,"author":{"gitID":"iNekox3"},"content":"                        + \"b. A software module should remain open to modification as long as possible.\\n\""},{"lineNumber":577,"author":{"gitID":"iNekox3"},"content":"                        + \"c. A software module should be open to modification and closed to extension.\\n\""},{"lineNumber":578,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Open source software rocks. Closed source software sucks.\"),"},{"lineNumber":579,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":580,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. Please refer the handout for the definition of OCP.\")),"},{"lineNumber":581,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.7.1\"), new QuestionType(\"choice\"),"},{"lineNumber":582,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Stubs help us to test a component in isolation from its dependencies.\\n\""},{"lineNumber":583,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":584,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":585,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":586,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":587,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. True.\")),"},{"lineNumber":588,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"8.7.2\"), new QuestionType(\"choice\"),"},{"lineNumber":589,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose correct statement about dependency injection\\n\""},{"lineNumber":590,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":591,"author":{"gitID":"iNekox3"},"content":"                        + \"a. It is a technique for increasing dependencies\\n\""},{"lineNumber":592,"author":{"gitID":"iNekox3"},"content":"                        + \"b. It is useful for unit testing\\n\""},{"lineNumber":593,"author":{"gitID":"iNekox3"},"content":"                        + \"c. It can be done using polymorphism\\n\""},{"lineNumber":594,"author":{"gitID":"iNekox3"},"content":"                        + \"d. It can be used to substitute a component with a stub\"),"},{"lineNumber":595,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":596,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b c d. \""},{"lineNumber":597,"author":{"gitID":"iNekox3"},"content":"                        + \"It is a technique we can use to substitute an existing dependency with another, \""},{"lineNumber":598,"author":{"gitID":"iNekox3"},"content":"                        + \"not increase dependencies. It is useful when you want to test a component in isolation \""},{"lineNumber":599,"author":{"gitID":"iNekox3"},"content":"                        + \"but the SUT depends on other components. Using dependency injection, \""},{"lineNumber":600,"author":{"gitID":"iNekox3"},"content":"                        + \"we can substitute those other components with test-friendly stubs. \""},{"lineNumber":601,"author":{"gitID":"iNekox3"},"content":"                        + \"This is often done using polymorphism.\")),"},{"lineNumber":602,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":603,"author":{"gitID":"iNekox3"},"content":"            // week 9"},{"lineNumber":604,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.2.1\"), new QuestionType(\"choice\"),"},{"lineNumber":605,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which one of these is least related to how OO programs achieve polymorphism?\\n\""},{"lineNumber":606,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":607,"author":{"gitID":"iNekox3"},"content":"                        + \"a. substitutability\\n\""},{"lineNumber":608,"author":{"gitID":"iNekox3"},"content":"                        + \"b. dynamic binding\\n\""},{"lineNumber":609,"author":{"gitID":"iNekox3"},"content":"                        + \"c. operation overloading\\n\""},{"lineNumber":610,"author":{"gitID":"iNekox3"},"content":"                        + \"d. interfaces\\n\""},{"lineNumber":611,"author":{"gitID":"iNekox3"},"content":"                        + \"e. abstract classes\"),"},{"lineNumber":612,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":613,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"c. Operation overriding is the one that is related, not operation overloading. \""},{"lineNumber":614,"author":{"gitID":"iNekox3"},"content":"                        + \"Interfaces and abstract classes, although not required, \""},{"lineNumber":615,"author":{"gitID":"iNekox3"},"content":"                        + \"can be used in achieving polymorphism.\")),"},{"lineNumber":616,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.2.2\"), new QuestionType(\"choice\"),"},{"lineNumber":617,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Top-down design is better than bottom-up design.\\n\""},{"lineNumber":618,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":619,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":620,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":621,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":622,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. Not necessarily. It depends on the situation. \""},{"lineNumber":623,"author":{"gitID":"iNekox3"},"content":"                        + \"Bottom-up design may be preferable when there are lot of existing components \""},{"lineNumber":624,"author":{"gitID":"iNekox3"},"content":"                        + \"we want to reuse.\")),"},{"lineNumber":625,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.2.3\"), new QuestionType(\"choice\"),"},{"lineNumber":626,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Agile design camp expects the design to change over the product‚Äôs lifetime.\\n\""},{"lineNumber":627,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":628,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":629,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":630,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":631,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. True. Yes, that is why they do not believe in spending too much time \""},{"lineNumber":632,"author":{"gitID":"iNekox3"},"content":"                        + \"creating a detailed and full design at the very beginning. \""},{"lineNumber":633,"author":{"gitID":"iNekox3"},"content":"                        + \"However, the architecture is expected to remain relatively stable \""},{"lineNumber":634,"author":{"gitID":"iNekox3"},"content":"                        + \"even in the agile design approach.\")),"},{"lineNumber":635,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.2.4\"), new QuestionType(\"choice\"),"},{"lineNumber":636,"author":{"gitID":"iNekox3"},"content":"                new Question(\"If a subclass imposes more restrictive conditions than its parent class, \""},{"lineNumber":637,"author":{"gitID":"iNekox3"},"content":"                        + \"it violates Liskov Substitution Principle.\\n\""},{"lineNumber":638,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":639,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":640,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":641,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":642,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. True. If the subclass is more restrictive than the parent class, \""},{"lineNumber":643,"author":{"gitID":"iNekox3"},"content":"                        + \"code that worked with the parent class may not work with the child class. \""},{"lineNumber":644,"author":{"gitID":"iNekox3"},"content":"                        + \"Hence, the substitutability does not exist and LSP has been violated.\")),"},{"lineNumber":645,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.2.5\"), new QuestionType(\"choice\"),"},{"lineNumber":646,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these statements is true about the Dependency Inversion Principle.\\n\""},{"lineNumber":647,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":648,"author":{"gitID":"iNekox3"},"content":"                        + \"a. It can complicate the design/implementation by introducing extra abstractions, \""},{"lineNumber":649,"author":{"gitID":"iNekox3"},"content":"                        + \"but it has some benefits.\\n\""},{"lineNumber":650,"author":{"gitID":"iNekox3"},"content":"                        + \"b. It is often used during testing, to replace dependencies with mocks.\\n\""},{"lineNumber":651,"author":{"gitID":"iNekox3"},"content":"                        + \"c. It reduces dependencies in a design.\\n\""},{"lineNumber":652,"author":{"gitID":"iNekox3"},"content":"                        + \"d. It advocates making higher level classes to depend on lower level classes.\"),"},{"lineNumber":653,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":654,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. Replacing dependencies with mocks is Dependency Injection, not DIP. \""},{"lineNumber":655,"author":{"gitID":"iNekox3"},"content":"                        + \"DIP does not reduce dependencies, rather, it changes the direction of dependencies. \""},{"lineNumber":656,"author":{"gitID":"iNekox3"},"content":"                        + \"Yes, it can introduce extra abstractions \""},{"lineNumber":657,"author":{"gitID":"iNekox3"},"content":"                        + \"but often the benefit can outweigh the extra complications.\")),"},{"lineNumber":658,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.3.1\"), new QuestionType(\"choice\"),"},{"lineNumber":659,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Bidirectional associations, if not implemented properly, \""},{"lineNumber":660,"author":{"gitID":"iNekox3"},"content":"                        + \"can result in referential integrity violations.\\n\""},{"lineNumber":661,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":662,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":663,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":664,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":665,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. True. Bidirectional associations require two objects to link to each other. \""},{"lineNumber":666,"author":{"gitID":"iNekox3"},"content":"                        + \"When one of these links is not consistent with the other, \""},{"lineNumber":667,"author":{"gitID":"iNekox3"},"content":"                        + \"we have a referential integrity violation.\")),"},{"lineNumber":668,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.3.2\"), new QuestionType(\"choice\"),"},{"lineNumber":669,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Defensive programming,\\n\""},{"lineNumber":670,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":671,"author":{"gitID":"iNekox3"},"content":"                        + \"a. can make the program slower.\\n\""},{"lineNumber":672,"author":{"gitID":"iNekox3"},"content":"                        + \"b. can make the code longer.\\n\""},{"lineNumber":673,"author":{"gitID":"iNekox3"},"content":"                        + \"c. can make the code more complex.\\n\""},{"lineNumber":674,"author":{"gitID":"iNekox3"},"content":"                        + \"d. can make the code less susceptible to misuse.\\n\""},{"lineNumber":675,"author":{"gitID":"iNekox3"},"content":"                        + \"e. can require extra effort.\"),"},{"lineNumber":676,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":677,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"All. Defensive programming requires a more checks, \""},{"lineNumber":678,"author":{"gitID":"iNekox3"},"content":"                        + \"possibly making the code longer, more complex, and possibly slower. \""},{"lineNumber":679,"author":{"gitID":"iNekox3"},"content":"                        + \"Use it only when benefits outweigh costs, which is often.\")),"},{"lineNumber":680,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.3.3\"), new QuestionType(\"choice\"),"},{"lineNumber":681,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which statements are correct?\\n\""},{"lineNumber":682,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":683,"author":{"gitID":"iNekox3"},"content":"                        + \"a. It is not natively supported by Java and C++.\\n\""},{"lineNumber":684,"author":{"gitID":"iNekox3"},"content":"                        + \"b. It is an alternative to OOP.\\n\""},{"lineNumber":685,"author":{"gitID":"iNekox3"},"content":"                        + \"c. It assumes the caller of a method is responsible for \""},{"lineNumber":686,"author":{"gitID":"iNekox3"},"content":"                        + \"ensuring all preconditions are met.\"),"},{"lineNumber":687,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":688,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c. DbC is not an alternative to OOP. We can use DbC in an OOP solution.\")),"},{"lineNumber":689,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.4.1\"), new QuestionType(\"choice\"),"},{"lineNumber":690,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose correct statements about API documentation.\\n\""},{"lineNumber":691,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":692,"author":{"gitID":"iNekox3"},"content":"                        + \"a. They are useful for both developers who use the API \""},{"lineNumber":693,"author":{"gitID":"iNekox3"},"content":"                        + \"and developers who maintain the API implementation.\\n\""},{"lineNumber":694,"author":{"gitID":"iNekox3"},"content":"                        + \"b. There are tools that can generate API documents from code comments.\\n\""},{"lineNumber":695,"author":{"gitID":"iNekox3"},"content":"                        + \"d. API documentation may contain code examples.\"),"},{"lineNumber":696,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":697,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"All.\")),"},{"lineNumber":698,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.4.2\"), new QuestionType(\"choice\"),"},{"lineNumber":699,"author":{"gitID":"iNekox3"},"content":"                new Question(\"It is recommended for developer documents,\\n\""},{"lineNumber":700,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":701,"author":{"gitID":"iNekox3"},"content":"                        + \"a. to have separate sections for each type of diagrams \""},{"lineNumber":702,"author":{"gitID":"iNekox3"},"content":"                        + \"such as class diagrams, sequence diagrams, use case diagrams etc.\\n\""},{"lineNumber":703,"author":{"gitID":"iNekox3"},"content":"                        + \"b. to give a high priority to comprehension too, not stop at comprehensiveness only.\"),"},{"lineNumber":704,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":705,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. (a) Use diagrams when they help to understand the text descriptions. \""},{"lineNumber":706,"author":{"gitID":"iNekox3"},"content":"                        + \"Text and diagrams should be used in tandem. \""},{"lineNumber":707,"author":{"gitID":"iNekox3"},"content":"                        + \"Having separate sections for each diagram type is a sign of generating diagrams \""},{"lineNumber":708,"author":{"gitID":"iNekox3"},"content":"                        + \"for the sake of having them.\\n\""},{"lineNumber":709,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":710,"author":{"gitID":"iNekox3"},"content":"                        + \"(b) Both are important, but lengthy, complete, accurate yet hard to understand documents \""},{"lineNumber":711,"author":{"gitID":"iNekox3"},"content":"                        + \"are not that useful.\")),"},{"lineNumber":712,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.5.1\"), new QuestionType(\"choice\"),"},{"lineNumber":713,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these gives us the highest intensity of testing?\\n\""},{"lineNumber":714,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":715,"author":{"gitID":"iNekox3"},"content":"                        + \" a. 100% statement coverage\\n\""},{"lineNumber":716,"author":{"gitID":"iNekox3"},"content":"                        + \" b. 100% path coverage\\n\""},{"lineNumber":717,"author":{"gitID":"iNekox3"},"content":"                        + \" c. 100% branch coverage\\n\""},{"lineNumber":718,"author":{"gitID":"iNekox3"},"content":"                        + \" d. 100% condition coverage\"),"},{"lineNumber":719,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":720,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. 100% path coverage implies all possible execution paths \""},{"lineNumber":721,"author":{"gitID":"iNekox3"},"content":"                        + \"through the SUT have been tested. This is essentially ‚Äòexhaustive testing‚Äô. \""},{"lineNumber":722,"author":{"gitID":"iNekox3"},"content":"                        + \"While this is very hard to achieve for a non-trivial SUT, \""},{"lineNumber":723,"author":{"gitID":"iNekox3"},"content":"                        + \"it technically gives us the highest intensity of testing. \""},{"lineNumber":724,"author":{"gitID":"iNekox3"},"content":"                        + \"If all tests pass at 100% path coverage, the SUT code can be considered ‚Äòbug free‚Äô. \""},{"lineNumber":725,"author":{"gitID":"iNekox3"},"content":"                        + \"However, note that path coverage does not include paths that are missing from the code \""},{"lineNumber":726,"author":{"gitID":"iNekox3"},"content":"                        + \"altogether because the programmer left them out by mistake.\")),"},{"lineNumber":727,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.5.2\"), new QuestionType(\"choice\"),"},{"lineNumber":728,"author":{"gitID":"iNekox3"},"content":"                new Question(\"In TDD, we write all the test cases before we start writing functional code.\\n\""},{"lineNumber":729,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":730,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":731,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":732,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":733,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. No, not all. We proceed in small steps, \""},{"lineNumber":734,"author":{"gitID":"iNekox3"},"content":"                        + \"writing tests and functional code in tandem, \""},{"lineNumber":735,"author":{"gitID":"iNekox3"},"content":"                        + \"but writing the test before we write the corresponding functional code.\")),"},{"lineNumber":736,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.5.3\"), new QuestionType(\"choice\"),"},{"lineNumber":737,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Testing tools such as Junit require us to follow TDD.\\n\""},{"lineNumber":738,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":739,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":740,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":741,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":742,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. They can be used for TDD, but they can be used without TDD too.\")),"},{"lineNumber":743,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.6.1\"), new QuestionType(\"choice\"),"},{"lineNumber":744,"author":{"gitID":"iNekox3"},"content":"                new Question(\"GUI testing is usually easier than API testing because \""},{"lineNumber":745,"author":{"gitID":"iNekox3"},"content":"                        + \"it doesn‚Äôt require any extra coding.\\n\""},{"lineNumber":746,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":747,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":748,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":749,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":750,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False.\")),"},{"lineNumber":751,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"9.6.2\"), new QuestionType(\"choice\"),"},{"lineNumber":752,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about system testing and acceptance testing.\\n\""},{"lineNumber":753,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":754,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Both system testing and acceptance testing typically involve the whole system.\\n\""},{"lineNumber":755,"author":{"gitID":"iNekox3"},"content":"                        + \"b. System testing is typically more extensive than acceptance testing.\\n\""},{"lineNumber":756,"author":{"gitID":"iNekox3"},"content":"                        + \"c. System testing can include testing for non-functional qualities.\\n\""},{"lineNumber":757,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Acceptance testing typically has more user involvement than system testing.\\n\""},{"lineNumber":758,"author":{"gitID":"iNekox3"},"content":"                        + \"e. In smaller projects, the developers may do system testing as well, \""},{"lineNumber":759,"author":{"gitID":"iNekox3"},"content":"                        + \"in addition to developer testing.\\n\""},{"lineNumber":760,"author":{"gitID":"iNekox3"},"content":"                        + \"f. If system testing is adequately done, we need not do acceptance testing.\"),"},{"lineNumber":761,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":762,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c d e. (b) is correct because system testing can aim to cover all \""},{"lineNumber":763,"author":{"gitID":"iNekox3"},"content":"                        + \"specified behaviors and can even go beyond the system specification. \""},{"lineNumber":764,"author":{"gitID":"iNekox3"},"content":"                        + \"Therefore, system testing is typically more extensive than acceptance testing.\\n\""},{"lineNumber":765,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":766,"author":{"gitID":"iNekox3"},"content":"                        + \"(f) is incorrect because it is possible for a system to pass system tests \""},{"lineNumber":767,"author":{"gitID":"iNekox3"},"content":"                        + \"but fail acceptance tests.\")),"},{"lineNumber":768,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":769,"author":{"gitID":"iNekox3"},"content":"            // week 10"},{"lineNumber":770,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.1.1\"), new QuestionType(\"choice\"),"},{"lineNumber":771,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Pick the odd one out.\\n\""},{"lineNumber":772,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":773,"author":{"gitID":"iNekox3"},"content":"                        + \"a. Law of Demeter.\\n\""},{"lineNumber":774,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Don‚Äôt add people to a late project.\\n\""},{"lineNumber":775,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Don‚Äôt talk to strangers.\\n\""},{"lineNumber":776,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Principle of least knowledge.\\n\""},{"lineNumber":777,"author":{"gitID":"iNekox3"},"content":"                        + \"e. Coupling.\"),"},{"lineNumber":778,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":779,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. Law of Demeter, which aims to reduce coupling, \""},{"lineNumber":780,"author":{"gitID":"iNekox3"},"content":"                        + \"is also known as ‚ÄòDon‚Äôt talk to strangers‚Äô and ‚ÄòPrinciple of least knowledge‚Äô.\")),"},{"lineNumber":781,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.1.2\"), new QuestionType(\"text\"),"},{"lineNumber":782,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Do the Brook‚Äôs Law apply to a school project? Justify.\"),"},{"lineNumber":783,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":784,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"Yes. Adding a new student to a project team \""},{"lineNumber":785,"author":{"gitID":"iNekox3"},"content":"                        + \"can result in a slow-down of the project for a short period. \""},{"lineNumber":786,"author":{"gitID":"iNekox3"},"content":"                        + \"This is because the new member needs time to learn the project \""},{"lineNumber":787,"author":{"gitID":"iNekox3"},"content":"                        + \"and existing members will have to spend time helping the new guy get up to speed. \""},{"lineNumber":788,"author":{"gitID":"iNekox3"},"content":"                        + \"If the project is already behind schedule and near a deadline, \""},{"lineNumber":789,"author":{"gitID":"iNekox3"},"content":"                        + \"this could delay the delivery even further.\")),"},{"lineNumber":790,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.1.3\"), new QuestionType(\"choice\"),"},{"lineNumber":791,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which one of these (all attributed to Fred Brooks, \""},{"lineNumber":792,"author":{"gitID":"iNekox3"},"content":"                        + \"the author of the famous SE book The Mythical Man-Month), is called the Brook‚Äôs law?\\n\""},{"lineNumber":793,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":794,"author":{"gitID":"iNekox3"},"content":"                        + \" a. All programmers are optimists.\\n\""},{"lineNumber":795,"author":{"gitID":"iNekox3"},"content":"                        + \" b. Good judgement comes from experience, and experience comes from bad judgement.\\n\""},{"lineNumber":796,"author":{"gitID":"iNekox3"},"content":"                        + \" c. The bearing of a child takes nine months, no matter how many women are assigned.\\n\""},{"lineNumber":797,"author":{"gitID":"iNekox3"},"content":"                        + \" d. Adding more manpower to an already late project makes it even later.\"),"},{"lineNumber":798,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":799,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"d.\")),"},{"lineNumber":800,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.3.1\"), new QuestionType(\"choice\"),"},{"lineNumber":801,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which one of these describes the ‚Äòsoftware design patterns‚Äô concept best?\\n\""},{"lineNumber":802,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":803,"author":{"gitID":"iNekox3"},"content":"                        + \" a. Designs that appear repetitively in software.\\n\""},{"lineNumber":804,"author":{"gitID":"iNekox3"},"content":"                        + \" b. Elegant solutions to recurring problems in software design.\\n\""},{"lineNumber":805,"author":{"gitID":"iNekox3"},"content":"                        + \" c. Architectural styles used in applications.\\n\""},{"lineNumber":806,"author":{"gitID":"iNekox3"},"content":"                        + \" d. Some good design techniques proposed by the Gang of Four\"),"},{"lineNumber":807,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":808,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b.\")),"},{"lineNumber":809,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.3.2\"), new QuestionType(\"choice\"),"},{"lineNumber":810,"author":{"gitID":"iNekox3"},"content":"                new Question(\"When we describe a pattern, we must also specify anti-patterns.\\n\""},{"lineNumber":811,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":812,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":813,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":814,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":815,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. Anti-patterns are related to patterns, \""},{"lineNumber":816,"author":{"gitID":"iNekox3"},"content":"                        + \"but they are not a ‚Äòmust have‚Äô component of a pattern description.\")),"},{"lineNumber":817,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.3.3\"), new QuestionType(\"choice\"),"},{"lineNumber":818,"author":{"gitID":"iNekox3"},"content":"                new Question(\"We use the Singleton pattern when\\n\""},{"lineNumber":819,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":820,"author":{"gitID":"iNekox3"},"content":"                        + \"a. we want an a class with a private constructor.\\n\""},{"lineNumber":821,"author":{"gitID":"iNekox3"},"content":"                        + \"b. we want a single class to hold all functionality of the system.\\n\""},{"lineNumber":822,"author":{"gitID":"iNekox3"},"content":"                        + \"c. we want a class with no more than one instance.\\n\""},{"lineNumber":823,"author":{"gitID":"iNekox3"},"content":"                        + \"d. we want to hide internal structure of a component from its clients.\"),"},{"lineNumber":824,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":825,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"c.\")),"},{"lineNumber":826,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.4.1\"), new QuestionType(\"choice\"),"},{"lineNumber":827,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose correct statements about software frameworks.\\n\""},{"lineNumber":828,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":829,"author":{"gitID":"iNekox3"},"content":"                        + \"a. They follow the hollywood principle, otherwise known as ‚Äòinversion of control‚Äô\\n\""},{"lineNumber":830,"author":{"gitID":"iNekox3"},"content":"                        + \"b. They come with full or partial implementation.\\n\""},{"lineNumber":831,"author":{"gitID":"iNekox3"},"content":"                        + \"c. They are more concrete than patterns or principles.\\n\""},{"lineNumber":832,"author":{"gitID":"iNekox3"},"content":"                        + \"d. They are often configurable.\\n\""},{"lineNumber":833,"author":{"gitID":"iNekox3"},"content":"                        + \"e. They are reuse mechanisms.\\n\""},{"lineNumber":834,"author":{"gitID":"iNekox3"},"content":"                        + \"f. They are similar to reusable libraries but bigger.\"),"},{"lineNumber":835,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":836,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c d e. While both libraries and frameworks are reuse mechanisms, \""},{"lineNumber":837,"author":{"gitID":"iNekox3"},"content":"                        + \"and both more concrete than principles and patterns, \""},{"lineNumber":838,"author":{"gitID":"iNekox3"},"content":"                        + \"libraries differ from frameworks in some key ways. \""},{"lineNumber":839,"author":{"gitID":"iNekox3"},"content":"                        + \"One of them is the ‚Äòinversion of control‚Äô used by frameworks but not libraries. \""},{"lineNumber":840,"author":{"gitID":"iNekox3"},"content":"                        + \"Furthermore, frameworks do not have to be bigger than libraries all the time.\")),"},{"lineNumber":841,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"10.4.2\"), new QuestionType(\"choice\"),"},{"lineNumber":842,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which one of these are frameworks ?\\n\""},{"lineNumber":843,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":844,"author":{"gitID":"iNekox3"},"content":"                        + \"a. JUnit\\n\""},{"lineNumber":845,"author":{"gitID":"iNekox3"},"content":"                        + \"b. Eclipse\\n\""},{"lineNumber":846,"author":{"gitID":"iNekox3"},"content":"                        + \"c. Drupal\\n\""},{"lineNumber":847,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Ruby on Rails\"),"},{"lineNumber":848,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":849,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"All. These are frameworks.\")),"},{"lineNumber":850,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":851,"author":{"gitID":"iNekox3"},"content":"            // week 11"},{"lineNumber":852,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.1.1\"), new QuestionType(\"choice\"),"},{"lineNumber":853,"author":{"gitID":"iNekox3"},"content":"                new Question(\"What is the main difference between a class diagram and and an OO domain model?\\n\""},{"lineNumber":854,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":855,"author":{"gitID":"iNekox3"},"content":"                        + \"a. One is about the problem domain while the other is about the solution domain.\\n\""},{"lineNumber":856,"author":{"gitID":"iNekox3"},"content":"                        + \"b. One has more classes than the other.\\n\""},{"lineNumber":857,"author":{"gitID":"iNekox3"},"content":"                        + \"c. One shows more details than the other.\\n\""},{"lineNumber":858,"author":{"gitID":"iNekox3"},"content":"                        + \"d. One is a UML diagram, while the other is not a UML diagram.\"),"},{"lineNumber":859,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":860,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. Both are UML diagrams, and use the class diagram notation. \""},{"lineNumber":861,"author":{"gitID":"iNekox3"},"content":"                        + \"While it is true that often a class diagram may have more classes and more details, \""},{"lineNumber":862,"author":{"gitID":"iNekox3"},"content":"                        + \"the main difference is that the OO domain model describes the problem domain \""},{"lineNumber":863,"author":{"gitID":"iNekox3"},"content":"                        + \"while the class diagram describes the solution.\")),"},{"lineNumber":864,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.3.1\"), new QuestionType(\"text\"),"},{"lineNumber":865,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Here are some common elements of a design pattern: \""},{"lineNumber":866,"author":{"gitID":"iNekox3"},"content":"                        + \"Name, Context, Problem, Solution, Anti-patterns (optional), Consequences (optional), \""},{"lineNumber":867,"author":{"gitID":"iNekox3"},"content":"                        + \"other useful information (optional).\\n\""},{"lineNumber":868,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":869,"author":{"gitID":"iNekox3"},"content":"                        + \"Using similar elements, describe a pattern that is not a design pattern. \""},{"lineNumber":870,"author":{"gitID":"iNekox3"},"content":"                        + \"It must be a pattern you have noticed, not a pattern already documented by others. \""},{"lineNumber":871,"author":{"gitID":"iNekox3"},"content":"                        + \"You may also give a pattern not related to software.\\n\""},{"lineNumber":872,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":873,"author":{"gitID":"iNekox3"},"content":"                        + \"Some examples:\\n\""},{"lineNumber":874,"author":{"gitID":"iNekox3"},"content":"                        + \"- A pattern for testing textual UIs.\\n\""},{"lineNumber":875,"author":{"gitID":"iNekox3"},"content":"                        + \"- A pattern for striking a good bargain at a mall such as Sim-Lim Square.\"),"},{"lineNumber":876,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":877,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"No suggested answer.\")),"},{"lineNumber":878,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.4.1\"), new QuestionType(\"choice\"),"},{"lineNumber":879,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Applying the heuristics covered so far, we can determine the precise number of \""},{"lineNumber":880,"author":{"gitID":"iNekox3"},"content":"                        + \"test cases required to test any given SUT effectively.\\n\""},{"lineNumber":881,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":882,"author":{"gitID":"iNekox3"},"content":"                        + \"a. True\\n\""},{"lineNumber":883,"author":{"gitID":"iNekox3"},"content":"                        + \"b. False\"),"},{"lineNumber":884,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":885,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"b. False. These heuristics are, well, heuristics only. \""},{"lineNumber":886,"author":{"gitID":"iNekox3"},"content":"                        + \"They will help you to make better decisions about test case design. \""},{"lineNumber":887,"author":{"gitID":"iNekox3"},"content":"                        + \"However, they are speculative in nature (especially, when testing in black-box fashion) \""},{"lineNumber":888,"author":{"gitID":"iNekox3"},"content":"                        + \"and cannot give you precise number of test cases.\")),"},{"lineNumber":889,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.4.2\"), new QuestionType(\"choice\"),"},{"lineNumber":890,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Which of these contradict the heuristics recommended \""},{"lineNumber":891,"author":{"gitID":"iNekox3"},"content":"                        + \"when creating test cases with multiple inputs?\\n\""},{"lineNumber":892,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":893,"author":{"gitID":"iNekox3"},"content":"                        + \"a. All invalid test inputs must be tested together.\\n\""},{"lineNumber":894,"author":{"gitID":"iNekox3"},"content":"                        + \"b. It is ok to combine valid values for different inputs.\\n\""},{"lineNumber":895,"author":{"gitID":"iNekox3"},"content":"                        + \"c. No more than one invalid test input should be in a given test case.\\n\""},{"lineNumber":896,"author":{"gitID":"iNekox3"},"content":"                        + \"d. Each valid test input should appear at least once \""},{"lineNumber":897,"author":{"gitID":"iNekox3"},"content":"                        + \"in a test case that doesn‚Äôt have any invalid inputs.\"),"},{"lineNumber":898,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":899,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a. If you test all invalid test inputs together, \""},{"lineNumber":900,"author":{"gitID":"iNekox3"},"content":"                        + \"you will not know if each one of the invalid inputs are handled correctly by the SUT. \""},{"lineNumber":901,"author":{"gitID":"iNekox3"},"content":"                        + \"This is because most SUTs return an error message \""},{"lineNumber":902,"author":{"gitID":"iNekox3"},"content":"                        + \"upon encountering the first invalid input.\")),"},{"lineNumber":903,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.6.1\"), new QuestionType(\"choice\"),"},{"lineNumber":904,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about agile processes.\\n\""},{"lineNumber":905,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":906,"author":{"gitID":"iNekox3"},"content":"                        + \"a. They value working software over comprehensive documentation.\\n\""},{"lineNumber":907,"author":{"gitID":"iNekox3"},"content":"                        + \"b. They value responding to change over following a plan.\\n\""},{"lineNumber":908,"author":{"gitID":"iNekox3"},"content":"                        + \"c. They may not be suitable for some type of projects.\\n\""},{"lineNumber":909,"author":{"gitID":"iNekox3"},"content":"                        + \"d. XP and Scrum are agile processes.\"),"},{"lineNumber":910,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":911,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a b c d.\")),"},{"lineNumber":912,"author":{"gitID":"iNekox3"},"content":"            new Exercise(new QuestionIndex(\"11.7.1\"), new QuestionType(\"choice\"),"},{"lineNumber":913,"author":{"gitID":"iNekox3"},"content":"                new Question(\"Choose the correct statements about the unified process.\\n\""},{"lineNumber":914,"author":{"gitID":"iNekox3"},"content":"                        + \"\\n\""},{"lineNumber":915,"author":{"gitID":"iNekox3"},"content":"                        + \"a. It was conceived by the three amigos who also created UML.\\n\""},{"lineNumber":916,"author":{"gitID":"iNekox3"},"content":"                        + \"b. The Unified process requires the use of UML.\\n\""},{"lineNumber":917,"author":{"gitID":"iNekox3"},"content":"                        + \"c. The Unified process is actually a process framework rather than a fixed process.\\n\""},{"lineNumber":918,"author":{"gitID":"iNekox3"},"content":"                        + \"d. The Unified process can be iterative and incremental\"),"},{"lineNumber":919,"author":{"gitID":"iNekox3"},"content":"                new StudentAnswer(\"\"),"},{"lineNumber":920,"author":{"gitID":"iNekox3"},"content":"                new ModelAnswer(\"a c d. Although UP was created by the same three amigos who created UML, \"))"},{"lineNumber":921,"author":{"gitID":"iNekox3"},"content":"        };"},{"lineNumber":922,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":923,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":924,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"AdityaA1998":35,"iNekox3":814,"-":75}},{"path":"src/main/java/seedu/progresschecker/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in ProgressChecker."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static String defaultPath \u003d \"/images/profile_photo.jpg\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final GithubUsername username;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Major major;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Year year;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String photoPath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, GithubUsername username, Major major, Year year,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                  Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, username, major, year, tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.username \u003d username;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.major \u003d major;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.year \u003d year;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.photoPath \u003d defaultPath;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"    //@@author EdwardKSG"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"    public GithubUsername getUsername() {"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"        return username;"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"    public Major getMajor() {"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"        return major;"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"    public Year getYear() {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"        return year;"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String getPhotoPath() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return photoPath;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public String getDefaultPath() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return defaultPath;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void updatePhoto(String path) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.photoPath \u003d path;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getUsername().equals(this.getUsername())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getMajor().equals(this.getMajor())"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getYear().equals(this.getYear());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, username, major, year, tags);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(\" Github Username: \")"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(getUsername())"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .append(\" Major: \")"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(getMajor())"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .append(\" Year of Study: \")"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(getYear())"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"EdwardKSG":13,"-":124}},{"path":"src/main/java/seedu/progresschecker/model/person/Year.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Represents a Person\u0027s year of study in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)}"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class Year {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"            \"Person years of study can take digits ranging from 1 to 5, it can be left blank\";"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * It accepts single digits ranging from 1 to 5."},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * empty string will be accepted as well, as \"year\" is an optional field."},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String YEAR_VALIDATION_REGEX \u003d \"(^$|^[1-5]$)\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"     * Constructs an {@code Year}."},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     * @param year A valid year."},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public Year(String year) {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(year);"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        this.value \u003d year;"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * Returns true if a given string is a valid year of study."},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static boolean isValidYear(String test) {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        return test.matches(YEAR_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof Year // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 this.value.equals(((Year) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":54,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/person/Major.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":" * Represents a Person\u0027s major in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"public class Major {"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MESSAGE_MAJOR_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"            \"Person majors can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"     * The first character of the major must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String MAJOR_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"     * Constructs an {@code Major}."},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     * @param major A valid major."},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public Major(String major) {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        requireNonNull(major);"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"        checkArgument(isValidMajor(major), MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        this.value \u003d major;"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"     * Returns true if a given string is a valid person major."},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    public static boolean isValidMajor(String test) {"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"        return test.matches(MAJOR_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"                || (other instanceof Major // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"                \u0026\u0026 this.value.equals(((Major) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":54,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/ProgressChecker.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.UniqueExerciseList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.DuplicateExerciseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.GitIssueList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.UniquePersonList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.UniquePhotoList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.tag.UniqueTagList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Wraps all data at the progresschecker"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ProgressChecker implements ReadOnlyProgressChecker {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final UniquePhotoList photos;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final UniqueExerciseList exercises;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final GitIssueList issues;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        photos \u003d new UniquePhotoList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        exercises \u003d new UniqueExerciseList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        issues \u003d new GitIssueList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ProgressChecker() {}"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Creates an ProgressChecker using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public ProgressChecker(ReadOnlyProgressChecker toBeCopied) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"    public void setExercises(List\u003cExercise\u003e exercises) throws DuplicateExerciseException {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"        this.exercises.setExercises(exercises);"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code ProgressChecker} with {@code newData}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            setExercises(newData.getExerciseList());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"ProgressChecker should not have duplicate persons\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (DuplicateExerciseException e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"ProgressChecker should not have duplicate exercises\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"     * Sorts the existing {@code UniquePersonList} of this {@code ProgressChecker}"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"     * with their names in alphabetical order."},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"    public void sort() {"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(persons);"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"        persons.sort();"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"     * Adds a new uploaded photo path to the the list of profile photos"},{"lineNumber":121,"author":{"gitID":"Livian1107"},"content":"     * @param photoPath of a new uploaded photo"},{"lineNumber":122,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePhotoException if there already exists the same photo path"},{"lineNumber":123,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"Livian1107"},"content":"    public void addPhotoPath(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":125,"author":{"gitID":"Livian1107"},"content":"        photos.add(photoPath);"},{"lineNumber":126,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Adds a person to the ProgressChecker."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * {@code ProgressChecker}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":164,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"    //issue-level operations"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"     * Login to github"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException is there is any problem in authentication"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":"    public void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"        issues.initialiseCredentials(gitdetails);"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"     * Logout of github"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"    public void logoutGithub() throws CommandException {"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"        issues.clearCredentials();"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"     * Creates issue on github"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if theres any fault in the input values or the authentication fails due to wrong input"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"    public void createIssueOnGitHub(Issue i) throws IOException, CommandException {"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"        issues.createIssue(i);"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the given issue at {@code index} from github with {@code editedPerson}."},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"     * reopens an issue on github"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if the index mentioned is not valid or he\u0027s closed"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"    public void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"        issues.reopenIssue(index);"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"     * closes an issue on github"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if the index mentioned is not valid or he\u0027s closed"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"    public void closeIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"        issues.closeIssue(index);"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":"     * {@code ProgressChecker}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if there is any problem in git authentication or parameter"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"    public void updateIssue(Index index, Issue editedIssue) throws IOException, CommandException {"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(editedIssue);"},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":"        issues.setIssue(index, editedIssue);"},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"     * Lists all the issues of the specified state"},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"    public void listIssues(String state) throws IllegalValueException, IOException, CommandException {"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(state);"},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"        issues.listIssue(state);"},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":253,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":256,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getUsername(), person.getMajor(),"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                person.getYear(), correctTagReferences);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code ProgressChecker}."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code ProgressChecker}."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":273,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"Livian1107"},"content":"     * Uploads the profile photo path of target person"},{"lineNumber":275,"author":{"gitID":"Livian1107"},"content":"     * @param target"},{"lineNumber":276,"author":{"gitID":"Livian1107"},"content":"     * @param path"},{"lineNumber":277,"author":{"gitID":"Livian1107"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":278,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":279,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"Livian1107"},"content":"    public void uploadPhoto(Person target, String path) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":281,"author":{"gitID":"Livian1107"},"content":"        Person tempPerson \u003d target;"},{"lineNumber":282,"author":{"gitID":"Livian1107"},"content":"        target.updatePhoto(path);"},{"lineNumber":283,"author":{"gitID":"Livian1107"},"content":"        persons.setPerson(tempPerson, target);"},{"lineNumber":284,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":294,"author":{"gitID":"iNekox3"},"content":"    //// exercise-level operations"},{"lineNumber":295,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":296,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"iNekox3"},"content":"     * Adds an exercise to the ProgressChecker."},{"lineNumber":298,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":299,"author":{"gitID":"iNekox3"},"content":"     * @throws DuplicateExerciseException if an equivalent exercise already exists."},{"lineNumber":300,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"iNekox3"},"content":"    public void addExercise(Exercise e) throws DuplicateExerciseException {"},{"lineNumber":302,"author":{"gitID":"iNekox3"},"content":"        Exercise exercise \u003d new Exercise("},{"lineNumber":303,"author":{"gitID":"iNekox3"},"content":"                e.getQuestionIndex(), e.getQuestionType(), e.getQuestion(),"},{"lineNumber":304,"author":{"gitID":"iNekox3"},"content":"                e.getStudentAnswer(), e.getModelAnswer());"},{"lineNumber":305,"author":{"gitID":"iNekox3"},"content":"        exercises.add(exercise);"},{"lineNumber":306,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":308,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"iNekox3"},"content":"     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."},{"lineNumber":310,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":311,"author":{"gitID":"iNekox3"},"content":"     * @throws ExerciseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":312,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":313,"author":{"gitID":"iNekox3"},"content":"    public void updateExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":314,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException {"},{"lineNumber":315,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(editedExercise);"},{"lineNumber":316,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":317,"author":{"gitID":"iNekox3"},"content":"        exercises.setExercise(target, editedExercise);"},{"lineNumber":318,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":320,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":340,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":341,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e getExerciseList() {"},{"lineNumber":342,"author":{"gitID":"iNekox3"},"content":"        return exercises.asObservableList();"},{"lineNumber":343,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    public ObservableList\u003cIssue\u003e getIssueList() {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        return issues.asObservableList();"},{"lineNumber":349,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":352,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":354,"author":{"gitID":"-"},"content":"                || (other instanceof ProgressChecker // instanceof handles nulls"},{"lineNumber":355,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((ProgressChecker) other).persons)"},{"lineNumber":356,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((ProgressChecker) other).tags));"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":363,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":364,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":71,"Livian1107":33,"iNekox3":40,"-":220}},{"path":"src/main/java/seedu/progresschecker/model/exercise/QuestionIndex.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s question index in the ProgressChecker."},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"public class QuestionIndex {"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    public static final int WEEK_NUMBER_INDEX \u003d 0;"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_INDEX_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"            \"Indices can only contain numbers, and should be in the format of \""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"            + \"SECTION NUMBER.PART NUMBER.QUESTION NUMBER\";"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"    public static final String INDEX_VALIDATION_REGEX \u003d \"([2-9]|1[0-3])\\\\.([0-9]|[0-9]{2})\\\\.([0-9]|[0-9]{2})\";"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code QuestionIndex}."},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"     * @param index A valid index number."},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    public QuestionIndex(String index) {"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(index);"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"        checkArgument(isValidIndex(index), MESSAGE_INDEX_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d index;"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"     * Returns true if a given string is a valid index number."},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    public static boolean isValidIndex(String test) {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        return test.matches(INDEX_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     * Returns the question number in the whole question index."},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    public int getWeekNumber() {"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        return Integer.parseInt(value.split(Pattern.quote(\".\"))[WEEK_NUMBER_INDEX]);"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":44,"-":7}},{"path":"src/main/java/seedu/progresschecker/model/exercise/Exercise.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"public class Exercise {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    private final QuestionIndex questionIndex;"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    private final QuestionType questionType;"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    private final Question question;"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    private final StudentAnswer studentAnswer;"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"    private final ModelAnswer modelAnswer;"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    public Exercise(QuestionIndex questionIndex, QuestionType questionType, Question question,"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"                    StudentAnswer studentAnswer, ModelAnswer modelAnswer) {"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        requireAllNonNull(questionIndex, questionType, question);"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        this.questionIndex \u003d questionIndex;"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"        this.question \u003d question;"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"        this.studentAnswer \u003d studentAnswer;"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"        this.modelAnswer \u003d modelAnswer;"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public QuestionIndex getQuestionIndex() {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        return questionIndex;"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    public QuestionType getQuestionType() {"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"        return questionType;"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"    public Question getQuestion() {"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"        return question;"},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"    public StudentAnswer getStudentAnswer() {"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        return studentAnswer;"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"    public ModelAnswer getModelAnswer() {"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"        return modelAnswer;"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"        return \"Q\" + questionIndex + \" \" + question + \"\\n\\n\""},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"                + \"Your Answer: \" + studentAnswer + \"\\n\\n\""},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"                + \"Suggested Answer: \" + modelAnswer;"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":53,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/exceptions/ExerciseNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":4,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":" * Signals that the operation is unable to find the specified exercise."},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"public class ExerciseNotFoundException extends Exception {}"}],"authorContributionMap":{"iNekox3":5,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/exercise/Question.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s question in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class Question {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code Question}."},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * @param question A question of any word and character."},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public Question(String question) {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(question);"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d question;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":23,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/exceptions/DuplicateExerciseException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Signals that the operation will result in duplicate Exercise objects."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class DuplicateExerciseException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"    public DuplicateExerciseException() {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"        super(\"Operation would result in duplicate exercises\");"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":9,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/StudentAnswer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s student answer in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class StudentAnswer {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code StudentAnswer}."},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * @param answer An answer of any word and character."},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public StudentAnswer(String answer) {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(answer);"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d answer;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":23,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/exercise/ModelAnswer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s model answer in the ProgressChecker."},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":"public class ModelAnswer {"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code ModelAnswer}."},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"     * @param answer An answer of any word and character."},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"    public ModelAnswer(String answer) {"},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(answer);"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d answer;"},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":23,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/task/SimplifiedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":4,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"EdwardKSG"},"content":" * Represents a simplified task in the ProgressChecker."},{"lineNumber":6,"author":{"gitID":"EdwardKSG"},"content":" * It is called \"simplified\" because it extracts only the attributes we want to use from the Google Tasks"},{"lineNumber":7,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":8,"author":{"gitID":"EdwardKSG"},"content":"public class SimplifiedTask {"},{"lineNumber":9,"author":{"gitID":"EdwardKSG"},"content":"    public final String title;"},{"lineNumber":10,"author":{"gitID":"EdwardKSG"},"content":"    public final String notes;"},{"lineNumber":11,"author":{"gitID":"EdwardKSG"},"content":"    public final String due;"},{"lineNumber":12,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":13,"author":{"gitID":"EdwardKSG"},"content":"    public SimplifiedTask (String title, String notes, String due) {"},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"        this.title \u003d title;"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"        this.notes \u003d notes;"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":"        this.due \u003d due;"},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"    public String getTitle () {"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"        return this.title;"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"    public String getNotes () {"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"        return this.notes;"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public String getDue () {"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"        return this.due;"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":29,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/exercise/QuestionType.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":7,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"iNekox3"},"content":" * Represents an Exercise\u0027s question type in the ProgressChecker."},{"lineNumber":9,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iNekox3"},"content":"public class QuestionType {"},{"lineNumber":11,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":12,"author":{"gitID":"iNekox3"},"content":"    public static final String MESSAGE_TYPE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"iNekox3"},"content":"            \"Type can only be \u0027text\u0027 or \u0027choice\u0027\";"},{"lineNumber":14,"author":{"gitID":"iNekox3"},"content":"    public static final String TYPE_VALIDATION_REGEX \u003d \"text|choice\";"},{"lineNumber":15,"author":{"gitID":"iNekox3"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":"     * Constructs a {@code QuestionType}."},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":"     * @param type A valid type."},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":"    public QuestionType(String type) {"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(type);"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":"        checkArgument(isValidType(type), MESSAGE_TYPE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"        this.value \u003d type;"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"     * Returns true if a given string is a valid type."},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"    public static boolean isValidType(String test) {"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"        return test.matches(TYPE_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"        return value;"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":34,"-":5}},{"path":"src/main/java/seedu/progresschecker/model/issues/Title.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" * Represents an issue\u0027s name and description"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"public class Title {"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"            \"Issue should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * The first character of the title must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \".*\\\\w.*|[$\u0026+,:;\u003d?@#|\u0027\u003c\u003e.^*()%!-]\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullMessage;"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Title}."},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     * @param title A valid description."},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public Title(String title) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(title);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        this.fullMessage \u003d title;"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github issue."},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return fullMessage;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Title // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullMessage.equals(((Title) other).fullMessage)); // state check"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return fullMessage.hashCode();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":57,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/exercise/UniqueExerciseList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.exercise;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.DuplicateExerciseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"iNekox3"},"content":"//@@author iNekox3"},{"lineNumber":17,"author":{"gitID":"iNekox3"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"iNekox3"},"content":" * A list of exercises that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"iNekox3"},"content":" *"},{"lineNumber":20,"author":{"gitID":"iNekox3"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"iNekox3"},"content":" *"},{"lineNumber":22,"author":{"gitID":"iNekox3"},"content":" * @see Exercise#equals(Object)"},{"lineNumber":23,"author":{"gitID":"iNekox3"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"iNekox3"},"content":" */"},{"lineNumber":25,"author":{"gitID":"iNekox3"},"content":"public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"},{"lineNumber":26,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":27,"author":{"gitID":"iNekox3"},"content":"    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":29,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"iNekox3"},"content":"     * Returns true if the list contains an equivalent exercise as the given argument."},{"lineNumber":31,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"iNekox3"},"content":"    public boolean contains(Exercise toCheck) {"},{"lineNumber":33,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"iNekox3"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":37,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"iNekox3"},"content":"     * Adds an exercise to the list."},{"lineNumber":39,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"iNekox3"},"content":"     * @throws DuplicateExerciseException if the exercise to add is a duplicate of an existing exercise in the list."},{"lineNumber":41,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"iNekox3"},"content":"    public void add(Exercise toAdd) throws DuplicateExerciseException {"},{"lineNumber":43,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"iNekox3"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"iNekox3"},"content":"            throw new DuplicateExerciseException();"},{"lineNumber":46,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"iNekox3"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":50,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"iNekox3"},"content":"     * Replaces the exercise {@code target} in the list with {@code editedExercise}."},{"lineNumber":52,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"iNekox3"},"content":"     * @throws ExerciseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"iNekox3"},"content":"    public void setExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":56,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException {"},{"lineNumber":57,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(editedExercise);"},{"lineNumber":58,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":59,"author":{"gitID":"iNekox3"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"iNekox3"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"iNekox3"},"content":"            throw new ExerciseNotFoundException();"},{"lineNumber":62,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":64,"author":{"gitID":"iNekox3"},"content":"        internalList.set(index, editedExercise);"},{"lineNumber":65,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":67,"author":{"gitID":"iNekox3"},"content":"    public void setExercises(UniqueExerciseList replacement) {"},{"lineNumber":68,"author":{"gitID":"iNekox3"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":69,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":71,"author":{"gitID":"iNekox3"},"content":"    public void setExercises(List\u003cExercise\u003e exercises) throws DuplicateExerciseException {"},{"lineNumber":72,"author":{"gitID":"iNekox3"},"content":"        requireAllNonNull(exercises);"},{"lineNumber":73,"author":{"gitID":"iNekox3"},"content":"        final UniqueExerciseList replacement \u003d new UniqueExerciseList();"},{"lineNumber":74,"author":{"gitID":"iNekox3"},"content":"        for (final Exercise exercise : exercises) {"},{"lineNumber":75,"author":{"gitID":"iNekox3"},"content":"            replacement.add(exercise);"},{"lineNumber":76,"author":{"gitID":"iNekox3"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"iNekox3"},"content":"        setExercises(replacement);"},{"lineNumber":78,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":80,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"iNekox3"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":82,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e asObservableList() {"},{"lineNumber":84,"author":{"gitID":"iNekox3"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":85,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":87,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"iNekox3"},"content":"    public Iterator\u003cExercise\u003e iterator() {"},{"lineNumber":89,"author":{"gitID":"iNekox3"},"content":"        return internalList.iterator();"},{"lineNumber":90,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":92,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"iNekox3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"iNekox3"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"iNekox3"},"content":"                || (other instanceof UniqueExerciseList // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"iNekox3"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueExerciseList) other).internalList));"},{"lineNumber":97,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"iNekox3":83,"-":15}},{"path":"src/main/java/seedu/progresschecker/model/issues/Body.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":" * Represents an issue\u0027s name and description"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"public class Body {"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_BODY_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"            \"Issue should only contain non-null body\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullBody;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Body}."},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * @param body A valid issue description."},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public Body(String body) {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(body);"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        this.fullBody \u003d body;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github body."},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidBody(String test) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        return (test !\u003d null) ? true : false;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        return fullBody;"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Body // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullBody.equals(((Body) other).fullBody)); // state check"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"        return fullBody.hashCode();"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":46,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/issues/Issue.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Represents an Issue."},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"public class Issue {"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    private final Title title;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private final List\u003cAssignees\u003e assigneesList;"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"    private final Milestone milestone;"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    private final Body body;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    private final List\u003cLabels\u003e labelsList;"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    private int issueIndex;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     * Every field must be present and not null."},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    public Issue(Title title, List\u003cAssignees\u003e assigneesList, Milestone milestone, Body body, List\u003cLabels\u003e labelsList) {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        requireAllNonNull(title);"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        this.title \u003d title;"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        this.assigneesList \u003d assigneesList;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        this.milestone \u003d milestone;"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        this.body \u003d body;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        this.labelsList \u003d labelsList;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public Title getTitle() {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        return title;"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    public List\u003cAssignees\u003e getAssignees() {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        return assigneesList;"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public Milestone getMilestone() {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        return milestone;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    public Body getBody() {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"        return body;"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    public List\u003cLabels\u003e getLabelsList() {"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"        return labelsList;"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    public int getIssueIndex() {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        return issueIndex;"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"    public void setIssueIndex(int issueIndex) {"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        this.issueIndex \u003d issueIndex;"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof seedu.progresschecker.model.issues.Issue)) {"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"        seedu.progresschecker.model.issues.Issue otherIssue \u003d (seedu.progresschecker.model.issues.Issue) other;"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"        return otherIssue.getTitle().equals(this.getTitle())"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getAssignees().equals(this.getAssignees())"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getMilestone().equals(this.getMilestone())"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getBody().equals(this.getBody())"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherIssue.getLabelsList().equals(this.getLabelsList());"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        return Objects.hash(title, assigneesList, milestone, body, labelsList);"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"        builder.append(getTitle())"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Assignees: \")"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"                .append(getAssignees())"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Milestone: \")"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"                .append(getMilestone())"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Body: \")"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"                .append(getBody())"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Labels: \")"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"                .append(getLabelsList());"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        return builder.toString();"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":95,"-":7}},{"path":"src/main/java/seedu/progresschecker/model/task/TaskListUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskLists;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Tasks;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.apisetup.ConnectTasksApi;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":15,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"EdwardKSG"},"content":" * Include customized methods (based on Google Tasks API) to manipulate task lists."},{"lineNumber":17,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":18,"author":{"gitID":"EdwardKSG"},"content":"public class TaskListUtil {"},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"    public static final String AUTHORIZE_FAILURE \u003d \"Failed to authorize tasks api client credentials\";"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":"    public static final String ADD_FAILURE \u003d \"Failed to add new task list to account\";"},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":"    public static final String LOAD_FAILURE \u003d \"Failed to load this task list (might be wrong title)\";"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"     * Creates a new task list with title {@code String} and adds to the current list of task lists"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we intend to create"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public static void createTaskList(String listTitle) throws CommandException {"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"            service.tasklists().insert("},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"                    new TaskList().setTitle(listTitle)"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(ADD_FAILURE);"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"     * Finds the task list with title {@code String} from the current list of task lists"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we look for"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"     * @return the List instances containing all tasks in the specified task list"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":"    public static List\u003cTask\u003e searchTaskList(String listTitle) throws CommandException {"},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e list \u003d null;"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"            TaskList taskList \u003d taskLists.getItems().stream()"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"            String id \u003d taskList.getId();"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(id).execute();"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":"            list \u003d tasks.getItems();"},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"        return list;"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"     * Finds the task list with ID {@code String} from the current list of task lists"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId title of the task list we look for"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":"     * @return the List instances containing all tasks in the specified task list"},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"    public static List\u003cTask\u003e searchTaskListById(String listId) throws CommandException {"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"        List\u003cTask\u003e list \u003d null;"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"            list \u003d tasks.getItems();"},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":"        return list;"},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"     * Changes the name of task list with id {@code String} to {@code String}"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId identifier of the target task list whose name will be changed"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we look for"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"    public static void setTaskListTitle(String listId, String listTitle) throws CommandException {"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"            TaskList taskList \u003d service.tasklists().get(listId).execute();"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"            taskList.setTitle(listTitle);"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"            TaskList result \u003d service.tasklists().update("},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"                    taskList.getId(),"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"                    taskList"},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"     * Copies tasks in the task list with id {@code String} to the task list with title {@code String}"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId identifier of the target task list whose name will be changed"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle title of the task list we look for"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"    public static void copyTaskList(String listTitle, String listId) throws CommandException {"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"            Tasks baseTasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"            TaskList targetTaskList \u003d taskLists.getItems().stream()"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"            String id \u003d targetTaskList.getId();"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : baseTasks.getItems()) {"},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"                Task t \u003d new Task();"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"                t.setTitle(task.getTitle());"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"                t.setStatus(task.getStatus());"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"                t.setDue(task.getDue());"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"                t.setNotes(task.getNotes());"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":"                service.tasks().insert(id, t).execute();"},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"     * Removes all tasks in the task list with id {@code String}"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId identifier of the target task list whose content will be removed"},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"    public static void clearTaskList(String listId) throws CommandException {"},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":203,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":204,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":206,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":207,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":208,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":210,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":211,"author":{"gitID":"EdwardKSG"},"content":"            for (Task task : tasks.getItems()) {"},{"lineNumber":212,"author":{"gitID":"EdwardKSG"},"content":"                service.tasks().delete(listId, task.getId()).execute();"},{"lineNumber":213,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":214,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":215,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":206,"-":13}},{"path":"src/main/java/seedu/progresschecker/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.logic.commands.ViewCommand.MAX_WEEK_NUMBER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.events.model.ProgressCheckerChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the ProgressChecker data."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final ProgressChecker progressChecker;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cExercise\u003e filteredExercises;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cIssue\u003e filteredIssues;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given progressChecker and userPrefs."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyProgressChecker progressChecker, UserPrefs userPrefs) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireAllNonNull(progressChecker, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with ProgressChecker: \" + progressChecker + \" and user prefs \" + userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.progressChecker \u003d new ProgressChecker(progressChecker);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.progressChecker.getPersonList());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        filteredExercises \u003d new FilteredList\u003c\u003e(this.progressChecker.getExerciseList());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        updateFilteredExerciseList(exercise -\u003e exercise.getQuestionIndex().getWeekNumber() \u003d\u003d MAX_WEEK_NUMBER);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        filteredIssues \u003d new FilteredList\u003c\u003e(this.progressChecker.getIssueList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this(new ProgressChecker(), new UserPrefs());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyProgressChecker newData) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        progressChecker.resetData(newData);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public ReadOnlyProgressChecker getProgressChecker() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return progressChecker;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void indicateProgressCheckerChanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        raise(new ProgressCheckerChangedEvent(progressChecker));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        progressChecker.removePerson(target);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        progressChecker.addPerson(person);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"    //@author adityaa1998"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public synchronized void loginGithub(GitDetails gitdetails) throws IOException, CommandException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        progressChecker.loginGithub(gitdetails);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":"    public synchronized void closeIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.closeIssueOnGithub(index);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public synchronized void createIssueOnGitHub(Issue issue) throws IOException, CommandException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        progressChecker.createIssueOnGitHub(issue);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public synchronized void logoutGithub() throws CommandException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        progressChecker.logoutGithub();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"    public synchronized void listIssues(String state) throws IllegalValueException, IOException, CommandException {"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.listIssues(state);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"content":"    //@@author"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public synchronized void sort() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        progressChecker.sort();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"    public synchronized void reopenIssueOnGithub(Index index) throws IOException, CommandException {"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.reopenIssueOnGithub(index);"},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        progressChecker.updatePerson(target, editedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":145,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"iNekox3"},"content":"    public void updateExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":147,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException {"},{"lineNumber":148,"author":{"gitID":"iNekox3"},"content":"        requireAllNonNull(target, editedExercise);"},{"lineNumber":149,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":150,"author":{"gitID":"iNekox3"},"content":"        progressChecker.updateExercise(target, editedExercise);"},{"lineNumber":151,"author":{"gitID":"iNekox3"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":152,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"    public void updateIssue(Index index, Issue editedIssue) throws IOException, CommandException {"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":"        requireAllNonNull(index, editedIssue);"},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":"        progressChecker.updateIssue(index, editedIssue);"},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * {@code progressChecker}"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Issue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"     * Returns an unmodifiable view of the list of {@code Issue} backed by the internal list of"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"     * {@code progressChecker}"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"    public ObservableList\u003cIssue\u003e getFilteredIssueList() {"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":"        return FXCollections.unmodifiableObservableList(filteredIssues);"},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"    public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(predicate);"},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        filteredIssues.setPredicate(predicate);"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"Livian1107"},"content":"    //@@author Livian1107"},{"lineNumber":201,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"Livian1107"},"content":"    public void uploadPhoto(Person target, String path)"},{"lineNumber":203,"author":{"gitID":"Livian1107"},"content":"            throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":204,"author":{"gitID":"Livian1107"},"content":"        progressChecker.uploadPhoto(target, path);"},{"lineNumber":205,"author":{"gitID":"Livian1107"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":206,"author":{"gitID":"Livian1107"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":207,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":209,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":210,"author":{"gitID":"Livian1107"},"content":"    public void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException {"},{"lineNumber":211,"author":{"gitID":"Livian1107"},"content":"        progressChecker.addPhotoPath(photoPath);"},{"lineNumber":212,"author":{"gitID":"Livian1107"},"content":"        indicateProgressCheckerChanged();"},{"lineNumber":213,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"Livian1107"},"content":"    //@@author"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return progressChecker.equals(other.progressChecker)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":235,"author":{"gitID":"iNekox3"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Exercise List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":236,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":237,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"iNekox3"},"content":"     * Returns an unmodifiable view of the list of {@code Exercise} backed by the internal list of"},{"lineNumber":239,"author":{"gitID":"iNekox3"},"content":"     * {@code progressChecker}"},{"lineNumber":240,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"iNekox3"},"content":"    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"},{"lineNumber":243,"author":{"gitID":"iNekox3"},"content":"        return FXCollections.unmodifiableObservableList(filteredExercises);"},{"lineNumber":244,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":246,"author":{"gitID":"iNekox3"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"iNekox3"},"content":"    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"},{"lineNumber":248,"author":{"gitID":"iNekox3"},"content":"        requireNonNull(predicate);"},{"lineNumber":249,"author":{"gitID":"iNekox3"},"content":"        filteredExercises.setPredicate(predicate);"},{"lineNumber":250,"author":{"gitID":"iNekox3"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"iNekox3"},"content":"}"}],"authorContributionMap":{"null":1,"AdityaA1998":49,"Livian1107":15,"iNekox3":28,"-":158}},{"path":"src/main/java/seedu/progresschecker/model/issues/Milestone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"AdityaA1998"},"content":" * Represents a milestone for an issue"},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"public class Milestone {"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullMilestone;"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Milestone}."},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"     * @param milestone A valid milestone."},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    public Milestone(String milestone) {"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"        //requireNonNull(milestone);"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"        this.fullMilestone \u003d milestone;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        return fullMilestone;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Milestone // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullMilestone.equals(((Milestone) other).fullMilestone)); // state check"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        return fullMilestone.hashCode();"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":36,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/issues/MilestoneMap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHIssueState;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHMilestone;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHRepository;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":" * Initialises and returns a Hashmap of milestones"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"public final class MilestoneMap {"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    private static HashMap\u003cString, GHMilestone\u003e milestoneMap;"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    private GHRepository repository;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     * Returns a hashmap of milestones"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"    public HashMap\u003cString, GHMilestone\u003e getMilestoneMap() throws CommandException {"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"        milestoneMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"        createMilestoneHashMap();"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        return milestoneMap;"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"     * creates a map with the milestone values"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    private void createMilestoneHashMap() {"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cGHMilestone\u003e milestones \u003d repository.listMilestones(GHIssueState.ALL).asList();"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"        for (int i \u003d 0; i \u003c milestones.size(); i++) {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"            milestoneMap.put(milestones.get(i).getTitle(), milestones.get(i));"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public void setRepository(GHRepository repo) {"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        repository \u003d repo;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":33,"-":11}},{"path":"src/main/java/seedu/progresschecker/model/issues/Labels.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" * Represents all the Labels of an issue"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"public class Labels {"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_LABEL_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"            \"Labels should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * The first character of the label must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String LABEL_VALIDATION_REGEX \u003d \".*\\\\w.*|[$\u0026+,:;\u003d?@#|\u0027\u003c\u003e.^*()%!-]\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullLabels;"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Labels}."},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     * @param labels valid labels."},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public Labels(String labels) {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(labels);"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidLabel(labels), MESSAGE_LABEL_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        this.fullLabels \u003d labels;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github label."},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidLabel(String test) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(LABEL_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"        return fullLabels;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Labels // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullLabels.equals(((Labels) other).fullLabels)); // state check"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"        return fullLabels.hashCode();"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":54,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/issues/Assignees.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" * Represents all the assignees to an issue"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"public class Assignees {"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_ASSIGNEES_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"            \"Assignees of the issue can be anything, but should not be blank space\";"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * The first character of the Assignee must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String ASSIGNEE_VALIDATION_REGEX \u003d \".*\\\\w.*|[$\u0026+,:;\u003d?@#|\u0027\u003c\u003e.^*()%!-]\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public final String fullAssignees;"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Assignees}."},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     * @param assignees A valid assignees."},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public Assignees(String assignees) {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(assignees);"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidAssignee(assignees), MESSAGE_ASSIGNEES_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        this.fullAssignees \u003d assignees;"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github issue."},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidAssignee(String test) {"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(ASSIGNEE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return fullAssignees;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.issues.Assignees // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.fullAssignees.equals(((Assignees) other).fullAssignees)); // state check"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return fullAssignees.hashCode();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":55,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/photo/exceptions/PhotoNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":4,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":" * Signals that the operation is unable to find the specified photo."},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":"public class PhotoNotFoundException extends Exception {}"}],"authorContributionMap":{"Livian1107":5,"-":2}},{"path":"src/main/java/seedu/progresschecker/model/photo/exceptions/DuplicatePhotoException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":5,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Livian1107"},"content":" * Signals that the operation will result in duplicate PhotoPath objects."},{"lineNumber":7,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Livian1107"},"content":"public class DuplicatePhotoException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"    public DuplicatePhotoException() {"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"        super(\"Operation would result in duplicate photos\");"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":9,"-":3}},{"path":"src/main/java/seedu/progresschecker/model/photo/PhotoPath.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.isUnderFolder;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.FileUtil.isValidImageFile;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":10,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Livian1107"},"content":" * Represents a Path of Photo in ProgressChecker"},{"lineNumber":12,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Livian1107"},"content":"public class PhotoPath {"},{"lineNumber":14,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":15,"author":{"gitID":"Livian1107"},"content":"    public static final String PHOTO_SAVED_PATH \u003d \"src/main/resources/images/contact/\";"},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"    public static final String MESSAGE_PHOTOPATH_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"            \"The path of the profile photo should start with \u0027\" + PHOTO_SAVED_PATH"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":"                    + \"\u0027. The extensions of the file to upload should be \u0027jpg\u0027, \u0027jpeg\u0027 or \u0027png\u0027.\";"},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":"     * Builds the path of profile photo in the ProgressChecker"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":"     * Validates the given String of path"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"     * @param path is the String of the profile photo path"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":"     * @trhows IllegalValueException if the String violates the constraints of photo path"},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":"    public PhotoPath(String path) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(path);"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"        if (isValidPhotoPath(path)) {"},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"            this.value \u003d path;"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"            throw new IllegalValueException(MESSAGE_PHOTOPATH_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"     * Validates the given photo path"},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"    public static boolean isValidPhotoPath (String path) {"},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"        if (path.isEmpty()) { //empty path"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"            return true;"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"        boolean isValidImage \u003d isValidImageFile(path);"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"        boolean isUnderFolder \u003d isUnderFolder(path, PHOTO_SAVED_PATH);"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"        return isValidImage \u0026\u0026 isUnderFolder;"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"        return this.value;"},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"                || (other instanceof PhotoPath // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"                \u0026\u0026 this.value.equals(((PhotoPath) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":"        return value.hashCode();"},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":57,"-":8}},{"path":"src/main/java/seedu/progresschecker/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.Exercise;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.exercise.exceptions.ExerciseNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.issues.Issue;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.PhotoPath;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    Predicate\u003cIssue\u003e PREDICATE_SHOW_ALL_ISSUES \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyProgressChecker newData);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the ProgressChecker */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ReadOnlyProgressChecker getProgressChecker();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /** Sorts the persons in ProgressChecker according to their names in alphabetical order */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void sort();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    //@@author adityaa1998"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    /** authenticates git using password */"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    void loginGithub(GitDetails gitdetails) throws IOException, CommandException;"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    /** authenticates git using password */"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    void logoutGithub() throws CommandException;"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    /** creates an issue on github */"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    void createIssueOnGitHub(Issue issue) throws IOException, CommandException;"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    /** reopen issue on github */"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"    void reopenIssueOnGithub(Index index) throws IOException, CommandException;"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"    /** closes an issue issue on github */"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"    void closeIssueOnGithub(Index index) throws IOException, CommandException;"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    /**viwes issues of the specified state */"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    void listIssues(String state) throws IllegalValueException, IOException, CommandException;"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the fields in Issue {@code index} with {@code editedIssue}."},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if while updating the issue there is some problem in authentication"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"    void updateIssue(Index index, Issue editedIssue) throws IOException, CommandException;"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    /** Returns unmodifiable view of the filtered issue list */"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"    ObservableList\u003cIssue\u003e getFilteredIssueList();"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"    void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate);"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"iNekox3"},"content":"    //@@author iNekox3"},{"lineNumber":101,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"iNekox3"},"content":"     * Replaces the given exercise {@code target} with {@code editedExercise}."},{"lineNumber":103,"author":{"gitID":"iNekox3"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"iNekox3"},"content":"     * @throws ExerciseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":105,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"iNekox3"},"content":"    void updateExercise(Exercise target, Exercise editedExercise)"},{"lineNumber":107,"author":{"gitID":"iNekox3"},"content":"            throws ExerciseNotFoundException;"},{"lineNumber":108,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":109,"author":{"gitID":"iNekox3"},"content":"    /** Returns an unmodifiable view of the filtered exercise list */"},{"lineNumber":110,"author":{"gitID":"iNekox3"},"content":"    ObservableList\u003cExercise\u003e getFilteredExerciseList();"},{"lineNumber":111,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":112,"author":{"gitID":"iNekox3"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"iNekox3"},"content":"     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."},{"lineNumber":114,"author":{"gitID":"iNekox3"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":115,"author":{"gitID":"iNekox3"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"iNekox3"},"content":"    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"},{"lineNumber":117,"author":{"gitID":"iNekox3"},"content":""},{"lineNumber":118,"author":{"gitID":"iNekox3"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /** Uploads the given photo with given path */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    void uploadPhoto(Person target, String path)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /** Adds a new uploaded photo path */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    void addPhoto(PhotoPath photoPath) throws DuplicatePhotoException;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AdityaA1998":37,"iNekox3":19,"-":69}},{"path":"src/main/java/seedu/progresschecker/model/credentials/Passcode.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" * Represents a github passcode"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"public class Passcode {"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_PASSCODE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":"            \"Passcode must contain atleast one lower case character, one numeral \""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"                    + \"and should be atleast 7 characters long\";"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     * Password must contain one lowercase character,"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"     * one number and minimum 7 characters"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public static final String PASSCODE_VALIDATION_REGEX \u003d \"((?\u003d.*\\\\d)(?\u003d.*[a-z]).{7,100})\";"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    public final String passcode;"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Passcode}."},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"     * @param passcode A valid assignees."},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"    public Passcode(String passcode) {"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(passcode);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidPasscode(passcode), MESSAGE_PASSCODE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"        this.passcode \u003d passcode;"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github passcode."},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidPasscode(String test) {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(PASSCODE_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        return passcode;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.credentials.Passcode // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.passcode.equals(((Passcode) other).passcode)); // state check"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        return passcode.hashCode();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":56,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/photo/UniquePhotoList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.photo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.DuplicatePhotoException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.photo.exceptions.PhotoNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Livian1107"},"content":"//@@author Livian1107"},{"lineNumber":17,"author":{"gitID":"Livian1107"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Livian1107"},"content":" * A list of photo paths that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"Livian1107"},"content":" *"},{"lineNumber":20,"author":{"gitID":"Livian1107"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"Livian1107"},"content":" *"},{"lineNumber":22,"author":{"gitID":"Livian1107"},"content":" * @see PhotoPath#equals(Object)"},{"lineNumber":23,"author":{"gitID":"Livian1107"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"Livian1107"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Livian1107"},"content":"public class UniquePhotoList implements Iterable\u003cPhotoPath\u003e {"},{"lineNumber":26,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":27,"author":{"gitID":"Livian1107"},"content":"    private final ObservableList\u003cPhotoPath\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":29,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Livian1107"},"content":"     * Returns true if the list contains an equivalent photo path as the given argument."},{"lineNumber":31,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Livian1107"},"content":"    public boolean contains(PhotoPath toCheck) {"},{"lineNumber":33,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"Livian1107"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":37,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Livian1107"},"content":"     * Adds a photo path to the list."},{"lineNumber":39,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePhotoException if the photo path to add is a duplicate of an existing photo path in the list."},{"lineNumber":41,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Livian1107"},"content":"    public void add(PhotoPath toAdd) throws DuplicatePhotoException {"},{"lineNumber":43,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"Livian1107"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"Livian1107"},"content":"            throw new DuplicatePhotoException();"},{"lineNumber":46,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Livian1107"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":50,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Livian1107"},"content":"     * Replaces the photo path {@code target} in the list with {@code editedPhoto}."},{"lineNumber":52,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"Livian1107"},"content":"     * @throws DuplicatePhotoException if the replacement is equivalent to another existing photo path in the list."},{"lineNumber":54,"author":{"gitID":"Livian1107"},"content":"     * @throws PhotoNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"Livian1107"},"content":"    public void setPhoto(PhotoPath target, PhotoPath editedPhoto)"},{"lineNumber":57,"author":{"gitID":"Livian1107"},"content":"            throws DuplicatePhotoException, PhotoNotFoundException {"},{"lineNumber":58,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(editedPhoto);"},{"lineNumber":59,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":60,"author":{"gitID":"Livian1107"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"Livian1107"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"Livian1107"},"content":"            throw new PhotoNotFoundException();"},{"lineNumber":63,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":65,"author":{"gitID":"Livian1107"},"content":"        if (!target.equals(editedPhoto) \u0026\u0026 internalList.contains(editedPhoto)) {"},{"lineNumber":66,"author":{"gitID":"Livian1107"},"content":"            throw new DuplicatePhotoException();"},{"lineNumber":67,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":69,"author":{"gitID":"Livian1107"},"content":"        internalList.set(index, editedPhoto);"},{"lineNumber":70,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":72,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Livian1107"},"content":"     * Removes the equivalent photo path from the list."},{"lineNumber":74,"author":{"gitID":"Livian1107"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"Livian1107"},"content":"     * @throws PhotoNotFoundException if no such person could be found in the list."},{"lineNumber":76,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Livian1107"},"content":"    public boolean remove(PhotoPath toRemove) throws PhotoNotFoundException {"},{"lineNumber":78,"author":{"gitID":"Livian1107"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"Livian1107"},"content":"        final boolean photoFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"Livian1107"},"content":"        if (!photoFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"Livian1107"},"content":"            throw new PhotoNotFoundException();"},{"lineNumber":82,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Livian1107"},"content":"        return photoFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":86,"author":{"gitID":"Livian1107"},"content":"    public void setPhotos(UniquePhotoList replacement) {"},{"lineNumber":87,"author":{"gitID":"Livian1107"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":90,"author":{"gitID":"Livian1107"},"content":"    public void setPhotos(List\u003cPhotoPath\u003e photos) throws DuplicatePhotoException {"},{"lineNumber":91,"author":{"gitID":"Livian1107"},"content":"        requireAllNonNull(photos);"},{"lineNumber":92,"author":{"gitID":"Livian1107"},"content":"        final UniquePhotoList replacement \u003d new UniquePhotoList();"},{"lineNumber":93,"author":{"gitID":"Livian1107"},"content":"        for (final PhotoPath photo : photos) {"},{"lineNumber":94,"author":{"gitID":"Livian1107"},"content":"            replacement.add(photo);"},{"lineNumber":95,"author":{"gitID":"Livian1107"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"Livian1107"},"content":"        setPhotos(replacement);"},{"lineNumber":97,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":99,"author":{"gitID":"Livian1107"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"Livian1107"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"Livian1107"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"Livian1107"},"content":"    public ObservableList\u003cPhotoPath\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"Livian1107"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":106,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"Livian1107"},"content":"    public Iterator\u003cPhotoPath\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"Livian1107"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":111,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"Livian1107"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"Livian1107"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"Livian1107"},"content":"                || (other instanceof UniquePhotoList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"Livian1107"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePhotoList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Livian1107"},"content":""},{"lineNumber":118,"author":{"gitID":"Livian1107"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Livian1107"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"Livian1107"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"Livian1107"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Livian1107"},"content":"}"}],"authorContributionMap":{"Livian1107":107,"-":15}},{"path":"src/main/java/seedu/progresschecker/model/issues/GitIssueList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.issues;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHIssue;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHIssueBuilder;"},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"import org.kohsuke.github.GHIssueState;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHLabel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHMilestone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHRepository;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GHUser;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.kohsuke.github.GitHub;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"import seedu.progresschecker.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.exceptions.IllegalValueException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.progresschecker.commons.util.CollectionUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.credentials.GitDetails;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.progresschecker.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":" *"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":" * Supports a minimal set of list operations."},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":" *"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":" * @see Person#equals(Object)"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"public class GitIssueList implements Iterable\u003cIssue\u003e {"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    private final ObservableList\u003cIssue\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"    private String repoName;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    private String userLogin;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"    private String userAuthentication;"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    private GitHub github;"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    private GHRepository repository;"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssueBuilder issueBuilder;"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssue issue;"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssue toEdit;"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    private GHIssueState issueState;"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"     * Initialises github credentials"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    public void initialiseCredentials(GitDetails gitdetails) throws CommandException, IOException {"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":"        repoName \u003d gitdetails.getRepository().toString();"},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"        userLogin \u003d gitdetails.getUsername().toString();"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"        userAuthentication \u003d gitdetails.getPasscode().toString();"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        authoriseGithub();"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"     * Authorises with github"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"    private void authoriseGithub () throws CommandException, IOException {"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        if (github !\u003d null) {"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"You have already logged in as \" + userLogin + \". Please logout first.\");"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"            github \u003d GitHub.connectUsingPassword(userLogin, userAuthentication);"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"            if (!github.isCredentialValid()) {"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":"                github \u003d null;"},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"                throw new IOException();"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":76,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Enter correct username and password\");"},{"lineNumber":77,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"AdityaA1998"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"AdityaA1998"},"content":"            repository \u003d github.getRepository(repoName);"},{"lineNumber":80,"author":{"gitID":"AdityaA1998"},"content":"        } catch (IOException ie) {"},{"lineNumber":81,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Enter correct repository name\");"},{"lineNumber":82,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"AdityaA1998"},"content":"        updateInternalList();"},{"lineNumber":84,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":86,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"AdityaA1998"},"content":"     * Updates the internal list by fetching data from github"},{"lineNumber":88,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"AdityaA1998"},"content":"    private void updateInternalList() throws IOException {"},{"lineNumber":90,"author":{"gitID":"AdityaA1998"},"content":"        internalList.remove(0, internalList.size());"},{"lineNumber":91,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cGHIssue\u003e gitIssues \u003d repository.getIssues(issueState);"},{"lineNumber":92,"author":{"gitID":"AdityaA1998"},"content":"        for (GHIssue issueOnGit : gitIssues) {"},{"lineNumber":93,"author":{"gitID":"AdityaA1998"},"content":"            Issue toBeAdded \u003d convertToIssue(issueOnGit);"},{"lineNumber":94,"author":{"gitID":"AdityaA1998"},"content":"            internalList.add(toBeAdded);"},{"lineNumber":95,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":98,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"AdityaA1998"},"content":"     * Converts GHIssue to issue"},{"lineNumber":100,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"AdityaA1998"},"content":"    private Issue convertToIssue(GHIssue i) throws IOException {"},{"lineNumber":102,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":103,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cGHUser\u003e gitAssigneeList \u003d i.getAssignees();"},{"lineNumber":104,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHLabel\u003e gitLabelsList \u003d new ArrayList\u003c\u003e(i.getLabels());"},{"lineNumber":105,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitID":"AdityaA1998"},"content":"        Milestone existingMilestone \u003d null;"},{"lineNumber":108,"author":{"gitID":"AdityaA1998"},"content":"        Body existingBody \u003d new Body(i.getBody());"},{"lineNumber":109,"author":{"gitID":"AdityaA1998"},"content":"        Title title \u003d new Title(i.getTitle());"},{"lineNumber":110,"author":{"gitID":"AdityaA1998"},"content":"        Issue issue;"},{"lineNumber":111,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":112,"author":{"gitID":"AdityaA1998"},"content":"        if (i.getMilestone() \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"AdityaA1998"},"content":"            existingMilestone \u003d new Milestone(\"\");"},{"lineNumber":114,"author":{"gitID":"AdityaA1998"},"content":"        } else {"},{"lineNumber":115,"author":{"gitID":"AdityaA1998"},"content":"            existingMilestone \u003d new Milestone(i.getMilestone().getTitle());"},{"lineNumber":116,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":118,"author":{"gitID":"AdityaA1998"},"content":"        for (GHUser assignee : gitAssigneeList) {"},{"lineNumber":119,"author":{"gitID":"AdityaA1998"},"content":"            assigneesList.add(new Assignees(assignee.getLogin()));"},{"lineNumber":120,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":122,"author":{"gitID":"AdityaA1998"},"content":"        for (GHLabel label : gitLabelsList) {"},{"lineNumber":123,"author":{"gitID":"AdityaA1998"},"content":"            labelsList.add(new Labels(label.getName()));"},{"lineNumber":124,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":126,"author":{"gitID":"AdityaA1998"},"content":"        issue \u003d  new Issue(title, assigneesList, existingMilestone,"},{"lineNumber":127,"author":{"gitID":"AdityaA1998"},"content":"                existingBody, labelsList);"},{"lineNumber":128,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":129,"author":{"gitID":"AdityaA1998"},"content":"        issue.setIssueIndex(i.getNumber());"},{"lineNumber":130,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":131,"author":{"gitID":"AdityaA1998"},"content":"        return issue;"},{"lineNumber":132,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":134,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"AdityaA1998"},"content":"     * Creates an issue on github"},{"lineNumber":136,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if there is any problem creating an issue on github;"},{"lineNumber":138,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"AdityaA1998"},"content":"    public void createIssue(Issue toAdd) throws IOException, CommandException {"},{"lineNumber":140,"author":{"gitID":"AdityaA1998"},"content":"        checkGitAuthentication();"},{"lineNumber":141,"author":{"gitID":"AdityaA1998"},"content":"        issueBuilder \u003d repository.createIssue(toAdd.getTitle().toString());"},{"lineNumber":142,"author":{"gitID":"AdityaA1998"},"content":"        issueBuilder.body(toAdd.getBody().toString());"},{"lineNumber":143,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":144,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d toAdd.getAssignees();"},{"lineNumber":145,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d toAdd.getLabelsList();"},{"lineNumber":146,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":147,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHUser\u003e listOfUsers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cString\u003e listOfLabels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":149,"author":{"gitID":"AdityaA1998"},"content":"        MilestoneMap obj \u003d new MilestoneMap();"},{"lineNumber":150,"author":{"gitID":"AdityaA1998"},"content":"        obj.setRepository(getRepository());"},{"lineNumber":151,"author":{"gitID":"AdityaA1998"},"content":"        HashMap\u003cString, GHMilestone\u003e milestoneMap \u003d obj.getMilestoneMap();"},{"lineNumber":152,"author":{"gitID":"AdityaA1998"},"content":"        GHMilestone check \u003d null;"},{"lineNumber":153,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":154,"author":{"gitID":"AdityaA1998"},"content":"        for (int ct \u003d 0; ct \u003c assigneesList.size(); ct++) {"},{"lineNumber":155,"author":{"gitID":"AdityaA1998"},"content":"            listOfUsers.add(github.getUser(assigneesList.get(ct).toString()));"},{"lineNumber":156,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":158,"author":{"gitID":"AdityaA1998"},"content":"        for (int ct \u003d 0; ct \u003c labelsList.size(); ct++) {"},{"lineNumber":159,"author":{"gitID":"AdityaA1998"},"content":"            listOfLabels.add(labelsList.get(ct).toString());"},{"lineNumber":160,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":162,"author":{"gitID":"AdityaA1998"},"content":"        if (toAdd.getMilestone() !\u003d null) {"},{"lineNumber":163,"author":{"gitID":"AdityaA1998"},"content":"            if (milestoneMap.get(toAdd.getMilestone().toString()) \u003d\u003d null) {"},{"lineNumber":164,"author":{"gitID":"AdityaA1998"},"content":"                throw new CommandException(\"Milestone doesn\u0027t exist\");"},{"lineNumber":165,"author":{"gitID":"AdityaA1998"},"content":"            } else {"},{"lineNumber":166,"author":{"gitID":"AdityaA1998"},"content":"                check \u003d milestoneMap.get(toAdd.getMilestone().toString());"},{"lineNumber":167,"author":{"gitID":"AdityaA1998"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"AdityaA1998"},"content":"        GHIssue createdIssue \u003d issueBuilder.create();"},{"lineNumber":170,"author":{"gitID":"AdityaA1998"},"content":"        if (check !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"AdityaA1998"},"content":"            createdIssue.setMilestone(check);"},{"lineNumber":172,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"AdityaA1998"},"content":"        createdIssue.setAssignees(listOfUsers);"},{"lineNumber":174,"author":{"gitID":"AdityaA1998"},"content":"        createdIssue.setLabels(listOfLabels.toArray(new String[0]));"},{"lineNumber":175,"author":{"gitID":"AdityaA1998"},"content":"        updateInternalList();"},{"lineNumber":176,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":178,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"AdityaA1998"},"content":"     * Reopens an issue on github"},{"lineNumber":180,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"AdityaA1998"},"content":"    public void reopenIssue(Index index) throws IOException, CommandException {"},{"lineNumber":182,"author":{"gitID":"AdityaA1998"},"content":"        checkGitAuthentication();"},{"lineNumber":183,"author":{"gitID":"AdityaA1998"},"content":"        issue \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":184,"author":{"gitID":"AdityaA1998"},"content":"        if (issue.getState() \u003d\u003d GHIssueState.OPEN) {"},{"lineNumber":185,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Issue #\" + index.getOneBased() + \" is already open\");"},{"lineNumber":186,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"AdityaA1998"},"content":"        issue.reopen();"},{"lineNumber":188,"author":{"gitID":"AdityaA1998"},"content":"        updateInternalList();"},{"lineNumber":189,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":191,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"AdityaA1998"},"content":"     * Closes an issue on github"},{"lineNumber":193,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"AdityaA1998"},"content":"    public void closeIssue(Index index) throws IOException, CommandException {"},{"lineNumber":195,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":196,"author":{"gitID":"AdityaA1998"},"content":"        checkGitAuthentication();"},{"lineNumber":197,"author":{"gitID":"AdityaA1998"},"content":"        issue \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":198,"author":{"gitID":"AdityaA1998"},"content":"        if (issue.getState() \u003d\u003d GHIssueState.CLOSED) {"},{"lineNumber":199,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Issue #\" + index.getOneBased() + \" is already closed\");"},{"lineNumber":200,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"AdityaA1998"},"content":"        issue.close();"},{"lineNumber":202,"author":{"gitID":"AdityaA1998"},"content":"        updateInternalList();"},{"lineNumber":203,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"AdityaA1998"},"content":"     * Authorises with github"},{"lineNumber":206,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"AdityaA1998"},"content":"    public void clearCredentials() throws CommandException {"},{"lineNumber":208,"author":{"gitID":"AdityaA1998"},"content":"        if (github \u003d\u003d null) {"},{"lineNumber":209,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"No one has logged into github at the moment\");"},{"lineNumber":210,"author":{"gitID":"AdityaA1998"},"content":"        } else {"},{"lineNumber":211,"author":{"gitID":"AdityaA1998"},"content":"            internalList.remove(0, internalList.size());"},{"lineNumber":212,"author":{"gitID":"AdityaA1998"},"content":"            github \u003d null;"},{"lineNumber":213,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":216,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"AdityaA1998"},"content":"     * Check if the github credentials are authorised"},{"lineNumber":218,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"AdityaA1998"},"content":"    private void checkGitAuthentication() throws CommandException {"},{"lineNumber":220,"author":{"gitID":"AdityaA1998"},"content":"        if (github \u003d\u003d null) {"},{"lineNumber":221,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"Github not authenticated. \""},{"lineNumber":222,"author":{"gitID":"AdityaA1998"},"content":"                    + \"Use \u0027gitlogin\u0027 command to first authenticate your github account\");"},{"lineNumber":223,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":226,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"AdityaA1998"},"content":"     * Updates the GHIssueState according to mentioned state and updates the list"},{"lineNumber":228,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"AdityaA1998"},"content":"    public void listIssue(String state) throws IllegalValueException, IOException, CommandException {"},{"lineNumber":230,"author":{"gitID":"AdityaA1998"},"content":"        if (github \u003d\u003d null) {"},{"lineNumber":231,"author":{"gitID":"AdityaA1998"},"content":"            throw new CommandException(\"\");"},{"lineNumber":232,"author":{"gitID":"AdityaA1998"},"content":"        } else if (state.equalsIgnoreCase(\"OPEN\")) {"},{"lineNumber":233,"author":{"gitID":"AdityaA1998"},"content":"            issueState \u003d GHIssueState.OPEN;"},{"lineNumber":234,"author":{"gitID":"AdityaA1998"},"content":"        } else if (state.equalsIgnoreCase(\"CLOSED\")) {"},{"lineNumber":235,"author":{"gitID":"AdityaA1998"},"content":"            issueState \u003d GHIssueState.CLOSED;"},{"lineNumber":236,"author":{"gitID":"AdityaA1998"},"content":"        } else {"},{"lineNumber":237,"author":{"gitID":"AdityaA1998"},"content":"            throw new IllegalValueException(\"Enter correct state\");"},{"lineNumber":238,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"AdityaA1998"},"content":"        updateInternalList();"},{"lineNumber":240,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":241,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"AdityaA1998"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":244,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":245,"author":{"gitID":"AdityaA1998"},"content":"     * @throws IOException if the replacement is equivalent to another existing person in the list."},{"lineNumber":246,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"AdityaA1998"},"content":"    public void setIssue(Index index, Issue editedIssue)"},{"lineNumber":248,"author":{"gitID":"AdityaA1998"},"content":"            throws IOException, CommandException {"},{"lineNumber":249,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(editedIssue);"},{"lineNumber":250,"author":{"gitID":"AdityaA1998"},"content":"        toEdit \u003d repository.getIssue(index.getOneBased());"},{"lineNumber":251,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":252,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cAssignees\u003e assigneesList \u003d editedIssue.getAssignees();"},{"lineNumber":253,"author":{"gitID":"AdityaA1998"},"content":"        List\u003cLabels\u003e labelsList \u003d editedIssue.getLabelsList();"},{"lineNumber":254,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":255,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cGHUser\u003e listOfUsers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":256,"author":{"gitID":"AdityaA1998"},"content":"        ArrayList\u003cString\u003e listOfLabels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":257,"author":{"gitID":"AdityaA1998"},"content":"        MilestoneMap obj \u003d new MilestoneMap();"},{"lineNumber":258,"author":{"gitID":"AdityaA1998"},"content":"        obj.setRepository(getRepository());"},{"lineNumber":259,"author":{"gitID":"AdityaA1998"},"content":"        HashMap\u003cString, GHMilestone\u003e milestoneMap \u003d obj.getMilestoneMap();"},{"lineNumber":260,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":261,"author":{"gitID":"AdityaA1998"},"content":"        for (Assignees assignee : assigneesList) {"},{"lineNumber":262,"author":{"gitID":"AdityaA1998"},"content":"            listOfUsers.add(github.getUser(assignee.toString()));"},{"lineNumber":263,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":265,"author":{"gitID":"AdityaA1998"},"content":"        for (Labels label : labelsList) {"},{"lineNumber":266,"author":{"gitID":"AdityaA1998"},"content":"            listOfLabels.add(label.toString());"},{"lineNumber":267,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":269,"author":{"gitID":"AdityaA1998"},"content":"        if (editedIssue.getMilestone() !\u003d null) {"},{"lineNumber":270,"author":{"gitID":"AdityaA1998"},"content":"            GHMilestone check \u003d milestoneMap.get(editedIssue.getMilestone().toString());"},{"lineNumber":271,"author":{"gitID":"AdityaA1998"},"content":"            toEdit.setMilestone(check);"},{"lineNumber":272,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setTitle(editedIssue.getTitle().toString());"},{"lineNumber":274,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setBody(editedIssue.getBody().toString());"},{"lineNumber":275,"author":{"gitID":"AdityaA1998"},"content":"        toEdit.setAssignees(listOfUsers);"},{"lineNumber":276,"author":{"gitID":"AdityaA1998"},"content":"        if (listOfLabels.size() !\u003d 0) {"},{"lineNumber":277,"author":{"gitID":"AdityaA1998"},"content":"            toEdit.setLabels(listOfLabels.toArray(new String[0]));"},{"lineNumber":278,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"AdityaA1998"},"content":"        updateInternalList();"},{"lineNumber":280,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":281,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":283,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"AdityaA1998"},"content":"     * Returns github object"},{"lineNumber":285,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"AdityaA1998"},"content":"    public GitHub getGithub() {"},{"lineNumber":287,"author":{"gitID":"AdityaA1998"},"content":"        return github;"},{"lineNumber":288,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":290,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"AdityaA1998"},"content":"     * Returns github repository"},{"lineNumber":292,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"AdityaA1998"},"content":"    public GHRepository getRepository() {"},{"lineNumber":294,"author":{"gitID":"AdityaA1998"},"content":"        return repository;"},{"lineNumber":295,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":297,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"AdityaA1998"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":299,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"AdityaA1998"},"content":"    public ObservableList\u003cIssue\u003e asObservableList() {"},{"lineNumber":301,"author":{"gitID":"AdityaA1998"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":302,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":304,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"AdityaA1998"},"content":"    public Iterator\u003cIssue\u003e iterator() {"},{"lineNumber":306,"author":{"gitID":"AdityaA1998"},"content":"        return internalList.iterator();"},{"lineNumber":307,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":309,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":311,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":312,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof GitIssueList // instanceof handles nulls"},{"lineNumber":313,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.internalList.equals(((GitIssueList) other).internalList));"},{"lineNumber":314,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":316,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":317,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":318,"author":{"gitID":"AdityaA1998"},"content":"        return internalList.hashCode();"},{"lineNumber":319,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":321,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":294,"-":27}},{"path":"src/main/java/seedu/progresschecker/model/credentials/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":" * Represents the username of a user on github"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":"public class Username {"},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_GITUSERNAME_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"            \"Username should only contain alphanumeric characters, and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"     * The github username can only contain alphanumeric characters,"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"     * with no continuous special characters."},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"^[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;*]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|*]\";"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"    public final String username;"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"     * Constructs a {@code Username}."},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"     * @param username A valid username."},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":"    public Username(String username) {"},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"        requireNonNull(username);"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidUsername(username), MESSAGE_GITUSERNAME_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"        this.username \u003d username;"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github issue."},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        return username;"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"                || (other instanceof seedu.progresschecker.model.credentials.Username // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 this.username.equals(((Username) other).username)); // state check"},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"        return username.hashCode();"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"}"}],"authorContributionMap":{"AdityaA1998":53,"-":4}},{"path":"src/main/java/seedu/progresschecker/model/credentials/Repository.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"AdityaA1998"},"content":"import static seedu.progresschecker.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"content":"//@@author aditya1998"},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a github repository"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Repository {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"    public static final String MESSAGE_REPOSITORY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Repository address cannot start from /\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the repository must not be a forward-slash,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"    public static final String REPO_VALIDATION_REGEX \u003d \"^[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;*]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|*]\";"},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final String gitRepo;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Repository}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param gitRepo A valid assignees."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Repository(String gitRepo) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(gitRepo);"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":"        checkArgument(isValidRepository(gitRepo), MESSAGE_REPOSITORY_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.gitRepo \u003d gitRepo;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"     * Returns true if a given string is a valid github repository."},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    public static boolean isValidRepository(String test) {"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":"        return test.matches(REPO_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return gitRepo;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof seedu.progresschecker.model.credentials.Repository // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.gitRepo.equals(((Repository) other).gitRepo)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return gitRepo.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"AdityaA1998":12,"-":46}},{"path":"src/main/java/seedu/progresschecker/model/credentials/GitDetails.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.credentials;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.progresschecker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"AdityaA1998"},"content":"//@@author adityaa1998"},{"lineNumber":8,"author":{"gitID":"AdityaA1998"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"AdityaA1998"},"content":" * Represents an Issue."},{"lineNumber":10,"author":{"gitID":"AdityaA1998"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"AdityaA1998"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AdityaA1998"},"content":"public class GitDetails {"},{"lineNumber":13,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":14,"author":{"gitID":"AdityaA1998"},"content":"    private final Username username;"},{"lineNumber":15,"author":{"gitID":"AdityaA1998"},"content":"    private final Repository repository;"},{"lineNumber":16,"author":{"gitID":"AdityaA1998"},"content":"    private final Passcode passcode;"},{"lineNumber":17,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":18,"author":{"gitID":"AdityaA1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"AdityaA1998"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"AdityaA1998"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AdityaA1998"},"content":"    public GitDetails(Username username, Passcode passcode, Repository repository) {"},{"lineNumber":22,"author":{"gitID":"AdityaA1998"},"content":"        requireAllNonNull(username, repository, passcode);"},{"lineNumber":23,"author":{"gitID":"AdityaA1998"},"content":"        this.username \u003d username;"},{"lineNumber":24,"author":{"gitID":"AdityaA1998"},"content":"        this.repository \u003d repository;"},{"lineNumber":25,"author":{"gitID":"AdityaA1998"},"content":"        this.passcode \u003d passcode;"},{"lineNumber":26,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":28,"author":{"gitID":"AdityaA1998"},"content":"    public Username getUsername() {"},{"lineNumber":29,"author":{"gitID":"AdityaA1998"},"content":"        return username;"},{"lineNumber":30,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":32,"author":{"gitID":"AdityaA1998"},"content":"    public Repository getRepository() {"},{"lineNumber":33,"author":{"gitID":"AdityaA1998"},"content":"        return repository;"},{"lineNumber":34,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":36,"author":{"gitID":"AdityaA1998"},"content":"    public Passcode getPasscode() {"},{"lineNumber":37,"author":{"gitID":"AdityaA1998"},"content":"        return passcode;"},{"lineNumber":38,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":40,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"AdityaA1998"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"AdityaA1998"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":43,"author":{"gitID":"AdityaA1998"},"content":"            return true;"},{"lineNumber":44,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":46,"author":{"gitID":"AdityaA1998"},"content":"        if (!(other instanceof seedu.progresschecker.model.credentials.GitDetails)) {"},{"lineNumber":47,"author":{"gitID":"AdityaA1998"},"content":"            return false;"},{"lineNumber":48,"author":{"gitID":"AdityaA1998"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":50,"author":{"gitID":"AdityaA1998"},"content":"        seedu.progresschecker.model.credentials.GitDetails otherGitDetails \u003d"},{"lineNumber":51,"author":{"gitID":"AdityaA1998"},"content":"                (seedu.progresschecker.model.credentials.GitDetails) other;"},{"lineNumber":52,"author":{"gitID":"AdityaA1998"},"content":"        return otherGitDetails.getUsername().equals(this.getUsername())"},{"lineNumber":53,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherGitDetails.getRepository().equals(this.getRepository())"},{"lineNumber":54,"author":{"gitID":"AdityaA1998"},"content":"                \u0026\u0026 otherGitDetails.getPasscode().equals(this.getPasscode());"},{"lineNumber":55,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":57,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"AdityaA1998"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"AdityaA1998"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":60,"author":{"gitID":"AdityaA1998"},"content":"        return Objects.hash(username, repository, passcode);"},{"lineNumber":61,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":63,"author":{"gitID":"AdityaA1998"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"AdityaA1998"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"AdityaA1998"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"AdityaA1998"},"content":"        builder.append(\" Username: \")"},{"lineNumber":67,"author":{"gitID":"AdityaA1998"},"content":"                .append(getUsername())"},{"lineNumber":68,"author":{"gitID":"AdityaA1998"},"content":"                .append(\" Repository: \")"},{"lineNumber":69,"author":{"gitID":"AdityaA1998"},"content":"                .append(getRepository());"},{"lineNumber":70,"author":{"gitID":"AdityaA1998"},"content":"        return builder.toString();"},{"lineNumber":71,"author":{"gitID":"AdityaA1998"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"AdityaA1998"},"content":""},{"lineNumber":73,"author":{"gitID":"AdityaA1998"},"content":"}"},{"lineNumber":74,"author":{"gitID":"AdityaA1998"},"content":""}],"authorContributionMap":{"AdityaA1998":68,"-":6}},{"path":"src/main/java/seedu/progresschecker/model/task/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.progresschecker.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.TaskLists;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.api.services.tasks.model.Tasks;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.util.Pair;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.apisetup.ConnectTasksApi;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.progresschecker.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"EdwardKSG"},"content":"//@@author EdwardKSG"},{"lineNumber":20,"author":{"gitID":"EdwardKSG"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"EdwardKSG"},"content":" * Include customized methods (based on Google Tasks API) to manipulate tasks."},{"lineNumber":22,"author":{"gitID":"EdwardKSG"},"content":" */"},{"lineNumber":23,"author":{"gitID":"EdwardKSG"},"content":"public class TaskUtil {"},{"lineNumber":24,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":25,"author":{"gitID":"EdwardKSG"},"content":"    public static final String AUTHORIZE_FAILURE \u003d \"Failed to authorize tasks api client credentials\";"},{"lineNumber":26,"author":{"gitID":"EdwardKSG"},"content":"    public static final String LOAD_FAILURE \u003d \"Failed to load this task list\";"},{"lineNumber":27,"author":{"gitID":"EdwardKSG"},"content":"    public static final String INDEX_OUT_OF_BOUND \u003d \"The index is out of bound\";"},{"lineNumber":28,"author":{"gitID":"EdwardKSG"},"content":"    public static final String DATE_FORMAT \u003d \"MM/dd/yyyy HH:mm\";"},{"lineNumber":29,"author":{"gitID":"EdwardKSG"},"content":"    public static final String COMPLETED \u003d \"completed\";"},{"lineNumber":30,"author":{"gitID":"EdwardKSG"},"content":"    public static final String NEEDS_ACTION \u003d \"needsAction\";"},{"lineNumber":31,"author":{"gitID":"EdwardKSG"},"content":"    public static final int ERROR_NUMBER \u003d -1;"},{"lineNumber":32,"author":{"gitID":"EdwardKSG"},"content":"    public static final int TRUE \u003d 1;"},{"lineNumber":33,"author":{"gitID":"EdwardKSG"},"content":"    public static final int FALSE \u003d 0;"},{"lineNumber":34,"author":{"gitID":"EdwardKSG"},"content":"    public static final String ERROR_STRING \u003d \"\";"},{"lineNumber":35,"author":{"gitID":"EdwardKSG"},"content":"    public static final String NOTE_TOKEN \u003d \"checkurl\";"},{"lineNumber":36,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":37,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":38,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"EdwardKSG"},"content":"     * Finds the task with title {@code String} in the tasklist with title {@code String}"},{"lineNumber":40,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"EdwardKSG"},"content":"     * @param taskTitle title of the task we look for"},{"lineNumber":42,"author":{"gitID":"EdwardKSG"},"content":"     * @param listTitle the title of the list to which the task belongs"},{"lineNumber":43,"author":{"gitID":"EdwardKSG"},"content":"     * @return the Task instances"},{"lineNumber":44,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"EdwardKSG"},"content":"    public static Task searchTask(String taskTitle, String listTitle) throws CommandException {"},{"lineNumber":46,"author":{"gitID":"EdwardKSG"},"content":"        Task task \u003d null;"},{"lineNumber":47,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":48,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":49,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":50,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":52,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":53,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":54,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":56,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":57,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":58,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":60,"author":{"gitID":"EdwardKSG"},"content":"            TaskList taskList \u003d taskLists.getItems().stream()"},{"lineNumber":61,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(listTitle))"},{"lineNumber":62,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":63,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":64,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":65,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(taskList.getId()).execute();"},{"lineNumber":66,"author":{"gitID":"EdwardKSG"},"content":"            task \u003d tasks.getItems().stream()"},{"lineNumber":67,"author":{"gitID":"EdwardKSG"},"content":"                    .filter(t -\u003e t.getTitle().equals(taskTitle))"},{"lineNumber":68,"author":{"gitID":"EdwardKSG"},"content":"                    .findFirst()"},{"lineNumber":69,"author":{"gitID":"EdwardKSG"},"content":"                    .orElse(null);"},{"lineNumber":70,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":71,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":72,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":73,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":75,"author":{"gitID":"EdwardKSG"},"content":"        return task;"},{"lineNumber":76,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":78,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"EdwardKSG"},"content":"     * Creates a task with title {@code String} to the tasklist with ID {@code String}"},{"lineNumber":80,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"EdwardKSG"},"content":"     * @param taskTitle title of the task we want to create"},{"lineNumber":82,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task will be added"},{"lineNumber":83,"author":{"gitID":"EdwardKSG"},"content":"     * @param notes description or relevant URL link to this task"},{"lineNumber":84,"author":{"gitID":"EdwardKSG"},"content":"     * @param due the date and time of the deadline, in format \"MM/dd/yyyy HH:mm\""},{"lineNumber":85,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"EdwardKSG"},"content":"    public static void createTask(String taskTitle, String listId, String notes, String due)"},{"lineNumber":87,"author":{"gitID":"EdwardKSG"},"content":"            throws CommandException {"},{"lineNumber":88,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":89,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":90,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":92,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":93,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":94,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":96,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":97,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":98,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"EdwardKSG"},"content":"            TaskLists taskLists \u003d service.tasklists().list().execute();"},{"lineNumber":100,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":101,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d service.tasks().insert("},{"lineNumber":102,"author":{"gitID":"EdwardKSG"},"content":"                    listId,"},{"lineNumber":103,"author":{"gitID":"EdwardKSG"},"content":"                    new Task().setTitle(taskTitle)"},{"lineNumber":104,"author":{"gitID":"EdwardKSG"},"content":"                              .setDue(getDate(due))"},{"lineNumber":105,"author":{"gitID":"EdwardKSG"},"content":"                              .setNotes(notes)"},{"lineNumber":106,"author":{"gitID":"EdwardKSG"},"content":"                              .setStatus(NEEDS_ACTION)"},{"lineNumber":107,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":108,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":109,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":111,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":113,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":115,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"EdwardKSG"},"content":"     * Adds a group of tasks to a Google Task List with Id {@code String listId}"},{"lineNumber":117,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"EdwardKSG"},"content":"     * @param simpleList a list of {@code SimplifiedTask}"},{"lineNumber":119,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task will be added"},{"lineNumber":120,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"EdwardKSG"},"content":"    public static void addMultipleTask(SimplifiedTask[] simpleList, String listId)"},{"lineNumber":122,"author":{"gitID":"EdwardKSG"},"content":"            throws CommandException {"},{"lineNumber":123,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":124,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":125,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":127,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":128,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":129,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":131,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":132,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":133,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"EdwardKSG"},"content":"            for (SimplifiedTask simpleTask: simpleList) {"},{"lineNumber":135,"author":{"gitID":"EdwardKSG"},"content":"                Task task \u003d service.tasks().insert("},{"lineNumber":136,"author":{"gitID":"EdwardKSG"},"content":"                        listId,"},{"lineNumber":137,"author":{"gitID":"EdwardKSG"},"content":"                        new Task().setTitle(simpleTask.getTitle())"},{"lineNumber":138,"author":{"gitID":"EdwardKSG"},"content":"                                .setDue(getDate(simpleTask.getDue()))"},{"lineNumber":139,"author":{"gitID":"EdwardKSG"},"content":"                                .setNotes(simpleTask.getNotes())"},{"lineNumber":140,"author":{"gitID":"EdwardKSG"},"content":"                                .setStatus(NEEDS_ACTION)"},{"lineNumber":141,"author":{"gitID":"EdwardKSG"},"content":"                ).execute();"},{"lineNumber":142,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":144,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":145,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":146,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":147,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":149,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":151,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"EdwardKSG"},"content":"     * Converts a string in format \"MM/dd/yyyy HH:mm\" to a DateTime object"},{"lineNumber":153,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"EdwardKSG"},"content":"     * @param s string in format \"MM/dd/yyyy HH:mm\", representing a date"},{"lineNumber":155,"author":{"gitID":"EdwardKSG"},"content":"     * @return the DateTime instances, or null if encountered error when parsing"},{"lineNumber":156,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"EdwardKSG"},"content":"    public static DateTime getDate(String s) {"},{"lineNumber":158,"author":{"gitID":"EdwardKSG"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":159,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"EdwardKSG"},"content":"            Date date \u003d simpleDateFormat.parse(s);"},{"lineNumber":161,"author":{"gitID":"EdwardKSG"},"content":"            return new DateTime(date);"},{"lineNumber":162,"author":{"gitID":"EdwardKSG"},"content":"        } catch (ParseException ex) {"},{"lineNumber":163,"author":{"gitID":"EdwardKSG"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":167,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"EdwardKSG"},"content":"     * Marks the task with index {@code int index} in the tasklist with ID {@code String listId} as completed"},{"lineNumber":169,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":170,"author":{"gitID":"EdwardKSG"},"content":"     * @param index title of the task we look for"},{"lineNumber":171,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task belongs"},{"lineNumber":172,"author":{"gitID":"EdwardKSG"},"content":"     * @return result whether this command made any change of the task list (0 means no change) and"},{"lineNumber":173,"author":{"gitID":"EdwardKSG"},"content":"     * the title of the task with index {@code int}"},{"lineNumber":174,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"EdwardKSG"},"content":"    public static Pair\u003cInteger, String\u003e completeTask(int index, String listId) throws CommandException {"},{"lineNumber":176,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":177,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":178,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":179,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":180,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":181,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":182,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":184,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":185,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":186,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"EdwardKSG"},"content":"            int isChanged \u003d FALSE;"},{"lineNumber":188,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":189,"author":{"gitID":"EdwardKSG"},"content":"            List\u003cTask\u003e list \u003d tasks.getItems();"},{"lineNumber":190,"author":{"gitID":"EdwardKSG"},"content":"            if (list.size() \u003c index) {"},{"lineNumber":191,"author":{"gitID":"EdwardKSG"},"content":"                Pair\u003cInteger, String\u003e result \u003d new Pair\u003cInteger, String\u003e(ERROR_NUMBER, INDEX_OUT_OF_BOUND);"},{"lineNumber":192,"author":{"gitID":"EdwardKSG"},"content":"                return result;"},{"lineNumber":193,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":194,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d list.get(index - 1);"},{"lineNumber":195,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":196,"author":{"gitID":"EdwardKSG"},"content":"            if (!task.getStatus().equals(COMPLETED)) {"},{"lineNumber":197,"author":{"gitID":"EdwardKSG"},"content":"                task.setStatus(COMPLETED);"},{"lineNumber":198,"author":{"gitID":"EdwardKSG"},"content":"                isChanged \u003d TRUE;"},{"lineNumber":199,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":201,"author":{"gitID":"EdwardKSG"},"content":"            task \u003d service.tasks().update("},{"lineNumber":202,"author":{"gitID":"EdwardKSG"},"content":"                    listId,"},{"lineNumber":203,"author":{"gitID":"EdwardKSG"},"content":"                    task.getId(),"},{"lineNumber":204,"author":{"gitID":"EdwardKSG"},"content":"                    task"},{"lineNumber":205,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":206,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":207,"author":{"gitID":"EdwardKSG"},"content":"            Pair\u003cInteger, String\u003e result \u003d new Pair\u003cInteger, String\u003e(isChanged, task.getTitle());"},{"lineNumber":208,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":209,"author":{"gitID":"EdwardKSG"},"content":"            return result;"},{"lineNumber":210,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":211,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":212,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":213,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":216,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"EdwardKSG"},"content":"     * Marks the task with index {@code int index} in the tasklist with ID {@code String listId} as incompleted"},{"lineNumber":218,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":219,"author":{"gitID":"EdwardKSG"},"content":"     * @param index title of the task we look for"},{"lineNumber":220,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task belongs"},{"lineNumber":221,"author":{"gitID":"EdwardKSG"},"content":"     * @return result whether this command made any change of the task list (0 means no change) and"},{"lineNumber":222,"author":{"gitID":"EdwardKSG"},"content":"     * the title of the task with index {@code int}"},{"lineNumber":223,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"EdwardKSG"},"content":"    public static Pair\u003cInteger, String\u003e undoTask(int index, String listId) throws CommandException {"},{"lineNumber":225,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":226,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":227,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":228,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":229,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":230,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":231,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":233,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":234,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":235,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":236,"author":{"gitID":"EdwardKSG"},"content":"            int isChanged \u003d FALSE;"},{"lineNumber":237,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":238,"author":{"gitID":"EdwardKSG"},"content":"            List\u003cTask\u003e list \u003d tasks.getItems();"},{"lineNumber":239,"author":{"gitID":"EdwardKSG"},"content":"            if (list.size() \u003c index) {"},{"lineNumber":240,"author":{"gitID":"EdwardKSG"},"content":"                Pair\u003cInteger, String\u003e result \u003d new Pair\u003cInteger, String\u003e(ERROR_NUMBER, INDEX_OUT_OF_BOUND);"},{"lineNumber":241,"author":{"gitID":"EdwardKSG"},"content":"                return result;"},{"lineNumber":242,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":243,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d list.get(index - 1);"},{"lineNumber":244,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":245,"author":{"gitID":"EdwardKSG"},"content":"            if (!task.getStatus().equals(NEEDS_ACTION)) {"},{"lineNumber":246,"author":{"gitID":"EdwardKSG"},"content":"                task.setCompleted(null);"},{"lineNumber":247,"author":{"gitID":"EdwardKSG"},"content":"                task.setStatus(NEEDS_ACTION);"},{"lineNumber":248,"author":{"gitID":"EdwardKSG"},"content":"                isChanged \u003d TRUE;"},{"lineNumber":249,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":250,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":251,"author":{"gitID":"EdwardKSG"},"content":"            task \u003d service.tasks().update("},{"lineNumber":252,"author":{"gitID":"EdwardKSG"},"content":"                    listId,"},{"lineNumber":253,"author":{"gitID":"EdwardKSG"},"content":"                    task.getId(),"},{"lineNumber":254,"author":{"gitID":"EdwardKSG"},"content":"                    task"},{"lineNumber":255,"author":{"gitID":"EdwardKSG"},"content":"            ).execute();"},{"lineNumber":256,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":257,"author":{"gitID":"EdwardKSG"},"content":"            Pair\u003cInteger, String\u003e result \u003d new Pair\u003cInteger, String\u003e(isChanged, task.getTitle());"},{"lineNumber":258,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":259,"author":{"gitID":"EdwardKSG"},"content":"            return result;"},{"lineNumber":260,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":261,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":262,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":263,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":266,"author":{"gitID":"EdwardKSG"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"EdwardKSG"},"content":"     * Retrieve the URL of task with index {@code int index} in the tasklist with ID {@code String listId}"},{"lineNumber":268,"author":{"gitID":"EdwardKSG"},"content":"     *"},{"lineNumber":269,"author":{"gitID":"EdwardKSG"},"content":"     * @param index title of the task we look for"},{"lineNumber":270,"author":{"gitID":"EdwardKSG"},"content":"     * @param listId the identifier of the list to which the task belongs"},{"lineNumber":271,"author":{"gitID":"EdwardKSG"},"content":"     * @return the URL of task with index {@code int index} in the tasklist with ID {@code String listId}"},{"lineNumber":272,"author":{"gitID":"EdwardKSG"},"content":"     * or error if index is out of bound. and the title of the task with index {@code int}"},{"lineNumber":273,"author":{"gitID":"EdwardKSG"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"EdwardKSG"},"content":"    public static Pair\u003cString, String\u003e getTaskUrl(int index, String listId) throws CommandException {"},{"lineNumber":275,"author":{"gitID":"EdwardKSG"},"content":"        ConnectTasksApi connection \u003d new ConnectTasksApi();"},{"lineNumber":276,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":277,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":278,"author":{"gitID":"EdwardKSG"},"content":"            connection.authorize();"},{"lineNumber":279,"author":{"gitID":"EdwardKSG"},"content":"        } catch (Exception e) {"},{"lineNumber":280,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(AUTHORIZE_FAILURE);"},{"lineNumber":281,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":283,"author":{"gitID":"EdwardKSG"},"content":"        com.google.api.services.tasks.Tasks service \u003d connection.getTasksService();"},{"lineNumber":284,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":285,"author":{"gitID":"EdwardKSG"},"content":"        try {"},{"lineNumber":286,"author":{"gitID":"EdwardKSG"},"content":"            Tasks tasks \u003d service.tasks().list(listId).execute();"},{"lineNumber":287,"author":{"gitID":"EdwardKSG"},"content":"            List\u003cTask\u003e list \u003d tasks.getItems();"},{"lineNumber":288,"author":{"gitID":"EdwardKSG"},"content":"            if (list.size() \u003c index) {"},{"lineNumber":289,"author":{"gitID":"EdwardKSG"},"content":"                Pair\u003cString, String\u003e result \u003d new Pair\u003cString, String\u003e(ERROR_STRING, ERROR_STRING);"},{"lineNumber":290,"author":{"gitID":"EdwardKSG"},"content":"                return result;"},{"lineNumber":291,"author":{"gitID":"EdwardKSG"},"content":"            }"},{"lineNumber":292,"author":{"gitID":"EdwardKSG"},"content":"            Task task \u003d list.get(index - 1);"},{"lineNumber":293,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":294,"author":{"gitID":"EdwardKSG"},"content":"            String title \u003d task.getTitle();"},{"lineNumber":295,"author":{"gitID":"EdwardKSG"},"content":"            String notesWithUrl \u003d task.getNotes();"},{"lineNumber":296,"author":{"gitID":"EdwardKSG"},"content":"            String[] parts \u003d notesWithUrl.split(NOTE_TOKEN);"},{"lineNumber":297,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":298,"author":{"gitID":"EdwardKSG"},"content":"            Pair\u003cString, String\u003e result \u003d new Pair\u003cString, String\u003e(parts[1], title);"},{"lineNumber":299,"author":{"gitID":"EdwardKSG"},"content":"            return result;"},{"lineNumber":300,"author":{"gitID":"EdwardKSG"},"content":""},{"lineNumber":301,"author":{"gitID":"EdwardKSG"},"content":"        } catch (IOException ioe) {"},{"lineNumber":302,"author":{"gitID":"EdwardKSG"},"content":"            throw new CommandException(LOAD_FAILURE);"},{"lineNumber":303,"author":{"gitID":"EdwardKSG"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"EdwardKSG"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"EdwardKSG"},"content":"}"}],"authorContributionMap":{"EdwardKSG":287,"-":18}}]
